// ==UserScript==
// @name         Tamper Pad
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  A configurable macro launcher with React UI
// @author       You
// @match        *://*/*
// @grant        GM_getValue
// @grant        GM_setValue
// @grant        GM_addElement
// ==/UserScript==

(function () {
	'use strict';

	function _mergeNamespaces(n, m) {
		m.forEach(function (e) {
			e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
				if (k !== 'default' && !(k in n)) {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		});
		return Object.freeze(n);
	}

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var jsxRuntime = {exports: {}};

	var reactJsxRuntime_production = {};

	/**
	 * @license React
	 * react-jsx-runtime.production.js
	 *
	 * Copyright (c) Meta Platforms, Inc. and affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactJsxRuntime_production;

	function requireReactJsxRuntime_production () {
		if (hasRequiredReactJsxRuntime_production) return reactJsxRuntime_production;
		hasRequiredReactJsxRuntime_production = 1;
		var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
		  REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
		function jsxProd(type, config, maybeKey) {
		  var key = null;
		  void 0 !== maybeKey && (key = "" + maybeKey);
		  void 0 !== config.key && (key = "" + config.key);
		  if ("key" in config) {
		    maybeKey = {};
		    for (var propName in config)
		      "key" !== propName && (maybeKey[propName] = config[propName]);
		  } else maybeKey = config;
		  config = maybeKey.ref;
		  return {
		    $$typeof: REACT_ELEMENT_TYPE,
		    type: type,
		    key: key,
		    ref: void 0 !== config ? config : null,
		    props: maybeKey
		  };
		}
		reactJsxRuntime_production.Fragment = REACT_FRAGMENT_TYPE;
		reactJsxRuntime_production.jsx = jsxProd;
		reactJsxRuntime_production.jsxs = jsxProd;
		return reactJsxRuntime_production;
	}

	var hasRequiredJsxRuntime;

	function requireJsxRuntime () {
		if (hasRequiredJsxRuntime) return jsxRuntime.exports;
		hasRequiredJsxRuntime = 1;

		{
		  jsxRuntime.exports = requireReactJsxRuntime_production();
		}
		return jsxRuntime.exports;
	}

	var jsxRuntimeExports = requireJsxRuntime();

	var client = {exports: {}};

	var reactDomClient_production = {};

	var scheduler = {exports: {}};

	var scheduler_production = {};

	/**
	 * @license React
	 * scheduler.production.js
	 *
	 * Copyright (c) Meta Platforms, Inc. and affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredScheduler_production;

	function requireScheduler_production () {
		if (hasRequiredScheduler_production) return scheduler_production;
		hasRequiredScheduler_production = 1;
		(function (exports) {
			function push(heap, node) {
			  var index = heap.length;
			  heap.push(node);
			  a: for (; 0 < index; ) {
			    var parentIndex = (index - 1) >>> 1,
			      parent = heap[parentIndex];
			    if (0 < compare(parent, node))
			      (heap[parentIndex] = node), (heap[index] = parent), (index = parentIndex);
			    else break a;
			  }
			}
			function peek(heap) {
			  return 0 === heap.length ? null : heap[0];
			}
			function pop(heap) {
			  if (0 === heap.length) return null;
			  var first = heap[0],
			    last = heap.pop();
			  if (last !== first) {
			    heap[0] = last;
			    a: for (
			      var index = 0, length = heap.length, halfLength = length >>> 1;
			      index < halfLength;

			    ) {
			      var leftIndex = 2 * (index + 1) - 1,
			        left = heap[leftIndex],
			        rightIndex = leftIndex + 1,
			        right = heap[rightIndex];
			      if (0 > compare(left, last))
			        rightIndex < length && 0 > compare(right, left)
			          ? ((heap[index] = right),
			            (heap[rightIndex] = last),
			            (index = rightIndex))
			          : ((heap[index] = left),
			            (heap[leftIndex] = last),
			            (index = leftIndex));
			      else if (rightIndex < length && 0 > compare(right, last))
			        (heap[index] = right), (heap[rightIndex] = last), (index = rightIndex);
			      else break a;
			    }
			  }
			  return first;
			}
			function compare(a, b) {
			  var diff = a.sortIndex - b.sortIndex;
			  return 0 !== diff ? diff : a.id - b.id;
			}
			exports.unstable_now = void 0;
			if ("object" === typeof performance && "function" === typeof performance.now) {
			  var localPerformance = performance;
			  exports.unstable_now = function () {
			    return localPerformance.now();
			  };
			} else {
			  var localDate = Date,
			    initialTime = localDate.now();
			  exports.unstable_now = function () {
			    return localDate.now() - initialTime;
			  };
			}
			var taskQueue = [],
			  timerQueue = [],
			  taskIdCounter = 1,
			  currentTask = null,
			  currentPriorityLevel = 3,
			  isPerformingWork = false,
			  isHostCallbackScheduled = false,
			  isHostTimeoutScheduled = false,
			  needsPaint = false,
			  localSetTimeout = "function" === typeof setTimeout ? setTimeout : null,
			  localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null,
			  localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null;
			function advanceTimers(currentTime) {
			  for (var timer = peek(timerQueue); null !== timer; ) {
			    if (null === timer.callback) pop(timerQueue);
			    else if (timer.startTime <= currentTime)
			      pop(timerQueue),
			        (timer.sortIndex = timer.expirationTime),
			        push(taskQueue, timer);
			    else break;
			    timer = peek(timerQueue);
			  }
			}
			function handleTimeout(currentTime) {
			  isHostTimeoutScheduled = false;
			  advanceTimers(currentTime);
			  if (!isHostCallbackScheduled)
			    if (null !== peek(taskQueue))
			      (isHostCallbackScheduled = true),
			        isMessageLoopRunning ||
			          ((isMessageLoopRunning = true), schedulePerformWorkUntilDeadline());
			    else {
			      var firstTimer = peek(timerQueue);
			      null !== firstTimer &&
			        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
			    }
			}
			var isMessageLoopRunning = false,
			  taskTimeoutID = -1,
			  frameInterval = 5,
			  startTime = -1;
			function shouldYieldToHost() {
			  return needsPaint
			    ? true
			    : exports.unstable_now() - startTime < frameInterval
			      ? false
			      : true;
			}
			function performWorkUntilDeadline() {
			  needsPaint = false;
			  if (isMessageLoopRunning) {
			    var currentTime = exports.unstable_now();
			    startTime = currentTime;
			    var hasMoreWork = true;
			    try {
			      a: {
			        isHostCallbackScheduled = !1;
			        isHostTimeoutScheduled &&
			          ((isHostTimeoutScheduled = !1),
			          localClearTimeout(taskTimeoutID),
			          (taskTimeoutID = -1));
			        isPerformingWork = !0;
			        var previousPriorityLevel = currentPriorityLevel;
			        try {
			          b: {
			            advanceTimers(currentTime);
			            for (
			              currentTask = peek(taskQueue);
			              null !== currentTask &&
			              !(
			                currentTask.expirationTime > currentTime && shouldYieldToHost()
			              );

			            ) {
			              var callback = currentTask.callback;
			              if ("function" === typeof callback) {
			                currentTask.callback = null;
			                currentPriorityLevel = currentTask.priorityLevel;
			                var continuationCallback = callback(
			                  currentTask.expirationTime <= currentTime
			                );
			                currentTime = exports.unstable_now();
			                if ("function" === typeof continuationCallback) {
			                  currentTask.callback = continuationCallback;
			                  advanceTimers(currentTime);
			                  hasMoreWork = !0;
			                  break b;
			                }
			                currentTask === peek(taskQueue) && pop(taskQueue);
			                advanceTimers(currentTime);
			              } else pop(taskQueue);
			              currentTask = peek(taskQueue);
			            }
			            if (null !== currentTask) hasMoreWork = !0;
			            else {
			              var firstTimer = peek(timerQueue);
			              null !== firstTimer &&
			                requestHostTimeout(
			                  handleTimeout,
			                  firstTimer.startTime - currentTime
			                );
			              hasMoreWork = !1;
			            }
			          }
			          break a;
			        } finally {
			          (currentTask = null),
			            (currentPriorityLevel = previousPriorityLevel),
			            (isPerformingWork = !1);
			        }
			        hasMoreWork = void 0;
			      }
			    } finally {
			      hasMoreWork
			        ? schedulePerformWorkUntilDeadline()
			        : (isMessageLoopRunning = false);
			    }
			  }
			}
			var schedulePerformWorkUntilDeadline;
			if ("function" === typeof localSetImmediate)
			  schedulePerformWorkUntilDeadline = function () {
			    localSetImmediate(performWorkUntilDeadline);
			  };
			else if ("undefined" !== typeof MessageChannel) {
			  var channel = new MessageChannel(),
			    port = channel.port2;
			  channel.port1.onmessage = performWorkUntilDeadline;
			  schedulePerformWorkUntilDeadline = function () {
			    port.postMessage(null);
			  };
			} else
			  schedulePerformWorkUntilDeadline = function () {
			    localSetTimeout(performWorkUntilDeadline, 0);
			  };
			function requestHostTimeout(callback, ms) {
			  taskTimeoutID = localSetTimeout(function () {
			    callback(exports.unstable_now());
			  }, ms);
			}
			exports.unstable_IdlePriority = 5;
			exports.unstable_ImmediatePriority = 1;
			exports.unstable_LowPriority = 4;
			exports.unstable_NormalPriority = 3;
			exports.unstable_Profiling = null;
			exports.unstable_UserBlockingPriority = 2;
			exports.unstable_cancelCallback = function (task) {
			  task.callback = null;
			};
			exports.unstable_forceFrameRate = function (fps) {
			  0 > fps || 125 < fps
			    ? console.error(
			        "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
			      )
			    : (frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5);
			};
			exports.unstable_getCurrentPriorityLevel = function () {
			  return currentPriorityLevel;
			};
			exports.unstable_next = function (eventHandler) {
			  switch (currentPriorityLevel) {
			    case 1:
			    case 2:
			    case 3:
			      var priorityLevel = 3;
			      break;
			    default:
			      priorityLevel = currentPriorityLevel;
			  }
			  var previousPriorityLevel = currentPriorityLevel;
			  currentPriorityLevel = priorityLevel;
			  try {
			    return eventHandler();
			  } finally {
			    currentPriorityLevel = previousPriorityLevel;
			  }
			};
			exports.unstable_requestPaint = function () {
			  needsPaint = true;
			};
			exports.unstable_runWithPriority = function (priorityLevel, eventHandler) {
			  switch (priorityLevel) {
			    case 1:
			    case 2:
			    case 3:
			    case 4:
			    case 5:
			      break;
			    default:
			      priorityLevel = 3;
			  }
			  var previousPriorityLevel = currentPriorityLevel;
			  currentPriorityLevel = priorityLevel;
			  try {
			    return eventHandler();
			  } finally {
			    currentPriorityLevel = previousPriorityLevel;
			  }
			};
			exports.unstable_scheduleCallback = function (
			  priorityLevel,
			  callback,
			  options
			) {
			  var currentTime = exports.unstable_now();
			  "object" === typeof options && null !== options
			    ? ((options = options.delay),
			      (options =
			        "number" === typeof options && 0 < options
			          ? currentTime + options
			          : currentTime))
			    : (options = currentTime);
			  switch (priorityLevel) {
			    case 1:
			      var timeout = -1;
			      break;
			    case 2:
			      timeout = 250;
			      break;
			    case 5:
			      timeout = 1073741823;
			      break;
			    case 4:
			      timeout = 1e4;
			      break;
			    default:
			      timeout = 5e3;
			  }
			  timeout = options + timeout;
			  priorityLevel = {
			    id: taskIdCounter++,
			    callback: callback,
			    priorityLevel: priorityLevel,
			    startTime: options,
			    expirationTime: timeout,
			    sortIndex: -1
			  };
			  options > currentTime
			    ? ((priorityLevel.sortIndex = options),
			      push(timerQueue, priorityLevel),
			      null === peek(taskQueue) &&
			        priorityLevel === peek(timerQueue) &&
			        (isHostTimeoutScheduled
			          ? (localClearTimeout(taskTimeoutID), (taskTimeoutID = -1))
			          : (isHostTimeoutScheduled = true),
			        requestHostTimeout(handleTimeout, options - currentTime)))
			    : ((priorityLevel.sortIndex = timeout),
			      push(taskQueue, priorityLevel),
			      isHostCallbackScheduled ||
			        isPerformingWork ||
			        ((isHostCallbackScheduled = true),
			        isMessageLoopRunning ||
			          ((isMessageLoopRunning = true), schedulePerformWorkUntilDeadline())));
			  return priorityLevel;
			};
			exports.unstable_shouldYield = shouldYieldToHost;
			exports.unstable_wrapCallback = function (callback) {
			  var parentPriorityLevel = currentPriorityLevel;
			  return function () {
			    var previousPriorityLevel = currentPriorityLevel;
			    currentPriorityLevel = parentPriorityLevel;
			    try {
			      return callback.apply(this, arguments);
			    } finally {
			      currentPriorityLevel = previousPriorityLevel;
			    }
			  };
			}; 
		} (scheduler_production));
		return scheduler_production;
	}

	var hasRequiredScheduler;

	function requireScheduler () {
		if (hasRequiredScheduler) return scheduler.exports;
		hasRequiredScheduler = 1;

		{
		  scheduler.exports = requireScheduler_production();
		}
		return scheduler.exports;
	}

	var react = {exports: {}};

	var react_production = {};

	/**
	 * @license React
	 * react.production.js
	 *
	 * Copyright (c) Meta Platforms, Inc. and affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReact_production;

	function requireReact_production () {
		if (hasRequiredReact_production) return react_production;
		hasRequiredReact_production = 1;
		var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
		  REACT_PORTAL_TYPE = Symbol.for("react.portal"),
		  REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
		  REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
		  REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
		  REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
		  REACT_CONTEXT_TYPE = Symbol.for("react.context"),
		  REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
		  REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
		  REACT_MEMO_TYPE = Symbol.for("react.memo"),
		  REACT_LAZY_TYPE = Symbol.for("react.lazy"),
		  MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
		function getIteratorFn(maybeIterable) {
		  if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
		  maybeIterable =
		    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
		    maybeIterable["@@iterator"];
		  return "function" === typeof maybeIterable ? maybeIterable : null;
		}
		var ReactNoopUpdateQueue = {
		    isMounted: function () {
		      return false;
		    },
		    enqueueForceUpdate: function () {},
		    enqueueReplaceState: function () {},
		    enqueueSetState: function () {}
		  },
		  assign = Object.assign,
		  emptyObject = {};
		function Component(props, context, updater) {
		  this.props = props;
		  this.context = context;
		  this.refs = emptyObject;
		  this.updater = updater || ReactNoopUpdateQueue;
		}
		Component.prototype.isReactComponent = {};
		Component.prototype.setState = function (partialState, callback) {
		  if (
		    "object" !== typeof partialState &&
		    "function" !== typeof partialState &&
		    null != partialState
		  )
		    throw Error(
		      "takes an object of state variables to update or a function which returns an object of state variables."
		    );
		  this.updater.enqueueSetState(this, partialState, callback, "setState");
		};
		Component.prototype.forceUpdate = function (callback) {
		  this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
		};
		function ComponentDummy() {}
		ComponentDummy.prototype = Component.prototype;
		function PureComponent(props, context, updater) {
		  this.props = props;
		  this.context = context;
		  this.refs = emptyObject;
		  this.updater = updater || ReactNoopUpdateQueue;
		}
		var pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());
		pureComponentPrototype.constructor = PureComponent;
		assign(pureComponentPrototype, Component.prototype);
		pureComponentPrototype.isPureReactComponent = true;
		var isArrayImpl = Array.isArray,
		  ReactSharedInternals = { H: null, A: null, T: null, S: null, V: null },
		  hasOwnProperty = Object.prototype.hasOwnProperty;
		function ReactElement(type, key, self, source, owner, props) {
		  self = props.ref;
		  return {
		    $$typeof: REACT_ELEMENT_TYPE,
		    type: type,
		    key: key,
		    ref: void 0 !== self ? self : null,
		    props: props
		  };
		}
		function cloneAndReplaceKey(oldElement, newKey) {
		  return ReactElement(
		    oldElement.type,
		    newKey,
		    void 0,
		    void 0,
		    void 0,
		    oldElement.props
		  );
		}
		function isValidElement(object) {
		  return (
		    "object" === typeof object &&
		    null !== object &&
		    object.$$typeof === REACT_ELEMENT_TYPE
		  );
		}
		function escape(key) {
		  var escaperLookup = { "=": "=0", ":": "=2" };
		  return (
		    "$" +
		    key.replace(/[=:]/g, function (match) {
		      return escaperLookup[match];
		    })
		  );
		}
		var userProvidedKeyEscapeRegex = /\/+/g;
		function getElementKey(element, index) {
		  return "object" === typeof element && null !== element && null != element.key
		    ? escape("" + element.key)
		    : index.toString(36);
		}
		function noop$1() {}
		function resolveThenable(thenable) {
		  switch (thenable.status) {
		    case "fulfilled":
		      return thenable.value;
		    case "rejected":
		      throw thenable.reason;
		    default:
		      switch (
		        ("string" === typeof thenable.status
		          ? thenable.then(noop$1, noop$1)
		          : ((thenable.status = "pending"),
		            thenable.then(
		              function (fulfilledValue) {
		                "pending" === thenable.status &&
		                  ((thenable.status = "fulfilled"),
		                  (thenable.value = fulfilledValue));
		              },
		              function (error) {
		                "pending" === thenable.status &&
		                  ((thenable.status = "rejected"), (thenable.reason = error));
		              }
		            )),
		        thenable.status)
		      ) {
		        case "fulfilled":
		          return thenable.value;
		        case "rejected":
		          throw thenable.reason;
		      }
		  }
		  throw thenable;
		}
		function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
		  var type = typeof children;
		  if ("undefined" === type || "boolean" === type) children = null;
		  var invokeCallback = false;
		  if (null === children) invokeCallback = true;
		  else
		    switch (type) {
		      case "bigint":
		      case "string":
		      case "number":
		        invokeCallback = true;
		        break;
		      case "object":
		        switch (children.$$typeof) {
		          case REACT_ELEMENT_TYPE:
		          case REACT_PORTAL_TYPE:
		            invokeCallback = true;
		            break;
		          case REACT_LAZY_TYPE:
		            return (
		              (invokeCallback = children._init),
		              mapIntoArray(
		                invokeCallback(children._payload),
		                array,
		                escapedPrefix,
		                nameSoFar,
		                callback
		              )
		            );
		        }
		    }
		  if (invokeCallback)
		    return (
		      (callback = callback(children)),
		      (invokeCallback =
		        "" === nameSoFar ? "." + getElementKey(children, 0) : nameSoFar),
		      isArrayImpl(callback)
		        ? ((escapedPrefix = ""),
		          null != invokeCallback &&
		            (escapedPrefix =
		              invokeCallback.replace(userProvidedKeyEscapeRegex, "$&/") + "/"),
		          mapIntoArray(callback, array, escapedPrefix, "", function (c) {
		            return c;
		          }))
		        : null != callback &&
		          (isValidElement(callback) &&
		            (callback = cloneAndReplaceKey(
		              callback,
		              escapedPrefix +
		                (null == callback.key ||
		                (children && children.key === callback.key)
		                  ? ""
		                  : ("" + callback.key).replace(
		                      userProvidedKeyEscapeRegex,
		                      "$&/"
		                    ) + "/") +
		                invokeCallback
		            )),
		          array.push(callback)),
		      1
		    );
		  invokeCallback = 0;
		  var nextNamePrefix = "" === nameSoFar ? "." : nameSoFar + ":";
		  if (isArrayImpl(children))
		    for (var i = 0; i < children.length; i++)
		      (nameSoFar = children[i]),
		        (type = nextNamePrefix + getElementKey(nameSoFar, i)),
		        (invokeCallback += mapIntoArray(
		          nameSoFar,
		          array,
		          escapedPrefix,
		          type,
		          callback
		        ));
		  else if (((i = getIteratorFn(children)), "function" === typeof i))
		    for (
		      children = i.call(children), i = 0;
		      !(nameSoFar = children.next()).done;

		    )
		      (nameSoFar = nameSoFar.value),
		        (type = nextNamePrefix + getElementKey(nameSoFar, i++)),
		        (invokeCallback += mapIntoArray(
		          nameSoFar,
		          array,
		          escapedPrefix,
		          type,
		          callback
		        ));
		  else if ("object" === type) {
		    if ("function" === typeof children.then)
		      return mapIntoArray(
		        resolveThenable(children),
		        array,
		        escapedPrefix,
		        nameSoFar,
		        callback
		      );
		    array = String(children);
		    throw Error(
		      "Objects are not valid as a React child (found: " +
		        ("[object Object]" === array
		          ? "object with keys {" + Object.keys(children).join(", ") + "}"
		          : array) +
		        "). If you meant to render a collection of children, use an array instead."
		    );
		  }
		  return invokeCallback;
		}
		function mapChildren(children, func, context) {
		  if (null == children) return children;
		  var result = [],
		    count = 0;
		  mapIntoArray(children, result, "", "", function (child) {
		    return func.call(context, child, count++);
		  });
		  return result;
		}
		function lazyInitializer(payload) {
		  if (-1 === payload._status) {
		    var ctor = payload._result;
		    ctor = ctor();
		    ctor.then(
		      function (moduleObject) {
		        if (0 === payload._status || -1 === payload._status)
		          (payload._status = 1), (payload._result = moduleObject);
		      },
		      function (error) {
		        if (0 === payload._status || -1 === payload._status)
		          (payload._status = 2), (payload._result = error);
		      }
		    );
		    -1 === payload._status && ((payload._status = 0), (payload._result = ctor));
		  }
		  if (1 === payload._status) return payload._result.default;
		  throw payload._result;
		}
		var reportGlobalError =
		  "function" === typeof reportError
		    ? reportError
		    : function (error) {
		        if (
		          "object" === typeof window &&
		          "function" === typeof window.ErrorEvent
		        ) {
		          var event = new window.ErrorEvent("error", {
		            bubbles: true,
		            cancelable: true,
		            message:
		              "object" === typeof error &&
		              null !== error &&
		              "string" === typeof error.message
		                ? String(error.message)
		                : String(error),
		            error: error
		          });
		          if (!window.dispatchEvent(event)) return;
		        } else if (
		          "object" === typeof process &&
		          "function" === typeof process.emit
		        ) {
		          process.emit("uncaughtException", error);
		          return;
		        }
		        console.error(error);
		      };
		function noop() {}
		react_production.Children = {
		  map: mapChildren,
		  forEach: function (children, forEachFunc, forEachContext) {
		    mapChildren(
		      children,
		      function () {
		        forEachFunc.apply(this, arguments);
		      },
		      forEachContext
		    );
		  },
		  count: function (children) {
		    var n = 0;
		    mapChildren(children, function () {
		      n++;
		    });
		    return n;
		  },
		  toArray: function (children) {
		    return (
		      mapChildren(children, function (child) {
		        return child;
		      }) || []
		    );
		  },
		  only: function (children) {
		    if (!isValidElement(children))
		      throw Error(
		        "React.Children.only expected to receive a single React element child."
		      );
		    return children;
		  }
		};
		react_production.Component = Component;
		react_production.Fragment = REACT_FRAGMENT_TYPE;
		react_production.Profiler = REACT_PROFILER_TYPE;
		react_production.PureComponent = PureComponent;
		react_production.StrictMode = REACT_STRICT_MODE_TYPE;
		react_production.Suspense = REACT_SUSPENSE_TYPE;
		react_production.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
		  ReactSharedInternals;
		react_production.__COMPILER_RUNTIME = {
		  __proto__: null,
		  c: function (size) {
		    return ReactSharedInternals.H.useMemoCache(size);
		  }
		};
		react_production.cache = function (fn) {
		  return function () {
		    return fn.apply(null, arguments);
		  };
		};
		react_production.cloneElement = function (element, config, children) {
		  if (null === element || void 0 === element)
		    throw Error(
		      "The argument must be a React element, but you passed " + element + "."
		    );
		  var props = assign({}, element.props),
		    key = element.key,
		    owner = void 0;
		  if (null != config)
		    for (propName in (void 0 !== config.ref && (owner = void 0),
		    void 0 !== config.key && (key = "" + config.key),
		    config))
		      !hasOwnProperty.call(config, propName) ||
		        "key" === propName ||
		        "__self" === propName ||
		        "__source" === propName ||
		        ("ref" === propName && void 0 === config.ref) ||
		        (props[propName] = config[propName]);
		  var propName = arguments.length - 2;
		  if (1 === propName) props.children = children;
		  else if (1 < propName) {
		    for (var childArray = Array(propName), i = 0; i < propName; i++)
		      childArray[i] = arguments[i + 2];
		    props.children = childArray;
		  }
		  return ReactElement(element.type, key, void 0, void 0, owner, props);
		};
		react_production.createContext = function (defaultValue) {
		  defaultValue = {
		    $$typeof: REACT_CONTEXT_TYPE,
		    _currentValue: defaultValue,
		    _currentValue2: defaultValue,
		    _threadCount: 0,
		    Provider: null,
		    Consumer: null
		  };
		  defaultValue.Provider = defaultValue;
		  defaultValue.Consumer = {
		    $$typeof: REACT_CONSUMER_TYPE,
		    _context: defaultValue
		  };
		  return defaultValue;
		};
		react_production.createElement = function (type, config, children) {
		  var propName,
		    props = {},
		    key = null;
		  if (null != config)
		    for (propName in (void 0 !== config.key && (key = "" + config.key), config))
		      hasOwnProperty.call(config, propName) &&
		        "key" !== propName &&
		        "__self" !== propName &&
		        "__source" !== propName &&
		        (props[propName] = config[propName]);
		  var childrenLength = arguments.length - 2;
		  if (1 === childrenLength) props.children = children;
		  else if (1 < childrenLength) {
		    for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
		      childArray[i] = arguments[i + 2];
		    props.children = childArray;
		  }
		  if (type && type.defaultProps)
		    for (propName in ((childrenLength = type.defaultProps), childrenLength))
		      void 0 === props[propName] &&
		        (props[propName] = childrenLength[propName]);
		  return ReactElement(type, key, void 0, void 0, null, props);
		};
		react_production.createRef = function () {
		  return { current: null };
		};
		react_production.forwardRef = function (render) {
		  return { $$typeof: REACT_FORWARD_REF_TYPE, render: render };
		};
		react_production.isValidElement = isValidElement;
		react_production.lazy = function (ctor) {
		  return {
		    $$typeof: REACT_LAZY_TYPE,
		    _payload: { _status: -1, _result: ctor },
		    _init: lazyInitializer
		  };
		};
		react_production.memo = function (type, compare) {
		  return {
		    $$typeof: REACT_MEMO_TYPE,
		    type: type,
		    compare: void 0 === compare ? null : compare
		  };
		};
		react_production.startTransition = function (scope) {
		  var prevTransition = ReactSharedInternals.T,
		    currentTransition = {};
		  ReactSharedInternals.T = currentTransition;
		  try {
		    var returnValue = scope(),
		      onStartTransitionFinish = ReactSharedInternals.S;
		    null !== onStartTransitionFinish &&
		      onStartTransitionFinish(currentTransition, returnValue);
		    "object" === typeof returnValue &&
		      null !== returnValue &&
		      "function" === typeof returnValue.then &&
		      returnValue.then(noop, reportGlobalError);
		  } catch (error) {
		    reportGlobalError(error);
		  } finally {
		    ReactSharedInternals.T = prevTransition;
		  }
		};
		react_production.unstable_useCacheRefresh = function () {
		  return ReactSharedInternals.H.useCacheRefresh();
		};
		react_production.use = function (usable) {
		  return ReactSharedInternals.H.use(usable);
		};
		react_production.useActionState = function (action, initialState, permalink) {
		  return ReactSharedInternals.H.useActionState(action, initialState, permalink);
		};
		react_production.useCallback = function (callback, deps) {
		  return ReactSharedInternals.H.useCallback(callback, deps);
		};
		react_production.useContext = function (Context) {
		  return ReactSharedInternals.H.useContext(Context);
		};
		react_production.useDebugValue = function () {};
		react_production.useDeferredValue = function (value, initialValue) {
		  return ReactSharedInternals.H.useDeferredValue(value, initialValue);
		};
		react_production.useEffect = function (create, createDeps, update) {
		  var dispatcher = ReactSharedInternals.H;
		  if ("function" === typeof update)
		    throw Error(
		      "useEffect CRUD overload is not enabled in this build of React."
		    );
		  return dispatcher.useEffect(create, createDeps);
		};
		react_production.useId = function () {
		  return ReactSharedInternals.H.useId();
		};
		react_production.useImperativeHandle = function (ref, create, deps) {
		  return ReactSharedInternals.H.useImperativeHandle(ref, create, deps);
		};
		react_production.useInsertionEffect = function (create, deps) {
		  return ReactSharedInternals.H.useInsertionEffect(create, deps);
		};
		react_production.useLayoutEffect = function (create, deps) {
		  return ReactSharedInternals.H.useLayoutEffect(create, deps);
		};
		react_production.useMemo = function (create, deps) {
		  return ReactSharedInternals.H.useMemo(create, deps);
		};
		react_production.useOptimistic = function (passthrough, reducer) {
		  return ReactSharedInternals.H.useOptimistic(passthrough, reducer);
		};
		react_production.useReducer = function (reducer, initialArg, init) {
		  return ReactSharedInternals.H.useReducer(reducer, initialArg, init);
		};
		react_production.useRef = function (initialValue) {
		  return ReactSharedInternals.H.useRef(initialValue);
		};
		react_production.useState = function (initialState) {
		  return ReactSharedInternals.H.useState(initialState);
		};
		react_production.useSyncExternalStore = function (
		  subscribe,
		  getSnapshot,
		  getServerSnapshot
		) {
		  return ReactSharedInternals.H.useSyncExternalStore(
		    subscribe,
		    getSnapshot,
		    getServerSnapshot
		  );
		};
		react_production.useTransition = function () {
		  return ReactSharedInternals.H.useTransition();
		};
		react_production.version = "19.1.0";
		return react_production;
	}

	var hasRequiredReact;

	function requireReact () {
		if (hasRequiredReact) return react.exports;
		hasRequiredReact = 1;

		{
		  react.exports = requireReact_production();
		}
		return react.exports;
	}

	var reactDom = {exports: {}};

	var reactDom_production = {};

	/**
	 * @license React
	 * react-dom.production.js
	 *
	 * Copyright (c) Meta Platforms, Inc. and affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactDom_production;

	function requireReactDom_production () {
		if (hasRequiredReactDom_production) return reactDom_production;
		hasRequiredReactDom_production = 1;
		var React = requireReact();
		function formatProdErrorMessage(code) {
		  var url = "https://react.dev/errors/" + code;
		  if (1 < arguments.length) {
		    url += "?args[]=" + encodeURIComponent(arguments[1]);
		    for (var i = 2; i < arguments.length; i++)
		      url += "&args[]=" + encodeURIComponent(arguments[i]);
		  }
		  return (
		    "Minified React error #" +
		    code +
		    "; visit " +
		    url +
		    " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."
		  );
		}
		function noop() {}
		var Internals = {
		    d: {
		      f: noop,
		      r: function () {
		        throw Error(formatProdErrorMessage(522));
		      },
		      D: noop,
		      C: noop,
		      L: noop,
		      m: noop,
		      X: noop,
		      S: noop,
		      M: noop
		    },
		    p: 0,
		    findDOMNode: null
		  },
		  REACT_PORTAL_TYPE = Symbol.for("react.portal");
		function createPortal$1(children, containerInfo, implementation) {
		  var key =
		    3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
		  return {
		    $$typeof: REACT_PORTAL_TYPE,
		    key: null == key ? null : "" + key,
		    children: children,
		    containerInfo: containerInfo,
		    implementation: implementation
		  };
		}
		var ReactSharedInternals =
		  React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
		function getCrossOriginStringAs(as, input) {
		  if ("font" === as) return "";
		  if ("string" === typeof input)
		    return "use-credentials" === input ? input : "";
		}
		reactDom_production.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
		  Internals;
		reactDom_production.createPortal = function (children, container) {
		  var key =
		    2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
		  if (
		    !container ||
		    (1 !== container.nodeType &&
		      9 !== container.nodeType &&
		      11 !== container.nodeType)
		  )
		    throw Error(formatProdErrorMessage(299));
		  return createPortal$1(children, container, null, key);
		};
		reactDom_production.flushSync = function (fn) {
		  var previousTransition = ReactSharedInternals.T,
		    previousUpdatePriority = Internals.p;
		  try {
		    if (((ReactSharedInternals.T = null), (Internals.p = 2), fn)) return fn();
		  } finally {
		    (ReactSharedInternals.T = previousTransition),
		      (Internals.p = previousUpdatePriority),
		      Internals.d.f();
		  }
		};
		reactDom_production.preconnect = function (href, options) {
		  "string" === typeof href &&
		    (options
		      ? ((options = options.crossOrigin),
		        (options =
		          "string" === typeof options
		            ? "use-credentials" === options
		              ? options
		              : ""
		            : void 0))
		      : (options = null),
		    Internals.d.C(href, options));
		};
		reactDom_production.prefetchDNS = function (href) {
		  "string" === typeof href && Internals.d.D(href);
		};
		reactDom_production.preinit = function (href, options) {
		  if ("string" === typeof href && options && "string" === typeof options.as) {
		    var as = options.as,
		      crossOrigin = getCrossOriginStringAs(as, options.crossOrigin),
		      integrity =
		        "string" === typeof options.integrity ? options.integrity : void 0,
		      fetchPriority =
		        "string" === typeof options.fetchPriority
		          ? options.fetchPriority
		          : void 0;
		    "style" === as
		      ? Internals.d.S(
		          href,
		          "string" === typeof options.precedence ? options.precedence : void 0,
		          {
		            crossOrigin: crossOrigin,
		            integrity: integrity,
		            fetchPriority: fetchPriority
		          }
		        )
		      : "script" === as &&
		        Internals.d.X(href, {
		          crossOrigin: crossOrigin,
		          integrity: integrity,
		          fetchPriority: fetchPriority,
		          nonce: "string" === typeof options.nonce ? options.nonce : void 0
		        });
		  }
		};
		reactDom_production.preinitModule = function (href, options) {
		  if ("string" === typeof href)
		    if ("object" === typeof options && null !== options) {
		      if (null == options.as || "script" === options.as) {
		        var crossOrigin = getCrossOriginStringAs(
		          options.as,
		          options.crossOrigin
		        );
		        Internals.d.M(href, {
		          crossOrigin: crossOrigin,
		          integrity:
		            "string" === typeof options.integrity ? options.integrity : void 0,
		          nonce: "string" === typeof options.nonce ? options.nonce : void 0
		        });
		      }
		    } else null == options && Internals.d.M(href);
		};
		reactDom_production.preload = function (href, options) {
		  if (
		    "string" === typeof href &&
		    "object" === typeof options &&
		    null !== options &&
		    "string" === typeof options.as
		  ) {
		    var as = options.as,
		      crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);
		    Internals.d.L(href, as, {
		      crossOrigin: crossOrigin,
		      integrity:
		        "string" === typeof options.integrity ? options.integrity : void 0,
		      nonce: "string" === typeof options.nonce ? options.nonce : void 0,
		      type: "string" === typeof options.type ? options.type : void 0,
		      fetchPriority:
		        "string" === typeof options.fetchPriority
		          ? options.fetchPriority
		          : void 0,
		      referrerPolicy:
		        "string" === typeof options.referrerPolicy
		          ? options.referrerPolicy
		          : void 0,
		      imageSrcSet:
		        "string" === typeof options.imageSrcSet ? options.imageSrcSet : void 0,
		      imageSizes:
		        "string" === typeof options.imageSizes ? options.imageSizes : void 0,
		      media: "string" === typeof options.media ? options.media : void 0
		    });
		  }
		};
		reactDom_production.preloadModule = function (href, options) {
		  if ("string" === typeof href)
		    if (options) {
		      var crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);
		      Internals.d.m(href, {
		        as:
		          "string" === typeof options.as && "script" !== options.as
		            ? options.as
		            : void 0,
		        crossOrigin: crossOrigin,
		        integrity:
		          "string" === typeof options.integrity ? options.integrity : void 0
		      });
		    } else Internals.d.m(href);
		};
		reactDom_production.requestFormReset = function (form) {
		  Internals.d.r(form);
		};
		reactDom_production.unstable_batchedUpdates = function (fn, a) {
		  return fn(a);
		};
		reactDom_production.useFormState = function (action, initialState, permalink) {
		  return ReactSharedInternals.H.useFormState(action, initialState, permalink);
		};
		reactDom_production.useFormStatus = function () {
		  return ReactSharedInternals.H.useHostTransitionStatus();
		};
		reactDom_production.version = "19.1.0";
		return reactDom_production;
	}

	var hasRequiredReactDom;

	function requireReactDom () {
		if (hasRequiredReactDom) return reactDom.exports;
		hasRequiredReactDom = 1;

		function checkDCE() {
		  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		  if (
		    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
		    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
		  ) {
		    return;
		  }
		  try {
		    // Verify that the code above has been dead code eliminated (DCE'd).
		    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
		  } catch (err) {
		    // DevTools shouldn't crash React, no matter what.
		    // We should still report in case we break this code.
		    console.error(err);
		  }
		}

		{
		  // DCE check should happen before ReactDOM bundle executes so that
		  // DevTools can report bad minification during injection.
		  checkDCE();
		  reactDom.exports = requireReactDom_production();
		}
		return reactDom.exports;
	}

	/**
	 * @license React
	 * react-dom-client.production.js
	 *
	 * Copyright (c) Meta Platforms, Inc. and affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactDomClient_production;

	function requireReactDomClient_production () {
		if (hasRequiredReactDomClient_production) return reactDomClient_production;
		hasRequiredReactDomClient_production = 1;
		var Scheduler = requireScheduler(),
		  React = requireReact(),
		  ReactDOM = requireReactDom();
		function formatProdErrorMessage(code) {
		  var url = "https://react.dev/errors/" + code;
		  if (1 < arguments.length) {
		    url += "?args[]=" + encodeURIComponent(arguments[1]);
		    for (var i = 2; i < arguments.length; i++)
		      url += "&args[]=" + encodeURIComponent(arguments[i]);
		  }
		  return (
		    "Minified React error #" +
		    code +
		    "; visit " +
		    url +
		    " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."
		  );
		}
		function isValidContainer(node) {
		  return !(
		    !node ||
		    (1 !== node.nodeType && 9 !== node.nodeType && 11 !== node.nodeType)
		  );
		}
		function getNearestMountedFiber(fiber) {
		  var node = fiber,
		    nearestMounted = fiber;
		  if (fiber.alternate) for (; node.return; ) node = node.return;
		  else {
		    fiber = node;
		    do
		      (node = fiber),
		        0 !== (node.flags & 4098) && (nearestMounted = node.return),
		        (fiber = node.return);
		    while (fiber);
		  }
		  return 3 === node.tag ? nearestMounted : null;
		}
		function getSuspenseInstanceFromFiber(fiber) {
		  if (13 === fiber.tag) {
		    var suspenseState = fiber.memoizedState;
		    null === suspenseState &&
		      ((fiber = fiber.alternate),
		      null !== fiber && (suspenseState = fiber.memoizedState));
		    if (null !== suspenseState) return suspenseState.dehydrated;
		  }
		  return null;
		}
		function assertIsMounted(fiber) {
		  if (getNearestMountedFiber(fiber) !== fiber)
		    throw Error(formatProdErrorMessage(188));
		}
		function findCurrentFiberUsingSlowPath(fiber) {
		  var alternate = fiber.alternate;
		  if (!alternate) {
		    alternate = getNearestMountedFiber(fiber);
		    if (null === alternate) throw Error(formatProdErrorMessage(188));
		    return alternate !== fiber ? null : fiber;
		  }
		  for (var a = fiber, b = alternate; ; ) {
		    var parentA = a.return;
		    if (null === parentA) break;
		    var parentB = parentA.alternate;
		    if (null === parentB) {
		      b = parentA.return;
		      if (null !== b) {
		        a = b;
		        continue;
		      }
		      break;
		    }
		    if (parentA.child === parentB.child) {
		      for (parentB = parentA.child; parentB; ) {
		        if (parentB === a) return assertIsMounted(parentA), fiber;
		        if (parentB === b) return assertIsMounted(parentA), alternate;
		        parentB = parentB.sibling;
		      }
		      throw Error(formatProdErrorMessage(188));
		    }
		    if (a.return !== b.return) (a = parentA), (b = parentB);
		    else {
		      for (var didFindChild = false, child$0 = parentA.child; child$0; ) {
		        if (child$0 === a) {
		          didFindChild = true;
		          a = parentA;
		          b = parentB;
		          break;
		        }
		        if (child$0 === b) {
		          didFindChild = true;
		          b = parentA;
		          a = parentB;
		          break;
		        }
		        child$0 = child$0.sibling;
		      }
		      if (!didFindChild) {
		        for (child$0 = parentB.child; child$0; ) {
		          if (child$0 === a) {
		            didFindChild = true;
		            a = parentB;
		            b = parentA;
		            break;
		          }
		          if (child$0 === b) {
		            didFindChild = true;
		            b = parentB;
		            a = parentA;
		            break;
		          }
		          child$0 = child$0.sibling;
		        }
		        if (!didFindChild) throw Error(formatProdErrorMessage(189));
		      }
		    }
		    if (a.alternate !== b) throw Error(formatProdErrorMessage(190));
		  }
		  if (3 !== a.tag) throw Error(formatProdErrorMessage(188));
		  return a.stateNode.current === a ? fiber : alternate;
		}
		function findCurrentHostFiberImpl(node) {
		  var tag = node.tag;
		  if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
		  for (node = node.child; null !== node; ) {
		    tag = findCurrentHostFiberImpl(node);
		    if (null !== tag) return tag;
		    node = node.sibling;
		  }
		  return null;
		}
		var assign = Object.assign,
		  REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"),
		  REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
		  REACT_PORTAL_TYPE = Symbol.for("react.portal"),
		  REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
		  REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
		  REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
		  REACT_PROVIDER_TYPE = Symbol.for("react.provider"),
		  REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
		  REACT_CONTEXT_TYPE = Symbol.for("react.context"),
		  REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
		  REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
		  REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
		  REACT_MEMO_TYPE = Symbol.for("react.memo"),
		  REACT_LAZY_TYPE = Symbol.for("react.lazy");
		var REACT_ACTIVITY_TYPE = Symbol.for("react.activity");
		var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
		var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
		function getIteratorFn(maybeIterable) {
		  if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
		  maybeIterable =
		    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
		    maybeIterable["@@iterator"];
		  return "function" === typeof maybeIterable ? maybeIterable : null;
		}
		var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
		function getComponentNameFromType(type) {
		  if (null == type) return null;
		  if ("function" === typeof type)
		    return type.$$typeof === REACT_CLIENT_REFERENCE
		      ? null
		      : type.displayName || type.name || null;
		  if ("string" === typeof type) return type;
		  switch (type) {
		    case REACT_FRAGMENT_TYPE:
		      return "Fragment";
		    case REACT_PROFILER_TYPE:
		      return "Profiler";
		    case REACT_STRICT_MODE_TYPE:
		      return "StrictMode";
		    case REACT_SUSPENSE_TYPE:
		      return "Suspense";
		    case REACT_SUSPENSE_LIST_TYPE:
		      return "SuspenseList";
		    case REACT_ACTIVITY_TYPE:
		      return "Activity";
		  }
		  if ("object" === typeof type)
		    switch (type.$$typeof) {
		      case REACT_PORTAL_TYPE:
		        return "Portal";
		      case REACT_CONTEXT_TYPE:
		        return (type.displayName || "Context") + ".Provider";
		      case REACT_CONSUMER_TYPE:
		        return (type._context.displayName || "Context") + ".Consumer";
		      case REACT_FORWARD_REF_TYPE:
		        var innerType = type.render;
		        type = type.displayName;
		        type ||
		          ((type = innerType.displayName || innerType.name || ""),
		          (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
		        return type;
		      case REACT_MEMO_TYPE:
		        return (
		          (innerType = type.displayName || null),
		          null !== innerType
		            ? innerType
		            : getComponentNameFromType(type.type) || "Memo"
		        );
		      case REACT_LAZY_TYPE:
		        innerType = type._payload;
		        type = type._init;
		        try {
		          return getComponentNameFromType(type(innerType));
		        } catch (x) {}
		    }
		  return null;
		}
		var isArrayImpl = Array.isArray,
		  ReactSharedInternals =
		    React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
		  ReactDOMSharedInternals =
		    ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
		  sharedNotPendingObject = {
		    pending: false,
		    data: null,
		    method: null,
		    action: null
		  },
		  valueStack = [],
		  index = -1;
		function createCursor(defaultValue) {
		  return { current: defaultValue };
		}
		function pop(cursor) {
		  0 > index ||
		    ((cursor.current = valueStack[index]), (valueStack[index] = null), index--);
		}
		function push(cursor, value) {
		  index++;
		  valueStack[index] = cursor.current;
		  cursor.current = value;
		}
		var contextStackCursor = createCursor(null),
		  contextFiberStackCursor = createCursor(null),
		  rootInstanceStackCursor = createCursor(null),
		  hostTransitionProviderCursor = createCursor(null);
		function pushHostContainer(fiber, nextRootInstance) {
		  push(rootInstanceStackCursor, nextRootInstance);
		  push(contextFiberStackCursor, fiber);
		  push(contextStackCursor, null);
		  switch (nextRootInstance.nodeType) {
		    case 9:
		    case 11:
		      fiber = (fiber = nextRootInstance.documentElement)
		        ? (fiber = fiber.namespaceURI)
		          ? getOwnHostContext(fiber)
		          : 0
		        : 0;
		      break;
		    default:
		      if (
		        ((fiber = nextRootInstance.tagName),
		        (nextRootInstance = nextRootInstance.namespaceURI))
		      )
		        (nextRootInstance = getOwnHostContext(nextRootInstance)),
		          (fiber = getChildHostContextProd(nextRootInstance, fiber));
		      else
		        switch (fiber) {
		          case "svg":
		            fiber = 1;
		            break;
		          case "math":
		            fiber = 2;
		            break;
		          default:
		            fiber = 0;
		        }
		  }
		  pop(contextStackCursor);
		  push(contextStackCursor, fiber);
		}
		function popHostContainer() {
		  pop(contextStackCursor);
		  pop(contextFiberStackCursor);
		  pop(rootInstanceStackCursor);
		}
		function pushHostContext(fiber) {
		  null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber);
		  var context = contextStackCursor.current;
		  var JSCompiler_inline_result = getChildHostContextProd(context, fiber.type);
		  context !== JSCompiler_inline_result &&
		    (push(contextFiberStackCursor, fiber),
		    push(contextStackCursor, JSCompiler_inline_result));
		}
		function popHostContext(fiber) {
		  contextFiberStackCursor.current === fiber &&
		    (pop(contextStackCursor), pop(contextFiberStackCursor));
		  hostTransitionProviderCursor.current === fiber &&
		    (pop(hostTransitionProviderCursor),
		    (HostTransitionContext._currentValue = sharedNotPendingObject));
		}
		var hasOwnProperty = Object.prototype.hasOwnProperty,
		  scheduleCallback$3 = Scheduler.unstable_scheduleCallback,
		  cancelCallback$1 = Scheduler.unstable_cancelCallback,
		  shouldYield = Scheduler.unstable_shouldYield,
		  requestPaint = Scheduler.unstable_requestPaint,
		  now = Scheduler.unstable_now,
		  getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
		  ImmediatePriority = Scheduler.unstable_ImmediatePriority,
		  UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
		  NormalPriority$1 = Scheduler.unstable_NormalPriority,
		  LowPriority = Scheduler.unstable_LowPriority,
		  IdlePriority = Scheduler.unstable_IdlePriority,
		  log$1 = Scheduler.log,
		  unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue,
		  rendererID = null,
		  injectedHook = null;
		function setIsStrictModeForDevtools(newIsStrictMode) {
		  "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
		  if (injectedHook && "function" === typeof injectedHook.setStrictMode)
		    try {
		      injectedHook.setStrictMode(rendererID, newIsStrictMode);
		    } catch (err) {}
		}
		var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,
		  log = Math.log,
		  LN2 = Math.LN2;
		function clz32Fallback(x) {
		  x >>>= 0;
		  return 0 === x ? 32 : (31 - ((log(x) / LN2) | 0)) | 0;
		}
		var nextTransitionLane = 256,
		  nextRetryLane = 4194304;
		function getHighestPriorityLanes(lanes) {
		  var pendingSyncLanes = lanes & 42;
		  if (0 !== pendingSyncLanes) return pendingSyncLanes;
		  switch (lanes & -lanes) {
		    case 1:
		      return 1;
		    case 2:
		      return 2;
		    case 4:
		      return 4;
		    case 8:
		      return 8;
		    case 16:
		      return 16;
		    case 32:
		      return 32;
		    case 64:
		      return 64;
		    case 128:
		      return 128;
		    case 256:
		    case 512:
		    case 1024:
		    case 2048:
		    case 4096:
		    case 8192:
		    case 16384:
		    case 32768:
		    case 65536:
		    case 131072:
		    case 262144:
		    case 524288:
		    case 1048576:
		    case 2097152:
		      return lanes & 4194048;
		    case 4194304:
		    case 8388608:
		    case 16777216:
		    case 33554432:
		      return lanes & 62914560;
		    case 67108864:
		      return 67108864;
		    case 134217728:
		      return 134217728;
		    case 268435456:
		      return 268435456;
		    case 536870912:
		      return 536870912;
		    case 1073741824:
		      return 0;
		    default:
		      return lanes;
		  }
		}
		function getNextLanes(root, wipLanes, rootHasPendingCommit) {
		  var pendingLanes = root.pendingLanes;
		  if (0 === pendingLanes) return 0;
		  var nextLanes = 0,
		    suspendedLanes = root.suspendedLanes,
		    pingedLanes = root.pingedLanes;
		  root = root.warmLanes;
		  var nonIdlePendingLanes = pendingLanes & 134217727;
		  0 !== nonIdlePendingLanes
		    ? ((pendingLanes = nonIdlePendingLanes & ~suspendedLanes),
		      0 !== pendingLanes
		        ? (nextLanes = getHighestPriorityLanes(pendingLanes))
		        : ((pingedLanes &= nonIdlePendingLanes),
		          0 !== pingedLanes
		            ? (nextLanes = getHighestPriorityLanes(pingedLanes))
		            : rootHasPendingCommit ||
		              ((rootHasPendingCommit = nonIdlePendingLanes & ~root),
		              0 !== rootHasPendingCommit &&
		                (nextLanes = getHighestPriorityLanes(rootHasPendingCommit)))))
		    : ((nonIdlePendingLanes = pendingLanes & ~suspendedLanes),
		      0 !== nonIdlePendingLanes
		        ? (nextLanes = getHighestPriorityLanes(nonIdlePendingLanes))
		        : 0 !== pingedLanes
		          ? (nextLanes = getHighestPriorityLanes(pingedLanes))
		          : rootHasPendingCommit ||
		            ((rootHasPendingCommit = pendingLanes & ~root),
		            0 !== rootHasPendingCommit &&
		              (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))));
		  return 0 === nextLanes
		    ? 0
		    : 0 !== wipLanes &&
		        wipLanes !== nextLanes &&
		        0 === (wipLanes & suspendedLanes) &&
		        ((suspendedLanes = nextLanes & -nextLanes),
		        (rootHasPendingCommit = wipLanes & -wipLanes),
		        suspendedLanes >= rootHasPendingCommit ||
		          (32 === suspendedLanes && 0 !== (rootHasPendingCommit & 4194048)))
		      ? wipLanes
		      : nextLanes;
		}
		function checkIfRootIsPrerendering(root, renderLanes) {
		  return (
		    0 ===
		    (root.pendingLanes &
		      ~(root.suspendedLanes & ~root.pingedLanes) &
		      renderLanes)
		  );
		}
		function computeExpirationTime(lane, currentTime) {
		  switch (lane) {
		    case 1:
		    case 2:
		    case 4:
		    case 8:
		    case 64:
		      return currentTime + 250;
		    case 16:
		    case 32:
		    case 128:
		    case 256:
		    case 512:
		    case 1024:
		    case 2048:
		    case 4096:
		    case 8192:
		    case 16384:
		    case 32768:
		    case 65536:
		    case 131072:
		    case 262144:
		    case 524288:
		    case 1048576:
		    case 2097152:
		      return currentTime + 5e3;
		    case 4194304:
		    case 8388608:
		    case 16777216:
		    case 33554432:
		      return -1;
		    case 67108864:
		    case 134217728:
		    case 268435456:
		    case 536870912:
		    case 1073741824:
		      return -1;
		    default:
		      return -1;
		  }
		}
		function claimNextTransitionLane() {
		  var lane = nextTransitionLane;
		  nextTransitionLane <<= 1;
		  0 === (nextTransitionLane & 4194048) && (nextTransitionLane = 256);
		  return lane;
		}
		function claimNextRetryLane() {
		  var lane = nextRetryLane;
		  nextRetryLane <<= 1;
		  0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
		  return lane;
		}
		function createLaneMap(initial) {
		  for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
		  return laneMap;
		}
		function markRootUpdated$1(root, updateLane) {
		  root.pendingLanes |= updateLane;
		  268435456 !== updateLane &&
		    ((root.suspendedLanes = 0), (root.pingedLanes = 0), (root.warmLanes = 0));
		}
		function markRootFinished(
		  root,
		  finishedLanes,
		  remainingLanes,
		  spawnedLane,
		  updatedLanes,
		  suspendedRetryLanes
		) {
		  var previouslyPendingLanes = root.pendingLanes;
		  root.pendingLanes = remainingLanes;
		  root.suspendedLanes = 0;
		  root.pingedLanes = 0;
		  root.warmLanes = 0;
		  root.expiredLanes &= remainingLanes;
		  root.entangledLanes &= remainingLanes;
		  root.errorRecoveryDisabledLanes &= remainingLanes;
		  root.shellSuspendCounter = 0;
		  var entanglements = root.entanglements,
		    expirationTimes = root.expirationTimes,
		    hiddenUpdates = root.hiddenUpdates;
		  for (
		    remainingLanes = previouslyPendingLanes & ~remainingLanes;
		    0 < remainingLanes;

		  ) {
		    var index$5 = 31 - clz32(remainingLanes),
		      lane = 1 << index$5;
		    entanglements[index$5] = 0;
		    expirationTimes[index$5] = -1;
		    var hiddenUpdatesForLane = hiddenUpdates[index$5];
		    if (null !== hiddenUpdatesForLane)
		      for (
		        hiddenUpdates[index$5] = null, index$5 = 0;
		        index$5 < hiddenUpdatesForLane.length;
		        index$5++
		      ) {
		        var update = hiddenUpdatesForLane[index$5];
		        null !== update && (update.lane &= -536870913);
		      }
		    remainingLanes &= ~lane;
		  }
		  0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, 0);
		  0 !== suspendedRetryLanes &&
		    0 === updatedLanes &&
		    0 !== root.tag &&
		    (root.suspendedLanes |=
		      suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
		}
		function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {
		  root.pendingLanes |= spawnedLane;
		  root.suspendedLanes &= ~spawnedLane;
		  var spawnedLaneIndex = 31 - clz32(spawnedLane);
		  root.entangledLanes |= spawnedLane;
		  root.entanglements[spawnedLaneIndex] =
		    root.entanglements[spawnedLaneIndex] |
		    1073741824 |
		    (entangledLanes & 4194090);
		}
		function markRootEntangled(root, entangledLanes) {
		  var rootEntangledLanes = (root.entangledLanes |= entangledLanes);
		  for (root = root.entanglements; rootEntangledLanes; ) {
		    var index$6 = 31 - clz32(rootEntangledLanes),
		      lane = 1 << index$6;
		    (lane & entangledLanes) | (root[index$6] & entangledLanes) &&
		      (root[index$6] |= entangledLanes);
		    rootEntangledLanes &= ~lane;
		  }
		}
		function getBumpedLaneForHydrationByLane(lane) {
		  switch (lane) {
		    case 2:
		      lane = 1;
		      break;
		    case 8:
		      lane = 4;
		      break;
		    case 32:
		      lane = 16;
		      break;
		    case 256:
		    case 512:
		    case 1024:
		    case 2048:
		    case 4096:
		    case 8192:
		    case 16384:
		    case 32768:
		    case 65536:
		    case 131072:
		    case 262144:
		    case 524288:
		    case 1048576:
		    case 2097152:
		    case 4194304:
		    case 8388608:
		    case 16777216:
		    case 33554432:
		      lane = 128;
		      break;
		    case 268435456:
		      lane = 134217728;
		      break;
		    default:
		      lane = 0;
		  }
		  return lane;
		}
		function lanesToEventPriority(lanes) {
		  lanes &= -lanes;
		  return 2 < lanes
		    ? 8 < lanes
		      ? 0 !== (lanes & 134217727)
		        ? 32
		        : 268435456
		      : 8
		    : 2;
		}
		function resolveUpdatePriority() {
		  var updatePriority = ReactDOMSharedInternals.p;
		  if (0 !== updatePriority) return updatePriority;
		  updatePriority = window.event;
		  return void 0 === updatePriority ? 32 : getEventPriority(updatePriority.type);
		}
		function runWithPriority(priority, fn) {
		  var previousPriority = ReactDOMSharedInternals.p;
		  try {
		    return (ReactDOMSharedInternals.p = priority), fn();
		  } finally {
		    ReactDOMSharedInternals.p = previousPriority;
		  }
		}
		var randomKey = Math.random().toString(36).slice(2),
		  internalInstanceKey = "__reactFiber$" + randomKey,
		  internalPropsKey = "__reactProps$" + randomKey,
		  internalContainerInstanceKey = "__reactContainer$" + randomKey,
		  internalEventHandlersKey = "__reactEvents$" + randomKey,
		  internalEventHandlerListenersKey = "__reactListeners$" + randomKey,
		  internalEventHandlesSetKey = "__reactHandles$" + randomKey,
		  internalRootNodeResourcesKey = "__reactResources$" + randomKey,
		  internalHoistableMarker = "__reactMarker$" + randomKey;
		function detachDeletedInstance(node) {
		  delete node[internalInstanceKey];
		  delete node[internalPropsKey];
		  delete node[internalEventHandlersKey];
		  delete node[internalEventHandlerListenersKey];
		  delete node[internalEventHandlesSetKey];
		}
		function getClosestInstanceFromNode(targetNode) {
		  var targetInst = targetNode[internalInstanceKey];
		  if (targetInst) return targetInst;
		  for (var parentNode = targetNode.parentNode; parentNode; ) {
		    if (
		      (targetInst =
		        parentNode[internalContainerInstanceKey] ||
		        parentNode[internalInstanceKey])
		    ) {
		      parentNode = targetInst.alternate;
		      if (
		        null !== targetInst.child ||
		        (null !== parentNode && null !== parentNode.child)
		      )
		        for (
		          targetNode = getParentSuspenseInstance(targetNode);
		          null !== targetNode;

		        ) {
		          if ((parentNode = targetNode[internalInstanceKey])) return parentNode;
		          targetNode = getParentSuspenseInstance(targetNode);
		        }
		      return targetInst;
		    }
		    targetNode = parentNode;
		    parentNode = targetNode.parentNode;
		  }
		  return null;
		}
		function getInstanceFromNode(node) {
		  if (
		    (node = node[internalInstanceKey] || node[internalContainerInstanceKey])
		  ) {
		    var tag = node.tag;
		    if (
		      5 === tag ||
		      6 === tag ||
		      13 === tag ||
		      26 === tag ||
		      27 === tag ||
		      3 === tag
		    )
		      return node;
		  }
		  return null;
		}
		function getNodeFromInstance(inst) {
		  var tag = inst.tag;
		  if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return inst.stateNode;
		  throw Error(formatProdErrorMessage(33));
		}
		function getResourcesFromRoot(root) {
		  var resources = root[internalRootNodeResourcesKey];
		  resources ||
		    (resources = root[internalRootNodeResourcesKey] =
		      { hoistableStyles: new Map(), hoistableScripts: new Map() });
		  return resources;
		}
		function markNodeAsHoistable(node) {
		  node[internalHoistableMarker] = true;
		}
		var allNativeEvents = new Set(),
		  registrationNameDependencies = {};
		function registerTwoPhaseEvent(registrationName, dependencies) {
		  registerDirectEvent(registrationName, dependencies);
		  registerDirectEvent(registrationName + "Capture", dependencies);
		}
		function registerDirectEvent(registrationName, dependencies) {
		  registrationNameDependencies[registrationName] = dependencies;
		  for (
		    registrationName = 0;
		    registrationName < dependencies.length;
		    registrationName++
		  )
		    allNativeEvents.add(dependencies[registrationName]);
		}
		var VALID_ATTRIBUTE_NAME_REGEX = RegExp(
		    "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
		  ),
		  illegalAttributeNameCache = {},
		  validatedAttributeNameCache = {};
		function isAttributeNameSafe(attributeName) {
		  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
		    return true;
		  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
		  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
		    return (validatedAttributeNameCache[attributeName] = true);
		  illegalAttributeNameCache[attributeName] = true;
		  return false;
		}
		function setValueForAttribute(node, name, value) {
		  if (isAttributeNameSafe(name))
		    if (null === value) node.removeAttribute(name);
		    else {
		      switch (typeof value) {
		        case "undefined":
		        case "function":
		        case "symbol":
		          node.removeAttribute(name);
		          return;
		        case "boolean":
		          var prefix$8 = name.toLowerCase().slice(0, 5);
		          if ("data-" !== prefix$8 && "aria-" !== prefix$8) {
		            node.removeAttribute(name);
		            return;
		          }
		      }
		      node.setAttribute(name, "" + value);
		    }
		}
		function setValueForKnownAttribute(node, name, value) {
		  if (null === value) node.removeAttribute(name);
		  else {
		    switch (typeof value) {
		      case "undefined":
		      case "function":
		      case "symbol":
		      case "boolean":
		        node.removeAttribute(name);
		        return;
		    }
		    node.setAttribute(name, "" + value);
		  }
		}
		function setValueForNamespacedAttribute(node, namespace, name, value) {
		  if (null === value) node.removeAttribute(name);
		  else {
		    switch (typeof value) {
		      case "undefined":
		      case "function":
		      case "symbol":
		      case "boolean":
		        node.removeAttribute(name);
		        return;
		    }
		    node.setAttributeNS(namespace, name, "" + value);
		  }
		}
		var prefix, suffix;
		function describeBuiltInComponentFrame(name) {
		  if (void 0 === prefix)
		    try {
		      throw Error();
		    } catch (x) {
		      var match = x.stack.trim().match(/\n( *(at )?)/);
		      prefix = (match && match[1]) || "";
		      suffix =
		        -1 < x.stack.indexOf("\n    at")
		          ? " (<anonymous>)"
		          : -1 < x.stack.indexOf("@")
		            ? "@unknown:0:0"
		            : "";
		    }
		  return "\n" + prefix + name + suffix;
		}
		var reentry = false;
		function describeNativeComponentFrame(fn, construct) {
		  if (!fn || reentry) return "";
		  reentry = true;
		  var previousPrepareStackTrace = Error.prepareStackTrace;
		  Error.prepareStackTrace = void 0;
		  try {
		    var RunInRootFrame = {
		      DetermineComponentFrameRoot: function () {
		        try {
		          if (construct) {
		            var Fake = function () {
		              throw Error();
		            };
		            Object.defineProperty(Fake.prototype, "props", {
		              set: function () {
		                throw Error();
		              }
		            });
		            if ("object" === typeof Reflect && Reflect.construct) {
		              try {
		                Reflect.construct(Fake, []);
		              } catch (x) {
		                var control = x;
		              }
		              Reflect.construct(fn, [], Fake);
		            } else {
		              try {
		                Fake.call();
		              } catch (x$9) {
		                control = x$9;
		              }
		              fn.call(Fake.prototype);
		            }
		          } else {
		            try {
		              throw Error();
		            } catch (x$10) {
		              control = x$10;
		            }
		            (Fake = fn()) &&
		              "function" === typeof Fake.catch &&
		              Fake.catch(function () {});
		          }
		        } catch (sample) {
		          if (sample && control && "string" === typeof sample.stack)
		            return [sample.stack, control.stack];
		        }
		        return [null, null];
		      }
		    };
		    RunInRootFrame.DetermineComponentFrameRoot.displayName =
		      "DetermineComponentFrameRoot";
		    var namePropDescriptor = Object.getOwnPropertyDescriptor(
		      RunInRootFrame.DetermineComponentFrameRoot,
		      "name"
		    );
		    namePropDescriptor &&
		      namePropDescriptor.configurable &&
		      Object.defineProperty(
		        RunInRootFrame.DetermineComponentFrameRoot,
		        "name",
		        { value: "DetermineComponentFrameRoot" }
		      );
		    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),
		      sampleStack = _RunInRootFrame$Deter[0],
		      controlStack = _RunInRootFrame$Deter[1];
		    if (sampleStack && controlStack) {
		      var sampleLines = sampleStack.split("\n"),
		        controlLines = controlStack.split("\n");
		      for (
		        namePropDescriptor = RunInRootFrame = 0;
		        RunInRootFrame < sampleLines.length &&
		        !sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot");

		      )
		        RunInRootFrame++;
		      for (
		        ;
		        namePropDescriptor < controlLines.length &&
		        !controlLines[namePropDescriptor].includes(
		          "DetermineComponentFrameRoot"
		        );

		      )
		        namePropDescriptor++;
		      if (
		        RunInRootFrame === sampleLines.length ||
		        namePropDescriptor === controlLines.length
		      )
		        for (
		          RunInRootFrame = sampleLines.length - 1,
		            namePropDescriptor = controlLines.length - 1;
		          1 <= RunInRootFrame &&
		          0 <= namePropDescriptor &&
		          sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor];

		        )
		          namePropDescriptor--;
		      for (
		        ;
		        1 <= RunInRootFrame && 0 <= namePropDescriptor;
		        RunInRootFrame--, namePropDescriptor--
		      )
		        if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
		          if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {
		            do
		              if (
		                (RunInRootFrame--,
		                namePropDescriptor--,
		                0 > namePropDescriptor ||
		                  sampleLines[RunInRootFrame] !==
		                    controlLines[namePropDescriptor])
		              ) {
		                var frame =
		                  "\n" +
		                  sampleLines[RunInRootFrame].replace(" at new ", " at ");
		                fn.displayName &&
		                  frame.includes("<anonymous>") &&
		                  (frame = frame.replace("<anonymous>", fn.displayName));
		                return frame;
		              }
		            while (1 <= RunInRootFrame && 0 <= namePropDescriptor);
		          }
		          break;
		        }
		    }
		  } finally {
		    (reentry = false), (Error.prepareStackTrace = previousPrepareStackTrace);
		  }
		  return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : "")
		    ? describeBuiltInComponentFrame(previousPrepareStackTrace)
		    : "";
		}
		function describeFiber(fiber) {
		  switch (fiber.tag) {
		    case 26:
		    case 27:
		    case 5:
		      return describeBuiltInComponentFrame(fiber.type);
		    case 16:
		      return describeBuiltInComponentFrame("Lazy");
		    case 13:
		      return describeBuiltInComponentFrame("Suspense");
		    case 19:
		      return describeBuiltInComponentFrame("SuspenseList");
		    case 0:
		    case 15:
		      return describeNativeComponentFrame(fiber.type, false);
		    case 11:
		      return describeNativeComponentFrame(fiber.type.render, false);
		    case 1:
		      return describeNativeComponentFrame(fiber.type, true);
		    case 31:
		      return describeBuiltInComponentFrame("Activity");
		    default:
		      return "";
		  }
		}
		function getStackByFiberInDevAndProd(workInProgress) {
		  try {
		    var info = "";
		    do
		      (info += describeFiber(workInProgress)),
		        (workInProgress = workInProgress.return);
		    while (workInProgress);
		    return info;
		  } catch (x) {
		    return "\nError generating stack: " + x.message + "\n" + x.stack;
		  }
		}
		function getToStringValue(value) {
		  switch (typeof value) {
		    case "bigint":
		    case "boolean":
		    case "number":
		    case "string":
		    case "undefined":
		      return value;
		    case "object":
		      return value;
		    default:
		      return "";
		  }
		}
		function isCheckable(elem) {
		  var type = elem.type;
		  return (
		    (elem = elem.nodeName) &&
		    "input" === elem.toLowerCase() &&
		    ("checkbox" === type || "radio" === type)
		  );
		}
		function trackValueOnNode(node) {
		  var valueField = isCheckable(node) ? "checked" : "value",
		    descriptor = Object.getOwnPropertyDescriptor(
		      node.constructor.prototype,
		      valueField
		    ),
		    currentValue = "" + node[valueField];
		  if (
		    !node.hasOwnProperty(valueField) &&
		    "undefined" !== typeof descriptor &&
		    "function" === typeof descriptor.get &&
		    "function" === typeof descriptor.set
		  ) {
		    var get = descriptor.get,
		      set = descriptor.set;
		    Object.defineProperty(node, valueField, {
		      configurable: true,
		      get: function () {
		        return get.call(this);
		      },
		      set: function (value) {
		        currentValue = "" + value;
		        set.call(this, value);
		      }
		    });
		    Object.defineProperty(node, valueField, {
		      enumerable: descriptor.enumerable
		    });
		    return {
		      getValue: function () {
		        return currentValue;
		      },
		      setValue: function (value) {
		        currentValue = "" + value;
		      },
		      stopTracking: function () {
		        node._valueTracker = null;
		        delete node[valueField];
		      }
		    };
		  }
		}
		function track(node) {
		  node._valueTracker || (node._valueTracker = trackValueOnNode(node));
		}
		function updateValueIfChanged(node) {
		  if (!node) return false;
		  var tracker = node._valueTracker;
		  if (!tracker) return true;
		  var lastValue = tracker.getValue();
		  var value = "";
		  node &&
		    (value = isCheckable(node)
		      ? node.checked
		        ? "true"
		        : "false"
		      : node.value);
		  node = value;
		  return node !== lastValue ? (tracker.setValue(node), true) : false;
		}
		function getActiveElement(doc) {
		  doc = doc || ("undefined" !== typeof document ? document : void 0);
		  if ("undefined" === typeof doc) return null;
		  try {
		    return doc.activeElement || doc.body;
		  } catch (e) {
		    return doc.body;
		  }
		}
		var escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g;
		function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
		  return value.replace(
		    escapeSelectorAttributeValueInsideDoubleQuotesRegex,
		    function (ch) {
		      return "\\" + ch.charCodeAt(0).toString(16) + " ";
		    }
		  );
		}
		function updateInput(
		  element,
		  value,
		  defaultValue,
		  lastDefaultValue,
		  checked,
		  defaultChecked,
		  type,
		  name
		) {
		  element.name = "";
		  null != type &&
		  "function" !== typeof type &&
		  "symbol" !== typeof type &&
		  "boolean" !== typeof type
		    ? (element.type = type)
		    : element.removeAttribute("type");
		  if (null != value)
		    if ("number" === type) {
		      if ((0 === value && "" === element.value) || element.value != value)
		        element.value = "" + getToStringValue(value);
		    } else
		      element.value !== "" + getToStringValue(value) &&
		        (element.value = "" + getToStringValue(value));
		  else
		    ("submit" !== type && "reset" !== type) || element.removeAttribute("value");
		  null != value
		    ? setDefaultValue(element, type, getToStringValue(value))
		    : null != defaultValue
		      ? setDefaultValue(element, type, getToStringValue(defaultValue))
		      : null != lastDefaultValue && element.removeAttribute("value");
		  null == checked &&
		    null != defaultChecked &&
		    (element.defaultChecked = !!defaultChecked);
		  null != checked &&
		    (element.checked =
		      checked && "function" !== typeof checked && "symbol" !== typeof checked);
		  null != name &&
		  "function" !== typeof name &&
		  "symbol" !== typeof name &&
		  "boolean" !== typeof name
		    ? (element.name = "" + getToStringValue(name))
		    : element.removeAttribute("name");
		}
		function initInput(
		  element,
		  value,
		  defaultValue,
		  checked,
		  defaultChecked,
		  type,
		  name,
		  isHydrating
		) {
		  null != type &&
		    "function" !== typeof type &&
		    "symbol" !== typeof type &&
		    "boolean" !== typeof type &&
		    (element.type = type);
		  if (null != value || null != defaultValue) {
		    if (
		      !(
		        ("submit" !== type && "reset" !== type) ||
		        (void 0 !== value && null !== value)
		      )
		    )
		      return;
		    defaultValue =
		      null != defaultValue ? "" + getToStringValue(defaultValue) : "";
		    value = null != value ? "" + getToStringValue(value) : defaultValue;
		    isHydrating || value === element.value || (element.value = value);
		    element.defaultValue = value;
		  }
		  checked = null != checked ? checked : defaultChecked;
		  checked =
		    "function" !== typeof checked && "symbol" !== typeof checked && !!checked;
		  element.checked = isHydrating ? element.checked : !!checked;
		  element.defaultChecked = !!checked;
		  null != name &&
		    "function" !== typeof name &&
		    "symbol" !== typeof name &&
		    "boolean" !== typeof name &&
		    (element.name = name);
		}
		function setDefaultValue(node, type, value) {
		  ("number" === type && getActiveElement(node.ownerDocument) === node) ||
		    node.defaultValue === "" + value ||
		    (node.defaultValue = "" + value);
		}
		function updateOptions(node, multiple, propValue, setDefaultSelected) {
		  node = node.options;
		  if (multiple) {
		    multiple = {};
		    for (var i = 0; i < propValue.length; i++)
		      multiple["$" + propValue[i]] = true;
		    for (propValue = 0; propValue < node.length; propValue++)
		      (i = multiple.hasOwnProperty("$" + node[propValue].value)),
		        node[propValue].selected !== i && (node[propValue].selected = i),
		        i && setDefaultSelected && (node[propValue].defaultSelected = true);
		  } else {
		    propValue = "" + getToStringValue(propValue);
		    multiple = null;
		    for (i = 0; i < node.length; i++) {
		      if (node[i].value === propValue) {
		        node[i].selected = true;
		        setDefaultSelected && (node[i].defaultSelected = true);
		        return;
		      }
		      null !== multiple || node[i].disabled || (multiple = node[i]);
		    }
		    null !== multiple && (multiple.selected = true);
		  }
		}
		function updateTextarea(element, value, defaultValue) {
		  if (
		    null != value &&
		    ((value = "" + getToStringValue(value)),
		    value !== element.value && (element.value = value),
		    null == defaultValue)
		  ) {
		    element.defaultValue !== value && (element.defaultValue = value);
		    return;
		  }
		  element.defaultValue =
		    null != defaultValue ? "" + getToStringValue(defaultValue) : "";
		}
		function initTextarea(element, value, defaultValue, children) {
		  if (null == value) {
		    if (null != children) {
		      if (null != defaultValue) throw Error(formatProdErrorMessage(92));
		      if (isArrayImpl(children)) {
		        if (1 < children.length) throw Error(formatProdErrorMessage(93));
		        children = children[0];
		      }
		      defaultValue = children;
		    }
		    null == defaultValue && (defaultValue = "");
		    value = defaultValue;
		  }
		  defaultValue = getToStringValue(value);
		  element.defaultValue = defaultValue;
		  children = element.textContent;
		  children === defaultValue &&
		    "" !== children &&
		    null !== children &&
		    (element.value = children);
		}
		function setTextContent(node, text) {
		  if (text) {
		    var firstChild = node.firstChild;
		    if (
		      firstChild &&
		      firstChild === node.lastChild &&
		      3 === firstChild.nodeType
		    ) {
		      firstChild.nodeValue = text;
		      return;
		    }
		  }
		  node.textContent = text;
		}
		var unitlessNumbers = new Set(
		  "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
		    " "
		  )
		);
		function setValueForStyle(style, styleName, value) {
		  var isCustomProperty = 0 === styleName.indexOf("--");
		  null == value || "boolean" === typeof value || "" === value
		    ? isCustomProperty
		      ? style.setProperty(styleName, "")
		      : "float" === styleName
		        ? (style.cssFloat = "")
		        : (style[styleName] = "")
		    : isCustomProperty
		      ? style.setProperty(styleName, value)
		      : "number" !== typeof value ||
		          0 === value ||
		          unitlessNumbers.has(styleName)
		        ? "float" === styleName
		          ? (style.cssFloat = value)
		          : (style[styleName] = ("" + value).trim())
		        : (style[styleName] = value + "px");
		}
		function setValueForStyles(node, styles, prevStyles) {
		  if (null != styles && "object" !== typeof styles)
		    throw Error(formatProdErrorMessage(62));
		  node = node.style;
		  if (null != prevStyles) {
		    for (var styleName in prevStyles)
		      !prevStyles.hasOwnProperty(styleName) ||
		        (null != styles && styles.hasOwnProperty(styleName)) ||
		        (0 === styleName.indexOf("--")
		          ? node.setProperty(styleName, "")
		          : "float" === styleName
		            ? (node.cssFloat = "")
		            : (node[styleName] = ""));
		    for (var styleName$16 in styles)
		      (styleName = styles[styleName$16]),
		        styles.hasOwnProperty(styleName$16) &&
		          prevStyles[styleName$16] !== styleName &&
		          setValueForStyle(node, styleName$16, styleName);
		  } else
		    for (var styleName$17 in styles)
		      styles.hasOwnProperty(styleName$17) &&
		        setValueForStyle(node, styleName$17, styles[styleName$17]);
		}
		function isCustomElement(tagName) {
		  if (-1 === tagName.indexOf("-")) return false;
		  switch (tagName) {
		    case "annotation-xml":
		    case "color-profile":
		    case "font-face":
		    case "font-face-src":
		    case "font-face-uri":
		    case "font-face-format":
		    case "font-face-name":
		    case "missing-glyph":
		      return false;
		    default:
		      return true;
		  }
		}
		var aliases = new Map([
		    ["acceptCharset", "accept-charset"],
		    ["htmlFor", "for"],
		    ["httpEquiv", "http-equiv"],
		    ["crossOrigin", "crossorigin"],
		    ["accentHeight", "accent-height"],
		    ["alignmentBaseline", "alignment-baseline"],
		    ["arabicForm", "arabic-form"],
		    ["baselineShift", "baseline-shift"],
		    ["capHeight", "cap-height"],
		    ["clipPath", "clip-path"],
		    ["clipRule", "clip-rule"],
		    ["colorInterpolation", "color-interpolation"],
		    ["colorInterpolationFilters", "color-interpolation-filters"],
		    ["colorProfile", "color-profile"],
		    ["colorRendering", "color-rendering"],
		    ["dominantBaseline", "dominant-baseline"],
		    ["enableBackground", "enable-background"],
		    ["fillOpacity", "fill-opacity"],
		    ["fillRule", "fill-rule"],
		    ["floodColor", "flood-color"],
		    ["floodOpacity", "flood-opacity"],
		    ["fontFamily", "font-family"],
		    ["fontSize", "font-size"],
		    ["fontSizeAdjust", "font-size-adjust"],
		    ["fontStretch", "font-stretch"],
		    ["fontStyle", "font-style"],
		    ["fontVariant", "font-variant"],
		    ["fontWeight", "font-weight"],
		    ["glyphName", "glyph-name"],
		    ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
		    ["glyphOrientationVertical", "glyph-orientation-vertical"],
		    ["horizAdvX", "horiz-adv-x"],
		    ["horizOriginX", "horiz-origin-x"],
		    ["imageRendering", "image-rendering"],
		    ["letterSpacing", "letter-spacing"],
		    ["lightingColor", "lighting-color"],
		    ["markerEnd", "marker-end"],
		    ["markerMid", "marker-mid"],
		    ["markerStart", "marker-start"],
		    ["overlinePosition", "overline-position"],
		    ["overlineThickness", "overline-thickness"],
		    ["paintOrder", "paint-order"],
		    ["panose-1", "panose-1"],
		    ["pointerEvents", "pointer-events"],
		    ["renderingIntent", "rendering-intent"],
		    ["shapeRendering", "shape-rendering"],
		    ["stopColor", "stop-color"],
		    ["stopOpacity", "stop-opacity"],
		    ["strikethroughPosition", "strikethrough-position"],
		    ["strikethroughThickness", "strikethrough-thickness"],
		    ["strokeDasharray", "stroke-dasharray"],
		    ["strokeDashoffset", "stroke-dashoffset"],
		    ["strokeLinecap", "stroke-linecap"],
		    ["strokeLinejoin", "stroke-linejoin"],
		    ["strokeMiterlimit", "stroke-miterlimit"],
		    ["strokeOpacity", "stroke-opacity"],
		    ["strokeWidth", "stroke-width"],
		    ["textAnchor", "text-anchor"],
		    ["textDecoration", "text-decoration"],
		    ["textRendering", "text-rendering"],
		    ["transformOrigin", "transform-origin"],
		    ["underlinePosition", "underline-position"],
		    ["underlineThickness", "underline-thickness"],
		    ["unicodeBidi", "unicode-bidi"],
		    ["unicodeRange", "unicode-range"],
		    ["unitsPerEm", "units-per-em"],
		    ["vAlphabetic", "v-alphabetic"],
		    ["vHanging", "v-hanging"],
		    ["vIdeographic", "v-ideographic"],
		    ["vMathematical", "v-mathematical"],
		    ["vectorEffect", "vector-effect"],
		    ["vertAdvY", "vert-adv-y"],
		    ["vertOriginX", "vert-origin-x"],
		    ["vertOriginY", "vert-origin-y"],
		    ["wordSpacing", "word-spacing"],
		    ["writingMode", "writing-mode"],
		    ["xmlnsXlink", "xmlns:xlink"],
		    ["xHeight", "x-height"]
		  ]),
		  isJavaScriptProtocol =
		    /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;
		function sanitizeURL(url) {
		  return isJavaScriptProtocol.test("" + url)
		    ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')"
		    : url;
		}
		var currentReplayingEvent = null;
		function getEventTarget(nativeEvent) {
		  nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
		  nativeEvent.correspondingUseElement &&
		    (nativeEvent = nativeEvent.correspondingUseElement);
		  return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;
		}
		var restoreTarget = null,
		  restoreQueue = null;
		function restoreStateOfTarget(target) {
		  var internalInstance = getInstanceFromNode(target);
		  if (internalInstance && (target = internalInstance.stateNode)) {
		    var props = target[internalPropsKey] || null;
		    a: switch (((target = internalInstance.stateNode), internalInstance.type)) {
		      case "input":
		        updateInput(
		          target,
		          props.value,
		          props.defaultValue,
		          props.defaultValue,
		          props.checked,
		          props.defaultChecked,
		          props.type,
		          props.name
		        );
		        internalInstance = props.name;
		        if ("radio" === props.type && null != internalInstance) {
		          for (props = target; props.parentNode; ) props = props.parentNode;
		          props = props.querySelectorAll(
		            'input[name="' +
		              escapeSelectorAttributeValueInsideDoubleQuotes(
		                "" + internalInstance
		              ) +
		              '"][type="radio"]'
		          );
		          for (
		            internalInstance = 0;
		            internalInstance < props.length;
		            internalInstance++
		          ) {
		            var otherNode = props[internalInstance];
		            if (otherNode !== target && otherNode.form === target.form) {
		              var otherProps = otherNode[internalPropsKey] || null;
		              if (!otherProps) throw Error(formatProdErrorMessage(90));
		              updateInput(
		                otherNode,
		                otherProps.value,
		                otherProps.defaultValue,
		                otherProps.defaultValue,
		                otherProps.checked,
		                otherProps.defaultChecked,
		                otherProps.type,
		                otherProps.name
		              );
		            }
		          }
		          for (
		            internalInstance = 0;
		            internalInstance < props.length;
		            internalInstance++
		          )
		            (otherNode = props[internalInstance]),
		              otherNode.form === target.form && updateValueIfChanged(otherNode);
		        }
		        break a;
		      case "textarea":
		        updateTextarea(target, props.value, props.defaultValue);
		        break a;
		      case "select":
		        (internalInstance = props.value),
		          null != internalInstance &&
		            updateOptions(target, !!props.multiple, internalInstance, false);
		    }
		  }
		}
		var isInsideEventHandler = false;
		function batchedUpdates$1(fn, a, b) {
		  if (isInsideEventHandler) return fn(a, b);
		  isInsideEventHandler = true;
		  try {
		    var JSCompiler_inline_result = fn(a);
		    return JSCompiler_inline_result;
		  } finally {
		    if (
		      ((isInsideEventHandler = false),
		      null !== restoreTarget || null !== restoreQueue)
		    )
		      if (
		        (flushSyncWork$1(),
		        restoreTarget &&
		          ((a = restoreTarget),
		          (fn = restoreQueue),
		          (restoreQueue = restoreTarget = null),
		          restoreStateOfTarget(a),
		          fn))
		      )
		        for (a = 0; a < fn.length; a++) restoreStateOfTarget(fn[a]);
		  }
		}
		function getListener(inst, registrationName) {
		  var stateNode = inst.stateNode;
		  if (null === stateNode) return null;
		  var props = stateNode[internalPropsKey] || null;
		  if (null === props) return null;
		  stateNode = props[registrationName];
		  a: switch (registrationName) {
		    case "onClick":
		    case "onClickCapture":
		    case "onDoubleClick":
		    case "onDoubleClickCapture":
		    case "onMouseDown":
		    case "onMouseDownCapture":
		    case "onMouseMove":
		    case "onMouseMoveCapture":
		    case "onMouseUp":
		    case "onMouseUpCapture":
		    case "onMouseEnter":
		      (props = !props.disabled) ||
		        ((inst = inst.type),
		        (props = !(
		          "button" === inst ||
		          "input" === inst ||
		          "select" === inst ||
		          "textarea" === inst
		        )));
		      inst = !props;
		      break a;
		    default:
		      inst = false;
		  }
		  if (inst) return null;
		  if (stateNode && "function" !== typeof stateNode)
		    throw Error(
		      formatProdErrorMessage(231, registrationName, typeof stateNode)
		    );
		  return stateNode;
		}
		var canUseDOM = !(
		    "undefined" === typeof window ||
		    "undefined" === typeof window.document ||
		    "undefined" === typeof window.document.createElement
		  ),
		  passiveBrowserEventsSupported = false;
		if (canUseDOM)
		  try {
		    var options = {};
		    Object.defineProperty(options, "passive", {
		      get: function () {
		        passiveBrowserEventsSupported = !0;
		      }
		    });
		    window.addEventListener("test", options, options);
		    window.removeEventListener("test", options, options);
		  } catch (e) {
		    passiveBrowserEventsSupported = false;
		  }
		var root = null,
		  startText = null,
		  fallbackText = null;
		function getData() {
		  if (fallbackText) return fallbackText;
		  var start,
		    startValue = startText,
		    startLength = startValue.length,
		    end,
		    endValue = "value" in root ? root.value : root.textContent,
		    endLength = endValue.length;
		  for (
		    start = 0;
		    start < startLength && startValue[start] === endValue[start];
		    start++
		  );
		  var minEnd = startLength - start;
		  for (
		    end = 1;
		    end <= minEnd &&
		    startValue[startLength - end] === endValue[endLength - end];
		    end++
		  );
		  return (fallbackText = endValue.slice(start, 1 < end ? 1 - end : void 0));
		}
		function getEventCharCode(nativeEvent) {
		  var keyCode = nativeEvent.keyCode;
		  "charCode" in nativeEvent
		    ? ((nativeEvent = nativeEvent.charCode),
		      0 === nativeEvent && 13 === keyCode && (nativeEvent = 13))
		    : (nativeEvent = keyCode);
		  10 === nativeEvent && (nativeEvent = 13);
		  return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;
		}
		function functionThatReturnsTrue() {
		  return true;
		}
		function functionThatReturnsFalse() {
		  return false;
		}
		function createSyntheticEvent(Interface) {
		  function SyntheticBaseEvent(
		    reactName,
		    reactEventType,
		    targetInst,
		    nativeEvent,
		    nativeEventTarget
		  ) {
		    this._reactName = reactName;
		    this._targetInst = targetInst;
		    this.type = reactEventType;
		    this.nativeEvent = nativeEvent;
		    this.target = nativeEventTarget;
		    this.currentTarget = null;
		    for (var propName in Interface)
		      Interface.hasOwnProperty(propName) &&
		        ((reactName = Interface[propName]),
		        (this[propName] = reactName
		          ? reactName(nativeEvent)
		          : nativeEvent[propName]));
		    this.isDefaultPrevented = (
		      null != nativeEvent.defaultPrevented
		        ? nativeEvent.defaultPrevented
		        : false === nativeEvent.returnValue
		    )
		      ? functionThatReturnsTrue
		      : functionThatReturnsFalse;
		    this.isPropagationStopped = functionThatReturnsFalse;
		    return this;
		  }
		  assign(SyntheticBaseEvent.prototype, {
		    preventDefault: function () {
		      this.defaultPrevented = true;
		      var event = this.nativeEvent;
		      event &&
		        (event.preventDefault
		          ? event.preventDefault()
		          : "unknown" !== typeof event.returnValue && (event.returnValue = false),
		        (this.isDefaultPrevented = functionThatReturnsTrue));
		    },
		    stopPropagation: function () {
		      var event = this.nativeEvent;
		      event &&
		        (event.stopPropagation
		          ? event.stopPropagation()
		          : "unknown" !== typeof event.cancelBubble &&
		            (event.cancelBubble = true),
		        (this.isPropagationStopped = functionThatReturnsTrue));
		    },
		    persist: function () {},
		    isPersistent: functionThatReturnsTrue
		  });
		  return SyntheticBaseEvent;
		}
		var EventInterface = {
		    eventPhase: 0,
		    bubbles: 0,
		    cancelable: 0,
		    timeStamp: function (event) {
		      return event.timeStamp || Date.now();
		    },
		    defaultPrevented: 0,
		    isTrusted: 0
		  },
		  SyntheticEvent = createSyntheticEvent(EventInterface),
		  UIEventInterface = assign({}, EventInterface, { view: 0, detail: 0 }),
		  SyntheticUIEvent = createSyntheticEvent(UIEventInterface),
		  lastMovementX,
		  lastMovementY,
		  lastMouseEvent,
		  MouseEventInterface = assign({}, UIEventInterface, {
		    screenX: 0,
		    screenY: 0,
		    clientX: 0,
		    clientY: 0,
		    pageX: 0,
		    pageY: 0,
		    ctrlKey: 0,
		    shiftKey: 0,
		    altKey: 0,
		    metaKey: 0,
		    getModifierState: getEventModifierState,
		    button: 0,
		    buttons: 0,
		    relatedTarget: function (event) {
		      return void 0 === event.relatedTarget
		        ? event.fromElement === event.srcElement
		          ? event.toElement
		          : event.fromElement
		        : event.relatedTarget;
		    },
		    movementX: function (event) {
		      if ("movementX" in event) return event.movementX;
		      event !== lastMouseEvent &&
		        (lastMouseEvent && "mousemove" === event.type
		          ? ((lastMovementX = event.screenX - lastMouseEvent.screenX),
		            (lastMovementY = event.screenY - lastMouseEvent.screenY))
		          : (lastMovementY = lastMovementX = 0),
		        (lastMouseEvent = event));
		      return lastMovementX;
		    },
		    movementY: function (event) {
		      return "movementY" in event ? event.movementY : lastMovementY;
		    }
		  }),
		  SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface),
		  DragEventInterface = assign({}, MouseEventInterface, { dataTransfer: 0 }),
		  SyntheticDragEvent = createSyntheticEvent(DragEventInterface),
		  FocusEventInterface = assign({}, UIEventInterface, { relatedTarget: 0 }),
		  SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface),
		  AnimationEventInterface = assign({}, EventInterface, {
		    animationName: 0,
		    elapsedTime: 0,
		    pseudoElement: 0
		  }),
		  SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface),
		  ClipboardEventInterface = assign({}, EventInterface, {
		    clipboardData: function (event) {
		      return "clipboardData" in event
		        ? event.clipboardData
		        : window.clipboardData;
		    }
		  }),
		  SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface),
		  CompositionEventInterface = assign({}, EventInterface, { data: 0 }),
		  SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface),
		  normalizeKey = {
		    Esc: "Escape",
		    Spacebar: " ",
		    Left: "ArrowLeft",
		    Up: "ArrowUp",
		    Right: "ArrowRight",
		    Down: "ArrowDown",
		    Del: "Delete",
		    Win: "OS",
		    Menu: "ContextMenu",
		    Apps: "ContextMenu",
		    Scroll: "ScrollLock",
		    MozPrintableKey: "Unidentified"
		  },
		  translateToKey = {
		    8: "Backspace",
		    9: "Tab",
		    12: "Clear",
		    13: "Enter",
		    16: "Shift",
		    17: "Control",
		    18: "Alt",
		    19: "Pause",
		    20: "CapsLock",
		    27: "Escape",
		    32: " ",
		    33: "PageUp",
		    34: "PageDown",
		    35: "End",
		    36: "Home",
		    37: "ArrowLeft",
		    38: "ArrowUp",
		    39: "ArrowRight",
		    40: "ArrowDown",
		    45: "Insert",
		    46: "Delete",
		    112: "F1",
		    113: "F2",
		    114: "F3",
		    115: "F4",
		    116: "F5",
		    117: "F6",
		    118: "F7",
		    119: "F8",
		    120: "F9",
		    121: "F10",
		    122: "F11",
		    123: "F12",
		    144: "NumLock",
		    145: "ScrollLock",
		    224: "Meta"
		  },
		  modifierKeyToProp = {
		    Alt: "altKey",
		    Control: "ctrlKey",
		    Meta: "metaKey",
		    Shift: "shiftKey"
		  };
		function modifierStateGetter(keyArg) {
		  var nativeEvent = this.nativeEvent;
		  return nativeEvent.getModifierState
		    ? nativeEvent.getModifierState(keyArg)
		    : (keyArg = modifierKeyToProp[keyArg])
		      ? !!nativeEvent[keyArg]
		      : false;
		}
		function getEventModifierState() {
		  return modifierStateGetter;
		}
		var KeyboardEventInterface = assign({}, UIEventInterface, {
		    key: function (nativeEvent) {
		      if (nativeEvent.key) {
		        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
		        if ("Unidentified" !== key) return key;
		      }
		      return "keypress" === nativeEvent.type
		        ? ((nativeEvent = getEventCharCode(nativeEvent)),
		          13 === nativeEvent ? "Enter" : String.fromCharCode(nativeEvent))
		        : "keydown" === nativeEvent.type || "keyup" === nativeEvent.type
		          ? translateToKey[nativeEvent.keyCode] || "Unidentified"
		          : "";
		    },
		    code: 0,
		    location: 0,
		    ctrlKey: 0,
		    shiftKey: 0,
		    altKey: 0,
		    metaKey: 0,
		    repeat: 0,
		    locale: 0,
		    getModifierState: getEventModifierState,
		    charCode: function (event) {
		      return "keypress" === event.type ? getEventCharCode(event) : 0;
		    },
		    keyCode: function (event) {
		      return "keydown" === event.type || "keyup" === event.type
		        ? event.keyCode
		        : 0;
		    },
		    which: function (event) {
		      return "keypress" === event.type
		        ? getEventCharCode(event)
		        : "keydown" === event.type || "keyup" === event.type
		          ? event.keyCode
		          : 0;
		    }
		  }),
		  SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface),
		  PointerEventInterface = assign({}, MouseEventInterface, {
		    pointerId: 0,
		    width: 0,
		    height: 0,
		    pressure: 0,
		    tangentialPressure: 0,
		    tiltX: 0,
		    tiltY: 0,
		    twist: 0,
		    pointerType: 0,
		    isPrimary: 0
		  }),
		  SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface),
		  TouchEventInterface = assign({}, UIEventInterface, {
		    touches: 0,
		    targetTouches: 0,
		    changedTouches: 0,
		    altKey: 0,
		    metaKey: 0,
		    ctrlKey: 0,
		    shiftKey: 0,
		    getModifierState: getEventModifierState
		  }),
		  SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface),
		  TransitionEventInterface = assign({}, EventInterface, {
		    propertyName: 0,
		    elapsedTime: 0,
		    pseudoElement: 0
		  }),
		  SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface),
		  WheelEventInterface = assign({}, MouseEventInterface, {
		    deltaX: function (event) {
		      return "deltaX" in event
		        ? event.deltaX
		        : "wheelDeltaX" in event
		          ? -event.wheelDeltaX
		          : 0;
		    },
		    deltaY: function (event) {
		      return "deltaY" in event
		        ? event.deltaY
		        : "wheelDeltaY" in event
		          ? -event.wheelDeltaY
		          : "wheelDelta" in event
		            ? -event.wheelDelta
		            : 0;
		    },
		    deltaZ: 0,
		    deltaMode: 0
		  }),
		  SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface),
		  ToggleEventInterface = assign({}, EventInterface, {
		    newState: 0,
		    oldState: 0
		  }),
		  SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface),
		  END_KEYCODES = [9, 13, 27, 32],
		  canUseCompositionEvent = canUseDOM && "CompositionEvent" in window,
		  documentMode = null;
		canUseDOM &&
		  "documentMode" in document &&
		  (documentMode = document.documentMode);
		var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode,
		  useFallbackCompositionData =
		    canUseDOM &&
		    (!canUseCompositionEvent ||
		      (documentMode && 8 < documentMode && 11 >= documentMode)),
		  SPACEBAR_CHAR = String.fromCharCode(32),
		  hasSpaceKeypress = false;
		function isFallbackCompositionEnd(domEventName, nativeEvent) {
		  switch (domEventName) {
		    case "keyup":
		      return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);
		    case "keydown":
		      return 229 !== nativeEvent.keyCode;
		    case "keypress":
		    case "mousedown":
		    case "focusout":
		      return true;
		    default:
		      return false;
		  }
		}
		function getDataFromCustomEvent(nativeEvent) {
		  nativeEvent = nativeEvent.detail;
		  return "object" === typeof nativeEvent && "data" in nativeEvent
		    ? nativeEvent.data
		    : null;
		}
		var isComposing = false;
		function getNativeBeforeInputChars(domEventName, nativeEvent) {
		  switch (domEventName) {
		    case "compositionend":
		      return getDataFromCustomEvent(nativeEvent);
		    case "keypress":
		      if (32 !== nativeEvent.which) return null;
		      hasSpaceKeypress = true;
		      return SPACEBAR_CHAR;
		    case "textInput":
		      return (
		        (domEventName = nativeEvent.data),
		        domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName
		      );
		    default:
		      return null;
		  }
		}
		function getFallbackBeforeInputChars(domEventName, nativeEvent) {
		  if (isComposing)
		    return "compositionend" === domEventName ||
		      (!canUseCompositionEvent &&
		        isFallbackCompositionEnd(domEventName, nativeEvent))
		      ? ((domEventName = getData()),
		        (fallbackText = startText = root = null),
		        (isComposing = false),
		        domEventName)
		      : null;
		  switch (domEventName) {
		    case "paste":
		      return null;
		    case "keypress":
		      if (
		        !(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) ||
		        (nativeEvent.ctrlKey && nativeEvent.altKey)
		      ) {
		        if (nativeEvent.char && 1 < nativeEvent.char.length)
		          return nativeEvent.char;
		        if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
		      }
		      return null;
		    case "compositionend":
		      return useFallbackCompositionData && "ko" !== nativeEvent.locale
		        ? null
		        : nativeEvent.data;
		    default:
		      return null;
		  }
		}
		var supportedInputTypes = {
		  color: true,
		  date: true,
		  datetime: true,
		  "datetime-local": true,
		  email: true,
		  month: true,
		  number: true,
		  password: true,
		  range: true,
		  search: true,
		  tel: true,
		  text: true,
		  time: true,
		  url: true,
		  week: true
		};
		function isTextInputElement(elem) {
		  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
		  return "input" === nodeName
		    ? !!supportedInputTypes[elem.type]
		    : "textarea" === nodeName
		      ? true
		      : false;
		}
		function createAndAccumulateChangeEvent(
		  dispatchQueue,
		  inst,
		  nativeEvent,
		  target
		) {
		  restoreTarget
		    ? restoreQueue
		      ? restoreQueue.push(target)
		      : (restoreQueue = [target])
		    : (restoreTarget = target);
		  inst = accumulateTwoPhaseListeners(inst, "onChange");
		  0 < inst.length &&
		    ((nativeEvent = new SyntheticEvent(
		      "onChange",
		      "change",
		      null,
		      nativeEvent,
		      target
		    )),
		    dispatchQueue.push({ event: nativeEvent, listeners: inst }));
		}
		var activeElement$1 = null,
		  activeElementInst$1 = null;
		function runEventInBatch(dispatchQueue) {
		  processDispatchQueue(dispatchQueue, 0);
		}
		function getInstIfValueChanged(targetInst) {
		  var targetNode = getNodeFromInstance(targetInst);
		  if (updateValueIfChanged(targetNode)) return targetInst;
		}
		function getTargetInstForChangeEvent(domEventName, targetInst) {
		  if ("change" === domEventName) return targetInst;
		}
		var isInputEventSupported = false;
		if (canUseDOM) {
		  var JSCompiler_inline_result$jscomp$282;
		  if (canUseDOM) {
		    var isSupported$jscomp$inline_417 = "oninput" in document;
		    if (!isSupported$jscomp$inline_417) {
		      var element$jscomp$inline_418 = document.createElement("div");
		      element$jscomp$inline_418.setAttribute("oninput", "return;");
		      isSupported$jscomp$inline_417 =
		        "function" === typeof element$jscomp$inline_418.oninput;
		    }
		    JSCompiler_inline_result$jscomp$282 = isSupported$jscomp$inline_417;
		  } else JSCompiler_inline_result$jscomp$282 = false;
		  isInputEventSupported =
		    JSCompiler_inline_result$jscomp$282 &&
		    (!document.documentMode || 9 < document.documentMode);
		}
		function stopWatchingForValueChange() {
		  activeElement$1 &&
		    (activeElement$1.detachEvent("onpropertychange", handlePropertyChange),
		    (activeElementInst$1 = activeElement$1 = null));
		}
		function handlePropertyChange(nativeEvent) {
		  if (
		    "value" === nativeEvent.propertyName &&
		    getInstIfValueChanged(activeElementInst$1)
		  ) {
		    var dispatchQueue = [];
		    createAndAccumulateChangeEvent(
		      dispatchQueue,
		      activeElementInst$1,
		      nativeEvent,
		      getEventTarget(nativeEvent)
		    );
		    batchedUpdates$1(runEventInBatch, dispatchQueue);
		  }
		}
		function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
		  "focusin" === domEventName
		    ? (stopWatchingForValueChange(),
		      (activeElement$1 = target),
		      (activeElementInst$1 = targetInst),
		      activeElement$1.attachEvent("onpropertychange", handlePropertyChange))
		    : "focusout" === domEventName && stopWatchingForValueChange();
		}
		function getTargetInstForInputEventPolyfill(domEventName) {
		  if (
		    "selectionchange" === domEventName ||
		    "keyup" === domEventName ||
		    "keydown" === domEventName
		  )
		    return getInstIfValueChanged(activeElementInst$1);
		}
		function getTargetInstForClickEvent(domEventName, targetInst) {
		  if ("click" === domEventName) return getInstIfValueChanged(targetInst);
		}
		function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
		  if ("input" === domEventName || "change" === domEventName)
		    return getInstIfValueChanged(targetInst);
		}
		function is(x, y) {
		  return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);
		}
		var objectIs = "function" === typeof Object.is ? Object.is : is;
		function shallowEqual(objA, objB) {
		  if (objectIs(objA, objB)) return true;
		  if (
		    "object" !== typeof objA ||
		    null === objA ||
		    "object" !== typeof objB ||
		    null === objB
		  )
		    return false;
		  var keysA = Object.keys(objA),
		    keysB = Object.keys(objB);
		  if (keysA.length !== keysB.length) return false;
		  for (keysB = 0; keysB < keysA.length; keysB++) {
		    var currentKey = keysA[keysB];
		    if (
		      !hasOwnProperty.call(objB, currentKey) ||
		      !objectIs(objA[currentKey], objB[currentKey])
		    )
		      return false;
		  }
		  return true;
		}
		function getLeafNode(node) {
		  for (; node && node.firstChild; ) node = node.firstChild;
		  return node;
		}
		function getNodeForCharacterOffset(root, offset) {
		  var node = getLeafNode(root);
		  root = 0;
		  for (var nodeEnd; node; ) {
		    if (3 === node.nodeType) {
		      nodeEnd = root + node.textContent.length;
		      if (root <= offset && nodeEnd >= offset)
		        return { node: node, offset: offset - root };
		      root = nodeEnd;
		    }
		    a: {
		      for (; node; ) {
		        if (node.nextSibling) {
		          node = node.nextSibling;
		          break a;
		        }
		        node = node.parentNode;
		      }
		      node = void 0;
		    }
		    node = getLeafNode(node);
		  }
		}
		function containsNode(outerNode, innerNode) {
		  return outerNode && innerNode
		    ? outerNode === innerNode
		      ? true
		      : outerNode && 3 === outerNode.nodeType
		        ? false
		        : innerNode && 3 === innerNode.nodeType
		          ? containsNode(outerNode, innerNode.parentNode)
		          : "contains" in outerNode
		            ? outerNode.contains(innerNode)
		            : outerNode.compareDocumentPosition
		              ? !!(outerNode.compareDocumentPosition(innerNode) & 16)
		              : false
		    : false;
		}
		function getActiveElementDeep(containerInfo) {
		  containerInfo =
		    null != containerInfo &&
		    null != containerInfo.ownerDocument &&
		    null != containerInfo.ownerDocument.defaultView
		      ? containerInfo.ownerDocument.defaultView
		      : window;
		  for (
		    var element = getActiveElement(containerInfo.document);
		    element instanceof containerInfo.HTMLIFrameElement;

		  ) {
		    try {
		      var JSCompiler_inline_result =
		        "string" === typeof element.contentWindow.location.href;
		    } catch (err) {
		      JSCompiler_inline_result = false;
		    }
		    if (JSCompiler_inline_result) containerInfo = element.contentWindow;
		    else break;
		    element = getActiveElement(containerInfo.document);
		  }
		  return element;
		}
		function hasSelectionCapabilities(elem) {
		  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
		  return (
		    nodeName &&
		    (("input" === nodeName &&
		      ("text" === elem.type ||
		        "search" === elem.type ||
		        "tel" === elem.type ||
		        "url" === elem.type ||
		        "password" === elem.type)) ||
		      "textarea" === nodeName ||
		      "true" === elem.contentEditable)
		  );
		}
		var skipSelectionChangeEvent =
		    canUseDOM && "documentMode" in document && 11 >= document.documentMode,
		  activeElement = null,
		  activeElementInst = null,
		  lastSelection = null,
		  mouseDown = false;
		function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
		  var doc =
		    nativeEventTarget.window === nativeEventTarget
		      ? nativeEventTarget.document
		      : 9 === nativeEventTarget.nodeType
		        ? nativeEventTarget
		        : nativeEventTarget.ownerDocument;
		  mouseDown ||
		    null == activeElement ||
		    activeElement !== getActiveElement(doc) ||
		    ((doc = activeElement),
		    "selectionStart" in doc && hasSelectionCapabilities(doc)
		      ? (doc = { start: doc.selectionStart, end: doc.selectionEnd })
		      : ((doc = (
		          (doc.ownerDocument && doc.ownerDocument.defaultView) ||
		          window
		        ).getSelection()),
		        (doc = {
		          anchorNode: doc.anchorNode,
		          anchorOffset: doc.anchorOffset,
		          focusNode: doc.focusNode,
		          focusOffset: doc.focusOffset
		        })),
		    (lastSelection && shallowEqual(lastSelection, doc)) ||
		      ((lastSelection = doc),
		      (doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect")),
		      0 < doc.length &&
		        ((nativeEvent = new SyntheticEvent(
		          "onSelect",
		          "select",
		          null,
		          nativeEvent,
		          nativeEventTarget
		        )),
		        dispatchQueue.push({ event: nativeEvent, listeners: doc }),
		        (nativeEvent.target = activeElement))));
		}
		function makePrefixMap(styleProp, eventName) {
		  var prefixes = {};
		  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
		  prefixes["Webkit" + styleProp] = "webkit" + eventName;
		  prefixes["Moz" + styleProp] = "moz" + eventName;
		  return prefixes;
		}
		var vendorPrefixes = {
		    animationend: makePrefixMap("Animation", "AnimationEnd"),
		    animationiteration: makePrefixMap("Animation", "AnimationIteration"),
		    animationstart: makePrefixMap("Animation", "AnimationStart"),
		    transitionrun: makePrefixMap("Transition", "TransitionRun"),
		    transitionstart: makePrefixMap("Transition", "TransitionStart"),
		    transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
		    transitionend: makePrefixMap("Transition", "TransitionEnd")
		  },
		  prefixedEventNames = {},
		  style = {};
		canUseDOM &&
		  ((style = document.createElement("div").style),
		  "AnimationEvent" in window ||
		    (delete vendorPrefixes.animationend.animation,
		    delete vendorPrefixes.animationiteration.animation,
		    delete vendorPrefixes.animationstart.animation),
		  "TransitionEvent" in window ||
		    delete vendorPrefixes.transitionend.transition);
		function getVendorPrefixedEventName(eventName) {
		  if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
		  if (!vendorPrefixes[eventName]) return eventName;
		  var prefixMap = vendorPrefixes[eventName],
		    styleProp;
		  for (styleProp in prefixMap)
		    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
		      return (prefixedEventNames[eventName] = prefixMap[styleProp]);
		  return eventName;
		}
		var ANIMATION_END = getVendorPrefixedEventName("animationend"),
		  ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"),
		  ANIMATION_START = getVendorPrefixedEventName("animationstart"),
		  TRANSITION_RUN = getVendorPrefixedEventName("transitionrun"),
		  TRANSITION_START = getVendorPrefixedEventName("transitionstart"),
		  TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel"),
		  TRANSITION_END = getVendorPrefixedEventName("transitionend"),
		  topLevelEventsToReactNames = new Map(),
		  simpleEventPluginEvents =
		    "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
		      " "
		    );
		simpleEventPluginEvents.push("scrollEnd");
		function registerSimpleEvent(domEventName, reactName) {
		  topLevelEventsToReactNames.set(domEventName, reactName);
		  registerTwoPhaseEvent(reactName, [domEventName]);
		}
		var CapturedStacks = new WeakMap();
		function createCapturedValueAtFiber(value, source) {
		  if ("object" === typeof value && null !== value) {
		    var existing = CapturedStacks.get(value);
		    if (void 0 !== existing) return existing;
		    source = {
		      value: value,
		      source: source,
		      stack: getStackByFiberInDevAndProd(source)
		    };
		    CapturedStacks.set(value, source);
		    return source;
		  }
		  return {
		    value: value,
		    source: source,
		    stack: getStackByFiberInDevAndProd(source)
		  };
		}
		var concurrentQueues = [],
		  concurrentQueuesIndex = 0,
		  concurrentlyUpdatedLanes = 0;
		function finishQueueingConcurrentUpdates() {
		  for (
		    var endIndex = concurrentQueuesIndex,
		      i = (concurrentlyUpdatedLanes = concurrentQueuesIndex = 0);
		    i < endIndex;

		  ) {
		    var fiber = concurrentQueues[i];
		    concurrentQueues[i++] = null;
		    var queue = concurrentQueues[i];
		    concurrentQueues[i++] = null;
		    var update = concurrentQueues[i];
		    concurrentQueues[i++] = null;
		    var lane = concurrentQueues[i];
		    concurrentQueues[i++] = null;
		    if (null !== queue && null !== update) {
		      var pending = queue.pending;
		      null === pending
		        ? (update.next = update)
		        : ((update.next = pending.next), (pending.next = update));
		      queue.pending = update;
		    }
		    0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
		  }
		}
		function enqueueUpdate$1(fiber, queue, update, lane) {
		  concurrentQueues[concurrentQueuesIndex++] = fiber;
		  concurrentQueues[concurrentQueuesIndex++] = queue;
		  concurrentQueues[concurrentQueuesIndex++] = update;
		  concurrentQueues[concurrentQueuesIndex++] = lane;
		  concurrentlyUpdatedLanes |= lane;
		  fiber.lanes |= lane;
		  fiber = fiber.alternate;
		  null !== fiber && (fiber.lanes |= lane);
		}
		function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
		  enqueueUpdate$1(fiber, queue, update, lane);
		  return getRootForUpdatedFiber(fiber);
		}
		function enqueueConcurrentRenderForLane(fiber, lane) {
		  enqueueUpdate$1(fiber, null, null, lane);
		  return getRootForUpdatedFiber(fiber);
		}
		function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
		  sourceFiber.lanes |= lane;
		  var alternate = sourceFiber.alternate;
		  null !== alternate && (alternate.lanes |= lane);
		  for (var isHidden = false, parent = sourceFiber.return; null !== parent; )
		    (parent.childLanes |= lane),
		      (alternate = parent.alternate),
		      null !== alternate && (alternate.childLanes |= lane),
		      22 === parent.tag &&
		        ((sourceFiber = parent.stateNode),
		        null === sourceFiber || sourceFiber._visibility & 1 || (isHidden = true)),
		      (sourceFiber = parent),
		      (parent = parent.return);
		  return 3 === sourceFiber.tag
		    ? ((parent = sourceFiber.stateNode),
		      isHidden &&
		        null !== update &&
		        ((isHidden = 31 - clz32(lane)),
		        (sourceFiber = parent.hiddenUpdates),
		        (alternate = sourceFiber[isHidden]),
		        null === alternate
		          ? (sourceFiber[isHidden] = [update])
		          : alternate.push(update),
		        (update.lane = lane | 536870912)),
		      parent)
		    : null;
		}
		function getRootForUpdatedFiber(sourceFiber) {
		  if (50 < nestedUpdateCount)
		    throw (
		      ((nestedUpdateCount = 0),
		      (rootWithNestedUpdates = null),
		      Error(formatProdErrorMessage(185)))
		    );
		  for (var parent = sourceFiber.return; null !== parent; )
		    (sourceFiber = parent), (parent = sourceFiber.return);
		  return 3 === sourceFiber.tag ? sourceFiber.stateNode : null;
		}
		var emptyContextObject = {};
		function FiberNode(tag, pendingProps, key, mode) {
		  this.tag = tag;
		  this.key = key;
		  this.sibling =
		    this.child =
		    this.return =
		    this.stateNode =
		    this.type =
		    this.elementType =
		      null;
		  this.index = 0;
		  this.refCleanup = this.ref = null;
		  this.pendingProps = pendingProps;
		  this.dependencies =
		    this.memoizedState =
		    this.updateQueue =
		    this.memoizedProps =
		      null;
		  this.mode = mode;
		  this.subtreeFlags = this.flags = 0;
		  this.deletions = null;
		  this.childLanes = this.lanes = 0;
		  this.alternate = null;
		}
		function createFiberImplClass(tag, pendingProps, key, mode) {
		  return new FiberNode(tag, pendingProps, key, mode);
		}
		function shouldConstruct(Component) {
		  Component = Component.prototype;
		  return !(!Component || !Component.isReactComponent);
		}
		function createWorkInProgress(current, pendingProps) {
		  var workInProgress = current.alternate;
		  null === workInProgress
		    ? ((workInProgress = createFiberImplClass(
		        current.tag,
		        pendingProps,
		        current.key,
		        current.mode
		      )),
		      (workInProgress.elementType = current.elementType),
		      (workInProgress.type = current.type),
		      (workInProgress.stateNode = current.stateNode),
		      (workInProgress.alternate = current),
		      (current.alternate = workInProgress))
		    : ((workInProgress.pendingProps = pendingProps),
		      (workInProgress.type = current.type),
		      (workInProgress.flags = 0),
		      (workInProgress.subtreeFlags = 0),
		      (workInProgress.deletions = null));
		  workInProgress.flags = current.flags & 65011712;
		  workInProgress.childLanes = current.childLanes;
		  workInProgress.lanes = current.lanes;
		  workInProgress.child = current.child;
		  workInProgress.memoizedProps = current.memoizedProps;
		  workInProgress.memoizedState = current.memoizedState;
		  workInProgress.updateQueue = current.updateQueue;
		  pendingProps = current.dependencies;
		  workInProgress.dependencies =
		    null === pendingProps
		      ? null
		      : { lanes: pendingProps.lanes, firstContext: pendingProps.firstContext };
		  workInProgress.sibling = current.sibling;
		  workInProgress.index = current.index;
		  workInProgress.ref = current.ref;
		  workInProgress.refCleanup = current.refCleanup;
		  return workInProgress;
		}
		function resetWorkInProgress(workInProgress, renderLanes) {
		  workInProgress.flags &= 65011714;
		  var current = workInProgress.alternate;
		  null === current
		    ? ((workInProgress.childLanes = 0),
		      (workInProgress.lanes = renderLanes),
		      (workInProgress.child = null),
		      (workInProgress.subtreeFlags = 0),
		      (workInProgress.memoizedProps = null),
		      (workInProgress.memoizedState = null),
		      (workInProgress.updateQueue = null),
		      (workInProgress.dependencies = null),
		      (workInProgress.stateNode = null))
		    : ((workInProgress.childLanes = current.childLanes),
		      (workInProgress.lanes = current.lanes),
		      (workInProgress.child = current.child),
		      (workInProgress.subtreeFlags = 0),
		      (workInProgress.deletions = null),
		      (workInProgress.memoizedProps = current.memoizedProps),
		      (workInProgress.memoizedState = current.memoizedState),
		      (workInProgress.updateQueue = current.updateQueue),
		      (workInProgress.type = current.type),
		      (renderLanes = current.dependencies),
		      (workInProgress.dependencies =
		        null === renderLanes
		          ? null
		          : {
		              lanes: renderLanes.lanes,
		              firstContext: renderLanes.firstContext
		            }));
		  return workInProgress;
		}
		function createFiberFromTypeAndProps(
		  type,
		  key,
		  pendingProps,
		  owner,
		  mode,
		  lanes
		) {
		  var fiberTag = 0;
		  owner = type;
		  if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);
		  else if ("string" === typeof type)
		    fiberTag = isHostHoistableType(
		      type,
		      pendingProps,
		      contextStackCursor.current
		    )
		      ? 26
		      : "html" === type || "head" === type || "body" === type
		        ? 27
		        : 5;
		  else
		    a: switch (type) {
		      case REACT_ACTIVITY_TYPE:
		        return (
		          (type = createFiberImplClass(31, pendingProps, key, mode)),
		          (type.elementType = REACT_ACTIVITY_TYPE),
		          (type.lanes = lanes),
		          type
		        );
		      case REACT_FRAGMENT_TYPE:
		        return createFiberFromFragment(pendingProps.children, mode, lanes, key);
		      case REACT_STRICT_MODE_TYPE:
		        fiberTag = 8;
		        mode |= 24;
		        break;
		      case REACT_PROFILER_TYPE:
		        return (
		          (type = createFiberImplClass(12, pendingProps, key, mode | 2)),
		          (type.elementType = REACT_PROFILER_TYPE),
		          (type.lanes = lanes),
		          type
		        );
		      case REACT_SUSPENSE_TYPE:
		        return (
		          (type = createFiberImplClass(13, pendingProps, key, mode)),
		          (type.elementType = REACT_SUSPENSE_TYPE),
		          (type.lanes = lanes),
		          type
		        );
		      case REACT_SUSPENSE_LIST_TYPE:
		        return (
		          (type = createFiberImplClass(19, pendingProps, key, mode)),
		          (type.elementType = REACT_SUSPENSE_LIST_TYPE),
		          (type.lanes = lanes),
		          type
		        );
		      default:
		        if ("object" === typeof type && null !== type)
		          switch (type.$$typeof) {
		            case REACT_PROVIDER_TYPE:
		            case REACT_CONTEXT_TYPE:
		              fiberTag = 10;
		              break a;
		            case REACT_CONSUMER_TYPE:
		              fiberTag = 9;
		              break a;
		            case REACT_FORWARD_REF_TYPE:
		              fiberTag = 11;
		              break a;
		            case REACT_MEMO_TYPE:
		              fiberTag = 14;
		              break a;
		            case REACT_LAZY_TYPE:
		              fiberTag = 16;
		              owner = null;
		              break a;
		          }
		        fiberTag = 29;
		        pendingProps = Error(
		          formatProdErrorMessage(130, null === type ? "null" : typeof type, "")
		        );
		        owner = null;
		    }
		  key = createFiberImplClass(fiberTag, pendingProps, key, mode);
		  key.elementType = type;
		  key.type = owner;
		  key.lanes = lanes;
		  return key;
		}
		function createFiberFromFragment(elements, mode, lanes, key) {
		  elements = createFiberImplClass(7, elements, key, mode);
		  elements.lanes = lanes;
		  return elements;
		}
		function createFiberFromText(content, mode, lanes) {
		  content = createFiberImplClass(6, content, null, mode);
		  content.lanes = lanes;
		  return content;
		}
		function createFiberFromPortal(portal, mode, lanes) {
		  mode = createFiberImplClass(
		    4,
		    null !== portal.children ? portal.children : [],
		    portal.key,
		    mode
		  );
		  mode.lanes = lanes;
		  mode.stateNode = {
		    containerInfo: portal.containerInfo,
		    pendingChildren: null,
		    implementation: portal.implementation
		  };
		  return mode;
		}
		var forkStack = [],
		  forkStackIndex = 0,
		  treeForkProvider = null,
		  treeForkCount = 0,
		  idStack = [],
		  idStackIndex = 0,
		  treeContextProvider = null,
		  treeContextId = 1,
		  treeContextOverflow = "";
		function pushTreeFork(workInProgress, totalChildren) {
		  forkStack[forkStackIndex++] = treeForkCount;
		  forkStack[forkStackIndex++] = treeForkProvider;
		  treeForkProvider = workInProgress;
		  treeForkCount = totalChildren;
		}
		function pushTreeId(workInProgress, totalChildren, index) {
		  idStack[idStackIndex++] = treeContextId;
		  idStack[idStackIndex++] = treeContextOverflow;
		  idStack[idStackIndex++] = treeContextProvider;
		  treeContextProvider = workInProgress;
		  var baseIdWithLeadingBit = treeContextId;
		  workInProgress = treeContextOverflow;
		  var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
		  baseIdWithLeadingBit &= ~(1 << baseLength);
		  index += 1;
		  var length = 32 - clz32(totalChildren) + baseLength;
		  if (30 < length) {
		    var numberOfOverflowBits = baseLength - (baseLength % 5);
		    length = (
		      baseIdWithLeadingBit &
		      ((1 << numberOfOverflowBits) - 1)
		    ).toString(32);
		    baseIdWithLeadingBit >>= numberOfOverflowBits;
		    baseLength -= numberOfOverflowBits;
		    treeContextId =
		      (1 << (32 - clz32(totalChildren) + baseLength)) |
		      (index << baseLength) |
		      baseIdWithLeadingBit;
		    treeContextOverflow = length + workInProgress;
		  } else
		    (treeContextId =
		      (1 << length) | (index << baseLength) | baseIdWithLeadingBit),
		      (treeContextOverflow = workInProgress);
		}
		function pushMaterializedTreeId(workInProgress) {
		  null !== workInProgress.return &&
		    (pushTreeFork(workInProgress, 1), pushTreeId(workInProgress, 1, 0));
		}
		function popTreeContext(workInProgress) {
		  for (; workInProgress === treeForkProvider; )
		    (treeForkProvider = forkStack[--forkStackIndex]),
		      (forkStack[forkStackIndex] = null),
		      (treeForkCount = forkStack[--forkStackIndex]),
		      (forkStack[forkStackIndex] = null);
		  for (; workInProgress === treeContextProvider; )
		    (treeContextProvider = idStack[--idStackIndex]),
		      (idStack[idStackIndex] = null),
		      (treeContextOverflow = idStack[--idStackIndex]),
		      (idStack[idStackIndex] = null),
		      (treeContextId = idStack[--idStackIndex]),
		      (idStack[idStackIndex] = null);
		}
		var hydrationParentFiber = null,
		  nextHydratableInstance = null,
		  isHydrating = false,
		  hydrationErrors = null,
		  rootOrSingletonContext = false,
		  HydrationMismatchException = Error(formatProdErrorMessage(519));
		function throwOnHydrationMismatch(fiber) {
		  var error = Error(formatProdErrorMessage(418, ""));
		  queueHydrationError(createCapturedValueAtFiber(error, fiber));
		  throw HydrationMismatchException;
		}
		function prepareToHydrateHostInstance(fiber) {
		  var instance = fiber.stateNode,
		    type = fiber.type,
		    props = fiber.memoizedProps;
		  instance[internalInstanceKey] = fiber;
		  instance[internalPropsKey] = props;
		  switch (type) {
		    case "dialog":
		      listenToNonDelegatedEvent("cancel", instance);
		      listenToNonDelegatedEvent("close", instance);
		      break;
		    case "iframe":
		    case "object":
		    case "embed":
		      listenToNonDelegatedEvent("load", instance);
		      break;
		    case "video":
		    case "audio":
		      for (type = 0; type < mediaEventTypes.length; type++)
		        listenToNonDelegatedEvent(mediaEventTypes[type], instance);
		      break;
		    case "source":
		      listenToNonDelegatedEvent("error", instance);
		      break;
		    case "img":
		    case "image":
		    case "link":
		      listenToNonDelegatedEvent("error", instance);
		      listenToNonDelegatedEvent("load", instance);
		      break;
		    case "details":
		      listenToNonDelegatedEvent("toggle", instance);
		      break;
		    case "input":
		      listenToNonDelegatedEvent("invalid", instance);
		      initInput(
		        instance,
		        props.value,
		        props.defaultValue,
		        props.checked,
		        props.defaultChecked,
		        props.type,
		        props.name,
		        true
		      );
		      track(instance);
		      break;
		    case "select":
		      listenToNonDelegatedEvent("invalid", instance);
		      break;
		    case "textarea":
		      listenToNonDelegatedEvent("invalid", instance),
		        initTextarea(instance, props.value, props.defaultValue, props.children),
		        track(instance);
		  }
		  type = props.children;
		  ("string" !== typeof type &&
		    "number" !== typeof type &&
		    "bigint" !== typeof type) ||
		  instance.textContent === "" + type ||
		  true === props.suppressHydrationWarning ||
		  checkForUnmatchedText(instance.textContent, type)
		    ? (null != props.popover &&
		        (listenToNonDelegatedEvent("beforetoggle", instance),
		        listenToNonDelegatedEvent("toggle", instance)),
		      null != props.onScroll && listenToNonDelegatedEvent("scroll", instance),
		      null != props.onScrollEnd &&
		        listenToNonDelegatedEvent("scrollend", instance),
		      null != props.onClick && (instance.onclick = noop$1),
		      (instance = true))
		    : (instance = false);
		  instance || throwOnHydrationMismatch(fiber);
		}
		function popToNextHostParent(fiber) {
		  for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
		    switch (hydrationParentFiber.tag) {
		      case 5:
		      case 13:
		        rootOrSingletonContext = false;
		        return;
		      case 27:
		      case 3:
		        rootOrSingletonContext = true;
		        return;
		      default:
		        hydrationParentFiber = hydrationParentFiber.return;
		    }
		}
		function popHydrationState(fiber) {
		  if (fiber !== hydrationParentFiber) return false;
		  if (!isHydrating) return popToNextHostParent(fiber), (isHydrating = true), false;
		  var tag = fiber.tag,
		    JSCompiler_temp;
		  if ((JSCompiler_temp = 3 !== tag && 27 !== tag)) {
		    if ((JSCompiler_temp = 5 === tag))
		      (JSCompiler_temp = fiber.type),
		        (JSCompiler_temp =
		          !("form" !== JSCompiler_temp && "button" !== JSCompiler_temp) ||
		          shouldSetTextContent(fiber.type, fiber.memoizedProps));
		    JSCompiler_temp = !JSCompiler_temp;
		  }
		  JSCompiler_temp && nextHydratableInstance && throwOnHydrationMismatch(fiber);
		  popToNextHostParent(fiber);
		  if (13 === tag) {
		    fiber = fiber.memoizedState;
		    fiber = null !== fiber ? fiber.dehydrated : null;
		    if (!fiber) throw Error(formatProdErrorMessage(317));
		    a: {
		      fiber = fiber.nextSibling;
		      for (tag = 0; fiber; ) {
		        if (8 === fiber.nodeType)
		          if (((JSCompiler_temp = fiber.data), "/$" === JSCompiler_temp)) {
		            if (0 === tag) {
		              nextHydratableInstance = getNextHydratable(fiber.nextSibling);
		              break a;
		            }
		            tag--;
		          } else
		            ("$" !== JSCompiler_temp &&
		              "$!" !== JSCompiler_temp &&
		              "$?" !== JSCompiler_temp) ||
		              tag++;
		        fiber = fiber.nextSibling;
		      }
		      nextHydratableInstance = null;
		    }
		  } else
		    27 === tag
		      ? ((tag = nextHydratableInstance),
		        isSingletonScope(fiber.type)
		          ? ((fiber = previousHydratableOnEnteringScopedSingleton),
		            (previousHydratableOnEnteringScopedSingleton = null),
		            (nextHydratableInstance = fiber))
		          : (nextHydratableInstance = tag))
		      : (nextHydratableInstance = hydrationParentFiber
		          ? getNextHydratable(fiber.stateNode.nextSibling)
		          : null);
		  return true;
		}
		function resetHydrationState() {
		  nextHydratableInstance = hydrationParentFiber = null;
		  isHydrating = false;
		}
		function upgradeHydrationErrorsToRecoverable() {
		  var queuedErrors = hydrationErrors;
		  null !== queuedErrors &&
		    (null === workInProgressRootRecoverableErrors
		      ? (workInProgressRootRecoverableErrors = queuedErrors)
		      : workInProgressRootRecoverableErrors.push.apply(
		          workInProgressRootRecoverableErrors,
		          queuedErrors
		        ),
		    (hydrationErrors = null));
		  return queuedErrors;
		}
		function queueHydrationError(error) {
		  null === hydrationErrors
		    ? (hydrationErrors = [error])
		    : hydrationErrors.push(error);
		}
		var valueCursor = createCursor(null),
		  currentlyRenderingFiber$1 = null,
		  lastContextDependency = null;
		function pushProvider(providerFiber, context, nextValue) {
		  push(valueCursor, context._currentValue);
		  context._currentValue = nextValue;
		}
		function popProvider(context) {
		  context._currentValue = valueCursor.current;
		  pop(valueCursor);
		}
		function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
		  for (; null !== parent; ) {
		    var alternate = parent.alternate;
		    (parent.childLanes & renderLanes) !== renderLanes
		      ? ((parent.childLanes |= renderLanes),
		        null !== alternate && (alternate.childLanes |= renderLanes))
		      : null !== alternate &&
		        (alternate.childLanes & renderLanes) !== renderLanes &&
		        (alternate.childLanes |= renderLanes);
		    if (parent === propagationRoot) break;
		    parent = parent.return;
		  }
		}
		function propagateContextChanges(
		  workInProgress,
		  contexts,
		  renderLanes,
		  forcePropagateEntireTree
		) {
		  var fiber = workInProgress.child;
		  null !== fiber && (fiber.return = workInProgress);
		  for (; null !== fiber; ) {
		    var list = fiber.dependencies;
		    if (null !== list) {
		      var nextFiber = fiber.child;
		      list = list.firstContext;
		      a: for (; null !== list; ) {
		        var dependency = list;
		        list = fiber;
		        for (var i = 0; i < contexts.length; i++)
		          if (dependency.context === contexts[i]) {
		            list.lanes |= renderLanes;
		            dependency = list.alternate;
		            null !== dependency && (dependency.lanes |= renderLanes);
		            scheduleContextWorkOnParentPath(
		              list.return,
		              renderLanes,
		              workInProgress
		            );
		            forcePropagateEntireTree || (nextFiber = null);
		            break a;
		          }
		        list = dependency.next;
		      }
		    } else if (18 === fiber.tag) {
		      nextFiber = fiber.return;
		      if (null === nextFiber) throw Error(formatProdErrorMessage(341));
		      nextFiber.lanes |= renderLanes;
		      list = nextFiber.alternate;
		      null !== list && (list.lanes |= renderLanes);
		      scheduleContextWorkOnParentPath(nextFiber, renderLanes, workInProgress);
		      nextFiber = null;
		    } else nextFiber = fiber.child;
		    if (null !== nextFiber) nextFiber.return = fiber;
		    else
		      for (nextFiber = fiber; null !== nextFiber; ) {
		        if (nextFiber === workInProgress) {
		          nextFiber = null;
		          break;
		        }
		        fiber = nextFiber.sibling;
		        if (null !== fiber) {
		          fiber.return = nextFiber.return;
		          nextFiber = fiber;
		          break;
		        }
		        nextFiber = nextFiber.return;
		      }
		    fiber = nextFiber;
		  }
		}
		function propagateParentContextChanges(
		  current,
		  workInProgress,
		  renderLanes,
		  forcePropagateEntireTree
		) {
		  current = null;
		  for (
		    var parent = workInProgress, isInsidePropagationBailout = false;
		    null !== parent;

		  ) {
		    if (!isInsidePropagationBailout)
		      if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = true;
		      else if (0 !== (parent.flags & 262144)) break;
		    if (10 === parent.tag) {
		      var currentParent = parent.alternate;
		      if (null === currentParent) throw Error(formatProdErrorMessage(387));
		      currentParent = currentParent.memoizedProps;
		      if (null !== currentParent) {
		        var context = parent.type;
		        objectIs(parent.pendingProps.value, currentParent.value) ||
		          (null !== current ? current.push(context) : (current = [context]));
		      }
		    } else if (parent === hostTransitionProviderCursor.current) {
		      currentParent = parent.alternate;
		      if (null === currentParent) throw Error(formatProdErrorMessage(387));
		      currentParent.memoizedState.memoizedState !==
		        parent.memoizedState.memoizedState &&
		        (null !== current
		          ? current.push(HostTransitionContext)
		          : (current = [HostTransitionContext]));
		    }
		    parent = parent.return;
		  }
		  null !== current &&
		    propagateContextChanges(
		      workInProgress,
		      current,
		      renderLanes,
		      forcePropagateEntireTree
		    );
		  workInProgress.flags |= 262144;
		}
		function checkIfContextChanged(currentDependencies) {
		  for (
		    currentDependencies = currentDependencies.firstContext;
		    null !== currentDependencies;

		  ) {
		    if (
		      !objectIs(
		        currentDependencies.context._currentValue,
		        currentDependencies.memoizedValue
		      )
		    )
		      return true;
		    currentDependencies = currentDependencies.next;
		  }
		  return false;
		}
		function prepareToReadContext(workInProgress) {
		  currentlyRenderingFiber$1 = workInProgress;
		  lastContextDependency = null;
		  workInProgress = workInProgress.dependencies;
		  null !== workInProgress && (workInProgress.firstContext = null);
		}
		function readContext(context) {
		  return readContextForConsumer(currentlyRenderingFiber$1, context);
		}
		function readContextDuringReconciliation(consumer, context) {
		  null === currentlyRenderingFiber$1 && prepareToReadContext(consumer);
		  return readContextForConsumer(consumer, context);
		}
		function readContextForConsumer(consumer, context) {
		  var value = context._currentValue;
		  context = { context: context, memoizedValue: value, next: null };
		  if (null === lastContextDependency) {
		    if (null === consumer) throw Error(formatProdErrorMessage(308));
		    lastContextDependency = context;
		    consumer.dependencies = { lanes: 0, firstContext: context };
		    consumer.flags |= 524288;
		  } else lastContextDependency = lastContextDependency.next = context;
		  return value;
		}
		var AbortControllerLocal =
		    "undefined" !== typeof AbortController
		      ? AbortController
		      : function () {
		          var listeners = [],
		            signal = (this.signal = {
		              aborted: false,
		              addEventListener: function (type, listener) {
		                listeners.push(listener);
		              }
		            });
		          this.abort = function () {
		            signal.aborted = true;
		            listeners.forEach(function (listener) {
		              return listener();
		            });
		          };
		        },
		  scheduleCallback$2 = Scheduler.unstable_scheduleCallback,
		  NormalPriority = Scheduler.unstable_NormalPriority,
		  CacheContext = {
		    $$typeof: REACT_CONTEXT_TYPE,
		    Consumer: null,
		    Provider: null,
		    _currentValue: null,
		    _currentValue2: null,
		    _threadCount: 0
		  };
		function createCache() {
		  return {
		    controller: new AbortControllerLocal(),
		    data: new Map(),
		    refCount: 0
		  };
		}
		function releaseCache(cache) {
		  cache.refCount--;
		  0 === cache.refCount &&
		    scheduleCallback$2(NormalPriority, function () {
		      cache.controller.abort();
		    });
		}
		var currentEntangledListeners = null,
		  currentEntangledPendingCount = 0,
		  currentEntangledLane = 0,
		  currentEntangledActionThenable = null;
		function entangleAsyncAction(transition, thenable) {
		  if (null === currentEntangledListeners) {
		    var entangledListeners = (currentEntangledListeners = []);
		    currentEntangledPendingCount = 0;
		    currentEntangledLane = requestTransitionLane();
		    currentEntangledActionThenable = {
		      status: "pending",
		      value: void 0,
		      then: function (resolve) {
		        entangledListeners.push(resolve);
		      }
		    };
		  }
		  currentEntangledPendingCount++;
		  thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
		  return thenable;
		}
		function pingEngtangledActionScope() {
		  if (
		    0 === --currentEntangledPendingCount &&
		    null !== currentEntangledListeners
		  ) {
		    null !== currentEntangledActionThenable &&
		      (currentEntangledActionThenable.status = "fulfilled");
		    var listeners = currentEntangledListeners;
		    currentEntangledListeners = null;
		    currentEntangledLane = 0;
		    currentEntangledActionThenable = null;
		    for (var i = 0; i < listeners.length; i++) (0, listeners[i])();
		  }
		}
		function chainThenableValue(thenable, result) {
		  var listeners = [],
		    thenableWithOverride = {
		      status: "pending",
		      value: null,
		      reason: null,
		      then: function (resolve) {
		        listeners.push(resolve);
		      }
		    };
		  thenable.then(
		    function () {
		      thenableWithOverride.status = "fulfilled";
		      thenableWithOverride.value = result;
		      for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);
		    },
		    function (error) {
		      thenableWithOverride.status = "rejected";
		      thenableWithOverride.reason = error;
		      for (error = 0; error < listeners.length; error++)
		        (0, listeners[error])(void 0);
		    }
		  );
		  return thenableWithOverride;
		}
		var prevOnStartTransitionFinish = ReactSharedInternals.S;
		ReactSharedInternals.S = function (transition, returnValue) {
		  "object" === typeof returnValue &&
		    null !== returnValue &&
		    "function" === typeof returnValue.then &&
		    entangleAsyncAction(transition, returnValue);
		  null !== prevOnStartTransitionFinish &&
		    prevOnStartTransitionFinish(transition, returnValue);
		};
		var resumedCache = createCursor(null);
		function peekCacheFromPool() {
		  var cacheResumedFromPreviousRender = resumedCache.current;
		  return null !== cacheResumedFromPreviousRender
		    ? cacheResumedFromPreviousRender
		    : workInProgressRoot.pooledCache;
		}
		function pushTransition(offscreenWorkInProgress, prevCachePool) {
		  null === prevCachePool
		    ? push(resumedCache, resumedCache.current)
		    : push(resumedCache, prevCachePool.pool);
		}
		function getSuspendedCache() {
		  var cacheFromPool = peekCacheFromPool();
		  return null === cacheFromPool
		    ? null
		    : { parent: CacheContext._currentValue, pool: cacheFromPool };
		}
		var SuspenseException = Error(formatProdErrorMessage(460)),
		  SuspenseyCommitException = Error(formatProdErrorMessage(474)),
		  SuspenseActionException = Error(formatProdErrorMessage(542)),
		  noopSuspenseyCommitThenable = { then: function () {} };
		function isThenableResolved(thenable) {
		  thenable = thenable.status;
		  return "fulfilled" === thenable || "rejected" === thenable;
		}
		function noop$3() {}
		function trackUsedThenable(thenableState, thenable, index) {
		  index = thenableState[index];
		  void 0 === index
		    ? thenableState.push(thenable)
		    : index !== thenable && (thenable.then(noop$3, noop$3), (thenable = index));
		  switch (thenable.status) {
		    case "fulfilled":
		      return thenable.value;
		    case "rejected":
		      throw (
		        ((thenableState = thenable.reason),
		        checkIfUseWrappedInAsyncCatch(thenableState),
		        thenableState)
		      );
		    default:
		      if ("string" === typeof thenable.status) thenable.then(noop$3, noop$3);
		      else {
		        thenableState = workInProgressRoot;
		        if (null !== thenableState && 100 < thenableState.shellSuspendCounter)
		          throw Error(formatProdErrorMessage(482));
		        thenableState = thenable;
		        thenableState.status = "pending";
		        thenableState.then(
		          function (fulfilledValue) {
		            if ("pending" === thenable.status) {
		              var fulfilledThenable = thenable;
		              fulfilledThenable.status = "fulfilled";
		              fulfilledThenable.value = fulfilledValue;
		            }
		          },
		          function (error) {
		            if ("pending" === thenable.status) {
		              var rejectedThenable = thenable;
		              rejectedThenable.status = "rejected";
		              rejectedThenable.reason = error;
		            }
		          }
		        );
		      }
		      switch (thenable.status) {
		        case "fulfilled":
		          return thenable.value;
		        case "rejected":
		          throw (
		            ((thenableState = thenable.reason),
		            checkIfUseWrappedInAsyncCatch(thenableState),
		            thenableState)
		          );
		      }
		      suspendedThenable = thenable;
		      throw SuspenseException;
		  }
		}
		var suspendedThenable = null;
		function getSuspendedThenable() {
		  if (null === suspendedThenable) throw Error(formatProdErrorMessage(459));
		  var thenable = suspendedThenable;
		  suspendedThenable = null;
		  return thenable;
		}
		function checkIfUseWrappedInAsyncCatch(rejectedReason) {
		  if (
		    rejectedReason === SuspenseException ||
		    rejectedReason === SuspenseActionException
		  )
		    throw Error(formatProdErrorMessage(483));
		}
		var hasForceUpdate = false;
		function initializeUpdateQueue(fiber) {
		  fiber.updateQueue = {
		    baseState: fiber.memoizedState,
		    firstBaseUpdate: null,
		    lastBaseUpdate: null,
		    shared: { pending: null, lanes: 0, hiddenCallbacks: null },
		    callbacks: null
		  };
		}
		function cloneUpdateQueue(current, workInProgress) {
		  current = current.updateQueue;
		  workInProgress.updateQueue === current &&
		    (workInProgress.updateQueue = {
		      baseState: current.baseState,
		      firstBaseUpdate: current.firstBaseUpdate,
		      lastBaseUpdate: current.lastBaseUpdate,
		      shared: current.shared,
		      callbacks: null
		    });
		}
		function createUpdate(lane) {
		  return { lane: lane, tag: 0, payload: null, callback: null, next: null };
		}
		function enqueueUpdate(fiber, update, lane) {
		  var updateQueue = fiber.updateQueue;
		  if (null === updateQueue) return null;
		  updateQueue = updateQueue.shared;
		  if (0 !== (executionContext & 2)) {
		    var pending = updateQueue.pending;
		    null === pending
		      ? (update.next = update)
		      : ((update.next = pending.next), (pending.next = update));
		    updateQueue.pending = update;
		    update = getRootForUpdatedFiber(fiber);
		    markUpdateLaneFromFiberToRoot(fiber, null, lane);
		    return update;
		  }
		  enqueueUpdate$1(fiber, updateQueue, update, lane);
		  return getRootForUpdatedFiber(fiber);
		}
		function entangleTransitions(root, fiber, lane) {
		  fiber = fiber.updateQueue;
		  if (null !== fiber && ((fiber = fiber.shared), 0 !== (lane & 4194048))) {
		    var queueLanes = fiber.lanes;
		    queueLanes &= root.pendingLanes;
		    lane |= queueLanes;
		    fiber.lanes = lane;
		    markRootEntangled(root, lane);
		  }
		}
		function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
		  var queue = workInProgress.updateQueue,
		    current = workInProgress.alternate;
		  if (
		    null !== current &&
		    ((current = current.updateQueue), queue === current)
		  ) {
		    var newFirst = null,
		      newLast = null;
		    queue = queue.firstBaseUpdate;
		    if (null !== queue) {
		      do {
		        var clone = {
		          lane: queue.lane,
		          tag: queue.tag,
		          payload: queue.payload,
		          callback: null,
		          next: null
		        };
		        null === newLast
		          ? (newFirst = newLast = clone)
		          : (newLast = newLast.next = clone);
		        queue = queue.next;
		      } while (null !== queue);
		      null === newLast
		        ? (newFirst = newLast = capturedUpdate)
		        : (newLast = newLast.next = capturedUpdate);
		    } else newFirst = newLast = capturedUpdate;
		    queue = {
		      baseState: current.baseState,
		      firstBaseUpdate: newFirst,
		      lastBaseUpdate: newLast,
		      shared: current.shared,
		      callbacks: current.callbacks
		    };
		    workInProgress.updateQueue = queue;
		    return;
		  }
		  workInProgress = queue.lastBaseUpdate;
		  null === workInProgress
		    ? (queue.firstBaseUpdate = capturedUpdate)
		    : (workInProgress.next = capturedUpdate);
		  queue.lastBaseUpdate = capturedUpdate;
		}
		var didReadFromEntangledAsyncAction = false;
		function suspendIfUpdateReadFromEntangledAsyncAction() {
		  if (didReadFromEntangledAsyncAction) {
		    var entangledActionThenable = currentEntangledActionThenable;
		    if (null !== entangledActionThenable) throw entangledActionThenable;
		  }
		}
		function processUpdateQueue(
		  workInProgress$jscomp$0,
		  props,
		  instance$jscomp$0,
		  renderLanes
		) {
		  didReadFromEntangledAsyncAction = false;
		  var queue = workInProgress$jscomp$0.updateQueue;
		  hasForceUpdate = false;
		  var firstBaseUpdate = queue.firstBaseUpdate,
		    lastBaseUpdate = queue.lastBaseUpdate,
		    pendingQueue = queue.shared.pending;
		  if (null !== pendingQueue) {
		    queue.shared.pending = null;
		    var lastPendingUpdate = pendingQueue,
		      firstPendingUpdate = lastPendingUpdate.next;
		    lastPendingUpdate.next = null;
		    null === lastBaseUpdate
		      ? (firstBaseUpdate = firstPendingUpdate)
		      : (lastBaseUpdate.next = firstPendingUpdate);
		    lastBaseUpdate = lastPendingUpdate;
		    var current = workInProgress$jscomp$0.alternate;
		    null !== current &&
		      ((current = current.updateQueue),
		      (pendingQueue = current.lastBaseUpdate),
		      pendingQueue !== lastBaseUpdate &&
		        (null === pendingQueue
		          ? (current.firstBaseUpdate = firstPendingUpdate)
		          : (pendingQueue.next = firstPendingUpdate),
		        (current.lastBaseUpdate = lastPendingUpdate)));
		  }
		  if (null !== firstBaseUpdate) {
		    var newState = queue.baseState;
		    lastBaseUpdate = 0;
		    current = firstPendingUpdate = lastPendingUpdate = null;
		    pendingQueue = firstBaseUpdate;
		    do {
		      var updateLane = pendingQueue.lane & -536870913,
		        isHiddenUpdate = updateLane !== pendingQueue.lane;
		      if (
		        isHiddenUpdate
		          ? (workInProgressRootRenderLanes & updateLane) === updateLane
		          : (renderLanes & updateLane) === updateLane
		      ) {
		        0 !== updateLane &&
		          updateLane === currentEntangledLane &&
		          (didReadFromEntangledAsyncAction = true);
		        null !== current &&
		          (current = current.next =
		            {
		              lane: 0,
		              tag: pendingQueue.tag,
		              payload: pendingQueue.payload,
		              callback: null,
		              next: null
		            });
		        a: {
		          var workInProgress = workInProgress$jscomp$0,
		            update = pendingQueue;
		          updateLane = props;
		          var instance = instance$jscomp$0;
		          switch (update.tag) {
		            case 1:
		              workInProgress = update.payload;
		              if ("function" === typeof workInProgress) {
		                newState = workInProgress.call(instance, newState, updateLane);
		                break a;
		              }
		              newState = workInProgress;
		              break a;
		            case 3:
		              workInProgress.flags = (workInProgress.flags & -65537) | 128;
		            case 0:
		              workInProgress = update.payload;
		              updateLane =
		                "function" === typeof workInProgress
		                  ? workInProgress.call(instance, newState, updateLane)
		                  : workInProgress;
		              if (null === updateLane || void 0 === updateLane) break a;
		              newState = assign({}, newState, updateLane);
		              break a;
		            case 2:
		              hasForceUpdate = true;
		          }
		        }
		        updateLane = pendingQueue.callback;
		        null !== updateLane &&
		          ((workInProgress$jscomp$0.flags |= 64),
		          isHiddenUpdate && (workInProgress$jscomp$0.flags |= 8192),
		          (isHiddenUpdate = queue.callbacks),
		          null === isHiddenUpdate
		            ? (queue.callbacks = [updateLane])
		            : isHiddenUpdate.push(updateLane));
		      } else
		        (isHiddenUpdate = {
		          lane: updateLane,
		          tag: pendingQueue.tag,
		          payload: pendingQueue.payload,
		          callback: pendingQueue.callback,
		          next: null
		        }),
		          null === current
		            ? ((firstPendingUpdate = current = isHiddenUpdate),
		              (lastPendingUpdate = newState))
		            : (current = current.next = isHiddenUpdate),
		          (lastBaseUpdate |= updateLane);
		      pendingQueue = pendingQueue.next;
		      if (null === pendingQueue)
		        if (((pendingQueue = queue.shared.pending), null === pendingQueue))
		          break;
		        else
		          (isHiddenUpdate = pendingQueue),
		            (pendingQueue = isHiddenUpdate.next),
		            (isHiddenUpdate.next = null),
		            (queue.lastBaseUpdate = isHiddenUpdate),
		            (queue.shared.pending = null);
		    } while (1);
		    null === current && (lastPendingUpdate = newState);
		    queue.baseState = lastPendingUpdate;
		    queue.firstBaseUpdate = firstPendingUpdate;
		    queue.lastBaseUpdate = current;
		    null === firstBaseUpdate && (queue.shared.lanes = 0);
		    workInProgressRootSkippedLanes |= lastBaseUpdate;
		    workInProgress$jscomp$0.lanes = lastBaseUpdate;
		    workInProgress$jscomp$0.memoizedState = newState;
		  }
		}
		function callCallback(callback, context) {
		  if ("function" !== typeof callback)
		    throw Error(formatProdErrorMessage(191, callback));
		  callback.call(context);
		}
		function commitCallbacks(updateQueue, context) {
		  var callbacks = updateQueue.callbacks;
		  if (null !== callbacks)
		    for (
		      updateQueue.callbacks = null, updateQueue = 0;
		      updateQueue < callbacks.length;
		      updateQueue++
		    )
		      callCallback(callbacks[updateQueue], context);
		}
		var currentTreeHiddenStackCursor = createCursor(null),
		  prevEntangledRenderLanesCursor = createCursor(0);
		function pushHiddenContext(fiber, context) {
		  fiber = entangledRenderLanes;
		  push(prevEntangledRenderLanesCursor, fiber);
		  push(currentTreeHiddenStackCursor, context);
		  entangledRenderLanes = fiber | context.baseLanes;
		}
		function reuseHiddenContextOnStack() {
		  push(prevEntangledRenderLanesCursor, entangledRenderLanes);
		  push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current);
		}
		function popHiddenContext() {
		  entangledRenderLanes = prevEntangledRenderLanesCursor.current;
		  pop(currentTreeHiddenStackCursor);
		  pop(prevEntangledRenderLanesCursor);
		}
		var renderLanes = 0,
		  currentlyRenderingFiber = null,
		  currentHook = null,
		  workInProgressHook = null,
		  didScheduleRenderPhaseUpdate = false,
		  didScheduleRenderPhaseUpdateDuringThisPass = false,
		  shouldDoubleInvokeUserFnsInHooksDEV = false,
		  localIdCounter = 0,
		  thenableIndexCounter$1 = 0,
		  thenableState$1 = null,
		  globalClientIdCounter = 0;
		function throwInvalidHookError() {
		  throw Error(formatProdErrorMessage(321));
		}
		function areHookInputsEqual(nextDeps, prevDeps) {
		  if (null === prevDeps) return false;
		  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
		    if (!objectIs(nextDeps[i], prevDeps[i])) return false;
		  return true;
		}
		function renderWithHooks(
		  current,
		  workInProgress,
		  Component,
		  props,
		  secondArg,
		  nextRenderLanes
		) {
		  renderLanes = nextRenderLanes;
		  currentlyRenderingFiber = workInProgress;
		  workInProgress.memoizedState = null;
		  workInProgress.updateQueue = null;
		  workInProgress.lanes = 0;
		  ReactSharedInternals.H =
		    null === current || null === current.memoizedState
		      ? HooksDispatcherOnMount
		      : HooksDispatcherOnUpdate;
		  shouldDoubleInvokeUserFnsInHooksDEV = false;
		  nextRenderLanes = Component(props, secondArg);
		  shouldDoubleInvokeUserFnsInHooksDEV = false;
		  didScheduleRenderPhaseUpdateDuringThisPass &&
		    (nextRenderLanes = renderWithHooksAgain(
		      workInProgress,
		      Component,
		      props,
		      secondArg
		    ));
		  finishRenderingHooks(current);
		  return nextRenderLanes;
		}
		function finishRenderingHooks(current) {
		  ReactSharedInternals.H = ContextOnlyDispatcher;
		  var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
		  renderLanes = 0;
		  workInProgressHook = currentHook = currentlyRenderingFiber = null;
		  didScheduleRenderPhaseUpdate = false;
		  thenableIndexCounter$1 = 0;
		  thenableState$1 = null;
		  if (didRenderTooFewHooks) throw Error(formatProdErrorMessage(300));
		  null === current ||
		    didReceiveUpdate ||
		    ((current = current.dependencies),
		    null !== current &&
		      checkIfContextChanged(current) &&
		      (didReceiveUpdate = true));
		}
		function renderWithHooksAgain(workInProgress, Component, props, secondArg) {
		  currentlyRenderingFiber = workInProgress;
		  var numberOfReRenders = 0;
		  do {
		    didScheduleRenderPhaseUpdateDuringThisPass && (thenableState$1 = null);
		    thenableIndexCounter$1 = 0;
		    didScheduleRenderPhaseUpdateDuringThisPass = false;
		    if (25 <= numberOfReRenders) throw Error(formatProdErrorMessage(301));
		    numberOfReRenders += 1;
		    workInProgressHook = currentHook = null;
		    if (null != workInProgress.updateQueue) {
		      var children = workInProgress.updateQueue;
		      children.lastEffect = null;
		      children.events = null;
		      children.stores = null;
		      null != children.memoCache && (children.memoCache.index = 0);
		    }
		    ReactSharedInternals.H = HooksDispatcherOnRerender;
		    children = Component(props, secondArg);
		  } while (didScheduleRenderPhaseUpdateDuringThisPass);
		  return children;
		}
		function TransitionAwareHostComponent() {
		  var dispatcher = ReactSharedInternals.H,
		    maybeThenable = dispatcher.useState()[0];
		  maybeThenable =
		    "function" === typeof maybeThenable.then
		      ? useThenable(maybeThenable)
		      : maybeThenable;
		  dispatcher = dispatcher.useState()[0];
		  (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher &&
		    (currentlyRenderingFiber.flags |= 1024);
		  return maybeThenable;
		}
		function checkDidRenderIdHook() {
		  var didRenderIdHook = 0 !== localIdCounter;
		  localIdCounter = 0;
		  return didRenderIdHook;
		}
		function bailoutHooks(current, workInProgress, lanes) {
		  workInProgress.updateQueue = current.updateQueue;
		  workInProgress.flags &= -2053;
		  current.lanes &= ~lanes;
		}
		function resetHooksOnUnwind(workInProgress) {
		  if (didScheduleRenderPhaseUpdate) {
		    for (
		      workInProgress = workInProgress.memoizedState;
		      null !== workInProgress;

		    ) {
		      var queue = workInProgress.queue;
		      null !== queue && (queue.pending = null);
		      workInProgress = workInProgress.next;
		    }
		    didScheduleRenderPhaseUpdate = false;
		  }
		  renderLanes = 0;
		  workInProgressHook = currentHook = currentlyRenderingFiber = null;
		  didScheduleRenderPhaseUpdateDuringThisPass = false;
		  thenableIndexCounter$1 = localIdCounter = 0;
		  thenableState$1 = null;
		}
		function mountWorkInProgressHook() {
		  var hook = {
		    memoizedState: null,
		    baseState: null,
		    baseQueue: null,
		    queue: null,
		    next: null
		  };
		  null === workInProgressHook
		    ? (currentlyRenderingFiber.memoizedState = workInProgressHook = hook)
		    : (workInProgressHook = workInProgressHook.next = hook);
		  return workInProgressHook;
		}
		function updateWorkInProgressHook() {
		  if (null === currentHook) {
		    var nextCurrentHook = currentlyRenderingFiber.alternate;
		    nextCurrentHook =
		      null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
		  } else nextCurrentHook = currentHook.next;
		  var nextWorkInProgressHook =
		    null === workInProgressHook
		      ? currentlyRenderingFiber.memoizedState
		      : workInProgressHook.next;
		  if (null !== nextWorkInProgressHook)
		    (workInProgressHook = nextWorkInProgressHook),
		      (currentHook = nextCurrentHook);
		  else {
		    if (null === nextCurrentHook) {
		      if (null === currentlyRenderingFiber.alternate)
		        throw Error(formatProdErrorMessage(467));
		      throw Error(formatProdErrorMessage(310));
		    }
		    currentHook = nextCurrentHook;
		    nextCurrentHook = {
		      memoizedState: currentHook.memoizedState,
		      baseState: currentHook.baseState,
		      baseQueue: currentHook.baseQueue,
		      queue: currentHook.queue,
		      next: null
		    };
		    null === workInProgressHook
		      ? (currentlyRenderingFiber.memoizedState = workInProgressHook =
		          nextCurrentHook)
		      : (workInProgressHook = workInProgressHook.next = nextCurrentHook);
		  }
		  return workInProgressHook;
		}
		function createFunctionComponentUpdateQueue() {
		  return { lastEffect: null, events: null, stores: null, memoCache: null };
		}
		function useThenable(thenable) {
		  var index = thenableIndexCounter$1;
		  thenableIndexCounter$1 += 1;
		  null === thenableState$1 && (thenableState$1 = []);
		  thenable = trackUsedThenable(thenableState$1, thenable, index);
		  index = currentlyRenderingFiber;
		  null ===
		    (null === workInProgressHook
		      ? index.memoizedState
		      : workInProgressHook.next) &&
		    ((index = index.alternate),
		    (ReactSharedInternals.H =
		      null === index || null === index.memoizedState
		        ? HooksDispatcherOnMount
		        : HooksDispatcherOnUpdate));
		  return thenable;
		}
		function use(usable) {
		  if (null !== usable && "object" === typeof usable) {
		    if ("function" === typeof usable.then) return useThenable(usable);
		    if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
		  }
		  throw Error(formatProdErrorMessage(438, String(usable)));
		}
		function useMemoCache(size) {
		  var memoCache = null,
		    updateQueue = currentlyRenderingFiber.updateQueue;
		  null !== updateQueue && (memoCache = updateQueue.memoCache);
		  if (null == memoCache) {
		    var current = currentlyRenderingFiber.alternate;
		    null !== current &&
		      ((current = current.updateQueue),
		      null !== current &&
		        ((current = current.memoCache),
		        null != current &&
		          (memoCache = {
		            data: current.data.map(function (array) {
		              return array.slice();
		            }),
		            index: 0
		          })));
		  }
		  null == memoCache && (memoCache = { data: [], index: 0 });
		  null === updateQueue &&
		    ((updateQueue = createFunctionComponentUpdateQueue()),
		    (currentlyRenderingFiber.updateQueue = updateQueue));
		  updateQueue.memoCache = memoCache;
		  updateQueue = memoCache.data[memoCache.index];
		  if (void 0 === updateQueue)
		    for (
		      updateQueue = memoCache.data[memoCache.index] = Array(size), current = 0;
		      current < size;
		      current++
		    )
		      updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
		  memoCache.index++;
		  return updateQueue;
		}
		function basicStateReducer(state, action) {
		  return "function" === typeof action ? action(state) : action;
		}
		function updateReducer(reducer) {
		  var hook = updateWorkInProgressHook();
		  return updateReducerImpl(hook, currentHook, reducer);
		}
		function updateReducerImpl(hook, current, reducer) {
		  var queue = hook.queue;
		  if (null === queue) throw Error(formatProdErrorMessage(311));
		  queue.lastRenderedReducer = reducer;
		  var baseQueue = hook.baseQueue,
		    pendingQueue = queue.pending;
		  if (null !== pendingQueue) {
		    if (null !== baseQueue) {
		      var baseFirst = baseQueue.next;
		      baseQueue.next = pendingQueue.next;
		      pendingQueue.next = baseFirst;
		    }
		    current.baseQueue = baseQueue = pendingQueue;
		    queue.pending = null;
		  }
		  pendingQueue = hook.baseState;
		  if (null === baseQueue) hook.memoizedState = pendingQueue;
		  else {
		    current = baseQueue.next;
		    var newBaseQueueFirst = (baseFirst = null),
		      newBaseQueueLast = null,
		      update = current,
		      didReadFromEntangledAsyncAction$32 = false;
		    do {
		      var updateLane = update.lane & -536870913;
		      if (
		        updateLane !== update.lane
		          ? (workInProgressRootRenderLanes & updateLane) === updateLane
		          : (renderLanes & updateLane) === updateLane
		      ) {
		        var revertLane = update.revertLane;
		        if (0 === revertLane)
		          null !== newBaseQueueLast &&
		            (newBaseQueueLast = newBaseQueueLast.next =
		              {
		                lane: 0,
		                revertLane: 0,
		                action: update.action,
		                hasEagerState: update.hasEagerState,
		                eagerState: update.eagerState,
		                next: null
		              }),
		            updateLane === currentEntangledLane &&
		              (didReadFromEntangledAsyncAction$32 = true);
		        else if ((renderLanes & revertLane) === revertLane) {
		          update = update.next;
		          revertLane === currentEntangledLane &&
		            (didReadFromEntangledAsyncAction$32 = true);
		          continue;
		        } else
		          (updateLane = {
		            lane: 0,
		            revertLane: update.revertLane,
		            action: update.action,
		            hasEagerState: update.hasEagerState,
		            eagerState: update.eagerState,
		            next: null
		          }),
		            null === newBaseQueueLast
		              ? ((newBaseQueueFirst = newBaseQueueLast = updateLane),
		                (baseFirst = pendingQueue))
		              : (newBaseQueueLast = newBaseQueueLast.next = updateLane),
		            (currentlyRenderingFiber.lanes |= revertLane),
		            (workInProgressRootSkippedLanes |= revertLane);
		        updateLane = update.action;
		        shouldDoubleInvokeUserFnsInHooksDEV &&
		          reducer(pendingQueue, updateLane);
		        pendingQueue = update.hasEagerState
		          ? update.eagerState
		          : reducer(pendingQueue, updateLane);
		      } else
		        (revertLane = {
		          lane: updateLane,
		          revertLane: update.revertLane,
		          action: update.action,
		          hasEagerState: update.hasEagerState,
		          eagerState: update.eagerState,
		          next: null
		        }),
		          null === newBaseQueueLast
		            ? ((newBaseQueueFirst = newBaseQueueLast = revertLane),
		              (baseFirst = pendingQueue))
		            : (newBaseQueueLast = newBaseQueueLast.next = revertLane),
		          (currentlyRenderingFiber.lanes |= updateLane),
		          (workInProgressRootSkippedLanes |= updateLane);
		      update = update.next;
		    } while (null !== update && update !== current);
		    null === newBaseQueueLast
		      ? (baseFirst = pendingQueue)
		      : (newBaseQueueLast.next = newBaseQueueFirst);
		    if (
		      !objectIs(pendingQueue, hook.memoizedState) &&
		      ((didReceiveUpdate = true),
		      didReadFromEntangledAsyncAction$32 &&
		        ((reducer = currentEntangledActionThenable), null !== reducer))
		    )
		      throw reducer;
		    hook.memoizedState = pendingQueue;
		    hook.baseState = baseFirst;
		    hook.baseQueue = newBaseQueueLast;
		    queue.lastRenderedState = pendingQueue;
		  }
		  null === baseQueue && (queue.lanes = 0);
		  return [hook.memoizedState, queue.dispatch];
		}
		function rerenderReducer(reducer) {
		  var hook = updateWorkInProgressHook(),
		    queue = hook.queue;
		  if (null === queue) throw Error(formatProdErrorMessage(311));
		  queue.lastRenderedReducer = reducer;
		  var dispatch = queue.dispatch,
		    lastRenderPhaseUpdate = queue.pending,
		    newState = hook.memoizedState;
		  if (null !== lastRenderPhaseUpdate) {
		    queue.pending = null;
		    var update = (lastRenderPhaseUpdate = lastRenderPhaseUpdate.next);
		    do (newState = reducer(newState, update.action)), (update = update.next);
		    while (update !== lastRenderPhaseUpdate);
		    objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
		    hook.memoizedState = newState;
		    null === hook.baseQueue && (hook.baseState = newState);
		    queue.lastRenderedState = newState;
		  }
		  return [newState, dispatch];
		}
		function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
		  var fiber = currentlyRenderingFiber,
		    hook = updateWorkInProgressHook(),
		    isHydrating$jscomp$0 = isHydrating;
		  if (isHydrating$jscomp$0) {
		    if (void 0 === getServerSnapshot) throw Error(formatProdErrorMessage(407));
		    getServerSnapshot = getServerSnapshot();
		  } else getServerSnapshot = getSnapshot();
		  var snapshotChanged = !objectIs(
		    (currentHook || hook).memoizedState,
		    getServerSnapshot
		  );
		  snapshotChanged &&
		    ((hook.memoizedState = getServerSnapshot), (didReceiveUpdate = true));
		  hook = hook.queue;
		  var create = subscribeToStore.bind(null, fiber, hook, subscribe);
		  updateEffectImpl(2048, 8, create, [subscribe]);
		  if (
		    hook.getSnapshot !== getSnapshot ||
		    snapshotChanged ||
		    (null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1)
		  ) {
		    fiber.flags |= 2048;
		    pushSimpleEffect(
		      9,
		      createEffectInstance(),
		      updateStoreInstance.bind(
		        null,
		        fiber,
		        hook,
		        getServerSnapshot,
		        getSnapshot
		      ),
		      null
		    );
		    if (null === workInProgressRoot) throw Error(formatProdErrorMessage(349));
		    isHydrating$jscomp$0 ||
		      0 !== (renderLanes & 124) ||
		      pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
		  }
		  return getServerSnapshot;
		}
		function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
		  fiber.flags |= 16384;
		  fiber = { getSnapshot: getSnapshot, value: renderedSnapshot };
		  getSnapshot = currentlyRenderingFiber.updateQueue;
		  null === getSnapshot
		    ? ((getSnapshot = createFunctionComponentUpdateQueue()),
		      (currentlyRenderingFiber.updateQueue = getSnapshot),
		      (getSnapshot.stores = [fiber]))
		    : ((renderedSnapshot = getSnapshot.stores),
		      null === renderedSnapshot
		        ? (getSnapshot.stores = [fiber])
		        : renderedSnapshot.push(fiber));
		}
		function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
		  inst.value = nextSnapshot;
		  inst.getSnapshot = getSnapshot;
		  checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
		}
		function subscribeToStore(fiber, inst, subscribe) {
		  return subscribe(function () {
		    checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
		  });
		}
		function checkIfSnapshotChanged(inst) {
		  var latestGetSnapshot = inst.getSnapshot;
		  inst = inst.value;
		  try {
		    var nextValue = latestGetSnapshot();
		    return !objectIs(inst, nextValue);
		  } catch (error) {
		    return true;
		  }
		}
		function forceStoreRerender(fiber) {
		  var root = enqueueConcurrentRenderForLane(fiber, 2);
		  null !== root && scheduleUpdateOnFiber(root, fiber, 2);
		}
		function mountStateImpl(initialState) {
		  var hook = mountWorkInProgressHook();
		  if ("function" === typeof initialState) {
		    var initialStateInitializer = initialState;
		    initialState = initialStateInitializer();
		    if (shouldDoubleInvokeUserFnsInHooksDEV) {
		      setIsStrictModeForDevtools(true);
		      try {
		        initialStateInitializer();
		      } finally {
		        setIsStrictModeForDevtools(false);
		      }
		    }
		  }
		  hook.memoizedState = hook.baseState = initialState;
		  hook.queue = {
		    pending: null,
		    lanes: 0,
		    dispatch: null,
		    lastRenderedReducer: basicStateReducer,
		    lastRenderedState: initialState
		  };
		  return hook;
		}
		function updateOptimisticImpl(hook, current, passthrough, reducer) {
		  hook.baseState = passthrough;
		  return updateReducerImpl(
		    hook,
		    currentHook,
		    "function" === typeof reducer ? reducer : basicStateReducer
		  );
		}
		function dispatchActionState(
		  fiber,
		  actionQueue,
		  setPendingState,
		  setState,
		  payload
		) {
		  if (isRenderPhaseUpdate(fiber)) throw Error(formatProdErrorMessage(485));
		  fiber = actionQueue.action;
		  if (null !== fiber) {
		    var actionNode = {
		      payload: payload,
		      action: fiber,
		      next: null,
		      isTransition: true,
		      status: "pending",
		      value: null,
		      reason: null,
		      listeners: [],
		      then: function (listener) {
		        actionNode.listeners.push(listener);
		      }
		    };
		    null !== ReactSharedInternals.T
		      ? setPendingState(true)
		      : (actionNode.isTransition = false);
		    setState(actionNode);
		    setPendingState = actionQueue.pending;
		    null === setPendingState
		      ? ((actionNode.next = actionQueue.pending = actionNode),
		        runActionStateAction(actionQueue, actionNode))
		      : ((actionNode.next = setPendingState.next),
		        (actionQueue.pending = setPendingState.next = actionNode));
		  }
		}
		function runActionStateAction(actionQueue, node) {
		  var action = node.action,
		    payload = node.payload,
		    prevState = actionQueue.state;
		  if (node.isTransition) {
		    var prevTransition = ReactSharedInternals.T,
		      currentTransition = {};
		    ReactSharedInternals.T = currentTransition;
		    try {
		      var returnValue = action(prevState, payload),
		        onStartTransitionFinish = ReactSharedInternals.S;
		      null !== onStartTransitionFinish &&
		        onStartTransitionFinish(currentTransition, returnValue);
		      handleActionReturnValue(actionQueue, node, returnValue);
		    } catch (error) {
		      onActionError(actionQueue, node, error);
		    } finally {
		      ReactSharedInternals.T = prevTransition;
		    }
		  } else
		    try {
		      (prevTransition = action(prevState, payload)),
		        handleActionReturnValue(actionQueue, node, prevTransition);
		    } catch (error$38) {
		      onActionError(actionQueue, node, error$38);
		    }
		}
		function handleActionReturnValue(actionQueue, node, returnValue) {
		  null !== returnValue &&
		  "object" === typeof returnValue &&
		  "function" === typeof returnValue.then
		    ? returnValue.then(
		        function (nextState) {
		          onActionSuccess(actionQueue, node, nextState);
		        },
		        function (error) {
		          return onActionError(actionQueue, node, error);
		        }
		      )
		    : onActionSuccess(actionQueue, node, returnValue);
		}
		function onActionSuccess(actionQueue, actionNode, nextState) {
		  actionNode.status = "fulfilled";
		  actionNode.value = nextState;
		  notifyActionListeners(actionNode);
		  actionQueue.state = nextState;
		  actionNode = actionQueue.pending;
		  null !== actionNode &&
		    ((nextState = actionNode.next),
		    nextState === actionNode
		      ? (actionQueue.pending = null)
		      : ((nextState = nextState.next),
		        (actionNode.next = nextState),
		        runActionStateAction(actionQueue, nextState)));
		}
		function onActionError(actionQueue, actionNode, error) {
		  var last = actionQueue.pending;
		  actionQueue.pending = null;
		  if (null !== last) {
		    last = last.next;
		    do
		      (actionNode.status = "rejected"),
		        (actionNode.reason = error),
		        notifyActionListeners(actionNode),
		        (actionNode = actionNode.next);
		    while (actionNode !== last);
		  }
		  actionQueue.action = null;
		}
		function notifyActionListeners(actionNode) {
		  actionNode = actionNode.listeners;
		  for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();
		}
		function actionStateReducer(oldState, newState) {
		  return newState;
		}
		function mountActionState(action, initialStateProp) {
		  if (isHydrating) {
		    var ssrFormState = workInProgressRoot.formState;
		    if (null !== ssrFormState) {
		      a: {
		        var JSCompiler_inline_result = currentlyRenderingFiber;
		        if (isHydrating) {
		          if (nextHydratableInstance) {
		            b: {
		              var JSCompiler_inline_result$jscomp$0 = nextHydratableInstance;
		              for (
		                var inRootOrSingleton = rootOrSingletonContext;
		                8 !== JSCompiler_inline_result$jscomp$0.nodeType;

		              ) {
		                if (!inRootOrSingleton) {
		                  JSCompiler_inline_result$jscomp$0 = null;
		                  break b;
		                }
		                JSCompiler_inline_result$jscomp$0 = getNextHydratable(
		                  JSCompiler_inline_result$jscomp$0.nextSibling
		                );
		                if (null === JSCompiler_inline_result$jscomp$0) {
		                  JSCompiler_inline_result$jscomp$0 = null;
		                  break b;
		                }
		              }
		              inRootOrSingleton = JSCompiler_inline_result$jscomp$0.data;
		              JSCompiler_inline_result$jscomp$0 =
		                "F!" === inRootOrSingleton || "F" === inRootOrSingleton
		                  ? JSCompiler_inline_result$jscomp$0
		                  : null;
		            }
		            if (JSCompiler_inline_result$jscomp$0) {
		              nextHydratableInstance = getNextHydratable(
		                JSCompiler_inline_result$jscomp$0.nextSibling
		              );
		              JSCompiler_inline_result =
		                "F!" === JSCompiler_inline_result$jscomp$0.data;
		              break a;
		            }
		          }
		          throwOnHydrationMismatch(JSCompiler_inline_result);
		        }
		        JSCompiler_inline_result = false;
		      }
		      JSCompiler_inline_result && (initialStateProp = ssrFormState[0]);
		    }
		  }
		  ssrFormState = mountWorkInProgressHook();
		  ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
		  JSCompiler_inline_result = {
		    pending: null,
		    lanes: 0,
		    dispatch: null,
		    lastRenderedReducer: actionStateReducer,
		    lastRenderedState: initialStateProp
		  };
		  ssrFormState.queue = JSCompiler_inline_result;
		  ssrFormState = dispatchSetState.bind(
		    null,
		    currentlyRenderingFiber,
		    JSCompiler_inline_result
		  );
		  JSCompiler_inline_result.dispatch = ssrFormState;
		  JSCompiler_inline_result = mountStateImpl(false);
		  inRootOrSingleton = dispatchOptimisticSetState.bind(
		    null,
		    currentlyRenderingFiber,
		    false,
		    JSCompiler_inline_result.queue
		  );
		  JSCompiler_inline_result = mountWorkInProgressHook();
		  JSCompiler_inline_result$jscomp$0 = {
		    state: initialStateProp,
		    dispatch: null,
		    action: action,
		    pending: null
		  };
		  JSCompiler_inline_result.queue = JSCompiler_inline_result$jscomp$0;
		  ssrFormState = dispatchActionState.bind(
		    null,
		    currentlyRenderingFiber,
		    JSCompiler_inline_result$jscomp$0,
		    inRootOrSingleton,
		    ssrFormState
		  );
		  JSCompiler_inline_result$jscomp$0.dispatch = ssrFormState;
		  JSCompiler_inline_result.memoizedState = action;
		  return [initialStateProp, ssrFormState, false];
		}
		function updateActionState(action) {
		  var stateHook = updateWorkInProgressHook();
		  return updateActionStateImpl(stateHook, currentHook, action);
		}
		function updateActionStateImpl(stateHook, currentStateHook, action) {
		  currentStateHook = updateReducerImpl(
		    stateHook,
		    currentStateHook,
		    actionStateReducer
		  )[0];
		  stateHook = updateReducer(basicStateReducer)[0];
		  if (
		    "object" === typeof currentStateHook &&
		    null !== currentStateHook &&
		    "function" === typeof currentStateHook.then
		  )
		    try {
		      var state = useThenable(currentStateHook);
		    } catch (x) {
		      if (x === SuspenseException) throw SuspenseActionException;
		      throw x;
		    }
		  else state = currentStateHook;
		  currentStateHook = updateWorkInProgressHook();
		  var actionQueue = currentStateHook.queue,
		    dispatch = actionQueue.dispatch;
		  action !== currentStateHook.memoizedState &&
		    ((currentlyRenderingFiber.flags |= 2048),
		    pushSimpleEffect(
		      9,
		      createEffectInstance(),
		      actionStateActionEffect.bind(null, actionQueue, action),
		      null
		    ));
		  return [state, dispatch, stateHook];
		}
		function actionStateActionEffect(actionQueue, action) {
		  actionQueue.action = action;
		}
		function rerenderActionState(action) {
		  var stateHook = updateWorkInProgressHook(),
		    currentStateHook = currentHook;
		  if (null !== currentStateHook)
		    return updateActionStateImpl(stateHook, currentStateHook, action);
		  updateWorkInProgressHook();
		  stateHook = stateHook.memoizedState;
		  currentStateHook = updateWorkInProgressHook();
		  var dispatch = currentStateHook.queue.dispatch;
		  currentStateHook.memoizedState = action;
		  return [stateHook, dispatch, false];
		}
		function pushSimpleEffect(tag, inst, create, createDeps) {
		  tag = { tag: tag, create: create, deps: createDeps, inst: inst, next: null };
		  inst = currentlyRenderingFiber.updateQueue;
		  null === inst &&
		    ((inst = createFunctionComponentUpdateQueue()),
		    (currentlyRenderingFiber.updateQueue = inst));
		  create = inst.lastEffect;
		  null === create
		    ? (inst.lastEffect = tag.next = tag)
		    : ((createDeps = create.next),
		      (create.next = tag),
		      (tag.next = createDeps),
		      (inst.lastEffect = tag));
		  return tag;
		}
		function createEffectInstance() {
		  return { destroy: void 0, resource: void 0 };
		}
		function updateRef() {
		  return updateWorkInProgressHook().memoizedState;
		}
		function mountEffectImpl(fiberFlags, hookFlags, create, createDeps) {
		  var hook = mountWorkInProgressHook();
		  createDeps = void 0 === createDeps ? null : createDeps;
		  currentlyRenderingFiber.flags |= fiberFlags;
		  hook.memoizedState = pushSimpleEffect(
		    1 | hookFlags,
		    createEffectInstance(),
		    create,
		    createDeps
		  );
		}
		function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
		  var hook = updateWorkInProgressHook();
		  deps = void 0 === deps ? null : deps;
		  var inst = hook.memoizedState.inst;
		  null !== currentHook &&
		  null !== deps &&
		  areHookInputsEqual(deps, currentHook.memoizedState.deps)
		    ? (hook.memoizedState = pushSimpleEffect(hookFlags, inst, create, deps))
		    : ((currentlyRenderingFiber.flags |= fiberFlags),
		      (hook.memoizedState = pushSimpleEffect(
		        1 | hookFlags,
		        inst,
		        create,
		        deps
		      )));
		}
		function mountEffect(create, createDeps) {
		  mountEffectImpl(8390656, 8, create, createDeps);
		}
		function updateEffect(create, createDeps) {
		  updateEffectImpl(2048, 8, create, createDeps);
		}
		function updateInsertionEffect(create, deps) {
		  return updateEffectImpl(4, 2, create, deps);
		}
		function updateLayoutEffect(create, deps) {
		  return updateEffectImpl(4, 4, create, deps);
		}
		function imperativeHandleEffect(create, ref) {
		  if ("function" === typeof ref) {
		    create = create();
		    var refCleanup = ref(create);
		    return function () {
		      "function" === typeof refCleanup ? refCleanup() : ref(null);
		    };
		  }
		  if (null !== ref && void 0 !== ref)
		    return (
		      (create = create()),
		      (ref.current = create),
		      function () {
		        ref.current = null;
		      }
		    );
		}
		function updateImperativeHandle(ref, create, deps) {
		  deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
		  updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
		}
		function mountDebugValue() {}
		function updateCallback(callback, deps) {
		  var hook = updateWorkInProgressHook();
		  deps = void 0 === deps ? null : deps;
		  var prevState = hook.memoizedState;
		  if (null !== deps && areHookInputsEqual(deps, prevState[1]))
		    return prevState[0];
		  hook.memoizedState = [callback, deps];
		  return callback;
		}
		function updateMemo(nextCreate, deps) {
		  var hook = updateWorkInProgressHook();
		  deps = void 0 === deps ? null : deps;
		  var prevState = hook.memoizedState;
		  if (null !== deps && areHookInputsEqual(deps, prevState[1]))
		    return prevState[0];
		  prevState = nextCreate();
		  if (shouldDoubleInvokeUserFnsInHooksDEV) {
		    setIsStrictModeForDevtools(true);
		    try {
		      nextCreate();
		    } finally {
		      setIsStrictModeForDevtools(false);
		    }
		  }
		  hook.memoizedState = [prevState, deps];
		  return prevState;
		}
		function mountDeferredValueImpl(hook, value, initialValue) {
		  if (void 0 === initialValue || 0 !== (renderLanes & 1073741824))
		    return (hook.memoizedState = value);
		  hook.memoizedState = initialValue;
		  hook = requestDeferredLane();
		  currentlyRenderingFiber.lanes |= hook;
		  workInProgressRootSkippedLanes |= hook;
		  return initialValue;
		}
		function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
		  if (objectIs(value, prevValue)) return value;
		  if (null !== currentTreeHiddenStackCursor.current)
		    return (
		      (hook = mountDeferredValueImpl(hook, value, initialValue)),
		      objectIs(hook, prevValue) || (didReceiveUpdate = true),
		      hook
		    );
		  if (0 === (renderLanes & 42))
		    return (didReceiveUpdate = true), (hook.memoizedState = value);
		  hook = requestDeferredLane();
		  currentlyRenderingFiber.lanes |= hook;
		  workInProgressRootSkippedLanes |= hook;
		  return prevValue;
		}
		function startTransition(fiber, queue, pendingState, finishedState, callback) {
		  var previousPriority = ReactDOMSharedInternals.p;
		  ReactDOMSharedInternals.p =
		    0 !== previousPriority && 8 > previousPriority ? previousPriority : 8;
		  var prevTransition = ReactSharedInternals.T,
		    currentTransition = {};
		  ReactSharedInternals.T = currentTransition;
		  dispatchOptimisticSetState(fiber, false, queue, pendingState);
		  try {
		    var returnValue = callback(),
		      onStartTransitionFinish = ReactSharedInternals.S;
		    null !== onStartTransitionFinish &&
		      onStartTransitionFinish(currentTransition, returnValue);
		    if (
		      null !== returnValue &&
		      "object" === typeof returnValue &&
		      "function" === typeof returnValue.then
		    ) {
		      var thenableForFinishedState = chainThenableValue(
		        returnValue,
		        finishedState
		      );
		      dispatchSetStateInternal(
		        fiber,
		        queue,
		        thenableForFinishedState,
		        requestUpdateLane(fiber)
		      );
		    } else
		      dispatchSetStateInternal(
		        fiber,
		        queue,
		        finishedState,
		        requestUpdateLane(fiber)
		      );
		  } catch (error) {
		    dispatchSetStateInternal(
		      fiber,
		      queue,
		      { then: function () {}, status: "rejected", reason: error },
		      requestUpdateLane()
		    );
		  } finally {
		    (ReactDOMSharedInternals.p = previousPriority),
		      (ReactSharedInternals.T = prevTransition);
		  }
		}
		function noop$2() {}
		function startHostTransition(formFiber, pendingState, action, formData) {
		  if (5 !== formFiber.tag) throw Error(formatProdErrorMessage(476));
		  var queue = ensureFormComponentIsStateful(formFiber).queue;
		  startTransition(
		    formFiber,
		    queue,
		    pendingState,
		    sharedNotPendingObject,
		    null === action
		      ? noop$2
		      : function () {
		          requestFormReset$1(formFiber);
		          return action(formData);
		        }
		  );
		}
		function ensureFormComponentIsStateful(formFiber) {
		  var existingStateHook = formFiber.memoizedState;
		  if (null !== existingStateHook) return existingStateHook;
		  existingStateHook = {
		    memoizedState: sharedNotPendingObject,
		    baseState: sharedNotPendingObject,
		    baseQueue: null,
		    queue: {
		      pending: null,
		      lanes: 0,
		      dispatch: null,
		      lastRenderedReducer: basicStateReducer,
		      lastRenderedState: sharedNotPendingObject
		    },
		    next: null
		  };
		  var initialResetState = {};
		  existingStateHook.next = {
		    memoizedState: initialResetState,
		    baseState: initialResetState,
		    baseQueue: null,
		    queue: {
		      pending: null,
		      lanes: 0,
		      dispatch: null,
		      lastRenderedReducer: basicStateReducer,
		      lastRenderedState: initialResetState
		    },
		    next: null
		  };
		  formFiber.memoizedState = existingStateHook;
		  formFiber = formFiber.alternate;
		  null !== formFiber && (formFiber.memoizedState = existingStateHook);
		  return existingStateHook;
		}
		function requestFormReset$1(formFiber) {
		  var resetStateQueue = ensureFormComponentIsStateful(formFiber).next.queue;
		  dispatchSetStateInternal(formFiber, resetStateQueue, {}, requestUpdateLane());
		}
		function useHostTransitionStatus() {
		  return readContext(HostTransitionContext);
		}
		function updateId() {
		  return updateWorkInProgressHook().memoizedState;
		}
		function updateRefresh() {
		  return updateWorkInProgressHook().memoizedState;
		}
		function refreshCache(fiber) {
		  for (var provider = fiber.return; null !== provider; ) {
		    switch (provider.tag) {
		      case 24:
		      case 3:
		        var lane = requestUpdateLane();
		        fiber = createUpdate(lane);
		        var root$41 = enqueueUpdate(provider, fiber, lane);
		        null !== root$41 &&
		          (scheduleUpdateOnFiber(root$41, provider, lane),
		          entangleTransitions(root$41, provider, lane));
		        provider = { cache: createCache() };
		        fiber.payload = provider;
		        return;
		    }
		    provider = provider.return;
		  }
		}
		function dispatchReducerAction(fiber, queue, action) {
		  var lane = requestUpdateLane();
		  action = {
		    lane: lane,
		    revertLane: 0,
		    action: action,
		    hasEagerState: false,
		    eagerState: null,
		    next: null
		  };
		  isRenderPhaseUpdate(fiber)
		    ? enqueueRenderPhaseUpdate(queue, action)
		    : ((action = enqueueConcurrentHookUpdate(fiber, queue, action, lane)),
		      null !== action &&
		        (scheduleUpdateOnFiber(action, fiber, lane),
		        entangleTransitionUpdate(action, queue, lane)));
		}
		function dispatchSetState(fiber, queue, action) {
		  var lane = requestUpdateLane();
		  dispatchSetStateInternal(fiber, queue, action, lane);
		}
		function dispatchSetStateInternal(fiber, queue, action, lane) {
		  var update = {
		    lane: lane,
		    revertLane: 0,
		    action: action,
		    hasEagerState: false,
		    eagerState: null,
		    next: null
		  };
		  if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
		  else {
		    var alternate = fiber.alternate;
		    if (
		      0 === fiber.lanes &&
		      (null === alternate || 0 === alternate.lanes) &&
		      ((alternate = queue.lastRenderedReducer), null !== alternate)
		    )
		      try {
		        var currentState = queue.lastRenderedState,
		          eagerState = alternate(currentState, action);
		        update.hasEagerState = !0;
		        update.eagerState = eagerState;
		        if (objectIs(eagerState, currentState))
		          return (
		            enqueueUpdate$1(fiber, queue, update, 0),
		            null === workInProgressRoot && finishQueueingConcurrentUpdates(),
		            !1
		          );
		      } catch (error) {
		      } finally {
		      }
		    action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
		    if (null !== action)
		      return (
		        scheduleUpdateOnFiber(action, fiber, lane),
		        entangleTransitionUpdate(action, queue, lane),
		        true
		      );
		  }
		  return false;
		}
		function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
		  action = {
		    lane: 2,
		    revertLane: requestTransitionLane(),
		    action: action,
		    hasEagerState: false,
		    eagerState: null,
		    next: null
		  };
		  if (isRenderPhaseUpdate(fiber)) {
		    if (throwIfDuringRender) throw Error(formatProdErrorMessage(479));
		  } else
		    (throwIfDuringRender = enqueueConcurrentHookUpdate(
		      fiber,
		      queue,
		      action,
		      2
		    )),
		      null !== throwIfDuringRender &&
		        scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
		}
		function isRenderPhaseUpdate(fiber) {
		  var alternate = fiber.alternate;
		  return (
		    fiber === currentlyRenderingFiber ||
		    (null !== alternate && alternate === currentlyRenderingFiber)
		  );
		}
		function enqueueRenderPhaseUpdate(queue, update) {
		  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate =
		    true;
		  var pending = queue.pending;
		  null === pending
		    ? (update.next = update)
		    : ((update.next = pending.next), (pending.next = update));
		  queue.pending = update;
		}
		function entangleTransitionUpdate(root, queue, lane) {
		  if (0 !== (lane & 4194048)) {
		    var queueLanes = queue.lanes;
		    queueLanes &= root.pendingLanes;
		    lane |= queueLanes;
		    queue.lanes = lane;
		    markRootEntangled(root, lane);
		  }
		}
		var ContextOnlyDispatcher = {
		    readContext: readContext,
		    use: use,
		    useCallback: throwInvalidHookError,
		    useContext: throwInvalidHookError,
		    useEffect: throwInvalidHookError,
		    useImperativeHandle: throwInvalidHookError,
		    useLayoutEffect: throwInvalidHookError,
		    useInsertionEffect: throwInvalidHookError,
		    useMemo: throwInvalidHookError,
		    useReducer: throwInvalidHookError,
		    useRef: throwInvalidHookError,
		    useState: throwInvalidHookError,
		    useDebugValue: throwInvalidHookError,
		    useDeferredValue: throwInvalidHookError,
		    useTransition: throwInvalidHookError,
		    useSyncExternalStore: throwInvalidHookError,
		    useId: throwInvalidHookError,
		    useHostTransitionStatus: throwInvalidHookError,
		    useFormState: throwInvalidHookError,
		    useActionState: throwInvalidHookError,
		    useOptimistic: throwInvalidHookError,
		    useMemoCache: throwInvalidHookError,
		    useCacheRefresh: throwInvalidHookError
		  },
		  HooksDispatcherOnMount = {
		    readContext: readContext,
		    use: use,
		    useCallback: function (callback, deps) {
		      mountWorkInProgressHook().memoizedState = [
		        callback,
		        void 0 === deps ? null : deps
		      ];
		      return callback;
		    },
		    useContext: readContext,
		    useEffect: mountEffect,
		    useImperativeHandle: function (ref, create, deps) {
		      deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
		      mountEffectImpl(
		        4194308,
		        4,
		        imperativeHandleEffect.bind(null, create, ref),
		        deps
		      );
		    },
		    useLayoutEffect: function (create, deps) {
		      return mountEffectImpl(4194308, 4, create, deps);
		    },
		    useInsertionEffect: function (create, deps) {
		      mountEffectImpl(4, 2, create, deps);
		    },
		    useMemo: function (nextCreate, deps) {
		      var hook = mountWorkInProgressHook();
		      deps = void 0 === deps ? null : deps;
		      var nextValue = nextCreate();
		      if (shouldDoubleInvokeUserFnsInHooksDEV) {
		        setIsStrictModeForDevtools(true);
		        try {
		          nextCreate();
		        } finally {
		          setIsStrictModeForDevtools(false);
		        }
		      }
		      hook.memoizedState = [nextValue, deps];
		      return nextValue;
		    },
		    useReducer: function (reducer, initialArg, init) {
		      var hook = mountWorkInProgressHook();
		      if (void 0 !== init) {
		        var initialState = init(initialArg);
		        if (shouldDoubleInvokeUserFnsInHooksDEV) {
		          setIsStrictModeForDevtools(true);
		          try {
		            init(initialArg);
		          } finally {
		            setIsStrictModeForDevtools(false);
		          }
		        }
		      } else initialState = initialArg;
		      hook.memoizedState = hook.baseState = initialState;
		      reducer = {
		        pending: null,
		        lanes: 0,
		        dispatch: null,
		        lastRenderedReducer: reducer,
		        lastRenderedState: initialState
		      };
		      hook.queue = reducer;
		      reducer = reducer.dispatch = dispatchReducerAction.bind(
		        null,
		        currentlyRenderingFiber,
		        reducer
		      );
		      return [hook.memoizedState, reducer];
		    },
		    useRef: function (initialValue) {
		      var hook = mountWorkInProgressHook();
		      initialValue = { current: initialValue };
		      return (hook.memoizedState = initialValue);
		    },
		    useState: function (initialState) {
		      initialState = mountStateImpl(initialState);
		      var queue = initialState.queue,
		        dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
		      queue.dispatch = dispatch;
		      return [initialState.memoizedState, dispatch];
		    },
		    useDebugValue: mountDebugValue,
		    useDeferredValue: function (value, initialValue) {
		      var hook = mountWorkInProgressHook();
		      return mountDeferredValueImpl(hook, value, initialValue);
		    },
		    useTransition: function () {
		      var stateHook = mountStateImpl(false);
		      stateHook = startTransition.bind(
		        null,
		        currentlyRenderingFiber,
		        stateHook.queue,
		        true,
		        false
		      );
		      mountWorkInProgressHook().memoizedState = stateHook;
		      return [false, stateHook];
		    },
		    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
		      var fiber = currentlyRenderingFiber,
		        hook = mountWorkInProgressHook();
		      if (isHydrating) {
		        if (void 0 === getServerSnapshot)
		          throw Error(formatProdErrorMessage(407));
		        getServerSnapshot = getServerSnapshot();
		      } else {
		        getServerSnapshot = getSnapshot();
		        if (null === workInProgressRoot)
		          throw Error(formatProdErrorMessage(349));
		        0 !== (workInProgressRootRenderLanes & 124) ||
		          pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
		      }
		      hook.memoizedState = getServerSnapshot;
		      var inst = { value: getServerSnapshot, getSnapshot: getSnapshot };
		      hook.queue = inst;
		      mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
		        subscribe
		      ]);
		      fiber.flags |= 2048;
		      pushSimpleEffect(
		        9,
		        createEffectInstance(),
		        updateStoreInstance.bind(
		          null,
		          fiber,
		          inst,
		          getServerSnapshot,
		          getSnapshot
		        ),
		        null
		      );
		      return getServerSnapshot;
		    },
		    useId: function () {
		      var hook = mountWorkInProgressHook(),
		        identifierPrefix = workInProgressRoot.identifierPrefix;
		      if (isHydrating) {
		        var JSCompiler_inline_result = treeContextOverflow;
		        var idWithLeadingBit = treeContextId;
		        JSCompiler_inline_result =
		          (
		            idWithLeadingBit & ~(1 << (32 - clz32(idWithLeadingBit) - 1))
		          ).toString(32) + JSCompiler_inline_result;
		        identifierPrefix =
		          "\u00ab" + identifierPrefix + "R" + JSCompiler_inline_result;
		        JSCompiler_inline_result = localIdCounter++;
		        0 < JSCompiler_inline_result &&
		          (identifierPrefix += "H" + JSCompiler_inline_result.toString(32));
		        identifierPrefix += "\u00bb";
		      } else
		        (JSCompiler_inline_result = globalClientIdCounter++),
		          (identifierPrefix =
		            "\u00ab" +
		            identifierPrefix +
		            "r" +
		            JSCompiler_inline_result.toString(32) +
		            "\u00bb");
		      return (hook.memoizedState = identifierPrefix);
		    },
		    useHostTransitionStatus: useHostTransitionStatus,
		    useFormState: mountActionState,
		    useActionState: mountActionState,
		    useOptimistic: function (passthrough) {
		      var hook = mountWorkInProgressHook();
		      hook.memoizedState = hook.baseState = passthrough;
		      var queue = {
		        pending: null,
		        lanes: 0,
		        dispatch: null,
		        lastRenderedReducer: null,
		        lastRenderedState: null
		      };
		      hook.queue = queue;
		      hook = dispatchOptimisticSetState.bind(
		        null,
		        currentlyRenderingFiber,
		        true,
		        queue
		      );
		      queue.dispatch = hook;
		      return [passthrough, hook];
		    },
		    useMemoCache: useMemoCache,
		    useCacheRefresh: function () {
		      return (mountWorkInProgressHook().memoizedState = refreshCache.bind(
		        null,
		        currentlyRenderingFiber
		      ));
		    }
		  },
		  HooksDispatcherOnUpdate = {
		    readContext: readContext,
		    use: use,
		    useCallback: updateCallback,
		    useContext: readContext,
		    useEffect: updateEffect,
		    useImperativeHandle: updateImperativeHandle,
		    useInsertionEffect: updateInsertionEffect,
		    useLayoutEffect: updateLayoutEffect,
		    useMemo: updateMemo,
		    useReducer: updateReducer,
		    useRef: updateRef,
		    useState: function () {
		      return updateReducer(basicStateReducer);
		    },
		    useDebugValue: mountDebugValue,
		    useDeferredValue: function (value, initialValue) {
		      var hook = updateWorkInProgressHook();
		      return updateDeferredValueImpl(
		        hook,
		        currentHook.memoizedState,
		        value,
		        initialValue
		      );
		    },
		    useTransition: function () {
		      var booleanOrThenable = updateReducer(basicStateReducer)[0],
		        start = updateWorkInProgressHook().memoizedState;
		      return [
		        "boolean" === typeof booleanOrThenable
		          ? booleanOrThenable
		          : useThenable(booleanOrThenable),
		        start
		      ];
		    },
		    useSyncExternalStore: updateSyncExternalStore,
		    useId: updateId,
		    useHostTransitionStatus: useHostTransitionStatus,
		    useFormState: updateActionState,
		    useActionState: updateActionState,
		    useOptimistic: function (passthrough, reducer) {
		      var hook = updateWorkInProgressHook();
		      return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
		    },
		    useMemoCache: useMemoCache,
		    useCacheRefresh: updateRefresh
		  },
		  HooksDispatcherOnRerender = {
		    readContext: readContext,
		    use: use,
		    useCallback: updateCallback,
		    useContext: readContext,
		    useEffect: updateEffect,
		    useImperativeHandle: updateImperativeHandle,
		    useInsertionEffect: updateInsertionEffect,
		    useLayoutEffect: updateLayoutEffect,
		    useMemo: updateMemo,
		    useReducer: rerenderReducer,
		    useRef: updateRef,
		    useState: function () {
		      return rerenderReducer(basicStateReducer);
		    },
		    useDebugValue: mountDebugValue,
		    useDeferredValue: function (value, initialValue) {
		      var hook = updateWorkInProgressHook();
		      return null === currentHook
		        ? mountDeferredValueImpl(hook, value, initialValue)
		        : updateDeferredValueImpl(
		            hook,
		            currentHook.memoizedState,
		            value,
		            initialValue
		          );
		    },
		    useTransition: function () {
		      var booleanOrThenable = rerenderReducer(basicStateReducer)[0],
		        start = updateWorkInProgressHook().memoizedState;
		      return [
		        "boolean" === typeof booleanOrThenable
		          ? booleanOrThenable
		          : useThenable(booleanOrThenable),
		        start
		      ];
		    },
		    useSyncExternalStore: updateSyncExternalStore,
		    useId: updateId,
		    useHostTransitionStatus: useHostTransitionStatus,
		    useFormState: rerenderActionState,
		    useActionState: rerenderActionState,
		    useOptimistic: function (passthrough, reducer) {
		      var hook = updateWorkInProgressHook();
		      if (null !== currentHook)
		        return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
		      hook.baseState = passthrough;
		      return [passthrough, hook.queue.dispatch];
		    },
		    useMemoCache: useMemoCache,
		    useCacheRefresh: updateRefresh
		  },
		  thenableState = null,
		  thenableIndexCounter = 0;
		function unwrapThenable(thenable) {
		  var index = thenableIndexCounter;
		  thenableIndexCounter += 1;
		  null === thenableState && (thenableState = []);
		  return trackUsedThenable(thenableState, thenable, index);
		}
		function coerceRef(workInProgress, element) {
		  element = element.props.ref;
		  workInProgress.ref = void 0 !== element ? element : null;
		}
		function throwOnInvalidObjectType(returnFiber, newChild) {
		  if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
		    throw Error(formatProdErrorMessage(525));
		  returnFiber = Object.prototype.toString.call(newChild);
		  throw Error(
		    formatProdErrorMessage(
		      31,
		      "[object Object]" === returnFiber
		        ? "object with keys {" + Object.keys(newChild).join(", ") + "}"
		        : returnFiber
		    )
		  );
		}
		function resolveLazy(lazyType) {
		  var init = lazyType._init;
		  return init(lazyType._payload);
		}
		function createChildReconciler(shouldTrackSideEffects) {
		  function deleteChild(returnFiber, childToDelete) {
		    if (shouldTrackSideEffects) {
		      var deletions = returnFiber.deletions;
		      null === deletions
		        ? ((returnFiber.deletions = [childToDelete]), (returnFiber.flags |= 16))
		        : deletions.push(childToDelete);
		    }
		  }
		  function deleteRemainingChildren(returnFiber, currentFirstChild) {
		    if (!shouldTrackSideEffects) return null;
		    for (; null !== currentFirstChild; )
		      deleteChild(returnFiber, currentFirstChild),
		        (currentFirstChild = currentFirstChild.sibling);
		    return null;
		  }
		  function mapRemainingChildren(currentFirstChild) {
		    for (var existingChildren = new Map(); null !== currentFirstChild; )
		      null !== currentFirstChild.key
		        ? existingChildren.set(currentFirstChild.key, currentFirstChild)
		        : existingChildren.set(currentFirstChild.index, currentFirstChild),
		        (currentFirstChild = currentFirstChild.sibling);
		    return existingChildren;
		  }
		  function useFiber(fiber, pendingProps) {
		    fiber = createWorkInProgress(fiber, pendingProps);
		    fiber.index = 0;
		    fiber.sibling = null;
		    return fiber;
		  }
		  function placeChild(newFiber, lastPlacedIndex, newIndex) {
		    newFiber.index = newIndex;
		    if (!shouldTrackSideEffects)
		      return (newFiber.flags |= 1048576), lastPlacedIndex;
		    newIndex = newFiber.alternate;
		    if (null !== newIndex)
		      return (
		        (newIndex = newIndex.index),
		        newIndex < lastPlacedIndex
		          ? ((newFiber.flags |= 67108866), lastPlacedIndex)
		          : newIndex
		      );
		    newFiber.flags |= 67108866;
		    return lastPlacedIndex;
		  }
		  function placeSingleChild(newFiber) {
		    shouldTrackSideEffects &&
		      null === newFiber.alternate &&
		      (newFiber.flags |= 67108866);
		    return newFiber;
		  }
		  function updateTextNode(returnFiber, current, textContent, lanes) {
		    if (null === current || 6 !== current.tag)
		      return (
		        (current = createFiberFromText(textContent, returnFiber.mode, lanes)),
		        (current.return = returnFiber),
		        current
		      );
		    current = useFiber(current, textContent);
		    current.return = returnFiber;
		    return current;
		  }
		  function updateElement(returnFiber, current, element, lanes) {
		    var elementType = element.type;
		    if (elementType === REACT_FRAGMENT_TYPE)
		      return updateFragment(
		        returnFiber,
		        current,
		        element.props.children,
		        lanes,
		        element.key
		      );
		    if (
		      null !== current &&
		      (current.elementType === elementType ||
		        ("object" === typeof elementType &&
		          null !== elementType &&
		          elementType.$$typeof === REACT_LAZY_TYPE &&
		          resolveLazy(elementType) === current.type))
		    )
		      return (
		        (current = useFiber(current, element.props)),
		        coerceRef(current, element),
		        (current.return = returnFiber),
		        current
		      );
		    current = createFiberFromTypeAndProps(
		      element.type,
		      element.key,
		      element.props,
		      null,
		      returnFiber.mode,
		      lanes
		    );
		    coerceRef(current, element);
		    current.return = returnFiber;
		    return current;
		  }
		  function updatePortal(returnFiber, current, portal, lanes) {
		    if (
		      null === current ||
		      4 !== current.tag ||
		      current.stateNode.containerInfo !== portal.containerInfo ||
		      current.stateNode.implementation !== portal.implementation
		    )
		      return (
		        (current = createFiberFromPortal(portal, returnFiber.mode, lanes)),
		        (current.return = returnFiber),
		        current
		      );
		    current = useFiber(current, portal.children || []);
		    current.return = returnFiber;
		    return current;
		  }
		  function updateFragment(returnFiber, current, fragment, lanes, key) {
		    if (null === current || 7 !== current.tag)
		      return (
		        (current = createFiberFromFragment(
		          fragment,
		          returnFiber.mode,
		          lanes,
		          key
		        )),
		        (current.return = returnFiber),
		        current
		      );
		    current = useFiber(current, fragment);
		    current.return = returnFiber;
		    return current;
		  }
		  function createChild(returnFiber, newChild, lanes) {
		    if (
		      ("string" === typeof newChild && "" !== newChild) ||
		      "number" === typeof newChild ||
		      "bigint" === typeof newChild
		    )
		      return (
		        (newChild = createFiberFromText(
		          "" + newChild,
		          returnFiber.mode,
		          lanes
		        )),
		        (newChild.return = returnFiber),
		        newChild
		      );
		    if ("object" === typeof newChild && null !== newChild) {
		      switch (newChild.$$typeof) {
		        case REACT_ELEMENT_TYPE:
		          return (
		            (lanes = createFiberFromTypeAndProps(
		              newChild.type,
		              newChild.key,
		              newChild.props,
		              null,
		              returnFiber.mode,
		              lanes
		            )),
		            coerceRef(lanes, newChild),
		            (lanes.return = returnFiber),
		            lanes
		          );
		        case REACT_PORTAL_TYPE:
		          return (
		            (newChild = createFiberFromPortal(
		              newChild,
		              returnFiber.mode,
		              lanes
		            )),
		            (newChild.return = returnFiber),
		            newChild
		          );
		        case REACT_LAZY_TYPE:
		          var init = newChild._init;
		          newChild = init(newChild._payload);
		          return createChild(returnFiber, newChild, lanes);
		      }
		      if (isArrayImpl(newChild) || getIteratorFn(newChild))
		        return (
		          (newChild = createFiberFromFragment(
		            newChild,
		            returnFiber.mode,
		            lanes,
		            null
		          )),
		          (newChild.return = returnFiber),
		          newChild
		        );
		      if ("function" === typeof newChild.then)
		        return createChild(returnFiber, unwrapThenable(newChild), lanes);
		      if (newChild.$$typeof === REACT_CONTEXT_TYPE)
		        return createChild(
		          returnFiber,
		          readContextDuringReconciliation(returnFiber, newChild),
		          lanes
		        );
		      throwOnInvalidObjectType(returnFiber, newChild);
		    }
		    return null;
		  }
		  function updateSlot(returnFiber, oldFiber, newChild, lanes) {
		    var key = null !== oldFiber ? oldFiber.key : null;
		    if (
		      ("string" === typeof newChild && "" !== newChild) ||
		      "number" === typeof newChild ||
		      "bigint" === typeof newChild
		    )
		      return null !== key
		        ? null
		        : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
		    if ("object" === typeof newChild && null !== newChild) {
		      switch (newChild.$$typeof) {
		        case REACT_ELEMENT_TYPE:
		          return newChild.key === key
		            ? updateElement(returnFiber, oldFiber, newChild, lanes)
		            : null;
		        case REACT_PORTAL_TYPE:
		          return newChild.key === key
		            ? updatePortal(returnFiber, oldFiber, newChild, lanes)
		            : null;
		        case REACT_LAZY_TYPE:
		          return (
		            (key = newChild._init),
		            (newChild = key(newChild._payload)),
		            updateSlot(returnFiber, oldFiber, newChild, lanes)
		          );
		      }
		      if (isArrayImpl(newChild) || getIteratorFn(newChild))
		        return null !== key
		          ? null
		          : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
		      if ("function" === typeof newChild.then)
		        return updateSlot(
		          returnFiber,
		          oldFiber,
		          unwrapThenable(newChild),
		          lanes
		        );
		      if (newChild.$$typeof === REACT_CONTEXT_TYPE)
		        return updateSlot(
		          returnFiber,
		          oldFiber,
		          readContextDuringReconciliation(returnFiber, newChild),
		          lanes
		        );
		      throwOnInvalidObjectType(returnFiber, newChild);
		    }
		    return null;
		  }
		  function updateFromMap(
		    existingChildren,
		    returnFiber,
		    newIdx,
		    newChild,
		    lanes
		  ) {
		    if (
		      ("string" === typeof newChild && "" !== newChild) ||
		      "number" === typeof newChild ||
		      "bigint" === typeof newChild
		    )
		      return (
		        (existingChildren = existingChildren.get(newIdx) || null),
		        updateTextNode(returnFiber, existingChildren, "" + newChild, lanes)
		      );
		    if ("object" === typeof newChild && null !== newChild) {
		      switch (newChild.$$typeof) {
		        case REACT_ELEMENT_TYPE:
		          return (
		            (existingChildren =
		              existingChildren.get(
		                null === newChild.key ? newIdx : newChild.key
		              ) || null),
		            updateElement(returnFiber, existingChildren, newChild, lanes)
		          );
		        case REACT_PORTAL_TYPE:
		          return (
		            (existingChildren =
		              existingChildren.get(
		                null === newChild.key ? newIdx : newChild.key
		              ) || null),
		            updatePortal(returnFiber, existingChildren, newChild, lanes)
		          );
		        case REACT_LAZY_TYPE:
		          var init = newChild._init;
		          newChild = init(newChild._payload);
		          return updateFromMap(
		            existingChildren,
		            returnFiber,
		            newIdx,
		            newChild,
		            lanes
		          );
		      }
		      if (isArrayImpl(newChild) || getIteratorFn(newChild))
		        return (
		          (existingChildren = existingChildren.get(newIdx) || null),
		          updateFragment(returnFiber, existingChildren, newChild, lanes, null)
		        );
		      if ("function" === typeof newChild.then)
		        return updateFromMap(
		          existingChildren,
		          returnFiber,
		          newIdx,
		          unwrapThenable(newChild),
		          lanes
		        );
		      if (newChild.$$typeof === REACT_CONTEXT_TYPE)
		        return updateFromMap(
		          existingChildren,
		          returnFiber,
		          newIdx,
		          readContextDuringReconciliation(returnFiber, newChild),
		          lanes
		        );
		      throwOnInvalidObjectType(returnFiber, newChild);
		    }
		    return null;
		  }
		  function reconcileChildrenArray(
		    returnFiber,
		    currentFirstChild,
		    newChildren,
		    lanes
		  ) {
		    for (
		      var resultingFirstChild = null,
		        previousNewFiber = null,
		        oldFiber = currentFirstChild,
		        newIdx = (currentFirstChild = 0),
		        nextOldFiber = null;
		      null !== oldFiber && newIdx < newChildren.length;
		      newIdx++
		    ) {
		      oldFiber.index > newIdx
		        ? ((nextOldFiber = oldFiber), (oldFiber = null))
		        : (nextOldFiber = oldFiber.sibling);
		      var newFiber = updateSlot(
		        returnFiber,
		        oldFiber,
		        newChildren[newIdx],
		        lanes
		      );
		      if (null === newFiber) {
		        null === oldFiber && (oldFiber = nextOldFiber);
		        break;
		      }
		      shouldTrackSideEffects &&
		        oldFiber &&
		        null === newFiber.alternate &&
		        deleteChild(returnFiber, oldFiber);
		      currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
		      null === previousNewFiber
		        ? (resultingFirstChild = newFiber)
		        : (previousNewFiber.sibling = newFiber);
		      previousNewFiber = newFiber;
		      oldFiber = nextOldFiber;
		    }
		    if (newIdx === newChildren.length)
		      return (
		        deleteRemainingChildren(returnFiber, oldFiber),
		        isHydrating && pushTreeFork(returnFiber, newIdx),
		        resultingFirstChild
		      );
		    if (null === oldFiber) {
		      for (; newIdx < newChildren.length; newIdx++)
		        (oldFiber = createChild(returnFiber, newChildren[newIdx], lanes)),
		          null !== oldFiber &&
		            ((currentFirstChild = placeChild(
		              oldFiber,
		              currentFirstChild,
		              newIdx
		            )),
		            null === previousNewFiber
		              ? (resultingFirstChild = oldFiber)
		              : (previousNewFiber.sibling = oldFiber),
		            (previousNewFiber = oldFiber));
		      isHydrating && pushTreeFork(returnFiber, newIdx);
		      return resultingFirstChild;
		    }
		    for (
		      oldFiber = mapRemainingChildren(oldFiber);
		      newIdx < newChildren.length;
		      newIdx++
		    )
		      (nextOldFiber = updateFromMap(
		        oldFiber,
		        returnFiber,
		        newIdx,
		        newChildren[newIdx],
		        lanes
		      )),
		        null !== nextOldFiber &&
		          (shouldTrackSideEffects &&
		            null !== nextOldFiber.alternate &&
		            oldFiber.delete(
		              null === nextOldFiber.key ? newIdx : nextOldFiber.key
		            ),
		          (currentFirstChild = placeChild(
		            nextOldFiber,
		            currentFirstChild,
		            newIdx
		          )),
		          null === previousNewFiber
		            ? (resultingFirstChild = nextOldFiber)
		            : (previousNewFiber.sibling = nextOldFiber),
		          (previousNewFiber = nextOldFiber));
		    shouldTrackSideEffects &&
		      oldFiber.forEach(function (child) {
		        return deleteChild(returnFiber, child);
		      });
		    isHydrating && pushTreeFork(returnFiber, newIdx);
		    return resultingFirstChild;
		  }
		  function reconcileChildrenIterator(
		    returnFiber,
		    currentFirstChild,
		    newChildren,
		    lanes
		  ) {
		    if (null == newChildren) throw Error(formatProdErrorMessage(151));
		    for (
		      var resultingFirstChild = null,
		        previousNewFiber = null,
		        oldFiber = currentFirstChild,
		        newIdx = (currentFirstChild = 0),
		        nextOldFiber = null,
		        step = newChildren.next();
		      null !== oldFiber && !step.done;
		      newIdx++, step = newChildren.next()
		    ) {
		      oldFiber.index > newIdx
		        ? ((nextOldFiber = oldFiber), (oldFiber = null))
		        : (nextOldFiber = oldFiber.sibling);
		      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
		      if (null === newFiber) {
		        null === oldFiber && (oldFiber = nextOldFiber);
		        break;
		      }
		      shouldTrackSideEffects &&
		        oldFiber &&
		        null === newFiber.alternate &&
		        deleteChild(returnFiber, oldFiber);
		      currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
		      null === previousNewFiber
		        ? (resultingFirstChild = newFiber)
		        : (previousNewFiber.sibling = newFiber);
		      previousNewFiber = newFiber;
		      oldFiber = nextOldFiber;
		    }
		    if (step.done)
		      return (
		        deleteRemainingChildren(returnFiber, oldFiber),
		        isHydrating && pushTreeFork(returnFiber, newIdx),
		        resultingFirstChild
		      );
		    if (null === oldFiber) {
		      for (; !step.done; newIdx++, step = newChildren.next())
		        (step = createChild(returnFiber, step.value, lanes)),
		          null !== step &&
		            ((currentFirstChild = placeChild(step, currentFirstChild, newIdx)),
		            null === previousNewFiber
		              ? (resultingFirstChild = step)
		              : (previousNewFiber.sibling = step),
		            (previousNewFiber = step));
		      isHydrating && pushTreeFork(returnFiber, newIdx);
		      return resultingFirstChild;
		    }
		    for (
		      oldFiber = mapRemainingChildren(oldFiber);
		      !step.done;
		      newIdx++, step = newChildren.next()
		    )
		      (step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes)),
		        null !== step &&
		          (shouldTrackSideEffects &&
		            null !== step.alternate &&
		            oldFiber.delete(null === step.key ? newIdx : step.key),
		          (currentFirstChild = placeChild(step, currentFirstChild, newIdx)),
		          null === previousNewFiber
		            ? (resultingFirstChild = step)
		            : (previousNewFiber.sibling = step),
		          (previousNewFiber = step));
		    shouldTrackSideEffects &&
		      oldFiber.forEach(function (child) {
		        return deleteChild(returnFiber, child);
		      });
		    isHydrating && pushTreeFork(returnFiber, newIdx);
		    return resultingFirstChild;
		  }
		  function reconcileChildFibersImpl(
		    returnFiber,
		    currentFirstChild,
		    newChild,
		    lanes
		  ) {
		    "object" === typeof newChild &&
		      null !== newChild &&
		      newChild.type === REACT_FRAGMENT_TYPE &&
		      null === newChild.key &&
		      (newChild = newChild.props.children);
		    if ("object" === typeof newChild && null !== newChild) {
		      switch (newChild.$$typeof) {
		        case REACT_ELEMENT_TYPE:
		          a: {
		            for (var key = newChild.key; null !== currentFirstChild; ) {
		              if (currentFirstChild.key === key) {
		                key = newChild.type;
		                if (key === REACT_FRAGMENT_TYPE) {
		                  if (7 === currentFirstChild.tag) {
		                    deleteRemainingChildren(
		                      returnFiber,
		                      currentFirstChild.sibling
		                    );
		                    lanes = useFiber(
		                      currentFirstChild,
		                      newChild.props.children
		                    );
		                    lanes.return = returnFiber;
		                    returnFiber = lanes;
		                    break a;
		                  }
		                } else if (
		                  currentFirstChild.elementType === key ||
		                  ("object" === typeof key &&
		                    null !== key &&
		                    key.$$typeof === REACT_LAZY_TYPE &&
		                    resolveLazy(key) === currentFirstChild.type)
		                ) {
		                  deleteRemainingChildren(
		                    returnFiber,
		                    currentFirstChild.sibling
		                  );
		                  lanes = useFiber(currentFirstChild, newChild.props);
		                  coerceRef(lanes, newChild);
		                  lanes.return = returnFiber;
		                  returnFiber = lanes;
		                  break a;
		                }
		                deleteRemainingChildren(returnFiber, currentFirstChild);
		                break;
		              } else deleteChild(returnFiber, currentFirstChild);
		              currentFirstChild = currentFirstChild.sibling;
		            }
		            newChild.type === REACT_FRAGMENT_TYPE
		              ? ((lanes = createFiberFromFragment(
		                  newChild.props.children,
		                  returnFiber.mode,
		                  lanes,
		                  newChild.key
		                )),
		                (lanes.return = returnFiber),
		                (returnFiber = lanes))
		              : ((lanes = createFiberFromTypeAndProps(
		                  newChild.type,
		                  newChild.key,
		                  newChild.props,
		                  null,
		                  returnFiber.mode,
		                  lanes
		                )),
		                coerceRef(lanes, newChild),
		                (lanes.return = returnFiber),
		                (returnFiber = lanes));
		          }
		          return placeSingleChild(returnFiber);
		        case REACT_PORTAL_TYPE:
		          a: {
		            for (key = newChild.key; null !== currentFirstChild; ) {
		              if (currentFirstChild.key === key)
		                if (
		                  4 === currentFirstChild.tag &&
		                  currentFirstChild.stateNode.containerInfo ===
		                    newChild.containerInfo &&
		                  currentFirstChild.stateNode.implementation ===
		                    newChild.implementation
		                ) {
		                  deleteRemainingChildren(
		                    returnFiber,
		                    currentFirstChild.sibling
		                  );
		                  lanes = useFiber(currentFirstChild, newChild.children || []);
		                  lanes.return = returnFiber;
		                  returnFiber = lanes;
		                  break a;
		                } else {
		                  deleteRemainingChildren(returnFiber, currentFirstChild);
		                  break;
		                }
		              else deleteChild(returnFiber, currentFirstChild);
		              currentFirstChild = currentFirstChild.sibling;
		            }
		            lanes = createFiberFromPortal(newChild, returnFiber.mode, lanes);
		            lanes.return = returnFiber;
		            returnFiber = lanes;
		          }
		          return placeSingleChild(returnFiber);
		        case REACT_LAZY_TYPE:
		          return (
		            (key = newChild._init),
		            (newChild = key(newChild._payload)),
		            reconcileChildFibersImpl(
		              returnFiber,
		              currentFirstChild,
		              newChild,
		              lanes
		            )
		          );
		      }
		      if (isArrayImpl(newChild))
		        return reconcileChildrenArray(
		          returnFiber,
		          currentFirstChild,
		          newChild,
		          lanes
		        );
		      if (getIteratorFn(newChild)) {
		        key = getIteratorFn(newChild);
		        if ("function" !== typeof key) throw Error(formatProdErrorMessage(150));
		        newChild = key.call(newChild);
		        return reconcileChildrenIterator(
		          returnFiber,
		          currentFirstChild,
		          newChild,
		          lanes
		        );
		      }
		      if ("function" === typeof newChild.then)
		        return reconcileChildFibersImpl(
		          returnFiber,
		          currentFirstChild,
		          unwrapThenable(newChild),
		          lanes
		        );
		      if (newChild.$$typeof === REACT_CONTEXT_TYPE)
		        return reconcileChildFibersImpl(
		          returnFiber,
		          currentFirstChild,
		          readContextDuringReconciliation(returnFiber, newChild),
		          lanes
		        );
		      throwOnInvalidObjectType(returnFiber, newChild);
		    }
		    return ("string" === typeof newChild && "" !== newChild) ||
		      "number" === typeof newChild ||
		      "bigint" === typeof newChild
		      ? ((newChild = "" + newChild),
		        null !== currentFirstChild && 6 === currentFirstChild.tag
		          ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling),
		            (lanes = useFiber(currentFirstChild, newChild)),
		            (lanes.return = returnFiber),
		            (returnFiber = lanes))
		          : (deleteRemainingChildren(returnFiber, currentFirstChild),
		            (lanes = createFiberFromText(newChild, returnFiber.mode, lanes)),
		            (lanes.return = returnFiber),
		            (returnFiber = lanes)),
		        placeSingleChild(returnFiber))
		      : deleteRemainingChildren(returnFiber, currentFirstChild);
		  }
		  return function (returnFiber, currentFirstChild, newChild, lanes) {
		    try {
		      thenableIndexCounter = 0;
		      var firstChildFiber = reconcileChildFibersImpl(
		        returnFiber,
		        currentFirstChild,
		        newChild,
		        lanes
		      );
		      thenableState = null;
		      return firstChildFiber;
		    } catch (x) {
		      if (x === SuspenseException || x === SuspenseActionException) throw x;
		      var fiber = createFiberImplClass(29, x, null, returnFiber.mode);
		      fiber.lanes = lanes;
		      fiber.return = returnFiber;
		      return fiber;
		    } finally {
		    }
		  };
		}
		var reconcileChildFibers = createChildReconciler(true),
		  mountChildFibers = createChildReconciler(false),
		  suspenseHandlerStackCursor = createCursor(null),
		  shellBoundary = null;
		function pushPrimaryTreeSuspenseHandler(handler) {
		  var current = handler.alternate;
		  push(suspenseStackCursor, suspenseStackCursor.current & 1);
		  push(suspenseHandlerStackCursor, handler);
		  null === shellBoundary &&
		    (null === current || null !== currentTreeHiddenStackCursor.current
		      ? (shellBoundary = handler)
		      : null !== current.memoizedState && (shellBoundary = handler));
		}
		function pushOffscreenSuspenseHandler(fiber) {
		  if (22 === fiber.tag) {
		    if (
		      (push(suspenseStackCursor, suspenseStackCursor.current),
		      push(suspenseHandlerStackCursor, fiber),
		      null === shellBoundary)
		    ) {
		      var current = fiber.alternate;
		      null !== current &&
		        null !== current.memoizedState &&
		        (shellBoundary = fiber);
		    }
		  } else reuseSuspenseHandlerOnStack();
		}
		function reuseSuspenseHandlerOnStack() {
		  push(suspenseStackCursor, suspenseStackCursor.current);
		  push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current);
		}
		function popSuspenseHandler(fiber) {
		  pop(suspenseHandlerStackCursor);
		  shellBoundary === fiber && (shellBoundary = null);
		  pop(suspenseStackCursor);
		}
		var suspenseStackCursor = createCursor(0);
		function findFirstSuspended(row) {
		  for (var node = row; null !== node; ) {
		    if (13 === node.tag) {
		      var state = node.memoizedState;
		      if (
		        null !== state &&
		        ((state = state.dehydrated),
		        null === state ||
		          "$?" === state.data ||
		          isSuspenseInstanceFallback(state))
		      )
		        return node;
		    } else if (19 === node.tag && void 0 !== node.memoizedProps.revealOrder) {
		      if (0 !== (node.flags & 128)) return node;
		    } else if (null !== node.child) {
		      node.child.return = node;
		      node = node.child;
		      continue;
		    }
		    if (node === row) break;
		    for (; null === node.sibling; ) {
		      if (null === node.return || node.return === row) return null;
		      node = node.return;
		    }
		    node.sibling.return = node.return;
		    node = node.sibling;
		  }
		  return null;
		}
		function applyDerivedStateFromProps(
		  workInProgress,
		  ctor,
		  getDerivedStateFromProps,
		  nextProps
		) {
		  ctor = workInProgress.memoizedState;
		  getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
		  getDerivedStateFromProps =
		    null === getDerivedStateFromProps || void 0 === getDerivedStateFromProps
		      ? ctor
		      : assign({}, ctor, getDerivedStateFromProps);
		  workInProgress.memoizedState = getDerivedStateFromProps;
		  0 === workInProgress.lanes &&
		    (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
		}
		var classComponentUpdater = {
		  enqueueSetState: function (inst, payload, callback) {
		    inst = inst._reactInternals;
		    var lane = requestUpdateLane(),
		      update = createUpdate(lane);
		    update.payload = payload;
		    void 0 !== callback && null !== callback && (update.callback = callback);
		    payload = enqueueUpdate(inst, update, lane);
		    null !== payload &&
		      (scheduleUpdateOnFiber(payload, inst, lane),
		      entangleTransitions(payload, inst, lane));
		  },
		  enqueueReplaceState: function (inst, payload, callback) {
		    inst = inst._reactInternals;
		    var lane = requestUpdateLane(),
		      update = createUpdate(lane);
		    update.tag = 1;
		    update.payload = payload;
		    void 0 !== callback && null !== callback && (update.callback = callback);
		    payload = enqueueUpdate(inst, update, lane);
		    null !== payload &&
		      (scheduleUpdateOnFiber(payload, inst, lane),
		      entangleTransitions(payload, inst, lane));
		  },
		  enqueueForceUpdate: function (inst, callback) {
		    inst = inst._reactInternals;
		    var lane = requestUpdateLane(),
		      update = createUpdate(lane);
		    update.tag = 2;
		    void 0 !== callback && null !== callback && (update.callback = callback);
		    callback = enqueueUpdate(inst, update, lane);
		    null !== callback &&
		      (scheduleUpdateOnFiber(callback, inst, lane),
		      entangleTransitions(callback, inst, lane));
		  }
		};
		function checkShouldComponentUpdate(
		  workInProgress,
		  ctor,
		  oldProps,
		  newProps,
		  oldState,
		  newState,
		  nextContext
		) {
		  workInProgress = workInProgress.stateNode;
		  return "function" === typeof workInProgress.shouldComponentUpdate
		    ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext)
		    : ctor.prototype && ctor.prototype.isPureReactComponent
		      ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)
		      : true;
		}
		function callComponentWillReceiveProps(
		  workInProgress,
		  instance,
		  newProps,
		  nextContext
		) {
		  workInProgress = instance.state;
		  "function" === typeof instance.componentWillReceiveProps &&
		    instance.componentWillReceiveProps(newProps, nextContext);
		  "function" === typeof instance.UNSAFE_componentWillReceiveProps &&
		    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
		  instance.state !== workInProgress &&
		    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
		}
		function resolveClassComponentProps(Component, baseProps) {
		  var newProps = baseProps;
		  if ("ref" in baseProps) {
		    newProps = {};
		    for (var propName in baseProps)
		      "ref" !== propName && (newProps[propName] = baseProps[propName]);
		  }
		  if ((Component = Component.defaultProps)) {
		    newProps === baseProps && (newProps = assign({}, newProps));
		    for (var propName$73 in Component)
		      void 0 === newProps[propName$73] &&
		        (newProps[propName$73] = Component[propName$73]);
		  }
		  return newProps;
		}
		var reportGlobalError =
		  "function" === typeof reportError
		    ? reportError
		    : function (error) {
		        if (
		          "object" === typeof window &&
		          "function" === typeof window.ErrorEvent
		        ) {
		          var event = new window.ErrorEvent("error", {
		            bubbles: true,
		            cancelable: true,
		            message:
		              "object" === typeof error &&
		              null !== error &&
		              "string" === typeof error.message
		                ? String(error.message)
		                : String(error),
		            error: error
		          });
		          if (!window.dispatchEvent(event)) return;
		        } else if (
		          "object" === typeof process &&
		          "function" === typeof process.emit
		        ) {
		          process.emit("uncaughtException", error);
		          return;
		        }
		        console.error(error);
		      };
		function defaultOnUncaughtError(error) {
		  reportGlobalError(error);
		}
		function defaultOnCaughtError(error) {
		  console.error(error);
		}
		function defaultOnRecoverableError(error) {
		  reportGlobalError(error);
		}
		function logUncaughtError(root, errorInfo) {
		  try {
		    var onUncaughtError = root.onUncaughtError;
		    onUncaughtError(errorInfo.value, { componentStack: errorInfo.stack });
		  } catch (e$74) {
		    setTimeout(function () {
		      throw e$74;
		    });
		  }
		}
		function logCaughtError(root, boundary, errorInfo) {
		  try {
		    var onCaughtError = root.onCaughtError;
		    onCaughtError(errorInfo.value, {
		      componentStack: errorInfo.stack,
		      errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
		    });
		  } catch (e$75) {
		    setTimeout(function () {
		      throw e$75;
		    });
		  }
		}
		function createRootErrorUpdate(root, errorInfo, lane) {
		  lane = createUpdate(lane);
		  lane.tag = 3;
		  lane.payload = { element: null };
		  lane.callback = function () {
		    logUncaughtError(root, errorInfo);
		  };
		  return lane;
		}
		function createClassErrorUpdate(lane) {
		  lane = createUpdate(lane);
		  lane.tag = 3;
		  return lane;
		}
		function initializeClassErrorUpdate(update, root, fiber, errorInfo) {
		  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
		  if ("function" === typeof getDerivedStateFromError) {
		    var error = errorInfo.value;
		    update.payload = function () {
		      return getDerivedStateFromError(error);
		    };
		    update.callback = function () {
		      logCaughtError(root, fiber, errorInfo);
		    };
		  }
		  var inst = fiber.stateNode;
		  null !== inst &&
		    "function" === typeof inst.componentDidCatch &&
		    (update.callback = function () {
		      logCaughtError(root, fiber, errorInfo);
		      "function" !== typeof getDerivedStateFromError &&
		        (null === legacyErrorBoundariesThatAlreadyFailed
		          ? (legacyErrorBoundariesThatAlreadyFailed = new Set([this]))
		          : legacyErrorBoundariesThatAlreadyFailed.add(this));
		      var stack = errorInfo.stack;
		      this.componentDidCatch(errorInfo.value, {
		        componentStack: null !== stack ? stack : ""
		      });
		    });
		}
		function throwException(
		  root,
		  returnFiber,
		  sourceFiber,
		  value,
		  rootRenderLanes
		) {
		  sourceFiber.flags |= 32768;
		  if (
		    null !== value &&
		    "object" === typeof value &&
		    "function" === typeof value.then
		  ) {
		    returnFiber = sourceFiber.alternate;
		    null !== returnFiber &&
		      propagateParentContextChanges(
		        returnFiber,
		        sourceFiber,
		        rootRenderLanes,
		        true
		      );
		    sourceFiber = suspenseHandlerStackCursor.current;
		    if (null !== sourceFiber) {
		      switch (sourceFiber.tag) {
		        case 13:
		          return (
		            null === shellBoundary
		              ? renderDidSuspendDelayIfPossible()
		              : null === sourceFiber.alternate &&
		                0 === workInProgressRootExitStatus &&
		                (workInProgressRootExitStatus = 3),
		            (sourceFiber.flags &= -257),
		            (sourceFiber.flags |= 65536),
		            (sourceFiber.lanes = rootRenderLanes),
		            value === noopSuspenseyCommitThenable
		              ? (sourceFiber.flags |= 16384)
		              : ((returnFiber = sourceFiber.updateQueue),
		                null === returnFiber
		                  ? (sourceFiber.updateQueue = new Set([value]))
		                  : returnFiber.add(value),
		                attachPingListener(root, value, rootRenderLanes)),
		            false
		          );
		        case 22:
		          return (
		            (sourceFiber.flags |= 65536),
		            value === noopSuspenseyCommitThenable
		              ? (sourceFiber.flags |= 16384)
		              : ((returnFiber = sourceFiber.updateQueue),
		                null === returnFiber
		                  ? ((returnFiber = {
		                      transitions: null,
		                      markerInstances: null,
		                      retryQueue: new Set([value])
		                    }),
		                    (sourceFiber.updateQueue = returnFiber))
		                  : ((sourceFiber = returnFiber.retryQueue),
		                    null === sourceFiber
		                      ? (returnFiber.retryQueue = new Set([value]))
		                      : sourceFiber.add(value)),
		                attachPingListener(root, value, rootRenderLanes)),
		            false
		          );
		      }
		      throw Error(formatProdErrorMessage(435, sourceFiber.tag));
		    }
		    attachPingListener(root, value, rootRenderLanes);
		    renderDidSuspendDelayIfPossible();
		    return false;
		  }
		  if (isHydrating)
		    return (
		      (returnFiber = suspenseHandlerStackCursor.current),
		      null !== returnFiber
		        ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256),
		          (returnFiber.flags |= 65536),
		          (returnFiber.lanes = rootRenderLanes),
		          value !== HydrationMismatchException &&
		            ((root = Error(formatProdErrorMessage(422), { cause: value })),
		            queueHydrationError(createCapturedValueAtFiber(root, sourceFiber))))
		        : (value !== HydrationMismatchException &&
		            ((returnFiber = Error(formatProdErrorMessage(423), {
		              cause: value
		            })),
		            queueHydrationError(
		              createCapturedValueAtFiber(returnFiber, sourceFiber)
		            )),
		          (root = root.current.alternate),
		          (root.flags |= 65536),
		          (rootRenderLanes &= -rootRenderLanes),
		          (root.lanes |= rootRenderLanes),
		          (value = createCapturedValueAtFiber(value, sourceFiber)),
		          (rootRenderLanes = createRootErrorUpdate(
		            root.stateNode,
		            value,
		            rootRenderLanes
		          )),
		          enqueueCapturedUpdate(root, rootRenderLanes),
		          4 !== workInProgressRootExitStatus &&
		            (workInProgressRootExitStatus = 2)),
		      false
		    );
		  var wrapperError = Error(formatProdErrorMessage(520), { cause: value });
		  wrapperError = createCapturedValueAtFiber(wrapperError, sourceFiber);
		  null === workInProgressRootConcurrentErrors
		    ? (workInProgressRootConcurrentErrors = [wrapperError])
		    : workInProgressRootConcurrentErrors.push(wrapperError);
		  4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
		  if (null === returnFiber) return true;
		  value = createCapturedValueAtFiber(value, sourceFiber);
		  sourceFiber = returnFiber;
		  do {
		    switch (sourceFiber.tag) {
		      case 3:
		        return (
		          (sourceFiber.flags |= 65536),
		          (root = rootRenderLanes & -rootRenderLanes),
		          (sourceFiber.lanes |= root),
		          (root = createRootErrorUpdate(sourceFiber.stateNode, value, root)),
		          enqueueCapturedUpdate(sourceFiber, root),
		          false
		        );
		      case 1:
		        if (
		          ((returnFiber = sourceFiber.type),
		          (wrapperError = sourceFiber.stateNode),
		          0 === (sourceFiber.flags & 128) &&
		            ("function" === typeof returnFiber.getDerivedStateFromError ||
		              (null !== wrapperError &&
		                "function" === typeof wrapperError.componentDidCatch &&
		                (null === legacyErrorBoundariesThatAlreadyFailed ||
		                  !legacyErrorBoundariesThatAlreadyFailed.has(wrapperError)))))
		        )
		          return (
		            (sourceFiber.flags |= 65536),
		            (rootRenderLanes &= -rootRenderLanes),
		            (sourceFiber.lanes |= rootRenderLanes),
		            (rootRenderLanes = createClassErrorUpdate(rootRenderLanes)),
		            initializeClassErrorUpdate(
		              rootRenderLanes,
		              root,
		              sourceFiber,
		              value
		            ),
		            enqueueCapturedUpdate(sourceFiber, rootRenderLanes),
		            false
		          );
		    }
		    sourceFiber = sourceFiber.return;
		  } while (null !== sourceFiber);
		  return false;
		}
		var SelectiveHydrationException = Error(formatProdErrorMessage(461)),
		  didReceiveUpdate = false;
		function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
		  workInProgress.child =
		    null === current
		      ? mountChildFibers(workInProgress, null, nextChildren, renderLanes)
		      : reconcileChildFibers(
		          workInProgress,
		          current.child,
		          nextChildren,
		          renderLanes
		        );
		}
		function updateForwardRef(
		  current,
		  workInProgress,
		  Component,
		  nextProps,
		  renderLanes
		) {
		  Component = Component.render;
		  var ref = workInProgress.ref;
		  if ("ref" in nextProps) {
		    var propsWithoutRef = {};
		    for (var key in nextProps)
		      "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
		  } else propsWithoutRef = nextProps;
		  prepareToReadContext(workInProgress);
		  nextProps = renderWithHooks(
		    current,
		    workInProgress,
		    Component,
		    propsWithoutRef,
		    ref,
		    renderLanes
		  );
		  key = checkDidRenderIdHook();
		  if (null !== current && !didReceiveUpdate)
		    return (
		      bailoutHooks(current, workInProgress, renderLanes),
		      bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
		    );
		  isHydrating && key && pushMaterializedTreeId(workInProgress);
		  workInProgress.flags |= 1;
		  reconcileChildren(current, workInProgress, nextProps, renderLanes);
		  return workInProgress.child;
		}
		function updateMemoComponent(
		  current,
		  workInProgress,
		  Component,
		  nextProps,
		  renderLanes
		) {
		  if (null === current) {
		    var type = Component.type;
		    if (
		      "function" === typeof type &&
		      !shouldConstruct(type) &&
		      void 0 === type.defaultProps &&
		      null === Component.compare
		    )
		      return (
		        (workInProgress.tag = 15),
		        (workInProgress.type = type),
		        updateSimpleMemoComponent(
		          current,
		          workInProgress,
		          type,
		          nextProps,
		          renderLanes
		        )
		      );
		    current = createFiberFromTypeAndProps(
		      Component.type,
		      null,
		      nextProps,
		      workInProgress,
		      workInProgress.mode,
		      renderLanes
		    );
		    current.ref = workInProgress.ref;
		    current.return = workInProgress;
		    return (workInProgress.child = current);
		  }
		  type = current.child;
		  if (!checkScheduledUpdateOrContext(current, renderLanes)) {
		    var prevProps = type.memoizedProps;
		    Component = Component.compare;
		    Component = null !== Component ? Component : shallowEqual;
		    if (Component(prevProps, nextProps) && current.ref === workInProgress.ref)
		      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		  }
		  workInProgress.flags |= 1;
		  current = createWorkInProgress(type, nextProps);
		  current.ref = workInProgress.ref;
		  current.return = workInProgress;
		  return (workInProgress.child = current);
		}
		function updateSimpleMemoComponent(
		  current,
		  workInProgress,
		  Component,
		  nextProps,
		  renderLanes
		) {
		  if (null !== current) {
		    var prevProps = current.memoizedProps;
		    if (
		      shallowEqual(prevProps, nextProps) &&
		      current.ref === workInProgress.ref
		    )
		      if (
		        ((didReceiveUpdate = false),
		        (workInProgress.pendingProps = nextProps = prevProps),
		        checkScheduledUpdateOrContext(current, renderLanes))
		      )
		        0 !== (current.flags & 131072) && (didReceiveUpdate = true);
		      else
		        return (
		          (workInProgress.lanes = current.lanes),
		          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
		        );
		  }
		  return updateFunctionComponent(
		    current,
		    workInProgress,
		    Component,
		    nextProps,
		    renderLanes
		  );
		}
		function updateOffscreenComponent(current, workInProgress, renderLanes) {
		  var nextProps = workInProgress.pendingProps,
		    nextChildren = nextProps.children,
		    prevState = null !== current ? current.memoizedState : null;
		  if ("hidden" === nextProps.mode) {
		    if (0 !== (workInProgress.flags & 128)) {
		      nextProps =
		        null !== prevState ? prevState.baseLanes | renderLanes : renderLanes;
		      if (null !== current) {
		        nextChildren = workInProgress.child = current.child;
		        for (prevState = 0; null !== nextChildren; )
		          (prevState =
		            prevState | nextChildren.lanes | nextChildren.childLanes),
		            (nextChildren = nextChildren.sibling);
		        workInProgress.childLanes = prevState & ~nextProps;
		      } else (workInProgress.childLanes = 0), (workInProgress.child = null);
		      return deferHiddenOffscreenComponent(
		        current,
		        workInProgress,
		        nextProps,
		        renderLanes
		      );
		    }
		    if (0 !== (renderLanes & 536870912))
		      (workInProgress.memoizedState = { baseLanes: 0, cachePool: null }),
		        null !== current &&
		          pushTransition(
		            workInProgress,
		            null !== prevState ? prevState.cachePool : null
		          ),
		        null !== prevState
		          ? pushHiddenContext(workInProgress, prevState)
		          : reuseHiddenContextOnStack(),
		        pushOffscreenSuspenseHandler(workInProgress);
		    else
		      return (
		        (workInProgress.lanes = workInProgress.childLanes = 536870912),
		        deferHiddenOffscreenComponent(
		          current,
		          workInProgress,
		          null !== prevState ? prevState.baseLanes | renderLanes : renderLanes,
		          renderLanes
		        )
		      );
		  } else
		    null !== prevState
		      ? (pushTransition(workInProgress, prevState.cachePool),
		        pushHiddenContext(workInProgress, prevState),
		        reuseSuspenseHandlerOnStack(),
		        (workInProgress.memoizedState = null))
		      : (null !== current && pushTransition(workInProgress, null),
		        reuseHiddenContextOnStack(),
		        reuseSuspenseHandlerOnStack());
		  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  return workInProgress.child;
		}
		function deferHiddenOffscreenComponent(
		  current,
		  workInProgress,
		  nextBaseLanes,
		  renderLanes
		) {
		  var JSCompiler_inline_result = peekCacheFromPool();
		  JSCompiler_inline_result =
		    null === JSCompiler_inline_result
		      ? null
		      : { parent: CacheContext._currentValue, pool: JSCompiler_inline_result };
		  workInProgress.memoizedState = {
		    baseLanes: nextBaseLanes,
		    cachePool: JSCompiler_inline_result
		  };
		  null !== current && pushTransition(workInProgress, null);
		  reuseHiddenContextOnStack();
		  pushOffscreenSuspenseHandler(workInProgress);
		  null !== current &&
		    propagateParentContextChanges(current, workInProgress, renderLanes, true);
		  return null;
		}
		function markRef(current, workInProgress) {
		  var ref = workInProgress.ref;
		  if (null === ref)
		    null !== current &&
		      null !== current.ref &&
		      (workInProgress.flags |= 4194816);
		  else {
		    if ("function" !== typeof ref && "object" !== typeof ref)
		      throw Error(formatProdErrorMessage(284));
		    if (null === current || current.ref !== ref)
		      workInProgress.flags |= 4194816;
		  }
		}
		function updateFunctionComponent(
		  current,
		  workInProgress,
		  Component,
		  nextProps,
		  renderLanes
		) {
		  prepareToReadContext(workInProgress);
		  Component = renderWithHooks(
		    current,
		    workInProgress,
		    Component,
		    nextProps,
		    void 0,
		    renderLanes
		  );
		  nextProps = checkDidRenderIdHook();
		  if (null !== current && !didReceiveUpdate)
		    return (
		      bailoutHooks(current, workInProgress, renderLanes),
		      bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
		    );
		  isHydrating && nextProps && pushMaterializedTreeId(workInProgress);
		  workInProgress.flags |= 1;
		  reconcileChildren(current, workInProgress, Component, renderLanes);
		  return workInProgress.child;
		}
		function replayFunctionComponent(
		  current,
		  workInProgress,
		  nextProps,
		  Component,
		  secondArg,
		  renderLanes
		) {
		  prepareToReadContext(workInProgress);
		  workInProgress.updateQueue = null;
		  nextProps = renderWithHooksAgain(
		    workInProgress,
		    Component,
		    nextProps,
		    secondArg
		  );
		  finishRenderingHooks(current);
		  Component = checkDidRenderIdHook();
		  if (null !== current && !didReceiveUpdate)
		    return (
		      bailoutHooks(current, workInProgress, renderLanes),
		      bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
		    );
		  isHydrating && Component && pushMaterializedTreeId(workInProgress);
		  workInProgress.flags |= 1;
		  reconcileChildren(current, workInProgress, nextProps, renderLanes);
		  return workInProgress.child;
		}
		function updateClassComponent(
		  current,
		  workInProgress,
		  Component,
		  nextProps,
		  renderLanes
		) {
		  prepareToReadContext(workInProgress);
		  if (null === workInProgress.stateNode) {
		    var context = emptyContextObject,
		      contextType = Component.contextType;
		    "object" === typeof contextType &&
		      null !== contextType &&
		      (context = readContext(contextType));
		    context = new Component(nextProps, context);
		    workInProgress.memoizedState =
		      null !== context.state && void 0 !== context.state ? context.state : null;
		    context.updater = classComponentUpdater;
		    workInProgress.stateNode = context;
		    context._reactInternals = workInProgress;
		    context = workInProgress.stateNode;
		    context.props = nextProps;
		    context.state = workInProgress.memoizedState;
		    context.refs = {};
		    initializeUpdateQueue(workInProgress);
		    contextType = Component.contextType;
		    context.context =
		      "object" === typeof contextType && null !== contextType
		        ? readContext(contextType)
		        : emptyContextObject;
		    context.state = workInProgress.memoizedState;
		    contextType = Component.getDerivedStateFromProps;
		    "function" === typeof contextType &&
		      (applyDerivedStateFromProps(
		        workInProgress,
		        Component,
		        contextType,
		        nextProps
		      ),
		      (context.state = workInProgress.memoizedState));
		    "function" === typeof Component.getDerivedStateFromProps ||
		      "function" === typeof context.getSnapshotBeforeUpdate ||
		      ("function" !== typeof context.UNSAFE_componentWillMount &&
		        "function" !== typeof context.componentWillMount) ||
		      ((contextType = context.state),
		      "function" === typeof context.componentWillMount &&
		        context.componentWillMount(),
		      "function" === typeof context.UNSAFE_componentWillMount &&
		        context.UNSAFE_componentWillMount(),
		      contextType !== context.state &&
		        classComponentUpdater.enqueueReplaceState(context, context.state, null),
		      processUpdateQueue(workInProgress, nextProps, context, renderLanes),
		      suspendIfUpdateReadFromEntangledAsyncAction(),
		      (context.state = workInProgress.memoizedState));
		    "function" === typeof context.componentDidMount &&
		      (workInProgress.flags |= 4194308);
		    nextProps = true;
		  } else if (null === current) {
		    context = workInProgress.stateNode;
		    var unresolvedOldProps = workInProgress.memoizedProps,
		      oldProps = resolveClassComponentProps(Component, unresolvedOldProps);
		    context.props = oldProps;
		    var oldContext = context.context,
		      contextType$jscomp$0 = Component.contextType;
		    contextType = emptyContextObject;
		    "object" === typeof contextType$jscomp$0 &&
		      null !== contextType$jscomp$0 &&
		      (contextType = readContext(contextType$jscomp$0));
		    var getDerivedStateFromProps = Component.getDerivedStateFromProps;
		    contextType$jscomp$0 =
		      "function" === typeof getDerivedStateFromProps ||
		      "function" === typeof context.getSnapshotBeforeUpdate;
		    unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;
		    contextType$jscomp$0 ||
		      ("function" !== typeof context.UNSAFE_componentWillReceiveProps &&
		        "function" !== typeof context.componentWillReceiveProps) ||
		      ((unresolvedOldProps || oldContext !== contextType) &&
		        callComponentWillReceiveProps(
		          workInProgress,
		          context,
		          nextProps,
		          contextType
		        ));
		    hasForceUpdate = false;
		    var oldState = workInProgress.memoizedState;
		    context.state = oldState;
		    processUpdateQueue(workInProgress, nextProps, context, renderLanes);
		    suspendIfUpdateReadFromEntangledAsyncAction();
		    oldContext = workInProgress.memoizedState;
		    unresolvedOldProps || oldState !== oldContext || hasForceUpdate
		      ? ("function" === typeof getDerivedStateFromProps &&
		          (applyDerivedStateFromProps(
		            workInProgress,
		            Component,
		            getDerivedStateFromProps,
		            nextProps
		          ),
		          (oldContext = workInProgress.memoizedState)),
		        (oldProps =
		          hasForceUpdate ||
		          checkShouldComponentUpdate(
		            workInProgress,
		            Component,
		            oldProps,
		            nextProps,
		            oldState,
		            oldContext,
		            contextType
		          ))
		          ? (contextType$jscomp$0 ||
		              ("function" !== typeof context.UNSAFE_componentWillMount &&
		                "function" !== typeof context.componentWillMount) ||
		              ("function" === typeof context.componentWillMount &&
		                context.componentWillMount(),
		              "function" === typeof context.UNSAFE_componentWillMount &&
		                context.UNSAFE_componentWillMount()),
		            "function" === typeof context.componentDidMount &&
		              (workInProgress.flags |= 4194308))
		          : ("function" === typeof context.componentDidMount &&
		              (workInProgress.flags |= 4194308),
		            (workInProgress.memoizedProps = nextProps),
		            (workInProgress.memoizedState = oldContext)),
		        (context.props = nextProps),
		        (context.state = oldContext),
		        (context.context = contextType),
		        (nextProps = oldProps))
		      : ("function" === typeof context.componentDidMount &&
		          (workInProgress.flags |= 4194308),
		        (nextProps = false));
		  } else {
		    context = workInProgress.stateNode;
		    cloneUpdateQueue(current, workInProgress);
		    contextType = workInProgress.memoizedProps;
		    contextType$jscomp$0 = resolveClassComponentProps(Component, contextType);
		    context.props = contextType$jscomp$0;
		    getDerivedStateFromProps = workInProgress.pendingProps;
		    oldState = context.context;
		    oldContext = Component.contextType;
		    oldProps = emptyContextObject;
		    "object" === typeof oldContext &&
		      null !== oldContext &&
		      (oldProps = readContext(oldContext));
		    unresolvedOldProps = Component.getDerivedStateFromProps;
		    (oldContext =
		      "function" === typeof unresolvedOldProps ||
		      "function" === typeof context.getSnapshotBeforeUpdate) ||
		      ("function" !== typeof context.UNSAFE_componentWillReceiveProps &&
		        "function" !== typeof context.componentWillReceiveProps) ||
		      ((contextType !== getDerivedStateFromProps || oldState !== oldProps) &&
		        callComponentWillReceiveProps(
		          workInProgress,
		          context,
		          nextProps,
		          oldProps
		        ));
		    hasForceUpdate = false;
		    oldState = workInProgress.memoizedState;
		    context.state = oldState;
		    processUpdateQueue(workInProgress, nextProps, context, renderLanes);
		    suspendIfUpdateReadFromEntangledAsyncAction();
		    var newState = workInProgress.memoizedState;
		    contextType !== getDerivedStateFromProps ||
		    oldState !== newState ||
		    hasForceUpdate ||
		    (null !== current &&
		      null !== current.dependencies &&
		      checkIfContextChanged(current.dependencies))
		      ? ("function" === typeof unresolvedOldProps &&
		          (applyDerivedStateFromProps(
		            workInProgress,
		            Component,
		            unresolvedOldProps,
		            nextProps
		          ),
		          (newState = workInProgress.memoizedState)),
		        (contextType$jscomp$0 =
		          hasForceUpdate ||
		          checkShouldComponentUpdate(
		            workInProgress,
		            Component,
		            contextType$jscomp$0,
		            nextProps,
		            oldState,
		            newState,
		            oldProps
		          ) ||
		          (null !== current &&
		            null !== current.dependencies &&
		            checkIfContextChanged(current.dependencies)))
		          ? (oldContext ||
		              ("function" !== typeof context.UNSAFE_componentWillUpdate &&
		                "function" !== typeof context.componentWillUpdate) ||
		              ("function" === typeof context.componentWillUpdate &&
		                context.componentWillUpdate(nextProps, newState, oldProps),
		              "function" === typeof context.UNSAFE_componentWillUpdate &&
		                context.UNSAFE_componentWillUpdate(
		                  nextProps,
		                  newState,
		                  oldProps
		                )),
		            "function" === typeof context.componentDidUpdate &&
		              (workInProgress.flags |= 4),
		            "function" === typeof context.getSnapshotBeforeUpdate &&
		              (workInProgress.flags |= 1024))
		          : ("function" !== typeof context.componentDidUpdate ||
		              (contextType === current.memoizedProps &&
		                oldState === current.memoizedState) ||
		              (workInProgress.flags |= 4),
		            "function" !== typeof context.getSnapshotBeforeUpdate ||
		              (contextType === current.memoizedProps &&
		                oldState === current.memoizedState) ||
		              (workInProgress.flags |= 1024),
		            (workInProgress.memoizedProps = nextProps),
		            (workInProgress.memoizedState = newState)),
		        (context.props = nextProps),
		        (context.state = newState),
		        (context.context = oldProps),
		        (nextProps = contextType$jscomp$0))
		      : ("function" !== typeof context.componentDidUpdate ||
		          (contextType === current.memoizedProps &&
		            oldState === current.memoizedState) ||
		          (workInProgress.flags |= 4),
		        "function" !== typeof context.getSnapshotBeforeUpdate ||
		          (contextType === current.memoizedProps &&
		            oldState === current.memoizedState) ||
		          (workInProgress.flags |= 1024),
		        (nextProps = false));
		  }
		  context = nextProps;
		  markRef(current, workInProgress);
		  nextProps = 0 !== (workInProgress.flags & 128);
		  context || nextProps
		    ? ((context = workInProgress.stateNode),
		      (Component =
		        nextProps && "function" !== typeof Component.getDerivedStateFromError
		          ? null
		          : context.render()),
		      (workInProgress.flags |= 1),
		      null !== current && nextProps
		        ? ((workInProgress.child = reconcileChildFibers(
		            workInProgress,
		            current.child,
		            null,
		            renderLanes
		          )),
		          (workInProgress.child = reconcileChildFibers(
		            workInProgress,
		            null,
		            Component,
		            renderLanes
		          )))
		        : reconcileChildren(current, workInProgress, Component, renderLanes),
		      (workInProgress.memoizedState = context.state),
		      (current = workInProgress.child))
		    : (current = bailoutOnAlreadyFinishedWork(
		        current,
		        workInProgress,
		        renderLanes
		      ));
		  return current;
		}
		function mountHostRootWithoutHydrating(
		  current,
		  workInProgress,
		  nextChildren,
		  renderLanes
		) {
		  resetHydrationState();
		  workInProgress.flags |= 256;
		  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		  return workInProgress.child;
		}
		var SUSPENDED_MARKER = {
		  dehydrated: null,
		  treeContext: null,
		  retryLane: 0,
		  hydrationErrors: null
		};
		function mountSuspenseOffscreenState(renderLanes) {
		  return { baseLanes: renderLanes, cachePool: getSuspendedCache() };
		}
		function getRemainingWorkInPrimaryTree(
		  current,
		  primaryTreeDidDefer,
		  renderLanes
		) {
		  current = null !== current ? current.childLanes & ~renderLanes : 0;
		  primaryTreeDidDefer && (current |= workInProgressDeferredLane);
		  return current;
		}
		function updateSuspenseComponent(current, workInProgress, renderLanes) {
		  var nextProps = workInProgress.pendingProps,
		    showFallback = false,
		    didSuspend = 0 !== (workInProgress.flags & 128),
		    JSCompiler_temp;
		  (JSCompiler_temp = didSuspend) ||
		    (JSCompiler_temp =
		      null !== current && null === current.memoizedState
		        ? false
		        : 0 !== (suspenseStackCursor.current & 2));
		  JSCompiler_temp && ((showFallback = true), (workInProgress.flags &= -129));
		  JSCompiler_temp = 0 !== (workInProgress.flags & 32);
		  workInProgress.flags &= -33;
		  if (null === current) {
		    if (isHydrating) {
		      showFallback
		        ? pushPrimaryTreeSuspenseHandler(workInProgress)
		        : reuseSuspenseHandlerOnStack();
		      if (isHydrating) {
		        var nextInstance = nextHydratableInstance,
		          JSCompiler_temp$jscomp$0;
		        if ((JSCompiler_temp$jscomp$0 = nextInstance)) {
		          c: {
		            JSCompiler_temp$jscomp$0 = nextInstance;
		            for (
		              nextInstance = rootOrSingletonContext;
		              8 !== JSCompiler_temp$jscomp$0.nodeType;

		            ) {
		              if (!nextInstance) {
		                nextInstance = null;
		                break c;
		              }
		              JSCompiler_temp$jscomp$0 = getNextHydratable(
		                JSCompiler_temp$jscomp$0.nextSibling
		              );
		              if (null === JSCompiler_temp$jscomp$0) {
		                nextInstance = null;
		                break c;
		              }
		            }
		            nextInstance = JSCompiler_temp$jscomp$0;
		          }
		          null !== nextInstance
		            ? ((workInProgress.memoizedState = {
		                dehydrated: nextInstance,
		                treeContext:
		                  null !== treeContextProvider
		                    ? { id: treeContextId, overflow: treeContextOverflow }
		                    : null,
		                retryLane: 536870912,
		                hydrationErrors: null
		              }),
		              (JSCompiler_temp$jscomp$0 = createFiberImplClass(
		                18,
		                null,
		                null,
		                0
		              )),
		              (JSCompiler_temp$jscomp$0.stateNode = nextInstance),
		              (JSCompiler_temp$jscomp$0.return = workInProgress),
		              (workInProgress.child = JSCompiler_temp$jscomp$0),
		              (hydrationParentFiber = workInProgress),
		              (nextHydratableInstance = null),
		              (JSCompiler_temp$jscomp$0 = true))
		            : (JSCompiler_temp$jscomp$0 = false);
		        }
		        JSCompiler_temp$jscomp$0 || throwOnHydrationMismatch(workInProgress);
		      }
		      nextInstance = workInProgress.memoizedState;
		      if (
		        null !== nextInstance &&
		        ((nextInstance = nextInstance.dehydrated), null !== nextInstance)
		      )
		        return (
		          isSuspenseInstanceFallback(nextInstance)
		            ? (workInProgress.lanes = 32)
		            : (workInProgress.lanes = 536870912),
		          null
		        );
		      popSuspenseHandler(workInProgress);
		    }
		    nextInstance = nextProps.children;
		    nextProps = nextProps.fallback;
		    if (showFallback)
		      return (
		        reuseSuspenseHandlerOnStack(),
		        (showFallback = workInProgress.mode),
		        (nextInstance = mountWorkInProgressOffscreenFiber(
		          { mode: "hidden", children: nextInstance },
		          showFallback
		        )),
		        (nextProps = createFiberFromFragment(
		          nextProps,
		          showFallback,
		          renderLanes,
		          null
		        )),
		        (nextInstance.return = workInProgress),
		        (nextProps.return = workInProgress),
		        (nextInstance.sibling = nextProps),
		        (workInProgress.child = nextInstance),
		        (showFallback = workInProgress.child),
		        (showFallback.memoizedState = mountSuspenseOffscreenState(renderLanes)),
		        (showFallback.childLanes = getRemainingWorkInPrimaryTree(
		          current,
		          JSCompiler_temp,
		          renderLanes
		        )),
		        (workInProgress.memoizedState = SUSPENDED_MARKER),
		        nextProps
		      );
		    pushPrimaryTreeSuspenseHandler(workInProgress);
		    return mountSuspensePrimaryChildren(workInProgress, nextInstance);
		  }
		  JSCompiler_temp$jscomp$0 = current.memoizedState;
		  if (
		    null !== JSCompiler_temp$jscomp$0 &&
		    ((nextInstance = JSCompiler_temp$jscomp$0.dehydrated),
		    null !== nextInstance)
		  ) {
		    if (didSuspend)
		      workInProgress.flags & 256
		        ? (pushPrimaryTreeSuspenseHandler(workInProgress),
		          (workInProgress.flags &= -257),
		          (workInProgress = retrySuspenseComponentWithoutHydrating(
		            current,
		            workInProgress,
		            renderLanes
		          )))
		        : null !== workInProgress.memoizedState
		          ? (reuseSuspenseHandlerOnStack(),
		            (workInProgress.child = current.child),
		            (workInProgress.flags |= 128),
		            (workInProgress = null))
		          : (reuseSuspenseHandlerOnStack(),
		            (showFallback = nextProps.fallback),
		            (nextInstance = workInProgress.mode),
		            (nextProps = mountWorkInProgressOffscreenFiber(
		              { mode: "visible", children: nextProps.children },
		              nextInstance
		            )),
		            (showFallback = createFiberFromFragment(
		              showFallback,
		              nextInstance,
		              renderLanes,
		              null
		            )),
		            (showFallback.flags |= 2),
		            (nextProps.return = workInProgress),
		            (showFallback.return = workInProgress),
		            (nextProps.sibling = showFallback),
		            (workInProgress.child = nextProps),
		            reconcileChildFibers(
		              workInProgress,
		              current.child,
		              null,
		              renderLanes
		            ),
		            (nextProps = workInProgress.child),
		            (nextProps.memoizedState =
		              mountSuspenseOffscreenState(renderLanes)),
		            (nextProps.childLanes = getRemainingWorkInPrimaryTree(
		              current,
		              JSCompiler_temp,
		              renderLanes
		            )),
		            (workInProgress.memoizedState = SUSPENDED_MARKER),
		            (workInProgress = showFallback));
		    else if (
		      (pushPrimaryTreeSuspenseHandler(workInProgress),
		      isSuspenseInstanceFallback(nextInstance))
		    ) {
		      JSCompiler_temp =
		        nextInstance.nextSibling && nextInstance.nextSibling.dataset;
		      if (JSCompiler_temp) var digest = JSCompiler_temp.dgst;
		      JSCompiler_temp = digest;
		      nextProps = Error(formatProdErrorMessage(419));
		      nextProps.stack = "";
		      nextProps.digest = JSCompiler_temp;
		      queueHydrationError({ value: nextProps, source: null, stack: null });
		      workInProgress = retrySuspenseComponentWithoutHydrating(
		        current,
		        workInProgress,
		        renderLanes
		      );
		    } else if (
		      (didReceiveUpdate ||
		        propagateParentContextChanges(current, workInProgress, renderLanes, false),
		      (JSCompiler_temp = 0 !== (renderLanes & current.childLanes)),
		      didReceiveUpdate || JSCompiler_temp)
		    ) {
		      JSCompiler_temp = workInProgressRoot;
		      if (
		        null !== JSCompiler_temp &&
		        ((nextProps = renderLanes & -renderLanes),
		        (nextProps =
		          0 !== (nextProps & 42)
		            ? 1
		            : getBumpedLaneForHydrationByLane(nextProps)),
		        (nextProps =
		          0 !== (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes))
		            ? 0
		            : nextProps),
		        0 !== nextProps && nextProps !== JSCompiler_temp$jscomp$0.retryLane)
		      )
		        throw (
		          ((JSCompiler_temp$jscomp$0.retryLane = nextProps),
		          enqueueConcurrentRenderForLane(current, nextProps),
		          scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps),
		          SelectiveHydrationException)
		        );
		      "$?" === nextInstance.data || renderDidSuspendDelayIfPossible();
		      workInProgress = retrySuspenseComponentWithoutHydrating(
		        current,
		        workInProgress,
		        renderLanes
		      );
		    } else
		      "$?" === nextInstance.data
		        ? ((workInProgress.flags |= 192),
		          (workInProgress.child = current.child),
		          (workInProgress = null))
		        : ((current = JSCompiler_temp$jscomp$0.treeContext),
		          (nextHydratableInstance = getNextHydratable(
		            nextInstance.nextSibling
		          )),
		          (hydrationParentFiber = workInProgress),
		          (isHydrating = true),
		          (hydrationErrors = null),
		          (rootOrSingletonContext = false),
		          null !== current &&
		            ((idStack[idStackIndex++] = treeContextId),
		            (idStack[idStackIndex++] = treeContextOverflow),
		            (idStack[idStackIndex++] = treeContextProvider),
		            (treeContextId = current.id),
		            (treeContextOverflow = current.overflow),
		            (treeContextProvider = workInProgress)),
		          (workInProgress = mountSuspensePrimaryChildren(
		            workInProgress,
		            nextProps.children
		          )),
		          (workInProgress.flags |= 4096));
		    return workInProgress;
		  }
		  if (showFallback)
		    return (
		      reuseSuspenseHandlerOnStack(),
		      (showFallback = nextProps.fallback),
		      (nextInstance = workInProgress.mode),
		      (JSCompiler_temp$jscomp$0 = current.child),
		      (digest = JSCompiler_temp$jscomp$0.sibling),
		      (nextProps = createWorkInProgress(JSCompiler_temp$jscomp$0, {
		        mode: "hidden",
		        children: nextProps.children
		      })),
		      (nextProps.subtreeFlags =
		        JSCompiler_temp$jscomp$0.subtreeFlags & 65011712),
		      null !== digest
		        ? (showFallback = createWorkInProgress(digest, showFallback))
		        : ((showFallback = createFiberFromFragment(
		            showFallback,
		            nextInstance,
		            renderLanes,
		            null
		          )),
		          (showFallback.flags |= 2)),
		      (showFallback.return = workInProgress),
		      (nextProps.return = workInProgress),
		      (nextProps.sibling = showFallback),
		      (workInProgress.child = nextProps),
		      (nextProps = showFallback),
		      (showFallback = workInProgress.child),
		      (nextInstance = current.child.memoizedState),
		      null === nextInstance
		        ? (nextInstance = mountSuspenseOffscreenState(renderLanes))
		        : ((JSCompiler_temp$jscomp$0 = nextInstance.cachePool),
		          null !== JSCompiler_temp$jscomp$0
		            ? ((digest = CacheContext._currentValue),
		              (JSCompiler_temp$jscomp$0 =
		                JSCompiler_temp$jscomp$0.parent !== digest
		                  ? { parent: digest, pool: digest }
		                  : JSCompiler_temp$jscomp$0))
		            : (JSCompiler_temp$jscomp$0 = getSuspendedCache()),
		          (nextInstance = {
		            baseLanes: nextInstance.baseLanes | renderLanes,
		            cachePool: JSCompiler_temp$jscomp$0
		          })),
		      (showFallback.memoizedState = nextInstance),
		      (showFallback.childLanes = getRemainingWorkInPrimaryTree(
		        current,
		        JSCompiler_temp,
		        renderLanes
		      )),
		      (workInProgress.memoizedState = SUSPENDED_MARKER),
		      nextProps
		    );
		  pushPrimaryTreeSuspenseHandler(workInProgress);
		  renderLanes = current.child;
		  current = renderLanes.sibling;
		  renderLanes = createWorkInProgress(renderLanes, {
		    mode: "visible",
		    children: nextProps.children
		  });
		  renderLanes.return = workInProgress;
		  renderLanes.sibling = null;
		  null !== current &&
		    ((JSCompiler_temp = workInProgress.deletions),
		    null === JSCompiler_temp
		      ? ((workInProgress.deletions = [current]), (workInProgress.flags |= 16))
		      : JSCompiler_temp.push(current));
		  workInProgress.child = renderLanes;
		  workInProgress.memoizedState = null;
		  return renderLanes;
		}
		function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
		  primaryChildren = mountWorkInProgressOffscreenFiber(
		    { mode: "visible", children: primaryChildren },
		    workInProgress.mode
		  );
		  primaryChildren.return = workInProgress;
		  return (workInProgress.child = primaryChildren);
		}
		function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
		  offscreenProps = createFiberImplClass(22, offscreenProps, null, mode);
		  offscreenProps.lanes = 0;
		  offscreenProps.stateNode = {
		    _visibility: 1,
		    _pendingMarkers: null,
		    _retryCache: null,
		    _transitions: null
		  };
		  return offscreenProps;
		}
		function retrySuspenseComponentWithoutHydrating(
		  current,
		  workInProgress,
		  renderLanes
		) {
		  reconcileChildFibers(workInProgress, current.child, null, renderLanes);
		  current = mountSuspensePrimaryChildren(
		    workInProgress,
		    workInProgress.pendingProps.children
		  );
		  current.flags |= 2;
		  workInProgress.memoizedState = null;
		  return current;
		}
		function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
		  fiber.lanes |= renderLanes;
		  var alternate = fiber.alternate;
		  null !== alternate && (alternate.lanes |= renderLanes);
		  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
		}
		function initSuspenseListRenderState(
		  workInProgress,
		  isBackwards,
		  tail,
		  lastContentRow,
		  tailMode
		) {
		  var renderState = workInProgress.memoizedState;
		  null === renderState
		    ? (workInProgress.memoizedState = {
		        isBackwards: isBackwards,
		        rendering: null,
		        renderingStartTime: 0,
		        last: lastContentRow,
		        tail: tail,
		        tailMode: tailMode
		      })
		    : ((renderState.isBackwards = isBackwards),
		      (renderState.rendering = null),
		      (renderState.renderingStartTime = 0),
		      (renderState.last = lastContentRow),
		      (renderState.tail = tail),
		      (renderState.tailMode = tailMode));
		}
		function updateSuspenseListComponent(current, workInProgress, renderLanes) {
		  var nextProps = workInProgress.pendingProps,
		    revealOrder = nextProps.revealOrder,
		    tailMode = nextProps.tail;
		  reconcileChildren(current, workInProgress, nextProps.children, renderLanes);
		  nextProps = suspenseStackCursor.current;
		  if (0 !== (nextProps & 2))
		    (nextProps = (nextProps & 1) | 2), (workInProgress.flags |= 128);
		  else {
		    if (null !== current && 0 !== (current.flags & 128))
		      a: for (current = workInProgress.child; null !== current; ) {
		        if (13 === current.tag)
		          null !== current.memoizedState &&
		            scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
		        else if (19 === current.tag)
		          scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
		        else if (null !== current.child) {
		          current.child.return = current;
		          current = current.child;
		          continue;
		        }
		        if (current === workInProgress) break a;
		        for (; null === current.sibling; ) {
		          if (null === current.return || current.return === workInProgress)
		            break a;
		          current = current.return;
		        }
		        current.sibling.return = current.return;
		        current = current.sibling;
		      }
		    nextProps &= 1;
		  }
		  push(suspenseStackCursor, nextProps);
		  switch (revealOrder) {
		    case "forwards":
		      renderLanes = workInProgress.child;
		      for (revealOrder = null; null !== renderLanes; )
		        (current = renderLanes.alternate),
		          null !== current &&
		            null === findFirstSuspended(current) &&
		            (revealOrder = renderLanes),
		          (renderLanes = renderLanes.sibling);
		      renderLanes = revealOrder;
		      null === renderLanes
		        ? ((revealOrder = workInProgress.child), (workInProgress.child = null))
		        : ((revealOrder = renderLanes.sibling), (renderLanes.sibling = null));
		      initSuspenseListRenderState(
		        workInProgress,
		        false,
		        revealOrder,
		        renderLanes,
		        tailMode
		      );
		      break;
		    case "backwards":
		      renderLanes = null;
		      revealOrder = workInProgress.child;
		      for (workInProgress.child = null; null !== revealOrder; ) {
		        current = revealOrder.alternate;
		        if (null !== current && null === findFirstSuspended(current)) {
		          workInProgress.child = revealOrder;
		          break;
		        }
		        current = revealOrder.sibling;
		        revealOrder.sibling = renderLanes;
		        renderLanes = revealOrder;
		        revealOrder = current;
		      }
		      initSuspenseListRenderState(
		        workInProgress,
		        true,
		        renderLanes,
		        null,
		        tailMode
		      );
		      break;
		    case "together":
		      initSuspenseListRenderState(workInProgress, false, null, null, void 0);
		      break;
		    default:
		      workInProgress.memoizedState = null;
		  }
		  return workInProgress.child;
		}
		function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
		  null !== current && (workInProgress.dependencies = current.dependencies);
		  workInProgressRootSkippedLanes |= workInProgress.lanes;
		  if (0 === (renderLanes & workInProgress.childLanes))
		    if (null !== current) {
		      if (
		        (propagateParentContextChanges(
		          current,
		          workInProgress,
		          renderLanes,
		          false
		        ),
		        0 === (renderLanes & workInProgress.childLanes))
		      )
		        return null;
		    } else return null;
		  if (null !== current && workInProgress.child !== current.child)
		    throw Error(formatProdErrorMessage(153));
		  if (null !== workInProgress.child) {
		    current = workInProgress.child;
		    renderLanes = createWorkInProgress(current, current.pendingProps);
		    workInProgress.child = renderLanes;
		    for (renderLanes.return = workInProgress; null !== current.sibling; )
		      (current = current.sibling),
		        (renderLanes = renderLanes.sibling =
		          createWorkInProgress(current, current.pendingProps)),
		        (renderLanes.return = workInProgress);
		    renderLanes.sibling = null;
		  }
		  return workInProgress.child;
		}
		function checkScheduledUpdateOrContext(current, renderLanes) {
		  if (0 !== (current.lanes & renderLanes)) return true;
		  current = current.dependencies;
		  return null !== current && checkIfContextChanged(current) ? true : false;
		}
		function attemptEarlyBailoutIfNoScheduledUpdate(
		  current,
		  workInProgress,
		  renderLanes
		) {
		  switch (workInProgress.tag) {
		    case 3:
		      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
		      pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
		      resetHydrationState();
		      break;
		    case 27:
		    case 5:
		      pushHostContext(workInProgress);
		      break;
		    case 4:
		      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
		      break;
		    case 10:
		      pushProvider(
		        workInProgress,
		        workInProgress.type,
		        workInProgress.memoizedProps.value
		      );
		      break;
		    case 13:
		      var state = workInProgress.memoizedState;
		      if (null !== state) {
		        if (null !== state.dehydrated)
		          return (
		            pushPrimaryTreeSuspenseHandler(workInProgress),
		            (workInProgress.flags |= 128),
		            null
		          );
		        if (0 !== (renderLanes & workInProgress.child.childLanes))
		          return updateSuspenseComponent(current, workInProgress, renderLanes);
		        pushPrimaryTreeSuspenseHandler(workInProgress);
		        current = bailoutOnAlreadyFinishedWork(
		          current,
		          workInProgress,
		          renderLanes
		        );
		        return null !== current ? current.sibling : null;
		      }
		      pushPrimaryTreeSuspenseHandler(workInProgress);
		      break;
		    case 19:
		      var didSuspendBefore = 0 !== (current.flags & 128);
		      state = 0 !== (renderLanes & workInProgress.childLanes);
		      state ||
		        (propagateParentContextChanges(
		          current,
		          workInProgress,
		          renderLanes,
		          false
		        ),
		        (state = 0 !== (renderLanes & workInProgress.childLanes)));
		      if (didSuspendBefore) {
		        if (state)
		          return updateSuspenseListComponent(
		            current,
		            workInProgress,
		            renderLanes
		          );
		        workInProgress.flags |= 128;
		      }
		      didSuspendBefore = workInProgress.memoizedState;
		      null !== didSuspendBefore &&
		        ((didSuspendBefore.rendering = null),
		        (didSuspendBefore.tail = null),
		        (didSuspendBefore.lastEffect = null));
		      push(suspenseStackCursor, suspenseStackCursor.current);
		      if (state) break;
		      else return null;
		    case 22:
		    case 23:
		      return (
		        (workInProgress.lanes = 0),
		        updateOffscreenComponent(current, workInProgress, renderLanes)
		      );
		    case 24:
		      pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
		  }
		  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		}
		function beginWork(current, workInProgress, renderLanes) {
		  if (null !== current)
		    if (current.memoizedProps !== workInProgress.pendingProps)
		      didReceiveUpdate = true;
		    else {
		      if (
		        !checkScheduledUpdateOrContext(current, renderLanes) &&
		        0 === (workInProgress.flags & 128)
		      )
		        return (
		          (didReceiveUpdate = false),
		          attemptEarlyBailoutIfNoScheduledUpdate(
		            current,
		            workInProgress,
		            renderLanes
		          )
		        );
		      didReceiveUpdate = 0 !== (current.flags & 131072) ? true : false;
		    }
		  else
		    (didReceiveUpdate = false),
		      isHydrating &&
		        0 !== (workInProgress.flags & 1048576) &&
		        pushTreeId(workInProgress, treeForkCount, workInProgress.index);
		  workInProgress.lanes = 0;
		  switch (workInProgress.tag) {
		    case 16:
		      a: {
		        current = workInProgress.pendingProps;
		        var lazyComponent = workInProgress.elementType,
		          init = lazyComponent._init;
		        lazyComponent = init(lazyComponent._payload);
		        workInProgress.type = lazyComponent;
		        if ("function" === typeof lazyComponent)
		          shouldConstruct(lazyComponent)
		            ? ((current = resolveClassComponentProps(lazyComponent, current)),
		              (workInProgress.tag = 1),
		              (workInProgress = updateClassComponent(
		                null,
		                workInProgress,
		                lazyComponent,
		                current,
		                renderLanes
		              )))
		            : ((workInProgress.tag = 0),
		              (workInProgress = updateFunctionComponent(
		                null,
		                workInProgress,
		                lazyComponent,
		                current,
		                renderLanes
		              )));
		        else {
		          if (void 0 !== lazyComponent && null !== lazyComponent)
		            if (
		              ((init = lazyComponent.$$typeof), init === REACT_FORWARD_REF_TYPE)
		            ) {
		              workInProgress.tag = 11;
		              workInProgress = updateForwardRef(
		                null,
		                workInProgress,
		                lazyComponent,
		                current,
		                renderLanes
		              );
		              break a;
		            } else if (init === REACT_MEMO_TYPE) {
		              workInProgress.tag = 14;
		              workInProgress = updateMemoComponent(
		                null,
		                workInProgress,
		                lazyComponent,
		                current,
		                renderLanes
		              );
		              break a;
		            }
		          workInProgress =
		            getComponentNameFromType(lazyComponent) || lazyComponent;
		          throw Error(formatProdErrorMessage(306, workInProgress, ""));
		        }
		      }
		      return workInProgress;
		    case 0:
		      return updateFunctionComponent(
		        current,
		        workInProgress,
		        workInProgress.type,
		        workInProgress.pendingProps,
		        renderLanes
		      );
		    case 1:
		      return (
		        (lazyComponent = workInProgress.type),
		        (init = resolveClassComponentProps(
		          lazyComponent,
		          workInProgress.pendingProps
		        )),
		        updateClassComponent(
		          current,
		          workInProgress,
		          lazyComponent,
		          init,
		          renderLanes
		        )
		      );
		    case 3:
		      a: {
		        pushHostContainer(
		          workInProgress,
		          workInProgress.stateNode.containerInfo
		        );
		        if (null === current) throw Error(formatProdErrorMessage(387));
		        lazyComponent = workInProgress.pendingProps;
		        var prevState = workInProgress.memoizedState;
		        init = prevState.element;
		        cloneUpdateQueue(current, workInProgress);
		        processUpdateQueue(workInProgress, lazyComponent, null, renderLanes);
		        var nextState = workInProgress.memoizedState;
		        lazyComponent = nextState.cache;
		        pushProvider(workInProgress, CacheContext, lazyComponent);
		        lazyComponent !== prevState.cache &&
		          propagateContextChanges(
		            workInProgress,
		            [CacheContext],
		            renderLanes,
		            true
		          );
		        suspendIfUpdateReadFromEntangledAsyncAction();
		        lazyComponent = nextState.element;
		        if (prevState.isDehydrated)
		          if (
		            ((prevState = {
		              element: lazyComponent,
		              isDehydrated: false,
		              cache: nextState.cache
		            }),
		            (workInProgress.updateQueue.baseState = prevState),
		            (workInProgress.memoizedState = prevState),
		            workInProgress.flags & 256)
		          ) {
		            workInProgress = mountHostRootWithoutHydrating(
		              current,
		              workInProgress,
		              lazyComponent,
		              renderLanes
		            );
		            break a;
		          } else if (lazyComponent !== init) {
		            init = createCapturedValueAtFiber(
		              Error(formatProdErrorMessage(424)),
		              workInProgress
		            );
		            queueHydrationError(init);
		            workInProgress = mountHostRootWithoutHydrating(
		              current,
		              workInProgress,
		              lazyComponent,
		              renderLanes
		            );
		            break a;
		          } else {
		            current = workInProgress.stateNode.containerInfo;
		            switch (current.nodeType) {
		              case 9:
		                current = current.body;
		                break;
		              default:
		                current =
		                  "HTML" === current.nodeName
		                    ? current.ownerDocument.body
		                    : current;
		            }
		            nextHydratableInstance = getNextHydratable(current.firstChild);
		            hydrationParentFiber = workInProgress;
		            isHydrating = true;
		            hydrationErrors = null;
		            rootOrSingletonContext = true;
		            renderLanes = mountChildFibers(
		              workInProgress,
		              null,
		              lazyComponent,
		              renderLanes
		            );
		            for (workInProgress.child = renderLanes; renderLanes; )
		              (renderLanes.flags = (renderLanes.flags & -3) | 4096),
		                (renderLanes = renderLanes.sibling);
		          }
		        else {
		          resetHydrationState();
		          if (lazyComponent === init) {
		            workInProgress = bailoutOnAlreadyFinishedWork(
		              current,
		              workInProgress,
		              renderLanes
		            );
		            break a;
		          }
		          reconcileChildren(
		            current,
		            workInProgress,
		            lazyComponent,
		            renderLanes
		          );
		        }
		        workInProgress = workInProgress.child;
		      }
		      return workInProgress;
		    case 26:
		      return (
		        markRef(current, workInProgress),
		        null === current
		          ? (renderLanes = getResource(
		              workInProgress.type,
		              null,
		              workInProgress.pendingProps,
		              null
		            ))
		            ? (workInProgress.memoizedState = renderLanes)
		            : isHydrating ||
		              ((renderLanes = workInProgress.type),
		              (current = workInProgress.pendingProps),
		              (lazyComponent = getOwnerDocumentFromRootContainer(
		                rootInstanceStackCursor.current
		              ).createElement(renderLanes)),
		              (lazyComponent[internalInstanceKey] = workInProgress),
		              (lazyComponent[internalPropsKey] = current),
		              setInitialProperties(lazyComponent, renderLanes, current),
		              markNodeAsHoistable(lazyComponent),
		              (workInProgress.stateNode = lazyComponent))
		          : (workInProgress.memoizedState = getResource(
		              workInProgress.type,
		              current.memoizedProps,
		              workInProgress.pendingProps,
		              current.memoizedState
		            )),
		        null
		      );
		    case 27:
		      return (
		        pushHostContext(workInProgress),
		        null === current &&
		          isHydrating &&
		          ((lazyComponent = workInProgress.stateNode =
		            resolveSingletonInstance(
		              workInProgress.type,
		              workInProgress.pendingProps,
		              rootInstanceStackCursor.current
		            )),
		          (hydrationParentFiber = workInProgress),
		          (rootOrSingletonContext = true),
		          (init = nextHydratableInstance),
		          isSingletonScope(workInProgress.type)
		            ? ((previousHydratableOnEnteringScopedSingleton = init),
		              (nextHydratableInstance = getNextHydratable(
		                lazyComponent.firstChild
		              )))
		            : (nextHydratableInstance = init)),
		        reconcileChildren(
		          current,
		          workInProgress,
		          workInProgress.pendingProps.children,
		          renderLanes
		        ),
		        markRef(current, workInProgress),
		        null === current && (workInProgress.flags |= 4194304),
		        workInProgress.child
		      );
		    case 5:
		      if (null === current && isHydrating) {
		        if ((init = lazyComponent = nextHydratableInstance))
		          (lazyComponent = canHydrateInstance(
		            lazyComponent,
		            workInProgress.type,
		            workInProgress.pendingProps,
		            rootOrSingletonContext
		          )),
		            null !== lazyComponent
		              ? ((workInProgress.stateNode = lazyComponent),
		                (hydrationParentFiber = workInProgress),
		                (nextHydratableInstance = getNextHydratable(
		                  lazyComponent.firstChild
		                )),
		                (rootOrSingletonContext = false),
		                (init = true))
		              : (init = false);
		        init || throwOnHydrationMismatch(workInProgress);
		      }
		      pushHostContext(workInProgress);
		      init = workInProgress.type;
		      prevState = workInProgress.pendingProps;
		      nextState = null !== current ? current.memoizedProps : null;
		      lazyComponent = prevState.children;
		      shouldSetTextContent(init, prevState)
		        ? (lazyComponent = null)
		        : null !== nextState &&
		          shouldSetTextContent(init, nextState) &&
		          (workInProgress.flags |= 32);
		      null !== workInProgress.memoizedState &&
		        ((init = renderWithHooks(
		          current,
		          workInProgress,
		          TransitionAwareHostComponent,
		          null,
		          null,
		          renderLanes
		        )),
		        (HostTransitionContext._currentValue = init));
		      markRef(current, workInProgress);
		      reconcileChildren(current, workInProgress, lazyComponent, renderLanes);
		      return workInProgress.child;
		    case 6:
		      if (null === current && isHydrating) {
		        if ((current = renderLanes = nextHydratableInstance))
		          (renderLanes = canHydrateTextInstance(
		            renderLanes,
		            workInProgress.pendingProps,
		            rootOrSingletonContext
		          )),
		            null !== renderLanes
		              ? ((workInProgress.stateNode = renderLanes),
		                (hydrationParentFiber = workInProgress),
		                (nextHydratableInstance = null),
		                (current = true))
		              : (current = false);
		        current || throwOnHydrationMismatch(workInProgress);
		      }
		      return null;
		    case 13:
		      return updateSuspenseComponent(current, workInProgress, renderLanes);
		    case 4:
		      return (
		        pushHostContainer(
		          workInProgress,
		          workInProgress.stateNode.containerInfo
		        ),
		        (lazyComponent = workInProgress.pendingProps),
		        null === current
		          ? (workInProgress.child = reconcileChildFibers(
		              workInProgress,
		              null,
		              lazyComponent,
		              renderLanes
		            ))
		          : reconcileChildren(
		              current,
		              workInProgress,
		              lazyComponent,
		              renderLanes
		            ),
		        workInProgress.child
		      );
		    case 11:
		      return updateForwardRef(
		        current,
		        workInProgress,
		        workInProgress.type,
		        workInProgress.pendingProps,
		        renderLanes
		      );
		    case 7:
		      return (
		        reconcileChildren(
		          current,
		          workInProgress,
		          workInProgress.pendingProps,
		          renderLanes
		        ),
		        workInProgress.child
		      );
		    case 8:
		      return (
		        reconcileChildren(
		          current,
		          workInProgress,
		          workInProgress.pendingProps.children,
		          renderLanes
		        ),
		        workInProgress.child
		      );
		    case 12:
		      return (
		        reconcileChildren(
		          current,
		          workInProgress,
		          workInProgress.pendingProps.children,
		          renderLanes
		        ),
		        workInProgress.child
		      );
		    case 10:
		      return (
		        (lazyComponent = workInProgress.pendingProps),
		        pushProvider(workInProgress, workInProgress.type, lazyComponent.value),
		        reconcileChildren(
		          current,
		          workInProgress,
		          lazyComponent.children,
		          renderLanes
		        ),
		        workInProgress.child
		      );
		    case 9:
		      return (
		        (init = workInProgress.type._context),
		        (lazyComponent = workInProgress.pendingProps.children),
		        prepareToReadContext(workInProgress),
		        (init = readContext(init)),
		        (lazyComponent = lazyComponent(init)),
		        (workInProgress.flags |= 1),
		        reconcileChildren(current, workInProgress, lazyComponent, renderLanes),
		        workInProgress.child
		      );
		    case 14:
		      return updateMemoComponent(
		        current,
		        workInProgress,
		        workInProgress.type,
		        workInProgress.pendingProps,
		        renderLanes
		      );
		    case 15:
		      return updateSimpleMemoComponent(
		        current,
		        workInProgress,
		        workInProgress.type,
		        workInProgress.pendingProps,
		        renderLanes
		      );
		    case 19:
		      return updateSuspenseListComponent(current, workInProgress, renderLanes);
		    case 31:
		      return (
		        (lazyComponent = workInProgress.pendingProps),
		        (renderLanes = workInProgress.mode),
		        (lazyComponent = {
		          mode: lazyComponent.mode,
		          children: lazyComponent.children
		        }),
		        null === current
		          ? ((renderLanes = mountWorkInProgressOffscreenFiber(
		              lazyComponent,
		              renderLanes
		            )),
		            (renderLanes.ref = workInProgress.ref),
		            (workInProgress.child = renderLanes),
		            (renderLanes.return = workInProgress),
		            (workInProgress = renderLanes))
		          : ((renderLanes = createWorkInProgress(current.child, lazyComponent)),
		            (renderLanes.ref = workInProgress.ref),
		            (workInProgress.child = renderLanes),
		            (renderLanes.return = workInProgress),
		            (workInProgress = renderLanes)),
		        workInProgress
		      );
		    case 22:
		      return updateOffscreenComponent(current, workInProgress, renderLanes);
		    case 24:
		      return (
		        prepareToReadContext(workInProgress),
		        (lazyComponent = readContext(CacheContext)),
		        null === current
		          ? ((init = peekCacheFromPool()),
		            null === init &&
		              ((init = workInProgressRoot),
		              (prevState = createCache()),
		              (init.pooledCache = prevState),
		              prevState.refCount++,
		              null !== prevState && (init.pooledCacheLanes |= renderLanes),
		              (init = prevState)),
		            (workInProgress.memoizedState = {
		              parent: lazyComponent,
		              cache: init
		            }),
		            initializeUpdateQueue(workInProgress),
		            pushProvider(workInProgress, CacheContext, init))
		          : (0 !== (current.lanes & renderLanes) &&
		              (cloneUpdateQueue(current, workInProgress),
		              processUpdateQueue(workInProgress, null, null, renderLanes),
		              suspendIfUpdateReadFromEntangledAsyncAction()),
		            (init = current.memoizedState),
		            (prevState = workInProgress.memoizedState),
		            init.parent !== lazyComponent
		              ? ((init = { parent: lazyComponent, cache: lazyComponent }),
		                (workInProgress.memoizedState = init),
		                0 === workInProgress.lanes &&
		                  (workInProgress.memoizedState =
		                    workInProgress.updateQueue.baseState =
		                      init),
		                pushProvider(workInProgress, CacheContext, lazyComponent))
		              : ((lazyComponent = prevState.cache),
		                pushProvider(workInProgress, CacheContext, lazyComponent),
		                lazyComponent !== init.cache &&
		                  propagateContextChanges(
		                    workInProgress,
		                    [CacheContext],
		                    renderLanes,
		                    true
		                  ))),
		        reconcileChildren(
		          current,
		          workInProgress,
		          workInProgress.pendingProps.children,
		          renderLanes
		        ),
		        workInProgress.child
		      );
		    case 29:
		      throw workInProgress.pendingProps;
		  }
		  throw Error(formatProdErrorMessage(156, workInProgress.tag));
		}
		function markUpdate(workInProgress) {
		  workInProgress.flags |= 4;
		}
		function preloadResourceAndSuspendIfNeeded(workInProgress, resource) {
		  if ("stylesheet" !== resource.type || 0 !== (resource.state.loading & 4))
		    workInProgress.flags &= -16777217;
		  else if (((workInProgress.flags |= 16777216), !preloadResource(resource))) {
		    resource = suspenseHandlerStackCursor.current;
		    if (
		      null !== resource &&
		      ((workInProgressRootRenderLanes & 4194048) ===
		      workInProgressRootRenderLanes
		        ? null !== shellBoundary
		        : ((workInProgressRootRenderLanes & 62914560) !==
		            workInProgressRootRenderLanes &&
		            0 === (workInProgressRootRenderLanes & 536870912)) ||
		          resource !== shellBoundary)
		    )
		      throw (
		        ((suspendedThenable = noopSuspenseyCommitThenable),
		        SuspenseyCommitException)
		      );
		    workInProgress.flags |= 8192;
		  }
		}
		function scheduleRetryEffect(workInProgress, retryQueue) {
		  null !== retryQueue && (workInProgress.flags |= 4);
		  workInProgress.flags & 16384 &&
		    ((retryQueue =
		      22 !== workInProgress.tag ? claimNextRetryLane() : 536870912),
		    (workInProgress.lanes |= retryQueue),
		    (workInProgressSuspendedRetryLanes |= retryQueue));
		}
		function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
		  if (!isHydrating)
		    switch (renderState.tailMode) {
		      case "hidden":
		        hasRenderedATailFallback = renderState.tail;
		        for (var lastTailNode = null; null !== hasRenderedATailFallback; )
		          null !== hasRenderedATailFallback.alternate &&
		            (lastTailNode = hasRenderedATailFallback),
		            (hasRenderedATailFallback = hasRenderedATailFallback.sibling);
		        null === lastTailNode
		          ? (renderState.tail = null)
		          : (lastTailNode.sibling = null);
		        break;
		      case "collapsed":
		        lastTailNode = renderState.tail;
		        for (var lastTailNode$113 = null; null !== lastTailNode; )
		          null !== lastTailNode.alternate && (lastTailNode$113 = lastTailNode),
		            (lastTailNode = lastTailNode.sibling);
		        null === lastTailNode$113
		          ? hasRenderedATailFallback || null === renderState.tail
		            ? (renderState.tail = null)
		            : (renderState.tail.sibling = null)
		          : (lastTailNode$113.sibling = null);
		    }
		}
		function bubbleProperties(completedWork) {
		  var didBailout =
		      null !== completedWork.alternate &&
		      completedWork.alternate.child === completedWork.child,
		    newChildLanes = 0,
		    subtreeFlags = 0;
		  if (didBailout)
		    for (var child$114 = completedWork.child; null !== child$114; )
		      (newChildLanes |= child$114.lanes | child$114.childLanes),
		        (subtreeFlags |= child$114.subtreeFlags & 65011712),
		        (subtreeFlags |= child$114.flags & 65011712),
		        (child$114.return = completedWork),
		        (child$114 = child$114.sibling);
		  else
		    for (child$114 = completedWork.child; null !== child$114; )
		      (newChildLanes |= child$114.lanes | child$114.childLanes),
		        (subtreeFlags |= child$114.subtreeFlags),
		        (subtreeFlags |= child$114.flags),
		        (child$114.return = completedWork),
		        (child$114 = child$114.sibling);
		  completedWork.subtreeFlags |= subtreeFlags;
		  completedWork.childLanes = newChildLanes;
		  return didBailout;
		}
		function completeWork(current, workInProgress, renderLanes) {
		  var newProps = workInProgress.pendingProps;
		  popTreeContext(workInProgress);
		  switch (workInProgress.tag) {
		    case 31:
		    case 16:
		    case 15:
		    case 0:
		    case 11:
		    case 7:
		    case 8:
		    case 12:
		    case 9:
		    case 14:
		      return bubbleProperties(workInProgress), null;
		    case 1:
		      return bubbleProperties(workInProgress), null;
		    case 3:
		      renderLanes = workInProgress.stateNode;
		      newProps = null;
		      null !== current && (newProps = current.memoizedState.cache);
		      workInProgress.memoizedState.cache !== newProps &&
		        (workInProgress.flags |= 2048);
		      popProvider(CacheContext);
		      popHostContainer();
		      renderLanes.pendingContext &&
		        ((renderLanes.context = renderLanes.pendingContext),
		        (renderLanes.pendingContext = null));
		      if (null === current || null === current.child)
		        popHydrationState(workInProgress)
		          ? markUpdate(workInProgress)
		          : null === current ||
		            (current.memoizedState.isDehydrated &&
		              0 === (workInProgress.flags & 256)) ||
		            ((workInProgress.flags |= 1024),
		            upgradeHydrationErrorsToRecoverable());
		      bubbleProperties(workInProgress);
		      return null;
		    case 26:
		      return (
		        (renderLanes = workInProgress.memoizedState),
		        null === current
		          ? (markUpdate(workInProgress),
		            null !== renderLanes
		              ? (bubbleProperties(workInProgress),
		                preloadResourceAndSuspendIfNeeded(workInProgress, renderLanes))
		              : (bubbleProperties(workInProgress),
		                (workInProgress.flags &= -16777217)))
		          : renderLanes
		            ? renderLanes !== current.memoizedState
		              ? (markUpdate(workInProgress),
		                bubbleProperties(workInProgress),
		                preloadResourceAndSuspendIfNeeded(workInProgress, renderLanes))
		              : (bubbleProperties(workInProgress),
		                (workInProgress.flags &= -16777217))
		            : (current.memoizedProps !== newProps && markUpdate(workInProgress),
		              bubbleProperties(workInProgress),
		              (workInProgress.flags &= -16777217)),
		        null
		      );
		    case 27:
		      popHostContext(workInProgress);
		      renderLanes = rootInstanceStackCursor.current;
		      var type = workInProgress.type;
		      if (null !== current && null != workInProgress.stateNode)
		        current.memoizedProps !== newProps && markUpdate(workInProgress);
		      else {
		        if (!newProps) {
		          if (null === workInProgress.stateNode)
		            throw Error(formatProdErrorMessage(166));
		          bubbleProperties(workInProgress);
		          return null;
		        }
		        current = contextStackCursor.current;
		        popHydrationState(workInProgress)
		          ? prepareToHydrateHostInstance(workInProgress)
		          : ((current = resolveSingletonInstance(type, newProps, renderLanes)),
		            (workInProgress.stateNode = current),
		            markUpdate(workInProgress));
		      }
		      bubbleProperties(workInProgress);
		      return null;
		    case 5:
		      popHostContext(workInProgress);
		      renderLanes = workInProgress.type;
		      if (null !== current && null != workInProgress.stateNode)
		        current.memoizedProps !== newProps && markUpdate(workInProgress);
		      else {
		        if (!newProps) {
		          if (null === workInProgress.stateNode)
		            throw Error(formatProdErrorMessage(166));
		          bubbleProperties(workInProgress);
		          return null;
		        }
		        current = contextStackCursor.current;
		        if (popHydrationState(workInProgress))
		          prepareToHydrateHostInstance(workInProgress);
		        else {
		          type = getOwnerDocumentFromRootContainer(
		            rootInstanceStackCursor.current
		          );
		          switch (current) {
		            case 1:
		              current = type.createElementNS(
		                "http://www.w3.org/2000/svg",
		                renderLanes
		              );
		              break;
		            case 2:
		              current = type.createElementNS(
		                "http://www.w3.org/1998/Math/MathML",
		                renderLanes
		              );
		              break;
		            default:
		              switch (renderLanes) {
		                case "svg":
		                  current = type.createElementNS(
		                    "http://www.w3.org/2000/svg",
		                    renderLanes
		                  );
		                  break;
		                case "math":
		                  current = type.createElementNS(
		                    "http://www.w3.org/1998/Math/MathML",
		                    renderLanes
		                  );
		                  break;
		                case "script":
		                  current = type.createElement("div");
		                  current.innerHTML = "<script>\x3c/script>";
		                  current = current.removeChild(current.firstChild);
		                  break;
		                case "select":
		                  current =
		                    "string" === typeof newProps.is
		                      ? type.createElement("select", { is: newProps.is })
		                      : type.createElement("select");
		                  newProps.multiple
		                    ? (current.multiple = true)
		                    : newProps.size && (current.size = newProps.size);
		                  break;
		                default:
		                  current =
		                    "string" === typeof newProps.is
		                      ? type.createElement(renderLanes, { is: newProps.is })
		                      : type.createElement(renderLanes);
		              }
		          }
		          current[internalInstanceKey] = workInProgress;
		          current[internalPropsKey] = newProps;
		          a: for (type = workInProgress.child; null !== type; ) {
		            if (5 === type.tag || 6 === type.tag)
		              current.appendChild(type.stateNode);
		            else if (4 !== type.tag && 27 !== type.tag && null !== type.child) {
		              type.child.return = type;
		              type = type.child;
		              continue;
		            }
		            if (type === workInProgress) break a;
		            for (; null === type.sibling; ) {
		              if (null === type.return || type.return === workInProgress)
		                break a;
		              type = type.return;
		            }
		            type.sibling.return = type.return;
		            type = type.sibling;
		          }
		          workInProgress.stateNode = current;
		          a: switch (
		            (setInitialProperties(current, renderLanes, newProps), renderLanes)
		          ) {
		            case "button":
		            case "input":
		            case "select":
		            case "textarea":
		              current = !!newProps.autoFocus;
		              break a;
		            case "img":
		              current = true;
		              break a;
		            default:
		              current = false;
		          }
		          current && markUpdate(workInProgress);
		        }
		      }
		      bubbleProperties(workInProgress);
		      workInProgress.flags &= -16777217;
		      return null;
		    case 6:
		      if (current && null != workInProgress.stateNode)
		        current.memoizedProps !== newProps && markUpdate(workInProgress);
		      else {
		        if ("string" !== typeof newProps && null === workInProgress.stateNode)
		          throw Error(formatProdErrorMessage(166));
		        current = rootInstanceStackCursor.current;
		        if (popHydrationState(workInProgress)) {
		          current = workInProgress.stateNode;
		          renderLanes = workInProgress.memoizedProps;
		          newProps = null;
		          type = hydrationParentFiber;
		          if (null !== type)
		            switch (type.tag) {
		              case 27:
		              case 5:
		                newProps = type.memoizedProps;
		            }
		          current[internalInstanceKey] = workInProgress;
		          current =
		            current.nodeValue === renderLanes ||
		            (null !== newProps && true === newProps.suppressHydrationWarning) ||
		            checkForUnmatchedText(current.nodeValue, renderLanes)
		              ? true
		              : false;
		          current || throwOnHydrationMismatch(workInProgress);
		        } else
		          (current =
		            getOwnerDocumentFromRootContainer(current).createTextNode(
		              newProps
		            )),
		            (current[internalInstanceKey] = workInProgress),
		            (workInProgress.stateNode = current);
		      }
		      bubbleProperties(workInProgress);
		      return null;
		    case 13:
		      newProps = workInProgress.memoizedState;
		      if (
		        null === current ||
		        (null !== current.memoizedState &&
		          null !== current.memoizedState.dehydrated)
		      ) {
		        type = popHydrationState(workInProgress);
		        if (null !== newProps && null !== newProps.dehydrated) {
		          if (null === current) {
		            if (!type) throw Error(formatProdErrorMessage(318));
		            type = workInProgress.memoizedState;
		            type = null !== type ? type.dehydrated : null;
		            if (!type) throw Error(formatProdErrorMessage(317));
		            type[internalInstanceKey] = workInProgress;
		          } else
		            resetHydrationState(),
		              0 === (workInProgress.flags & 128) &&
		                (workInProgress.memoizedState = null),
		              (workInProgress.flags |= 4);
		          bubbleProperties(workInProgress);
		          type = false;
		        } else
		          (type = upgradeHydrationErrorsToRecoverable()),
		            null !== current &&
		              null !== current.memoizedState &&
		              (current.memoizedState.hydrationErrors = type),
		            (type = true);
		        if (!type) {
		          if (workInProgress.flags & 256)
		            return popSuspenseHandler(workInProgress), workInProgress;
		          popSuspenseHandler(workInProgress);
		          return null;
		        }
		      }
		      popSuspenseHandler(workInProgress);
		      if (0 !== (workInProgress.flags & 128))
		        return (workInProgress.lanes = renderLanes), workInProgress;
		      renderLanes = null !== newProps;
		      current = null !== current && null !== current.memoizedState;
		      if (renderLanes) {
		        newProps = workInProgress.child;
		        type = null;
		        null !== newProps.alternate &&
		          null !== newProps.alternate.memoizedState &&
		          null !== newProps.alternate.memoizedState.cachePool &&
		          (type = newProps.alternate.memoizedState.cachePool.pool);
		        var cache$127 = null;
		        null !== newProps.memoizedState &&
		          null !== newProps.memoizedState.cachePool &&
		          (cache$127 = newProps.memoizedState.cachePool.pool);
		        cache$127 !== type && (newProps.flags |= 2048);
		      }
		      renderLanes !== current &&
		        renderLanes &&
		        (workInProgress.child.flags |= 8192);
		      scheduleRetryEffect(workInProgress, workInProgress.updateQueue);
		      bubbleProperties(workInProgress);
		      return null;
		    case 4:
		      return (
		        popHostContainer(),
		        null === current &&
		          listenToAllSupportedEvents(workInProgress.stateNode.containerInfo),
		        bubbleProperties(workInProgress),
		        null
		      );
		    case 10:
		      return (
		        popProvider(workInProgress.type), bubbleProperties(workInProgress), null
		      );
		    case 19:
		      pop(suspenseStackCursor);
		      type = workInProgress.memoizedState;
		      if (null === type) return bubbleProperties(workInProgress), null;
		      newProps = 0 !== (workInProgress.flags & 128);
		      cache$127 = type.rendering;
		      if (null === cache$127)
		        if (newProps) cutOffTailIfNeeded(type, false);
		        else {
		          if (
		            0 !== workInProgressRootExitStatus ||
		            (null !== current && 0 !== (current.flags & 128))
		          )
		            for (current = workInProgress.child; null !== current; ) {
		              cache$127 = findFirstSuspended(current);
		              if (null !== cache$127) {
		                workInProgress.flags |= 128;
		                cutOffTailIfNeeded(type, false);
		                current = cache$127.updateQueue;
		                workInProgress.updateQueue = current;
		                scheduleRetryEffect(workInProgress, current);
		                workInProgress.subtreeFlags = 0;
		                current = renderLanes;
		                for (renderLanes = workInProgress.child; null !== renderLanes; )
		                  resetWorkInProgress(renderLanes, current),
		                    (renderLanes = renderLanes.sibling);
		                push(
		                  suspenseStackCursor,
		                  (suspenseStackCursor.current & 1) | 2
		                );
		                return workInProgress.child;
		              }
		              current = current.sibling;
		            }
		          null !== type.tail &&
		            now() > workInProgressRootRenderTargetTime &&
		            ((workInProgress.flags |= 128),
		            (newProps = true),
		            cutOffTailIfNeeded(type, false),
		            (workInProgress.lanes = 4194304));
		        }
		      else {
		        if (!newProps)
		          if (((current = findFirstSuspended(cache$127)), null !== current)) {
		            if (
		              ((workInProgress.flags |= 128),
		              (newProps = true),
		              (current = current.updateQueue),
		              (workInProgress.updateQueue = current),
		              scheduleRetryEffect(workInProgress, current),
		              cutOffTailIfNeeded(type, true),
		              null === type.tail &&
		                "hidden" === type.tailMode &&
		                !cache$127.alternate &&
		                !isHydrating)
		            )
		              return bubbleProperties(workInProgress), null;
		          } else
		            2 * now() - type.renderingStartTime >
		              workInProgressRootRenderTargetTime &&
		              536870912 !== renderLanes &&
		              ((workInProgress.flags |= 128),
		              (newProps = true),
		              cutOffTailIfNeeded(type, false),
		              (workInProgress.lanes = 4194304));
		        type.isBackwards
		          ? ((cache$127.sibling = workInProgress.child),
		            (workInProgress.child = cache$127))
		          : ((current = type.last),
		            null !== current
		              ? (current.sibling = cache$127)
		              : (workInProgress.child = cache$127),
		            (type.last = cache$127));
		      }
		      if (null !== type.tail)
		        return (
		          (workInProgress = type.tail),
		          (type.rendering = workInProgress),
		          (type.tail = workInProgress.sibling),
		          (type.renderingStartTime = now()),
		          (workInProgress.sibling = null),
		          (current = suspenseStackCursor.current),
		          push(suspenseStackCursor, newProps ? (current & 1) | 2 : current & 1),
		          workInProgress
		        );
		      bubbleProperties(workInProgress);
		      return null;
		    case 22:
		    case 23:
		      return (
		        popSuspenseHandler(workInProgress),
		        popHiddenContext(),
		        (newProps = null !== workInProgress.memoizedState),
		        null !== current
		          ? (null !== current.memoizedState) !== newProps &&
		            (workInProgress.flags |= 8192)
		          : newProps && (workInProgress.flags |= 8192),
		        newProps
		          ? 0 !== (renderLanes & 536870912) &&
		            0 === (workInProgress.flags & 128) &&
		            (bubbleProperties(workInProgress),
		            workInProgress.subtreeFlags & 6 && (workInProgress.flags |= 8192))
		          : bubbleProperties(workInProgress),
		        (renderLanes = workInProgress.updateQueue),
		        null !== renderLanes &&
		          scheduleRetryEffect(workInProgress, renderLanes.retryQueue),
		        (renderLanes = null),
		        null !== current &&
		          null !== current.memoizedState &&
		          null !== current.memoizedState.cachePool &&
		          (renderLanes = current.memoizedState.cachePool.pool),
		        (newProps = null),
		        null !== workInProgress.memoizedState &&
		          null !== workInProgress.memoizedState.cachePool &&
		          (newProps = workInProgress.memoizedState.cachePool.pool),
		        newProps !== renderLanes && (workInProgress.flags |= 2048),
		        null !== current && pop(resumedCache),
		        null
		      );
		    case 24:
		      return (
		        (renderLanes = null),
		        null !== current && (renderLanes = current.memoizedState.cache),
		        workInProgress.memoizedState.cache !== renderLanes &&
		          (workInProgress.flags |= 2048),
		        popProvider(CacheContext),
		        bubbleProperties(workInProgress),
		        null
		      );
		    case 25:
		      return null;
		    case 30:
		      return null;
		  }
		  throw Error(formatProdErrorMessage(156, workInProgress.tag));
		}
		function unwindWork(current, workInProgress) {
		  popTreeContext(workInProgress);
		  switch (workInProgress.tag) {
		    case 1:
		      return (
		        (current = workInProgress.flags),
		        current & 65536
		          ? ((workInProgress.flags = (current & -65537) | 128), workInProgress)
		          : null
		      );
		    case 3:
		      return (
		        popProvider(CacheContext),
		        popHostContainer(),
		        (current = workInProgress.flags),
		        0 !== (current & 65536) && 0 === (current & 128)
		          ? ((workInProgress.flags = (current & -65537) | 128), workInProgress)
		          : null
		      );
		    case 26:
		    case 27:
		    case 5:
		      return popHostContext(workInProgress), null;
		    case 13:
		      popSuspenseHandler(workInProgress);
		      current = workInProgress.memoizedState;
		      if (null !== current && null !== current.dehydrated) {
		        if (null === workInProgress.alternate)
		          throw Error(formatProdErrorMessage(340));
		        resetHydrationState();
		      }
		      current = workInProgress.flags;
		      return current & 65536
		        ? ((workInProgress.flags = (current & -65537) | 128), workInProgress)
		        : null;
		    case 19:
		      return pop(suspenseStackCursor), null;
		    case 4:
		      return popHostContainer(), null;
		    case 10:
		      return popProvider(workInProgress.type), null;
		    case 22:
		    case 23:
		      return (
		        popSuspenseHandler(workInProgress),
		        popHiddenContext(),
		        null !== current && pop(resumedCache),
		        (current = workInProgress.flags),
		        current & 65536
		          ? ((workInProgress.flags = (current & -65537) | 128), workInProgress)
		          : null
		      );
		    case 24:
		      return popProvider(CacheContext), null;
		    case 25:
		      return null;
		    default:
		      return null;
		  }
		}
		function unwindInterruptedWork(current, interruptedWork) {
		  popTreeContext(interruptedWork);
		  switch (interruptedWork.tag) {
		    case 3:
		      popProvider(CacheContext);
		      popHostContainer();
		      break;
		    case 26:
		    case 27:
		    case 5:
		      popHostContext(interruptedWork);
		      break;
		    case 4:
		      popHostContainer();
		      break;
		    case 13:
		      popSuspenseHandler(interruptedWork);
		      break;
		    case 19:
		      pop(suspenseStackCursor);
		      break;
		    case 10:
		      popProvider(interruptedWork.type);
		      break;
		    case 22:
		    case 23:
		      popSuspenseHandler(interruptedWork);
		      popHiddenContext();
		      null !== current && pop(resumedCache);
		      break;
		    case 24:
		      popProvider(CacheContext);
		  }
		}
		function commitHookEffectListMount(flags, finishedWork) {
		  try {
		    var updateQueue = finishedWork.updateQueue,
		      lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
		    if (null !== lastEffect) {
		      var firstEffect = lastEffect.next;
		      updateQueue = firstEffect;
		      do {
		        if ((updateQueue.tag & flags) === flags) {
		          lastEffect = void 0;
		          var create = updateQueue.create,
		            inst = updateQueue.inst;
		          lastEffect = create();
		          inst.destroy = lastEffect;
		        }
		        updateQueue = updateQueue.next;
		      } while (updateQueue !== firstEffect);
		    }
		  } catch (error) {
		    captureCommitPhaseError(finishedWork, finishedWork.return, error);
		  }
		}
		function commitHookEffectListUnmount(
		  flags,
		  finishedWork,
		  nearestMountedAncestor$jscomp$0
		) {
		  try {
		    var updateQueue = finishedWork.updateQueue,
		      lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
		    if (null !== lastEffect) {
		      var firstEffect = lastEffect.next;
		      updateQueue = firstEffect;
		      do {
		        if ((updateQueue.tag & flags) === flags) {
		          var inst = updateQueue.inst,
		            destroy = inst.destroy;
		          if (void 0 !== destroy) {
		            inst.destroy = void 0;
		            lastEffect = finishedWork;
		            var nearestMountedAncestor = nearestMountedAncestor$jscomp$0,
		              destroy_ = destroy;
		            try {
		              destroy_();
		            } catch (error) {
		              captureCommitPhaseError(
		                lastEffect,
		                nearestMountedAncestor,
		                error
		              );
		            }
		          }
		        }
		        updateQueue = updateQueue.next;
		      } while (updateQueue !== firstEffect);
		    }
		  } catch (error) {
		    captureCommitPhaseError(finishedWork, finishedWork.return, error);
		  }
		}
		function commitClassCallbacks(finishedWork) {
		  var updateQueue = finishedWork.updateQueue;
		  if (null !== updateQueue) {
		    var instance = finishedWork.stateNode;
		    try {
		      commitCallbacks(updateQueue, instance);
		    } catch (error) {
		      captureCommitPhaseError(finishedWork, finishedWork.return, error);
		    }
		  }
		}
		function safelyCallComponentWillUnmount(
		  current,
		  nearestMountedAncestor,
		  instance
		) {
		  instance.props = resolveClassComponentProps(
		    current.type,
		    current.memoizedProps
		  );
		  instance.state = current.memoizedState;
		  try {
		    instance.componentWillUnmount();
		  } catch (error) {
		    captureCommitPhaseError(current, nearestMountedAncestor, error);
		  }
		}
		function safelyAttachRef(current, nearestMountedAncestor) {
		  try {
		    var ref = current.ref;
		    if (null !== ref) {
		      switch (current.tag) {
		        case 26:
		        case 27:
		        case 5:
		          var instanceToUse = current.stateNode;
		          break;
		        case 30:
		          instanceToUse = current.stateNode;
		          break;
		        default:
		          instanceToUse = current.stateNode;
		      }
		      "function" === typeof ref
		        ? (current.refCleanup = ref(instanceToUse))
		        : (ref.current = instanceToUse);
		    }
		  } catch (error) {
		    captureCommitPhaseError(current, nearestMountedAncestor, error);
		  }
		}
		function safelyDetachRef(current, nearestMountedAncestor) {
		  var ref = current.ref,
		    refCleanup = current.refCleanup;
		  if (null !== ref)
		    if ("function" === typeof refCleanup)
		      try {
		        refCleanup();
		      } catch (error) {
		        captureCommitPhaseError(current, nearestMountedAncestor, error);
		      } finally {
		        (current.refCleanup = null),
		          (current = current.alternate),
		          null != current && (current.refCleanup = null);
		      }
		    else if ("function" === typeof ref)
		      try {
		        ref(null);
		      } catch (error$143) {
		        captureCommitPhaseError(current, nearestMountedAncestor, error$143);
		      }
		    else ref.current = null;
		}
		function commitHostMount(finishedWork) {
		  var type = finishedWork.type,
		    props = finishedWork.memoizedProps,
		    instance = finishedWork.stateNode;
		  try {
		    a: switch (type) {
		      case "button":
		      case "input":
		      case "select":
		      case "textarea":
		        props.autoFocus && instance.focus();
		        break a;
		      case "img":
		        props.src
		          ? (instance.src = props.src)
		          : props.srcSet && (instance.srcset = props.srcSet);
		    }
		  } catch (error) {
		    captureCommitPhaseError(finishedWork, finishedWork.return, error);
		  }
		}
		function commitHostUpdate(finishedWork, newProps, oldProps) {
		  try {
		    var domElement = finishedWork.stateNode;
		    updateProperties(domElement, finishedWork.type, oldProps, newProps);
		    domElement[internalPropsKey] = newProps;
		  } catch (error) {
		    captureCommitPhaseError(finishedWork, finishedWork.return, error);
		  }
		}
		function isHostParent(fiber) {
		  return (
		    5 === fiber.tag ||
		    3 === fiber.tag ||
		    26 === fiber.tag ||
		    (27 === fiber.tag && isSingletonScope(fiber.type)) ||
		    4 === fiber.tag
		  );
		}
		function getHostSibling(fiber) {
		  a: for (;;) {
		    for (; null === fiber.sibling; ) {
		      if (null === fiber.return || isHostParent(fiber.return)) return null;
		      fiber = fiber.return;
		    }
		    fiber.sibling.return = fiber.return;
		    for (
		      fiber = fiber.sibling;
		      5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag;

		    ) {
		      if (27 === fiber.tag && isSingletonScope(fiber.type)) continue a;
		      if (fiber.flags & 2) continue a;
		      if (null === fiber.child || 4 === fiber.tag) continue a;
		      else (fiber.child.return = fiber), (fiber = fiber.child);
		    }
		    if (!(fiber.flags & 2)) return fiber.stateNode;
		  }
		}
		function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
		  var tag = node.tag;
		  if (5 === tag || 6 === tag)
		    (node = node.stateNode),
		      before
		        ? (9 === parent.nodeType
		            ? parent.body
		            : "HTML" === parent.nodeName
		              ? parent.ownerDocument.body
		              : parent
		          ).insertBefore(node, before)
		        : ((before =
		            9 === parent.nodeType
		              ? parent.body
		              : "HTML" === parent.nodeName
		                ? parent.ownerDocument.body
		                : parent),
		          before.appendChild(node),
		          (parent = parent._reactRootContainer),
		          (null !== parent && void 0 !== parent) ||
		            null !== before.onclick ||
		            (before.onclick = noop$1));
		  else if (
		    4 !== tag &&
		    (27 === tag &&
		      isSingletonScope(node.type) &&
		      ((parent = node.stateNode), (before = null)),
		    (node = node.child),
		    null !== node)
		  )
		    for (
		      insertOrAppendPlacementNodeIntoContainer(node, before, parent),
		        node = node.sibling;
		      null !== node;

		    )
		      insertOrAppendPlacementNodeIntoContainer(node, before, parent),
		        (node = node.sibling);
		}
		function insertOrAppendPlacementNode(node, before, parent) {
		  var tag = node.tag;
		  if (5 === tag || 6 === tag)
		    (node = node.stateNode),
		      before ? parent.insertBefore(node, before) : parent.appendChild(node);
		  else if (
		    4 !== tag &&
		    (27 === tag && isSingletonScope(node.type) && (parent = node.stateNode),
		    (node = node.child),
		    null !== node)
		  )
		    for (
		      insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
		      null !== node;

		    )
		      insertOrAppendPlacementNode(node, before, parent), (node = node.sibling);
		}
		function commitHostSingletonAcquisition(finishedWork) {
		  var singleton = finishedWork.stateNode,
		    props = finishedWork.memoizedProps;
		  try {
		    for (
		      var type = finishedWork.type, attributes = singleton.attributes;
		      attributes.length;

		    )
		      singleton.removeAttributeNode(attributes[0]);
		    setInitialProperties(singleton, type, props);
		    singleton[internalInstanceKey] = finishedWork;
		    singleton[internalPropsKey] = props;
		  } catch (error) {
		    captureCommitPhaseError(finishedWork, finishedWork.return, error);
		  }
		}
		var offscreenSubtreeIsHidden = false,
		  offscreenSubtreeWasHidden = false,
		  needsFormReset = false,
		  PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set,
		  nextEffect = null;
		function commitBeforeMutationEffects(root, firstChild) {
		  root = root.containerInfo;
		  eventsEnabled = _enabled;
		  root = getActiveElementDeep(root);
		  if (hasSelectionCapabilities(root)) {
		    if ("selectionStart" in root)
		      var JSCompiler_temp = {
		        start: root.selectionStart,
		        end: root.selectionEnd
		      };
		    else
		      a: {
		        JSCompiler_temp =
		          ((JSCompiler_temp = root.ownerDocument) &&
		            JSCompiler_temp.defaultView) ||
		          window;
		        var selection =
		          JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
		        if (selection && 0 !== selection.rangeCount) {
		          JSCompiler_temp = selection.anchorNode;
		          var anchorOffset = selection.anchorOffset,
		            focusNode = selection.focusNode;
		          selection = selection.focusOffset;
		          try {
		            JSCompiler_temp.nodeType, focusNode.nodeType;
		          } catch (e$20) {
		            JSCompiler_temp = null;
		            break a;
		          }
		          var length = 0,
		            start = -1,
		            end = -1,
		            indexWithinAnchor = 0,
		            indexWithinFocus = 0,
		            node = root,
		            parentNode = null;
		          b: for (;;) {
		            for (var next; ; ) {
		              node !== JSCompiler_temp ||
		                (0 !== anchorOffset && 3 !== node.nodeType) ||
		                (start = length + anchorOffset);
		              node !== focusNode ||
		                (0 !== selection && 3 !== node.nodeType) ||
		                (end = length + selection);
		              3 === node.nodeType && (length += node.nodeValue.length);
		              if (null === (next = node.firstChild)) break;
		              parentNode = node;
		              node = next;
		            }
		            for (;;) {
		              if (node === root) break b;
		              parentNode === JSCompiler_temp &&
		                ++indexWithinAnchor === anchorOffset &&
		                (start = length);
		              parentNode === focusNode &&
		                ++indexWithinFocus === selection &&
		                (end = length);
		              if (null !== (next = node.nextSibling)) break;
		              node = parentNode;
		              parentNode = node.parentNode;
		            }
		            node = next;
		          }
		          JSCompiler_temp =
		            -1 === start || -1 === end ? null : { start: start, end: end };
		        } else JSCompiler_temp = null;
		      }
		    JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };
		  } else JSCompiler_temp = null;
		  selectionInformation = { focusedElem: root, selectionRange: JSCompiler_temp };
		  _enabled = false;
		  for (nextEffect = firstChild; null !== nextEffect; )
		    if (
		      ((firstChild = nextEffect),
		      (root = firstChild.child),
		      0 !== (firstChild.subtreeFlags & 1024) && null !== root)
		    )
		      (root.return = firstChild), (nextEffect = root);
		    else
		      for (; null !== nextEffect; ) {
		        firstChild = nextEffect;
		        focusNode = firstChild.alternate;
		        root = firstChild.flags;
		        switch (firstChild.tag) {
		          case 0:
		            break;
		          case 11:
		          case 15:
		            break;
		          case 1:
		            if (0 !== (root & 1024) && null !== focusNode) {
		              root = void 0;
		              JSCompiler_temp = firstChild;
		              anchorOffset = focusNode.memoizedProps;
		              focusNode = focusNode.memoizedState;
		              selection = JSCompiler_temp.stateNode;
		              try {
		                var resolvedPrevProps = resolveClassComponentProps(
		                  JSCompiler_temp.type,
		                  anchorOffset,
		                  JSCompiler_temp.elementType === JSCompiler_temp.type
		                );
		                root = selection.getSnapshotBeforeUpdate(
		                  resolvedPrevProps,
		                  focusNode
		                );
		                selection.__reactInternalSnapshotBeforeUpdate = root;
		              } catch (error) {
		                captureCommitPhaseError(
		                  JSCompiler_temp,
		                  JSCompiler_temp.return,
		                  error
		                );
		              }
		            }
		            break;
		          case 3:
		            if (0 !== (root & 1024))
		              if (
		                ((root = firstChild.stateNode.containerInfo),
		                (JSCompiler_temp = root.nodeType),
		                9 === JSCompiler_temp)
		              )
		                clearContainerSparingly(root);
		              else if (1 === JSCompiler_temp)
		                switch (root.nodeName) {
		                  case "HEAD":
		                  case "HTML":
		                  case "BODY":
		                    clearContainerSparingly(root);
		                    break;
		                  default:
		                    root.textContent = "";
		                }
		            break;
		          case 5:
		          case 26:
		          case 27:
		          case 6:
		          case 4:
		          case 17:
		            break;
		          default:
		            if (0 !== (root & 1024)) throw Error(formatProdErrorMessage(163));
		        }
		        root = firstChild.sibling;
		        if (null !== root) {
		          root.return = firstChild.return;
		          nextEffect = root;
		          break;
		        }
		        nextEffect = firstChild.return;
		      }
		}
		function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
		  var flags = finishedWork.flags;
		  switch (finishedWork.tag) {
		    case 0:
		    case 11:
		    case 15:
		      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		      flags & 4 && commitHookEffectListMount(5, finishedWork);
		      break;
		    case 1:
		      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		      if (flags & 4)
		        if (((finishedRoot = finishedWork.stateNode), null === current))
		          try {
		            finishedRoot.componentDidMount();
		          } catch (error) {
		            captureCommitPhaseError(finishedWork, finishedWork.return, error);
		          }
		        else {
		          var prevProps = resolveClassComponentProps(
		            finishedWork.type,
		            current.memoizedProps
		          );
		          current = current.memoizedState;
		          try {
		            finishedRoot.componentDidUpdate(
		              prevProps,
		              current,
		              finishedRoot.__reactInternalSnapshotBeforeUpdate
		            );
		          } catch (error$142) {
		            captureCommitPhaseError(
		              finishedWork,
		              finishedWork.return,
		              error$142
		            );
		          }
		        }
		      flags & 64 && commitClassCallbacks(finishedWork);
		      flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
		      break;
		    case 3:
		      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		      if (
		        flags & 64 &&
		        ((finishedRoot = finishedWork.updateQueue), null !== finishedRoot)
		      ) {
		        current = null;
		        if (null !== finishedWork.child)
		          switch (finishedWork.child.tag) {
		            case 27:
		            case 5:
		              current = finishedWork.child.stateNode;
		              break;
		            case 1:
		              current = finishedWork.child.stateNode;
		          }
		        try {
		          commitCallbacks(finishedRoot, current);
		        } catch (error) {
		          captureCommitPhaseError(finishedWork, finishedWork.return, error);
		        }
		      }
		      break;
		    case 27:
		      null === current &&
		        flags & 4 &&
		        commitHostSingletonAcquisition(finishedWork);
		    case 26:
		    case 5:
		      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		      null === current && flags & 4 && commitHostMount(finishedWork);
		      flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
		      break;
		    case 12:
		      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		      break;
		    case 13:
		      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		      flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
		      flags & 64 &&
		        ((finishedRoot = finishedWork.memoizedState),
		        null !== finishedRoot &&
		          ((finishedRoot = finishedRoot.dehydrated),
		          null !== finishedRoot &&
		            ((finishedWork = retryDehydratedSuspenseBoundary.bind(
		              null,
		              finishedWork
		            )),
		            registerSuspenseInstanceRetry(finishedRoot, finishedWork))));
		      break;
		    case 22:
		      flags = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
		      if (!flags) {
		        current =
		          (null !== current && null !== current.memoizedState) ||
		          offscreenSubtreeWasHidden;
		        prevProps = offscreenSubtreeIsHidden;
		        var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
		        offscreenSubtreeIsHidden = flags;
		        (offscreenSubtreeWasHidden = current) && !prevOffscreenSubtreeWasHidden
		          ? recursivelyTraverseReappearLayoutEffects(
		              finishedRoot,
		              finishedWork,
		              0 !== (finishedWork.subtreeFlags & 8772)
		            )
		          : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		        offscreenSubtreeIsHidden = prevProps;
		        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
		      }
		      break;
		    case 30:
		      break;
		    default:
		      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		  }
		}
		function detachFiberAfterEffects(fiber) {
		  var alternate = fiber.alternate;
		  null !== alternate &&
		    ((fiber.alternate = null), detachFiberAfterEffects(alternate));
		  fiber.child = null;
		  fiber.deletions = null;
		  fiber.sibling = null;
		  5 === fiber.tag &&
		    ((alternate = fiber.stateNode),
		    null !== alternate && detachDeletedInstance(alternate));
		  fiber.stateNode = null;
		  fiber.return = null;
		  fiber.dependencies = null;
		  fiber.memoizedProps = null;
		  fiber.memoizedState = null;
		  fiber.pendingProps = null;
		  fiber.stateNode = null;
		  fiber.updateQueue = null;
		}
		var hostParent = null,
		  hostParentIsContainer = false;
		function recursivelyTraverseDeletionEffects(
		  finishedRoot,
		  nearestMountedAncestor,
		  parent
		) {
		  for (parent = parent.child; null !== parent; )
		    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent),
		      (parent = parent.sibling);
		}
		function commitDeletionEffectsOnFiber(
		  finishedRoot,
		  nearestMountedAncestor,
		  deletedFiber
		) {
		  if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount)
		    try {
		      injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
		    } catch (err) {}
		  switch (deletedFiber.tag) {
		    case 26:
		      offscreenSubtreeWasHidden ||
		        safelyDetachRef(deletedFiber, nearestMountedAncestor);
		      recursivelyTraverseDeletionEffects(
		        finishedRoot,
		        nearestMountedAncestor,
		        deletedFiber
		      );
		      deletedFiber.memoizedState
		        ? deletedFiber.memoizedState.count--
		        : deletedFiber.stateNode &&
		          ((deletedFiber = deletedFiber.stateNode),
		          deletedFiber.parentNode.removeChild(deletedFiber));
		      break;
		    case 27:
		      offscreenSubtreeWasHidden ||
		        safelyDetachRef(deletedFiber, nearestMountedAncestor);
		      var prevHostParent = hostParent,
		        prevHostParentIsContainer = hostParentIsContainer;
		      isSingletonScope(deletedFiber.type) &&
		        ((hostParent = deletedFiber.stateNode), (hostParentIsContainer = false));
		      recursivelyTraverseDeletionEffects(
		        finishedRoot,
		        nearestMountedAncestor,
		        deletedFiber
		      );
		      releaseSingletonInstance(deletedFiber.stateNode);
		      hostParent = prevHostParent;
		      hostParentIsContainer = prevHostParentIsContainer;
		      break;
		    case 5:
		      offscreenSubtreeWasHidden ||
		        safelyDetachRef(deletedFiber, nearestMountedAncestor);
		    case 6:
		      prevHostParent = hostParent;
		      prevHostParentIsContainer = hostParentIsContainer;
		      hostParent = null;
		      recursivelyTraverseDeletionEffects(
		        finishedRoot,
		        nearestMountedAncestor,
		        deletedFiber
		      );
		      hostParent = prevHostParent;
		      hostParentIsContainer = prevHostParentIsContainer;
		      if (null !== hostParent)
		        if (hostParentIsContainer)
		          try {
		            (9 === hostParent.nodeType
		              ? hostParent.body
		              : "HTML" === hostParent.nodeName
		                ? hostParent.ownerDocument.body
		                : hostParent
		            ).removeChild(deletedFiber.stateNode);
		          } catch (error) {
		            captureCommitPhaseError(
		              deletedFiber,
		              nearestMountedAncestor,
		              error
		            );
		          }
		        else
		          try {
		            hostParent.removeChild(deletedFiber.stateNode);
		          } catch (error) {
		            captureCommitPhaseError(
		              deletedFiber,
		              nearestMountedAncestor,
		              error
		            );
		          }
		      break;
		    case 18:
		      null !== hostParent &&
		        (hostParentIsContainer
		          ? ((finishedRoot = hostParent),
		            clearSuspenseBoundary(
		              9 === finishedRoot.nodeType
		                ? finishedRoot.body
		                : "HTML" === finishedRoot.nodeName
		                  ? finishedRoot.ownerDocument.body
		                  : finishedRoot,
		              deletedFiber.stateNode
		            ),
		            retryIfBlockedOn(finishedRoot))
		          : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
		      break;
		    case 4:
		      prevHostParent = hostParent;
		      prevHostParentIsContainer = hostParentIsContainer;
		      hostParent = deletedFiber.stateNode.containerInfo;
		      hostParentIsContainer = true;
		      recursivelyTraverseDeletionEffects(
		        finishedRoot,
		        nearestMountedAncestor,
		        deletedFiber
		      );
		      hostParent = prevHostParent;
		      hostParentIsContainer = prevHostParentIsContainer;
		      break;
		    case 0:
		    case 11:
		    case 14:
		    case 15:
		      offscreenSubtreeWasHidden ||
		        commitHookEffectListUnmount(2, deletedFiber, nearestMountedAncestor);
		      offscreenSubtreeWasHidden ||
		        commitHookEffectListUnmount(4, deletedFiber, nearestMountedAncestor);
		      recursivelyTraverseDeletionEffects(
		        finishedRoot,
		        nearestMountedAncestor,
		        deletedFiber
		      );
		      break;
		    case 1:
		      offscreenSubtreeWasHidden ||
		        (safelyDetachRef(deletedFiber, nearestMountedAncestor),
		        (prevHostParent = deletedFiber.stateNode),
		        "function" === typeof prevHostParent.componentWillUnmount &&
		          safelyCallComponentWillUnmount(
		            deletedFiber,
		            nearestMountedAncestor,
		            prevHostParent
		          ));
		      recursivelyTraverseDeletionEffects(
		        finishedRoot,
		        nearestMountedAncestor,
		        deletedFiber
		      );
		      break;
		    case 21:
		      recursivelyTraverseDeletionEffects(
		        finishedRoot,
		        nearestMountedAncestor,
		        deletedFiber
		      );
		      break;
		    case 22:
		      offscreenSubtreeWasHidden =
		        (prevHostParent = offscreenSubtreeWasHidden) ||
		        null !== deletedFiber.memoizedState;
		      recursivelyTraverseDeletionEffects(
		        finishedRoot,
		        nearestMountedAncestor,
		        deletedFiber
		      );
		      offscreenSubtreeWasHidden = prevHostParent;
		      break;
		    default:
		      recursivelyTraverseDeletionEffects(
		        finishedRoot,
		        nearestMountedAncestor,
		        deletedFiber
		      );
		  }
		}
		function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
		  if (
		    null === finishedWork.memoizedState &&
		    ((finishedRoot = finishedWork.alternate),
		    null !== finishedRoot &&
		      ((finishedRoot = finishedRoot.memoizedState),
		      null !== finishedRoot &&
		        ((finishedRoot = finishedRoot.dehydrated), null !== finishedRoot)))
		  )
		    try {
		      retryIfBlockedOn(finishedRoot);
		    } catch (error) {
		      captureCommitPhaseError(finishedWork, finishedWork.return, error);
		    }
		}
		function getRetryCache(finishedWork) {
		  switch (finishedWork.tag) {
		    case 13:
		    case 19:
		      var retryCache = finishedWork.stateNode;
		      null === retryCache &&
		        (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
		      return retryCache;
		    case 22:
		      return (
		        (finishedWork = finishedWork.stateNode),
		        (retryCache = finishedWork._retryCache),
		        null === retryCache &&
		          (retryCache = finishedWork._retryCache = new PossiblyWeakSet()),
		        retryCache
		      );
		    default:
		      throw Error(formatProdErrorMessage(435, finishedWork.tag));
		  }
		}
		function attachSuspenseRetryListeners(finishedWork, wakeables) {
		  var retryCache = getRetryCache(finishedWork);
		  wakeables.forEach(function (wakeable) {
		    var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
		    retryCache.has(wakeable) ||
		      (retryCache.add(wakeable), wakeable.then(retry, retry));
		  });
		}
		function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
		  var deletions = parentFiber.deletions;
		  if (null !== deletions)
		    for (var i = 0; i < deletions.length; i++) {
		      var childToDelete = deletions[i],
		        root = root$jscomp$0,
		        returnFiber = parentFiber,
		        parent = returnFiber;
		      a: for (; null !== parent; ) {
		        switch (parent.tag) {
		          case 27:
		            if (isSingletonScope(parent.type)) {
		              hostParent = parent.stateNode;
		              hostParentIsContainer = false;
		              break a;
		            }
		            break;
		          case 5:
		            hostParent = parent.stateNode;
		            hostParentIsContainer = false;
		            break a;
		          case 3:
		          case 4:
		            hostParent = parent.stateNode.containerInfo;
		            hostParentIsContainer = true;
		            break a;
		        }
		        parent = parent.return;
		      }
		      if (null === hostParent) throw Error(formatProdErrorMessage(160));
		      commitDeletionEffectsOnFiber(root, returnFiber, childToDelete);
		      hostParent = null;
		      hostParentIsContainer = false;
		      root = childToDelete.alternate;
		      null !== root && (root.return = null);
		      childToDelete.return = null;
		    }
		  if (parentFiber.subtreeFlags & 13878)
		    for (parentFiber = parentFiber.child; null !== parentFiber; )
		      commitMutationEffectsOnFiber(parentFiber, root$jscomp$0),
		        (parentFiber = parentFiber.sibling);
		}
		var currentHoistableRoot = null;
		function commitMutationEffectsOnFiber(finishedWork, root) {
		  var current = finishedWork.alternate,
		    flags = finishedWork.flags;
		  switch (finishedWork.tag) {
		    case 0:
		    case 11:
		    case 14:
		    case 15:
		      recursivelyTraverseMutationEffects(root, finishedWork);
		      commitReconciliationEffects(finishedWork);
		      flags & 4 &&
		        (commitHookEffectListUnmount(3, finishedWork, finishedWork.return),
		        commitHookEffectListMount(3, finishedWork),
		        commitHookEffectListUnmount(5, finishedWork, finishedWork.return));
		      break;
		    case 1:
		      recursivelyTraverseMutationEffects(root, finishedWork);
		      commitReconciliationEffects(finishedWork);
		      flags & 512 &&
		        (offscreenSubtreeWasHidden ||
		          null === current ||
		          safelyDetachRef(current, current.return));
		      flags & 64 &&
		        offscreenSubtreeIsHidden &&
		        ((finishedWork = finishedWork.updateQueue),
		        null !== finishedWork &&
		          ((flags = finishedWork.callbacks),
		          null !== flags &&
		            ((current = finishedWork.shared.hiddenCallbacks),
		            (finishedWork.shared.hiddenCallbacks =
		              null === current ? flags : current.concat(flags)))));
		      break;
		    case 26:
		      var hoistableRoot = currentHoistableRoot;
		      recursivelyTraverseMutationEffects(root, finishedWork);
		      commitReconciliationEffects(finishedWork);
		      flags & 512 &&
		        (offscreenSubtreeWasHidden ||
		          null === current ||
		          safelyDetachRef(current, current.return));
		      if (flags & 4) {
		        var currentResource = null !== current ? current.memoizedState : null;
		        flags = finishedWork.memoizedState;
		        if (null === current)
		          if (null === flags)
		            if (null === finishedWork.stateNode) {
		              a: {
		                flags = finishedWork.type;
		                current = finishedWork.memoizedProps;
		                hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
		                b: switch (flags) {
		                  case "title":
		                    currentResource =
		                      hoistableRoot.getElementsByTagName("title")[0];
		                    if (
		                      !currentResource ||
		                      currentResource[internalHoistableMarker] ||
		                      currentResource[internalInstanceKey] ||
		                      "http://www.w3.org/2000/svg" ===
		                        currentResource.namespaceURI ||
		                      currentResource.hasAttribute("itemprop")
		                    )
		                      (currentResource = hoistableRoot.createElement(flags)),
		                        hoistableRoot.head.insertBefore(
		                          currentResource,
		                          hoistableRoot.querySelector("head > title")
		                        );
		                    setInitialProperties(currentResource, flags, current);
		                    currentResource[internalInstanceKey] = finishedWork;
		                    markNodeAsHoistable(currentResource);
		                    flags = currentResource;
		                    break a;
		                  case "link":
		                    var maybeNodes = getHydratableHoistableCache(
		                      "link",
		                      "href",
		                      hoistableRoot
		                    ).get(flags + (current.href || ""));
		                    if (maybeNodes)
		                      for (var i = 0; i < maybeNodes.length; i++)
		                        if (
		                          ((currentResource = maybeNodes[i]),
		                          currentResource.getAttribute("href") ===
		                            (null == current.href || "" === current.href
		                              ? null
		                              : current.href) &&
		                            currentResource.getAttribute("rel") ===
		                              (null == current.rel ? null : current.rel) &&
		                            currentResource.getAttribute("title") ===
		                              (null == current.title ? null : current.title) &&
		                            currentResource.getAttribute("crossorigin") ===
		                              (null == current.crossOrigin
		                                ? null
		                                : current.crossOrigin))
		                        ) {
		                          maybeNodes.splice(i, 1);
		                          break b;
		                        }
		                    currentResource = hoistableRoot.createElement(flags);
		                    setInitialProperties(currentResource, flags, current);
		                    hoistableRoot.head.appendChild(currentResource);
		                    break;
		                  case "meta":
		                    if (
		                      (maybeNodes = getHydratableHoistableCache(
		                        "meta",
		                        "content",
		                        hoistableRoot
		                      ).get(flags + (current.content || "")))
		                    )
		                      for (i = 0; i < maybeNodes.length; i++)
		                        if (
		                          ((currentResource = maybeNodes[i]),
		                          currentResource.getAttribute("content") ===
		                            (null == current.content
		                              ? null
		                              : "" + current.content) &&
		                            currentResource.getAttribute("name") ===
		                              (null == current.name ? null : current.name) &&
		                            currentResource.getAttribute("property") ===
		                              (null == current.property
		                                ? null
		                                : current.property) &&
		                            currentResource.getAttribute("http-equiv") ===
		                              (null == current.httpEquiv
		                                ? null
		                                : current.httpEquiv) &&
		                            currentResource.getAttribute("charset") ===
		                              (null == current.charSet
		                                ? null
		                                : current.charSet))
		                        ) {
		                          maybeNodes.splice(i, 1);
		                          break b;
		                        }
		                    currentResource = hoistableRoot.createElement(flags);
		                    setInitialProperties(currentResource, flags, current);
		                    hoistableRoot.head.appendChild(currentResource);
		                    break;
		                  default:
		                    throw Error(formatProdErrorMessage(468, flags));
		                }
		                currentResource[internalInstanceKey] = finishedWork;
		                markNodeAsHoistable(currentResource);
		                flags = currentResource;
		              }
		              finishedWork.stateNode = flags;
		            } else
		              mountHoistable(
		                hoistableRoot,
		                finishedWork.type,
		                finishedWork.stateNode
		              );
		          else
		            finishedWork.stateNode = acquireResource(
		              hoistableRoot,
		              flags,
		              finishedWork.memoizedProps
		            );
		        else
		          currentResource !== flags
		            ? (null === currentResource
		                ? null !== current.stateNode &&
		                  ((current = current.stateNode),
		                  current.parentNode.removeChild(current))
		                : currentResource.count--,
		              null === flags
		                ? mountHoistable(
		                    hoistableRoot,
		                    finishedWork.type,
		                    finishedWork.stateNode
		                  )
		                : acquireResource(
		                    hoistableRoot,
		                    flags,
		                    finishedWork.memoizedProps
		                  ))
		            : null === flags &&
		              null !== finishedWork.stateNode &&
		              commitHostUpdate(
		                finishedWork,
		                finishedWork.memoizedProps,
		                current.memoizedProps
		              );
		      }
		      break;
		    case 27:
		      recursivelyTraverseMutationEffects(root, finishedWork);
		      commitReconciliationEffects(finishedWork);
		      flags & 512 &&
		        (offscreenSubtreeWasHidden ||
		          null === current ||
		          safelyDetachRef(current, current.return));
		      null !== current &&
		        flags & 4 &&
		        commitHostUpdate(
		          finishedWork,
		          finishedWork.memoizedProps,
		          current.memoizedProps
		        );
		      break;
		    case 5:
		      recursivelyTraverseMutationEffects(root, finishedWork);
		      commitReconciliationEffects(finishedWork);
		      flags & 512 &&
		        (offscreenSubtreeWasHidden ||
		          null === current ||
		          safelyDetachRef(current, current.return));
		      if (finishedWork.flags & 32) {
		        hoistableRoot = finishedWork.stateNode;
		        try {
		          setTextContent(hoistableRoot, "");
		        } catch (error) {
		          captureCommitPhaseError(finishedWork, finishedWork.return, error);
		        }
		      }
		      flags & 4 &&
		        null != finishedWork.stateNode &&
		        ((hoistableRoot = finishedWork.memoizedProps),
		        commitHostUpdate(
		          finishedWork,
		          hoistableRoot,
		          null !== current ? current.memoizedProps : hoistableRoot
		        ));
		      flags & 1024 && (needsFormReset = true);
		      break;
		    case 6:
		      recursivelyTraverseMutationEffects(root, finishedWork);
		      commitReconciliationEffects(finishedWork);
		      if (flags & 4) {
		        if (null === finishedWork.stateNode)
		          throw Error(formatProdErrorMessage(162));
		        flags = finishedWork.memoizedProps;
		        current = finishedWork.stateNode;
		        try {
		          current.nodeValue = flags;
		        } catch (error) {
		          captureCommitPhaseError(finishedWork, finishedWork.return, error);
		        }
		      }
		      break;
		    case 3:
		      tagCaches = null;
		      hoistableRoot = currentHoistableRoot;
		      currentHoistableRoot = getHoistableRoot(root.containerInfo);
		      recursivelyTraverseMutationEffects(root, finishedWork);
		      currentHoistableRoot = hoistableRoot;
		      commitReconciliationEffects(finishedWork);
		      if (flags & 4 && null !== current && current.memoizedState.isDehydrated)
		        try {
		          retryIfBlockedOn(root.containerInfo);
		        } catch (error) {
		          captureCommitPhaseError(finishedWork, finishedWork.return, error);
		        }
		      needsFormReset &&
		        ((needsFormReset = false), recursivelyResetForms(finishedWork));
		      break;
		    case 4:
		      flags = currentHoistableRoot;
		      currentHoistableRoot = getHoistableRoot(
		        finishedWork.stateNode.containerInfo
		      );
		      recursivelyTraverseMutationEffects(root, finishedWork);
		      commitReconciliationEffects(finishedWork);
		      currentHoistableRoot = flags;
		      break;
		    case 12:
		      recursivelyTraverseMutationEffects(root, finishedWork);
		      commitReconciliationEffects(finishedWork);
		      break;
		    case 13:
		      recursivelyTraverseMutationEffects(root, finishedWork);
		      commitReconciliationEffects(finishedWork);
		      finishedWork.child.flags & 8192 &&
		        (null !== finishedWork.memoizedState) !==
		          (null !== current && null !== current.memoizedState) &&
		        (globalMostRecentFallbackTime = now());
		      flags & 4 &&
		        ((flags = finishedWork.updateQueue),
		        null !== flags &&
		          ((finishedWork.updateQueue = null),
		          attachSuspenseRetryListeners(finishedWork, flags)));
		      break;
		    case 22:
		      hoistableRoot = null !== finishedWork.memoizedState;
		      var wasHidden = null !== current && null !== current.memoizedState,
		        prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden,
		        prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
		      offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || hoistableRoot;
		      offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;
		      recursivelyTraverseMutationEffects(root, finishedWork);
		      offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
		      offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
		      commitReconciliationEffects(finishedWork);
		      if (flags & 8192)
		        a: for (
		          root = finishedWork.stateNode,
		            root._visibility = hoistableRoot
		              ? root._visibility & -2
		              : root._visibility | 1,
		            hoistableRoot &&
		              (null === current ||
		                wasHidden ||
		                offscreenSubtreeIsHidden ||
		                offscreenSubtreeWasHidden ||
		                recursivelyTraverseDisappearLayoutEffects(finishedWork)),
		            current = null,
		            root = finishedWork;
		          ;

		        ) {
		          if (5 === root.tag || 26 === root.tag) {
		            if (null === current) {
		              wasHidden = current = root;
		              try {
		                if (((currentResource = wasHidden.stateNode), hoistableRoot))
		                  (maybeNodes = currentResource.style),
		                    "function" === typeof maybeNodes.setProperty
		                      ? maybeNodes.setProperty("display", "none", "important")
		                      : (maybeNodes.display = "none");
		                else {
		                  i = wasHidden.stateNode;
		                  var styleProp = wasHidden.memoizedProps.style,
		                    display =
		                      void 0 !== styleProp &&
		                      null !== styleProp &&
		                      styleProp.hasOwnProperty("display")
		                        ? styleProp.display
		                        : null;
		                  i.style.display =
		                    null == display || "boolean" === typeof display
		                      ? ""
		                      : ("" + display).trim();
		                }
		              } catch (error) {
		                captureCommitPhaseError(wasHidden, wasHidden.return, error);
		              }
		            }
		          } else if (6 === root.tag) {
		            if (null === current) {
		              wasHidden = root;
		              try {
		                wasHidden.stateNode.nodeValue = hoistableRoot
		                  ? ""
		                  : wasHidden.memoizedProps;
		              } catch (error) {
		                captureCommitPhaseError(wasHidden, wasHidden.return, error);
		              }
		            }
		          } else if (
		            ((22 !== root.tag && 23 !== root.tag) ||
		              null === root.memoizedState ||
		              root === finishedWork) &&
		            null !== root.child
		          ) {
		            root.child.return = root;
		            root = root.child;
		            continue;
		          }
		          if (root === finishedWork) break a;
		          for (; null === root.sibling; ) {
		            if (null === root.return || root.return === finishedWork) break a;
		            current === root && (current = null);
		            root = root.return;
		          }
		          current === root && (current = null);
		          root.sibling.return = root.return;
		          root = root.sibling;
		        }
		      flags & 4 &&
		        ((flags = finishedWork.updateQueue),
		        null !== flags &&
		          ((current = flags.retryQueue),
		          null !== current &&
		            ((flags.retryQueue = null),
		            attachSuspenseRetryListeners(finishedWork, current))));
		      break;
		    case 19:
		      recursivelyTraverseMutationEffects(root, finishedWork);
		      commitReconciliationEffects(finishedWork);
		      flags & 4 &&
		        ((flags = finishedWork.updateQueue),
		        null !== flags &&
		          ((finishedWork.updateQueue = null),
		          attachSuspenseRetryListeners(finishedWork, flags)));
		      break;
		    case 30:
		      break;
		    case 21:
		      break;
		    default:
		      recursivelyTraverseMutationEffects(root, finishedWork),
		        commitReconciliationEffects(finishedWork);
		  }
		}
		function commitReconciliationEffects(finishedWork) {
		  var flags = finishedWork.flags;
		  if (flags & 2) {
		    try {
		      for (
		        var hostParentFiber, parentFiber = finishedWork.return;
		        null !== parentFiber;

		      ) {
		        if (isHostParent(parentFiber)) {
		          hostParentFiber = parentFiber;
		          break;
		        }
		        parentFiber = parentFiber.return;
		      }
		      if (null == hostParentFiber) throw Error(formatProdErrorMessage(160));
		      switch (hostParentFiber.tag) {
		        case 27:
		          var parent = hostParentFiber.stateNode,
		            before = getHostSibling(finishedWork);
		          insertOrAppendPlacementNode(finishedWork, before, parent);
		          break;
		        case 5:
		          var parent$144 = hostParentFiber.stateNode;
		          hostParentFiber.flags & 32 &&
		            (setTextContent(parent$144, ""), (hostParentFiber.flags &= -33));
		          var before$145 = getHostSibling(finishedWork);
		          insertOrAppendPlacementNode(finishedWork, before$145, parent$144);
		          break;
		        case 3:
		        case 4:
		          var parent$146 = hostParentFiber.stateNode.containerInfo,
		            before$147 = getHostSibling(finishedWork);
		          insertOrAppendPlacementNodeIntoContainer(
		            finishedWork,
		            before$147,
		            parent$146
		          );
		          break;
		        default:
		          throw Error(formatProdErrorMessage(161));
		      }
		    } catch (error) {
		      captureCommitPhaseError(finishedWork, finishedWork.return, error);
		    }
		    finishedWork.flags &= -3;
		  }
		  flags & 4096 && (finishedWork.flags &= -4097);
		}
		function recursivelyResetForms(parentFiber) {
		  if (parentFiber.subtreeFlags & 1024)
		    for (parentFiber = parentFiber.child; null !== parentFiber; ) {
		      var fiber = parentFiber;
		      recursivelyResetForms(fiber);
		      5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset();
		      parentFiber = parentFiber.sibling;
		    }
		}
		function recursivelyTraverseLayoutEffects(root, parentFiber) {
		  if (parentFiber.subtreeFlags & 8772)
		    for (parentFiber = parentFiber.child; null !== parentFiber; )
		      commitLayoutEffectOnFiber(root, parentFiber.alternate, parentFiber),
		        (parentFiber = parentFiber.sibling);
		}
		function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
		  for (parentFiber = parentFiber.child; null !== parentFiber; ) {
		    var finishedWork = parentFiber;
		    switch (finishedWork.tag) {
		      case 0:
		      case 11:
		      case 14:
		      case 15:
		        commitHookEffectListUnmount(4, finishedWork, finishedWork.return);
		        recursivelyTraverseDisappearLayoutEffects(finishedWork);
		        break;
		      case 1:
		        safelyDetachRef(finishedWork, finishedWork.return);
		        var instance = finishedWork.stateNode;
		        "function" === typeof instance.componentWillUnmount &&
		          safelyCallComponentWillUnmount(
		            finishedWork,
		            finishedWork.return,
		            instance
		          );
		        recursivelyTraverseDisappearLayoutEffects(finishedWork);
		        break;
		      case 27:
		        releaseSingletonInstance(finishedWork.stateNode);
		      case 26:
		      case 5:
		        safelyDetachRef(finishedWork, finishedWork.return);
		        recursivelyTraverseDisappearLayoutEffects(finishedWork);
		        break;
		      case 22:
		        null === finishedWork.memoizedState &&
		          recursivelyTraverseDisappearLayoutEffects(finishedWork);
		        break;
		      case 30:
		        recursivelyTraverseDisappearLayoutEffects(finishedWork);
		        break;
		      default:
		        recursivelyTraverseDisappearLayoutEffects(finishedWork);
		    }
		    parentFiber = parentFiber.sibling;
		  }
		}
		function recursivelyTraverseReappearLayoutEffects(
		  finishedRoot$jscomp$0,
		  parentFiber,
		  includeWorkInProgressEffects
		) {
		  includeWorkInProgressEffects =
		    includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
		  for (parentFiber = parentFiber.child; null !== parentFiber; ) {
		    var current = parentFiber.alternate,
		      finishedRoot = finishedRoot$jscomp$0,
		      finishedWork = parentFiber,
		      flags = finishedWork.flags;
		    switch (finishedWork.tag) {
		      case 0:
		      case 11:
		      case 15:
		        recursivelyTraverseReappearLayoutEffects(
		          finishedRoot,
		          finishedWork,
		          includeWorkInProgressEffects
		        );
		        commitHookEffectListMount(4, finishedWork);
		        break;
		      case 1:
		        recursivelyTraverseReappearLayoutEffects(
		          finishedRoot,
		          finishedWork,
		          includeWorkInProgressEffects
		        );
		        current = finishedWork;
		        finishedRoot = current.stateNode;
		        if ("function" === typeof finishedRoot.componentDidMount)
		          try {
		            finishedRoot.componentDidMount();
		          } catch (error) {
		            captureCommitPhaseError(current, current.return, error);
		          }
		        current = finishedWork;
		        finishedRoot = current.updateQueue;
		        if (null !== finishedRoot) {
		          var instance = current.stateNode;
		          try {
		            var hiddenCallbacks = finishedRoot.shared.hiddenCallbacks;
		            if (null !== hiddenCallbacks)
		              for (
		                finishedRoot.shared.hiddenCallbacks = null, finishedRoot = 0;
		                finishedRoot < hiddenCallbacks.length;
		                finishedRoot++
		              )
		                callCallback(hiddenCallbacks[finishedRoot], instance);
		          } catch (error) {
		            captureCommitPhaseError(current, current.return, error);
		          }
		        }
		        includeWorkInProgressEffects &&
		          flags & 64 &&
		          commitClassCallbacks(finishedWork);
		        safelyAttachRef(finishedWork, finishedWork.return);
		        break;
		      case 27:
		        commitHostSingletonAcquisition(finishedWork);
		      case 26:
		      case 5:
		        recursivelyTraverseReappearLayoutEffects(
		          finishedRoot,
		          finishedWork,
		          includeWorkInProgressEffects
		        );
		        includeWorkInProgressEffects &&
		          null === current &&
		          flags & 4 &&
		          commitHostMount(finishedWork);
		        safelyAttachRef(finishedWork, finishedWork.return);
		        break;
		      case 12:
		        recursivelyTraverseReappearLayoutEffects(
		          finishedRoot,
		          finishedWork,
		          includeWorkInProgressEffects
		        );
		        break;
		      case 13:
		        recursivelyTraverseReappearLayoutEffects(
		          finishedRoot,
		          finishedWork,
		          includeWorkInProgressEffects
		        );
		        includeWorkInProgressEffects &&
		          flags & 4 &&
		          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
		        break;
		      case 22:
		        null === finishedWork.memoizedState &&
		          recursivelyTraverseReappearLayoutEffects(
		            finishedRoot,
		            finishedWork,
		            includeWorkInProgressEffects
		          );
		        safelyAttachRef(finishedWork, finishedWork.return);
		        break;
		      case 30:
		        break;
		      default:
		        recursivelyTraverseReappearLayoutEffects(
		          finishedRoot,
		          finishedWork,
		          includeWorkInProgressEffects
		        );
		    }
		    parentFiber = parentFiber.sibling;
		  }
		}
		function commitOffscreenPassiveMountEffects(current, finishedWork) {
		  var previousCache = null;
		  null !== current &&
		    null !== current.memoizedState &&
		    null !== current.memoizedState.cachePool &&
		    (previousCache = current.memoizedState.cachePool.pool);
		  current = null;
		  null !== finishedWork.memoizedState &&
		    null !== finishedWork.memoizedState.cachePool &&
		    (current = finishedWork.memoizedState.cachePool.pool);
		  current !== previousCache &&
		    (null != current && current.refCount++,
		    null != previousCache && releaseCache(previousCache));
		}
		function commitCachePassiveMountEffect(current, finishedWork) {
		  current = null;
		  null !== finishedWork.alternate &&
		    (current = finishedWork.alternate.memoizedState.cache);
		  finishedWork = finishedWork.memoizedState.cache;
		  finishedWork !== current &&
		    (finishedWork.refCount++, null != current && releaseCache(current));
		}
		function recursivelyTraversePassiveMountEffects(
		  root,
		  parentFiber,
		  committedLanes,
		  committedTransitions
		) {
		  if (parentFiber.subtreeFlags & 10256)
		    for (parentFiber = parentFiber.child; null !== parentFiber; )
		      commitPassiveMountOnFiber(
		        root,
		        parentFiber,
		        committedLanes,
		        committedTransitions
		      ),
		        (parentFiber = parentFiber.sibling);
		}
		function commitPassiveMountOnFiber(
		  finishedRoot,
		  finishedWork,
		  committedLanes,
		  committedTransitions
		) {
		  var flags = finishedWork.flags;
		  switch (finishedWork.tag) {
		    case 0:
		    case 11:
		    case 15:
		      recursivelyTraversePassiveMountEffects(
		        finishedRoot,
		        finishedWork,
		        committedLanes,
		        committedTransitions
		      );
		      flags & 2048 && commitHookEffectListMount(9, finishedWork);
		      break;
		    case 1:
		      recursivelyTraversePassiveMountEffects(
		        finishedRoot,
		        finishedWork,
		        committedLanes,
		        committedTransitions
		      );
		      break;
		    case 3:
		      recursivelyTraversePassiveMountEffects(
		        finishedRoot,
		        finishedWork,
		        committedLanes,
		        committedTransitions
		      );
		      flags & 2048 &&
		        ((finishedRoot = null),
		        null !== finishedWork.alternate &&
		          (finishedRoot = finishedWork.alternate.memoizedState.cache),
		        (finishedWork = finishedWork.memoizedState.cache),
		        finishedWork !== finishedRoot &&
		          (finishedWork.refCount++,
		          null != finishedRoot && releaseCache(finishedRoot)));
		      break;
		    case 12:
		      if (flags & 2048) {
		        recursivelyTraversePassiveMountEffects(
		          finishedRoot,
		          finishedWork,
		          committedLanes,
		          committedTransitions
		        );
		        finishedRoot = finishedWork.stateNode;
		        try {
		          var _finishedWork$memoize2 = finishedWork.memoizedProps,
		            id = _finishedWork$memoize2.id,
		            onPostCommit = _finishedWork$memoize2.onPostCommit;
		          "function" === typeof onPostCommit &&
		            onPostCommit(
		              id,
		              null === finishedWork.alternate ? "mount" : "update",
		              finishedRoot.passiveEffectDuration,
		              -0
		            );
		        } catch (error) {
		          captureCommitPhaseError(finishedWork, finishedWork.return, error);
		        }
		      } else
		        recursivelyTraversePassiveMountEffects(
		          finishedRoot,
		          finishedWork,
		          committedLanes,
		          committedTransitions
		        );
		      break;
		    case 13:
		      recursivelyTraversePassiveMountEffects(
		        finishedRoot,
		        finishedWork,
		        committedLanes,
		        committedTransitions
		      );
		      break;
		    case 23:
		      break;
		    case 22:
		      _finishedWork$memoize2 = finishedWork.stateNode;
		      id = finishedWork.alternate;
		      null !== finishedWork.memoizedState
		        ? _finishedWork$memoize2._visibility & 2
		          ? recursivelyTraversePassiveMountEffects(
		              finishedRoot,
		              finishedWork,
		              committedLanes,
		              committedTransitions
		            )
		          : recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork)
		        : _finishedWork$memoize2._visibility & 2
		          ? recursivelyTraversePassiveMountEffects(
		              finishedRoot,
		              finishedWork,
		              committedLanes,
		              committedTransitions
		            )
		          : ((_finishedWork$memoize2._visibility |= 2),
		            recursivelyTraverseReconnectPassiveEffects(
		              finishedRoot,
		              finishedWork,
		              committedLanes,
		              committedTransitions,
		              0 !== (finishedWork.subtreeFlags & 10256)
		            ));
		      flags & 2048 && commitOffscreenPassiveMountEffects(id, finishedWork);
		      break;
		    case 24:
		      recursivelyTraversePassiveMountEffects(
		        finishedRoot,
		        finishedWork,
		        committedLanes,
		        committedTransitions
		      );
		      flags & 2048 &&
		        commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
		      break;
		    default:
		      recursivelyTraversePassiveMountEffects(
		        finishedRoot,
		        finishedWork,
		        committedLanes,
		        committedTransitions
		      );
		  }
		}
		function recursivelyTraverseReconnectPassiveEffects(
		  finishedRoot$jscomp$0,
		  parentFiber,
		  committedLanes$jscomp$0,
		  committedTransitions$jscomp$0,
		  includeWorkInProgressEffects
		) {
		  includeWorkInProgressEffects =
		    includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
		  for (parentFiber = parentFiber.child; null !== parentFiber; ) {
		    var finishedRoot = finishedRoot$jscomp$0,
		      finishedWork = parentFiber,
		      committedLanes = committedLanes$jscomp$0,
		      committedTransitions = committedTransitions$jscomp$0,
		      flags = finishedWork.flags;
		    switch (finishedWork.tag) {
		      case 0:
		      case 11:
		      case 15:
		        recursivelyTraverseReconnectPassiveEffects(
		          finishedRoot,
		          finishedWork,
		          committedLanes,
		          committedTransitions,
		          includeWorkInProgressEffects
		        );
		        commitHookEffectListMount(8, finishedWork);
		        break;
		      case 23:
		        break;
		      case 22:
		        var instance = finishedWork.stateNode;
		        null !== finishedWork.memoizedState
		          ? instance._visibility & 2
		            ? recursivelyTraverseReconnectPassiveEffects(
		                finishedRoot,
		                finishedWork,
		                committedLanes,
		                committedTransitions,
		                includeWorkInProgressEffects
		              )
		            : recursivelyTraverseAtomicPassiveEffects(
		                finishedRoot,
		                finishedWork
		              )
		          : ((instance._visibility |= 2),
		            recursivelyTraverseReconnectPassiveEffects(
		              finishedRoot,
		              finishedWork,
		              committedLanes,
		              committedTransitions,
		              includeWorkInProgressEffects
		            ));
		        includeWorkInProgressEffects &&
		          flags & 2048 &&
		          commitOffscreenPassiveMountEffects(
		            finishedWork.alternate,
		            finishedWork
		          );
		        break;
		      case 24:
		        recursivelyTraverseReconnectPassiveEffects(
		          finishedRoot,
		          finishedWork,
		          committedLanes,
		          committedTransitions,
		          includeWorkInProgressEffects
		        );
		        includeWorkInProgressEffects &&
		          flags & 2048 &&
		          commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
		        break;
		      default:
		        recursivelyTraverseReconnectPassiveEffects(
		          finishedRoot,
		          finishedWork,
		          committedLanes,
		          committedTransitions,
		          includeWorkInProgressEffects
		        );
		    }
		    parentFiber = parentFiber.sibling;
		  }
		}
		function recursivelyTraverseAtomicPassiveEffects(
		  finishedRoot$jscomp$0,
		  parentFiber
		) {
		  if (parentFiber.subtreeFlags & 10256)
		    for (parentFiber = parentFiber.child; null !== parentFiber; ) {
		      var finishedRoot = finishedRoot$jscomp$0,
		        finishedWork = parentFiber,
		        flags = finishedWork.flags;
		      switch (finishedWork.tag) {
		        case 22:
		          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
		          flags & 2048 &&
		            commitOffscreenPassiveMountEffects(
		              finishedWork.alternate,
		              finishedWork
		            );
		          break;
		        case 24:
		          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
		          flags & 2048 &&
		            commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
		          break;
		        default:
		          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
		      }
		      parentFiber = parentFiber.sibling;
		    }
		}
		var suspenseyCommitFlag = 8192;
		function recursivelyAccumulateSuspenseyCommit(parentFiber) {
		  if (parentFiber.subtreeFlags & suspenseyCommitFlag)
		    for (parentFiber = parentFiber.child; null !== parentFiber; )
		      accumulateSuspenseyCommitOnFiber(parentFiber),
		        (parentFiber = parentFiber.sibling);
		}
		function accumulateSuspenseyCommitOnFiber(fiber) {
		  switch (fiber.tag) {
		    case 26:
		      recursivelyAccumulateSuspenseyCommit(fiber);
		      fiber.flags & suspenseyCommitFlag &&
		        null !== fiber.memoizedState &&
		        suspendResource(
		          currentHoistableRoot,
		          fiber.memoizedState,
		          fiber.memoizedProps
		        );
		      break;
		    case 5:
		      recursivelyAccumulateSuspenseyCommit(fiber);
		      break;
		    case 3:
		    case 4:
		      var previousHoistableRoot = currentHoistableRoot;
		      currentHoistableRoot = getHoistableRoot(fiber.stateNode.containerInfo);
		      recursivelyAccumulateSuspenseyCommit(fiber);
		      currentHoistableRoot = previousHoistableRoot;
		      break;
		    case 22:
		      null === fiber.memoizedState &&
		        ((previousHoistableRoot = fiber.alternate),
		        null !== previousHoistableRoot &&
		        null !== previousHoistableRoot.memoizedState
		          ? ((previousHoistableRoot = suspenseyCommitFlag),
		            (suspenseyCommitFlag = 16777216),
		            recursivelyAccumulateSuspenseyCommit(fiber),
		            (suspenseyCommitFlag = previousHoistableRoot))
		          : recursivelyAccumulateSuspenseyCommit(fiber));
		      break;
		    default:
		      recursivelyAccumulateSuspenseyCommit(fiber);
		  }
		}
		function detachAlternateSiblings(parentFiber) {
		  var previousFiber = parentFiber.alternate;
		  if (
		    null !== previousFiber &&
		    ((parentFiber = previousFiber.child), null !== parentFiber)
		  ) {
		    previousFiber.child = null;
		    do
		      (previousFiber = parentFiber.sibling),
		        (parentFiber.sibling = null),
		        (parentFiber = previousFiber);
		    while (null !== parentFiber);
		  }
		}
		function recursivelyTraversePassiveUnmountEffects(parentFiber) {
		  var deletions = parentFiber.deletions;
		  if (0 !== (parentFiber.flags & 16)) {
		    if (null !== deletions)
		      for (var i = 0; i < deletions.length; i++) {
		        var childToDelete = deletions[i];
		        nextEffect = childToDelete;
		        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
		          childToDelete,
		          parentFiber
		        );
		      }
		    detachAlternateSiblings(parentFiber);
		  }
		  if (parentFiber.subtreeFlags & 10256)
		    for (parentFiber = parentFiber.child; null !== parentFiber; )
		      commitPassiveUnmountOnFiber(parentFiber),
		        (parentFiber = parentFiber.sibling);
		}
		function commitPassiveUnmountOnFiber(finishedWork) {
		  switch (finishedWork.tag) {
		    case 0:
		    case 11:
		    case 15:
		      recursivelyTraversePassiveUnmountEffects(finishedWork);
		      finishedWork.flags & 2048 &&
		        commitHookEffectListUnmount(9, finishedWork, finishedWork.return);
		      break;
		    case 3:
		      recursivelyTraversePassiveUnmountEffects(finishedWork);
		      break;
		    case 12:
		      recursivelyTraversePassiveUnmountEffects(finishedWork);
		      break;
		    case 22:
		      var instance = finishedWork.stateNode;
		      null !== finishedWork.memoizedState &&
		      instance._visibility & 2 &&
		      (null === finishedWork.return || 13 !== finishedWork.return.tag)
		        ? ((instance._visibility &= -3),
		          recursivelyTraverseDisconnectPassiveEffects(finishedWork))
		        : recursivelyTraversePassiveUnmountEffects(finishedWork);
		      break;
		    default:
		      recursivelyTraversePassiveUnmountEffects(finishedWork);
		  }
		}
		function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
		  var deletions = parentFiber.deletions;
		  if (0 !== (parentFiber.flags & 16)) {
		    if (null !== deletions)
		      for (var i = 0; i < deletions.length; i++) {
		        var childToDelete = deletions[i];
		        nextEffect = childToDelete;
		        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
		          childToDelete,
		          parentFiber
		        );
		      }
		    detachAlternateSiblings(parentFiber);
		  }
		  for (parentFiber = parentFiber.child; null !== parentFiber; ) {
		    deletions = parentFiber;
		    switch (deletions.tag) {
		      case 0:
		      case 11:
		      case 15:
		        commitHookEffectListUnmount(8, deletions, deletions.return);
		        recursivelyTraverseDisconnectPassiveEffects(deletions);
		        break;
		      case 22:
		        i = deletions.stateNode;
		        i._visibility & 2 &&
		          ((i._visibility &= -3),
		          recursivelyTraverseDisconnectPassiveEffects(deletions));
		        break;
		      default:
		        recursivelyTraverseDisconnectPassiveEffects(deletions);
		    }
		    parentFiber = parentFiber.sibling;
		  }
		}
		function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
		  deletedSubtreeRoot,
		  nearestMountedAncestor
		) {
		  for (; null !== nextEffect; ) {
		    var fiber = nextEffect;
		    switch (fiber.tag) {
		      case 0:
		      case 11:
		      case 15:
		        commitHookEffectListUnmount(8, fiber, nearestMountedAncestor);
		        break;
		      case 23:
		      case 22:
		        if (
		          null !== fiber.memoizedState &&
		          null !== fiber.memoizedState.cachePool
		        ) {
		          var cache = fiber.memoizedState.cachePool.pool;
		          null != cache && cache.refCount++;
		        }
		        break;
		      case 24:
		        releaseCache(fiber.memoizedState.cache);
		    }
		    cache = fiber.child;
		    if (null !== cache) (cache.return = fiber), (nextEffect = cache);
		    else
		      a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
		        cache = nextEffect;
		        var sibling = cache.sibling,
		          returnFiber = cache.return;
		        detachFiberAfterEffects(cache);
		        if (cache === fiber) {
		          nextEffect = null;
		          break a;
		        }
		        if (null !== sibling) {
		          sibling.return = returnFiber;
		          nextEffect = sibling;
		          break a;
		        }
		        nextEffect = returnFiber;
		      }
		  }
		}
		var DefaultAsyncDispatcher = {
		    getCacheForType: function (resourceType) {
		      var cache = readContext(CacheContext),
		        cacheForType = cache.data.get(resourceType);
		      void 0 === cacheForType &&
		        ((cacheForType = resourceType()),
		        cache.data.set(resourceType, cacheForType));
		      return cacheForType;
		    }
		  },
		  PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map,
		  executionContext = 0,
		  workInProgressRoot = null,
		  workInProgress = null,
		  workInProgressRootRenderLanes = 0,
		  workInProgressSuspendedReason = 0,
		  workInProgressThrownValue = null,
		  workInProgressRootDidSkipSuspendedSiblings = false,
		  workInProgressRootIsPrerendering = false,
		  workInProgressRootDidAttachPingListener = false,
		  entangledRenderLanes = 0,
		  workInProgressRootExitStatus = 0,
		  workInProgressRootSkippedLanes = 0,
		  workInProgressRootInterleavedUpdatedLanes = 0,
		  workInProgressRootPingedLanes = 0,
		  workInProgressDeferredLane = 0,
		  workInProgressSuspendedRetryLanes = 0,
		  workInProgressRootConcurrentErrors = null,
		  workInProgressRootRecoverableErrors = null,
		  workInProgressRootDidIncludeRecursiveRenderUpdate = false,
		  globalMostRecentFallbackTime = 0,
		  workInProgressRootRenderTargetTime = Infinity,
		  workInProgressTransitions = null,
		  legacyErrorBoundariesThatAlreadyFailed = null,
		  pendingEffectsStatus = 0,
		  pendingEffectsRoot = null,
		  pendingFinishedWork = null,
		  pendingEffectsLanes = 0,
		  pendingEffectsRemainingLanes = 0,
		  pendingPassiveTransitions = null,
		  pendingRecoverableErrors = null,
		  nestedUpdateCount = 0,
		  rootWithNestedUpdates = null;
		function requestUpdateLane() {
		  if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes)
		    return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
		  if (null !== ReactSharedInternals.T) {
		    var actionScopeLane = currentEntangledLane;
		    return 0 !== actionScopeLane ? actionScopeLane : requestTransitionLane();
		  }
		  return resolveUpdatePriority();
		}
		function requestDeferredLane() {
		  0 === workInProgressDeferredLane &&
		    (workInProgressDeferredLane =
		      0 === (workInProgressRootRenderLanes & 536870912) || isHydrating
		        ? claimNextTransitionLane()
		        : 536870912);
		  var suspenseHandler = suspenseHandlerStackCursor.current;
		  null !== suspenseHandler && (suspenseHandler.flags |= 32);
		  return workInProgressDeferredLane;
		}
		function scheduleUpdateOnFiber(root, fiber, lane) {
		  if (
		    (root === workInProgressRoot &&
		      (2 === workInProgressSuspendedReason ||
		        9 === workInProgressSuspendedReason)) ||
		    null !== root.cancelPendingCommit
		  )
		    prepareFreshStack(root, 0),
		      markRootSuspended(
		        root,
		        workInProgressRootRenderLanes,
		        workInProgressDeferredLane,
		        false
		      );
		  markRootUpdated$1(root, lane);
		  if (0 === (executionContext & 2) || root !== workInProgressRoot)
		    root === workInProgressRoot &&
		      (0 === (executionContext & 2) &&
		        (workInProgressRootInterleavedUpdatedLanes |= lane),
		      4 === workInProgressRootExitStatus &&
		        markRootSuspended(
		          root,
		          workInProgressRootRenderLanes,
		          workInProgressDeferredLane,
		          false
		        )),
		      ensureRootIsScheduled(root);
		}
		function performWorkOnRoot(root$jscomp$0, lanes, forceSync) {
		  if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327));
		  var shouldTimeSlice =
		      (!forceSync &&
		        0 === (lanes & 124) &&
		        0 === (lanes & root$jscomp$0.expiredLanes)) ||
		      checkIfRootIsPrerendering(root$jscomp$0, lanes),
		    exitStatus = shouldTimeSlice
		      ? renderRootConcurrent(root$jscomp$0, lanes)
		      : renderRootSync(root$jscomp$0, lanes, true),
		    renderWasConcurrent = shouldTimeSlice;
		  do {
		    if (0 === exitStatus) {
		      workInProgressRootIsPrerendering &&
		        !shouldTimeSlice &&
		        markRootSuspended(root$jscomp$0, lanes, 0, false);
		      break;
		    } else {
		      forceSync = root$jscomp$0.current.alternate;
		      if (
		        renderWasConcurrent &&
		        !isRenderConsistentWithExternalStores(forceSync)
		      ) {
		        exitStatus = renderRootSync(root$jscomp$0, lanes, false);
		        renderWasConcurrent = false;
		        continue;
		      }
		      if (2 === exitStatus) {
		        renderWasConcurrent = lanes;
		        if (root$jscomp$0.errorRecoveryDisabledLanes & renderWasConcurrent)
		          var JSCompiler_inline_result = 0;
		        else
		          (JSCompiler_inline_result = root$jscomp$0.pendingLanes & -536870913),
		            (JSCompiler_inline_result =
		              0 !== JSCompiler_inline_result
		                ? JSCompiler_inline_result
		                : JSCompiler_inline_result & 536870912
		                  ? 536870912
		                  : 0);
		        if (0 !== JSCompiler_inline_result) {
		          lanes = JSCompiler_inline_result;
		          a: {
		            var root = root$jscomp$0;
		            exitStatus = workInProgressRootConcurrentErrors;
		            var wasRootDehydrated = root.current.memoizedState.isDehydrated;
		            wasRootDehydrated &&
		              (prepareFreshStack(root, JSCompiler_inline_result).flags |= 256);
		            JSCompiler_inline_result = renderRootSync(
		              root,
		              JSCompiler_inline_result,
		              false
		            );
		            if (2 !== JSCompiler_inline_result) {
		              if (
		                workInProgressRootDidAttachPingListener &&
		                !wasRootDehydrated
		              ) {
		                root.errorRecoveryDisabledLanes |= renderWasConcurrent;
		                workInProgressRootInterleavedUpdatedLanes |=
		                  renderWasConcurrent;
		                exitStatus = 4;
		                break a;
		              }
		              renderWasConcurrent = workInProgressRootRecoverableErrors;
		              workInProgressRootRecoverableErrors = exitStatus;
		              null !== renderWasConcurrent &&
		                (null === workInProgressRootRecoverableErrors
		                  ? (workInProgressRootRecoverableErrors = renderWasConcurrent)
		                  : workInProgressRootRecoverableErrors.push.apply(
		                      workInProgressRootRecoverableErrors,
		                      renderWasConcurrent
		                    ));
		            }
		            exitStatus = JSCompiler_inline_result;
		          }
		          renderWasConcurrent = false;
		          if (2 !== exitStatus) continue;
		        }
		      }
		      if (1 === exitStatus) {
		        prepareFreshStack(root$jscomp$0, 0);
		        markRootSuspended(root$jscomp$0, lanes, 0, true);
		        break;
		      }
		      a: {
		        shouldTimeSlice = root$jscomp$0;
		        renderWasConcurrent = exitStatus;
		        switch (renderWasConcurrent) {
		          case 0:
		          case 1:
		            throw Error(formatProdErrorMessage(345));
		          case 4:
		            if ((lanes & 4194048) !== lanes) break;
		          case 6:
		            markRootSuspended(
		              shouldTimeSlice,
		              lanes,
		              workInProgressDeferredLane,
		              !workInProgressRootDidSkipSuspendedSiblings
		            );
		            break a;
		          case 2:
		            workInProgressRootRecoverableErrors = null;
		            break;
		          case 3:
		          case 5:
		            break;
		          default:
		            throw Error(formatProdErrorMessage(329));
		        }
		        if (
		          (lanes & 62914560) === lanes &&
		          ((exitStatus = globalMostRecentFallbackTime + 300 - now()),
		          10 < exitStatus)
		        ) {
		          markRootSuspended(
		            shouldTimeSlice,
		            lanes,
		            workInProgressDeferredLane,
		            !workInProgressRootDidSkipSuspendedSiblings
		          );
		          if (0 !== getNextLanes(shouldTimeSlice, 0, true)) break a;
		          shouldTimeSlice.timeoutHandle = scheduleTimeout(
		            commitRootWhenReady.bind(
		              null,
		              shouldTimeSlice,
		              forceSync,
		              workInProgressRootRecoverableErrors,
		              workInProgressTransitions,
		              workInProgressRootDidIncludeRecursiveRenderUpdate,
		              lanes,
		              workInProgressDeferredLane,
		              workInProgressRootInterleavedUpdatedLanes,
		              workInProgressSuspendedRetryLanes,
		              workInProgressRootDidSkipSuspendedSiblings,
		              renderWasConcurrent,
		              2,
		              -0,
		              0
		            ),
		            exitStatus
		          );
		          break a;
		        }
		        commitRootWhenReady(
		          shouldTimeSlice,
		          forceSync,
		          workInProgressRootRecoverableErrors,
		          workInProgressTransitions,
		          workInProgressRootDidIncludeRecursiveRenderUpdate,
		          lanes,
		          workInProgressDeferredLane,
		          workInProgressRootInterleavedUpdatedLanes,
		          workInProgressSuspendedRetryLanes,
		          workInProgressRootDidSkipSuspendedSiblings,
		          renderWasConcurrent,
		          0,
		          -0,
		          0
		        );
		      }
		    }
		    break;
		  } while (1);
		  ensureRootIsScheduled(root$jscomp$0);
		}
		function commitRootWhenReady(
		  root,
		  finishedWork,
		  recoverableErrors,
		  transitions,
		  didIncludeRenderPhaseUpdate,
		  lanes,
		  spawnedLane,
		  updatedLanes,
		  suspendedRetryLanes,
		  didSkipSuspendedSiblings,
		  exitStatus,
		  suspendedCommitReason,
		  completedRenderStartTime,
		  completedRenderEndTime
		) {
		  root.timeoutHandle = -1;
		  suspendedCommitReason = finishedWork.subtreeFlags;
		  if (
		    suspendedCommitReason & 8192 ||
		    16785408 === (suspendedCommitReason & 16785408)
		  )
		    if (
		      ((suspendedState = { stylesheets: null, count: 0, unsuspend: noop }),
		      accumulateSuspenseyCommitOnFiber(finishedWork),
		      (suspendedCommitReason = waitForCommitToBeReady()),
		      null !== suspendedCommitReason)
		    ) {
		      root.cancelPendingCommit = suspendedCommitReason(
		        commitRoot.bind(
		          null,
		          root,
		          finishedWork,
		          lanes,
		          recoverableErrors,
		          transitions,
		          didIncludeRenderPhaseUpdate,
		          spawnedLane,
		          updatedLanes,
		          suspendedRetryLanes,
		          exitStatus,
		          1,
		          completedRenderStartTime,
		          completedRenderEndTime
		        )
		      );
		      markRootSuspended(root, lanes, spawnedLane, !didSkipSuspendedSiblings);
		      return;
		    }
		  commitRoot(
		    root,
		    finishedWork,
		    lanes,
		    recoverableErrors,
		    transitions,
		    didIncludeRenderPhaseUpdate,
		    spawnedLane,
		    updatedLanes,
		    suspendedRetryLanes
		  );
		}
		function isRenderConsistentWithExternalStores(finishedWork) {
		  for (var node = finishedWork; ; ) {
		    var tag = node.tag;
		    if (
		      (0 === tag || 11 === tag || 15 === tag) &&
		      node.flags & 16384 &&
		      ((tag = node.updateQueue),
		      null !== tag && ((tag = tag.stores), null !== tag))
		    )
		      for (var i = 0; i < tag.length; i++) {
		        var check = tag[i],
		          getSnapshot = check.getSnapshot;
		        check = check.value;
		        try {
		          if (!objectIs(getSnapshot(), check)) return !1;
		        } catch (error) {
		          return false;
		        }
		      }
		    tag = node.child;
		    if (node.subtreeFlags & 16384 && null !== tag)
		      (tag.return = node), (node = tag);
		    else {
		      if (node === finishedWork) break;
		      for (; null === node.sibling; ) {
		        if (null === node.return || node.return === finishedWork) return true;
		        node = node.return;
		      }
		      node.sibling.return = node.return;
		      node = node.sibling;
		    }
		  }
		  return true;
		}
		function markRootSuspended(
		  root,
		  suspendedLanes,
		  spawnedLane,
		  didAttemptEntireTree
		) {
		  suspendedLanes &= ~workInProgressRootPingedLanes;
		  suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
		  root.suspendedLanes |= suspendedLanes;
		  root.pingedLanes &= ~suspendedLanes;
		  didAttemptEntireTree && (root.warmLanes |= suspendedLanes);
		  didAttemptEntireTree = root.expirationTimes;
		  for (var lanes = suspendedLanes; 0 < lanes; ) {
		    var index$4 = 31 - clz32(lanes),
		      lane = 1 << index$4;
		    didAttemptEntireTree[index$4] = -1;
		    lanes &= ~lane;
		  }
		  0 !== spawnedLane &&
		    markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);
		}
		function flushSyncWork$1() {
		  return 0 === (executionContext & 6)
		    ? (flushSyncWorkAcrossRoots_impl(0), false)
		    : true;
		}
		function resetWorkInProgressStack() {
		  if (null !== workInProgress) {
		    if (0 === workInProgressSuspendedReason)
		      var interruptedWork = workInProgress.return;
		    else
		      (interruptedWork = workInProgress),
		        (lastContextDependency = currentlyRenderingFiber$1 = null),
		        resetHooksOnUnwind(interruptedWork),
		        (thenableState = null),
		        (thenableIndexCounter = 0),
		        (interruptedWork = workInProgress);
		    for (; null !== interruptedWork; )
		      unwindInterruptedWork(interruptedWork.alternate, interruptedWork),
		        (interruptedWork = interruptedWork.return);
		    workInProgress = null;
		  }
		}
		function prepareFreshStack(root, lanes) {
		  var timeoutHandle = root.timeoutHandle;
		  -1 !== timeoutHandle &&
		    ((root.timeoutHandle = -1), cancelTimeout(timeoutHandle));
		  timeoutHandle = root.cancelPendingCommit;
		  null !== timeoutHandle &&
		    ((root.cancelPendingCommit = null), timeoutHandle());
		  resetWorkInProgressStack();
		  workInProgressRoot = root;
		  workInProgress = timeoutHandle = createWorkInProgress(root.current, null);
		  workInProgressRootRenderLanes = lanes;
		  workInProgressSuspendedReason = 0;
		  workInProgressThrownValue = null;
		  workInProgressRootDidSkipSuspendedSiblings = false;
		  workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
		  workInProgressRootDidAttachPingListener = false;
		  workInProgressSuspendedRetryLanes =
		    workInProgressDeferredLane =
		    workInProgressRootPingedLanes =
		    workInProgressRootInterleavedUpdatedLanes =
		    workInProgressRootSkippedLanes =
		    workInProgressRootExitStatus =
		      0;
		  workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors =
		    null;
		  workInProgressRootDidIncludeRecursiveRenderUpdate = false;
		  0 !== (lanes & 8) && (lanes |= lanes & 32);
		  var allEntangledLanes = root.entangledLanes;
		  if (0 !== allEntangledLanes)
		    for (
		      root = root.entanglements, allEntangledLanes &= lanes;
		      0 < allEntangledLanes;

		    ) {
		      var index$2 = 31 - clz32(allEntangledLanes),
		        lane = 1 << index$2;
		      lanes |= root[index$2];
		      allEntangledLanes &= ~lane;
		    }
		  entangledRenderLanes = lanes;
		  finishQueueingConcurrentUpdates();
		  return timeoutHandle;
		}
		function handleThrow(root, thrownValue) {
		  currentlyRenderingFiber = null;
		  ReactSharedInternals.H = ContextOnlyDispatcher;
		  thrownValue === SuspenseException || thrownValue === SuspenseActionException
		    ? ((thrownValue = getSuspendedThenable()),
		      (workInProgressSuspendedReason = 3))
		    : thrownValue === SuspenseyCommitException
		      ? ((thrownValue = getSuspendedThenable()),
		        (workInProgressSuspendedReason = 4))
		      : (workInProgressSuspendedReason =
		          thrownValue === SelectiveHydrationException
		            ? 8
		            : null !== thrownValue &&
		                "object" === typeof thrownValue &&
		                "function" === typeof thrownValue.then
		              ? 6
		              : 1);
		  workInProgressThrownValue = thrownValue;
		  null === workInProgress &&
		    ((workInProgressRootExitStatus = 1),
		    logUncaughtError(
		      root,
		      createCapturedValueAtFiber(thrownValue, root.current)
		    ));
		}
		function pushDispatcher() {
		  var prevDispatcher = ReactSharedInternals.H;
		  ReactSharedInternals.H = ContextOnlyDispatcher;
		  return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
		}
		function pushAsyncDispatcher() {
		  var prevAsyncDispatcher = ReactSharedInternals.A;
		  ReactSharedInternals.A = DefaultAsyncDispatcher;
		  return prevAsyncDispatcher;
		}
		function renderDidSuspendDelayIfPossible() {
		  workInProgressRootExitStatus = 4;
		  workInProgressRootDidSkipSuspendedSiblings ||
		    ((workInProgressRootRenderLanes & 4194048) !==
		      workInProgressRootRenderLanes &&
		      null !== suspenseHandlerStackCursor.current) ||
		    (workInProgressRootIsPrerendering = true);
		  (0 === (workInProgressRootSkippedLanes & 134217727) &&
		    0 === (workInProgressRootInterleavedUpdatedLanes & 134217727)) ||
		    null === workInProgressRoot ||
		    markRootSuspended(
		      workInProgressRoot,
		      workInProgressRootRenderLanes,
		      workInProgressDeferredLane,
		      false
		    );
		}
		function renderRootSync(root, lanes, shouldYieldForPrerendering) {
		  var prevExecutionContext = executionContext;
		  executionContext |= 2;
		  var prevDispatcher = pushDispatcher(),
		    prevAsyncDispatcher = pushAsyncDispatcher();
		  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes)
		    (workInProgressTransitions = null), prepareFreshStack(root, lanes);
		  lanes = false;
		  var exitStatus = workInProgressRootExitStatus;
		  a: do
		    try {
		      if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
		        var unitOfWork = workInProgress,
		          thrownValue = workInProgressThrownValue;
		        switch (workInProgressSuspendedReason) {
		          case 8:
		            resetWorkInProgressStack();
		            exitStatus = 6;
		            break a;
		          case 3:
		          case 2:
		          case 9:
		          case 6:
		            null === suspenseHandlerStackCursor.current && (lanes = !0);
		            var reason = workInProgressSuspendedReason;
		            workInProgressSuspendedReason = 0;
		            workInProgressThrownValue = null;
		            throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
		            if (
		              shouldYieldForPrerendering &&
		              workInProgressRootIsPrerendering
		            ) {
		              exitStatus = 0;
		              break a;
		            }
		            break;
		          default:
		            (reason = workInProgressSuspendedReason),
		              (workInProgressSuspendedReason = 0),
		              (workInProgressThrownValue = null),
		              throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
		        }
		      }
		      workLoopSync();
		      exitStatus = workInProgressRootExitStatus;
		      break;
		    } catch (thrownValue$167) {
		      handleThrow(root, thrownValue$167);
		    }
		  while (1);
		  lanes && root.shellSuspendCounter++;
		  lastContextDependency = currentlyRenderingFiber$1 = null;
		  executionContext = prevExecutionContext;
		  ReactSharedInternals.H = prevDispatcher;
		  ReactSharedInternals.A = prevAsyncDispatcher;
		  null === workInProgress &&
		    ((workInProgressRoot = null),
		    (workInProgressRootRenderLanes = 0),
		    finishQueueingConcurrentUpdates());
		  return exitStatus;
		}
		function workLoopSync() {
		  for (; null !== workInProgress; ) performUnitOfWork(workInProgress);
		}
		function renderRootConcurrent(root, lanes) {
		  var prevExecutionContext = executionContext;
		  executionContext |= 2;
		  var prevDispatcher = pushDispatcher(),
		    prevAsyncDispatcher = pushAsyncDispatcher();
		  workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes
		    ? ((workInProgressTransitions = null),
		      (workInProgressRootRenderTargetTime = now() + 500),
		      prepareFreshStack(root, lanes))
		    : (workInProgressRootIsPrerendering = checkIfRootIsPrerendering(
		        root,
		        lanes
		      ));
		  a: do
		    try {
		      if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
		        lanes = workInProgress;
		        var thrownValue = workInProgressThrownValue;
		        b: switch (workInProgressSuspendedReason) {
		          case 1:
		            workInProgressSuspendedReason = 0;
		            workInProgressThrownValue = null;
		            throwAndUnwindWorkLoop(root, lanes, thrownValue, 1);
		            break;
		          case 2:
		          case 9:
		            if (isThenableResolved(thrownValue)) {
		              workInProgressSuspendedReason = 0;
		              workInProgressThrownValue = null;
		              replaySuspendedUnitOfWork(lanes);
		              break;
		            }
		            lanes = function () {
		              (2 !== workInProgressSuspendedReason &&
		                9 !== workInProgressSuspendedReason) ||
		                workInProgressRoot !== root ||
		                (workInProgressSuspendedReason = 7);
		              ensureRootIsScheduled(root);
		            };
		            thrownValue.then(lanes, lanes);
		            break a;
		          case 3:
		            workInProgressSuspendedReason = 7;
		            break a;
		          case 4:
		            workInProgressSuspendedReason = 5;
		            break a;
		          case 7:
		            isThenableResolved(thrownValue)
		              ? ((workInProgressSuspendedReason = 0),
		                (workInProgressThrownValue = null),
		                replaySuspendedUnitOfWork(lanes))
		              : ((workInProgressSuspendedReason = 0),
		                (workInProgressThrownValue = null),
		                throwAndUnwindWorkLoop(root, lanes, thrownValue, 7));
		            break;
		          case 5:
		            var resource = null;
		            switch (workInProgress.tag) {
		              case 26:
		                resource = workInProgress.memoizedState;
		              case 5:
		              case 27:
		                var hostFiber = workInProgress;
		                if (resource ? preloadResource(resource) : 1) {
		                  workInProgressSuspendedReason = 0;
		                  workInProgressThrownValue = null;
		                  var sibling = hostFiber.sibling;
		                  if (null !== sibling) workInProgress = sibling;
		                  else {
		                    var returnFiber = hostFiber.return;
		                    null !== returnFiber
		                      ? ((workInProgress = returnFiber),
		                        completeUnitOfWork(returnFiber))
		                      : (workInProgress = null);
		                  }
		                  break b;
		                }
		            }
		            workInProgressSuspendedReason = 0;
		            workInProgressThrownValue = null;
		            throwAndUnwindWorkLoop(root, lanes, thrownValue, 5);
		            break;
		          case 6:
		            workInProgressSuspendedReason = 0;
		            workInProgressThrownValue = null;
		            throwAndUnwindWorkLoop(root, lanes, thrownValue, 6);
		            break;
		          case 8:
		            resetWorkInProgressStack();
		            workInProgressRootExitStatus = 6;
		            break a;
		          default:
		            throw Error(formatProdErrorMessage(462));
		        }
		      }
		      workLoopConcurrentByScheduler();
		      break;
		    } catch (thrownValue$169) {
		      handleThrow(root, thrownValue$169);
		    }
		  while (1);
		  lastContextDependency = currentlyRenderingFiber$1 = null;
		  ReactSharedInternals.H = prevDispatcher;
		  ReactSharedInternals.A = prevAsyncDispatcher;
		  executionContext = prevExecutionContext;
		  if (null !== workInProgress) return 0;
		  workInProgressRoot = null;
		  workInProgressRootRenderLanes = 0;
		  finishQueueingConcurrentUpdates();
		  return workInProgressRootExitStatus;
		}
		function workLoopConcurrentByScheduler() {
		  for (; null !== workInProgress && !shouldYield(); )
		    performUnitOfWork(workInProgress);
		}
		function performUnitOfWork(unitOfWork) {
		  var next = beginWork(unitOfWork.alternate, unitOfWork, entangledRenderLanes);
		  unitOfWork.memoizedProps = unitOfWork.pendingProps;
		  null === next ? completeUnitOfWork(unitOfWork) : (workInProgress = next);
		}
		function replaySuspendedUnitOfWork(unitOfWork) {
		  var next = unitOfWork;
		  var current = next.alternate;
		  switch (next.tag) {
		    case 15:
		    case 0:
		      next = replayFunctionComponent(
		        current,
		        next,
		        next.pendingProps,
		        next.type,
		        void 0,
		        workInProgressRootRenderLanes
		      );
		      break;
		    case 11:
		      next = replayFunctionComponent(
		        current,
		        next,
		        next.pendingProps,
		        next.type.render,
		        next.ref,
		        workInProgressRootRenderLanes
		      );
		      break;
		    case 5:
		      resetHooksOnUnwind(next);
		    default:
		      unwindInterruptedWork(current, next),
		        (next = workInProgress =
		          resetWorkInProgress(next, entangledRenderLanes)),
		        (next = beginWork(current, next, entangledRenderLanes));
		  }
		  unitOfWork.memoizedProps = unitOfWork.pendingProps;
		  null === next ? completeUnitOfWork(unitOfWork) : (workInProgress = next);
		}
		function throwAndUnwindWorkLoop(
		  root,
		  unitOfWork,
		  thrownValue,
		  suspendedReason
		) {
		  lastContextDependency = currentlyRenderingFiber$1 = null;
		  resetHooksOnUnwind(unitOfWork);
		  thenableState = null;
		  thenableIndexCounter = 0;
		  var returnFiber = unitOfWork.return;
		  try {
		    if (
		      throwException(
		        root,
		        returnFiber,
		        unitOfWork,
		        thrownValue,
		        workInProgressRootRenderLanes
		      )
		    ) {
		      workInProgressRootExitStatus = 1;
		      logUncaughtError(
		        root,
		        createCapturedValueAtFiber(thrownValue, root.current)
		      );
		      workInProgress = null;
		      return;
		    }
		  } catch (error) {
		    if (null !== returnFiber) throw ((workInProgress = returnFiber), error);
		    workInProgressRootExitStatus = 1;
		    logUncaughtError(
		      root,
		      createCapturedValueAtFiber(thrownValue, root.current)
		    );
		    workInProgress = null;
		    return;
		  }
		  if (unitOfWork.flags & 32768) {
		    if (isHydrating || 1 === suspendedReason) root = true;
		    else if (
		      workInProgressRootIsPrerendering ||
		      0 !== (workInProgressRootRenderLanes & 536870912)
		    )
		      root = false;
		    else if (
		      ((workInProgressRootDidSkipSuspendedSiblings = root = true),
		      2 === suspendedReason ||
		        9 === suspendedReason ||
		        3 === suspendedReason ||
		        6 === suspendedReason)
		    )
		      (suspendedReason = suspenseHandlerStackCursor.current),
		        null !== suspendedReason &&
		          13 === suspendedReason.tag &&
		          (suspendedReason.flags |= 16384);
		    unwindUnitOfWork(unitOfWork, root);
		  } else completeUnitOfWork(unitOfWork);
		}
		function completeUnitOfWork(unitOfWork) {
		  var completedWork = unitOfWork;
		  do {
		    if (0 !== (completedWork.flags & 32768)) {
		      unwindUnitOfWork(
		        completedWork,
		        workInProgressRootDidSkipSuspendedSiblings
		      );
		      return;
		    }
		    unitOfWork = completedWork.return;
		    var next = completeWork(
		      completedWork.alternate,
		      completedWork,
		      entangledRenderLanes
		    );
		    if (null !== next) {
		      workInProgress = next;
		      return;
		    }
		    completedWork = completedWork.sibling;
		    if (null !== completedWork) {
		      workInProgress = completedWork;
		      return;
		    }
		    workInProgress = completedWork = unitOfWork;
		  } while (null !== completedWork);
		  0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
		}
		function unwindUnitOfWork(unitOfWork, skipSiblings) {
		  do {
		    var next = unwindWork(unitOfWork.alternate, unitOfWork);
		    if (null !== next) {
		      next.flags &= 32767;
		      workInProgress = next;
		      return;
		    }
		    next = unitOfWork.return;
		    null !== next &&
		      ((next.flags |= 32768), (next.subtreeFlags = 0), (next.deletions = null));
		    if (
		      !skipSiblings &&
		      ((unitOfWork = unitOfWork.sibling), null !== unitOfWork)
		    ) {
		      workInProgress = unitOfWork;
		      return;
		    }
		    workInProgress = unitOfWork = next;
		  } while (null !== unitOfWork);
		  workInProgressRootExitStatus = 6;
		  workInProgress = null;
		}
		function commitRoot(
		  root,
		  finishedWork,
		  lanes,
		  recoverableErrors,
		  transitions,
		  didIncludeRenderPhaseUpdate,
		  spawnedLane,
		  updatedLanes,
		  suspendedRetryLanes
		) {
		  root.cancelPendingCommit = null;
		  do flushPendingEffects();
		  while (0 !== pendingEffectsStatus);
		  if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327));
		  if (null !== finishedWork) {
		    if (finishedWork === root.current) throw Error(formatProdErrorMessage(177));
		    didIncludeRenderPhaseUpdate = finishedWork.lanes | finishedWork.childLanes;
		    didIncludeRenderPhaseUpdate |= concurrentlyUpdatedLanes;
		    markRootFinished(
		      root,
		      lanes,
		      didIncludeRenderPhaseUpdate,
		      spawnedLane,
		      updatedLanes,
		      suspendedRetryLanes
		    );
		    root === workInProgressRoot &&
		      ((workInProgress = workInProgressRoot = null),
		      (workInProgressRootRenderLanes = 0));
		    pendingFinishedWork = finishedWork;
		    pendingEffectsRoot = root;
		    pendingEffectsLanes = lanes;
		    pendingEffectsRemainingLanes = didIncludeRenderPhaseUpdate;
		    pendingPassiveTransitions = transitions;
		    pendingRecoverableErrors = recoverableErrors;
		    0 !== (finishedWork.subtreeFlags & 10256) ||
		    0 !== (finishedWork.flags & 10256)
		      ? ((root.callbackNode = null),
		        (root.callbackPriority = 0),
		        scheduleCallback$1(NormalPriority$1, function () {
		          flushPassiveEffects();
		          return null;
		        }))
		      : ((root.callbackNode = null), (root.callbackPriority = 0));
		    recoverableErrors = 0 !== (finishedWork.flags & 13878);
		    if (0 !== (finishedWork.subtreeFlags & 13878) || recoverableErrors) {
		      recoverableErrors = ReactSharedInternals.T;
		      ReactSharedInternals.T = null;
		      transitions = ReactDOMSharedInternals.p;
		      ReactDOMSharedInternals.p = 2;
		      spawnedLane = executionContext;
		      executionContext |= 4;
		      try {
		        commitBeforeMutationEffects(root, finishedWork, lanes);
		      } finally {
		        (executionContext = spawnedLane),
		          (ReactDOMSharedInternals.p = transitions),
		          (ReactSharedInternals.T = recoverableErrors);
		      }
		    }
		    pendingEffectsStatus = 1;
		    flushMutationEffects();
		    flushLayoutEffects();
		    flushSpawnedWork();
		  }
		}
		function flushMutationEffects() {
		  if (1 === pendingEffectsStatus) {
		    pendingEffectsStatus = 0;
		    var root = pendingEffectsRoot,
		      finishedWork = pendingFinishedWork,
		      rootMutationHasEffect = 0 !== (finishedWork.flags & 13878);
		    if (0 !== (finishedWork.subtreeFlags & 13878) || rootMutationHasEffect) {
		      rootMutationHasEffect = ReactSharedInternals.T;
		      ReactSharedInternals.T = null;
		      var previousPriority = ReactDOMSharedInternals.p;
		      ReactDOMSharedInternals.p = 2;
		      var prevExecutionContext = executionContext;
		      executionContext |= 4;
		      try {
		        commitMutationEffectsOnFiber(finishedWork, root);
		        var priorSelectionInformation = selectionInformation,
		          curFocusedElem = getActiveElementDeep(root.containerInfo),
		          priorFocusedElem = priorSelectionInformation.focusedElem,
		          priorSelectionRange = priorSelectionInformation.selectionRange;
		        if (
		          curFocusedElem !== priorFocusedElem &&
		          priorFocusedElem &&
		          priorFocusedElem.ownerDocument &&
		          containsNode(
		            priorFocusedElem.ownerDocument.documentElement,
		            priorFocusedElem
		          )
		        ) {
		          if (
		            null !== priorSelectionRange &&
		            hasSelectionCapabilities(priorFocusedElem)
		          ) {
		            var start = priorSelectionRange.start,
		              end = priorSelectionRange.end;
		            void 0 === end && (end = start);
		            if ("selectionStart" in priorFocusedElem)
		              (priorFocusedElem.selectionStart = start),
		                (priorFocusedElem.selectionEnd = Math.min(
		                  end,
		                  priorFocusedElem.value.length
		                ));
		            else {
		              var doc = priorFocusedElem.ownerDocument || document,
		                win = (doc && doc.defaultView) || window;
		              if (win.getSelection) {
		                var selection = win.getSelection(),
		                  length = priorFocusedElem.textContent.length,
		                  start$jscomp$0 = Math.min(priorSelectionRange.start, length),
		                  end$jscomp$0 =
		                    void 0 === priorSelectionRange.end
		                      ? start$jscomp$0
		                      : Math.min(priorSelectionRange.end, length);
		                !selection.extend &&
		                  start$jscomp$0 > end$jscomp$0 &&
		                  ((curFocusedElem = end$jscomp$0),
		                  (end$jscomp$0 = start$jscomp$0),
		                  (start$jscomp$0 = curFocusedElem));
		                var startMarker = getNodeForCharacterOffset(
		                    priorFocusedElem,
		                    start$jscomp$0
		                  ),
		                  endMarker = getNodeForCharacterOffset(
		                    priorFocusedElem,
		                    end$jscomp$0
		                  );
		                if (
		                  startMarker &&
		                  endMarker &&
		                  (1 !== selection.rangeCount ||
		                    selection.anchorNode !== startMarker.node ||
		                    selection.anchorOffset !== startMarker.offset ||
		                    selection.focusNode !== endMarker.node ||
		                    selection.focusOffset !== endMarker.offset)
		                ) {
		                  var range = doc.createRange();
		                  range.setStart(startMarker.node, startMarker.offset);
		                  selection.removeAllRanges();
		                  start$jscomp$0 > end$jscomp$0
		                    ? (selection.addRange(range),
		                      selection.extend(endMarker.node, endMarker.offset))
		                    : (range.setEnd(endMarker.node, endMarker.offset),
		                      selection.addRange(range));
		                }
		              }
		            }
		          }
		          doc = [];
		          for (
		            selection = priorFocusedElem;
		            (selection = selection.parentNode);

		          )
		            1 === selection.nodeType &&
		              doc.push({
		                element: selection,
		                left: selection.scrollLeft,
		                top: selection.scrollTop
		              });
		          "function" === typeof priorFocusedElem.focus &&
		            priorFocusedElem.focus();
		          for (
		            priorFocusedElem = 0;
		            priorFocusedElem < doc.length;
		            priorFocusedElem++
		          ) {
		            var info = doc[priorFocusedElem];
		            info.element.scrollLeft = info.left;
		            info.element.scrollTop = info.top;
		          }
		        }
		        _enabled = !!eventsEnabled;
		        selectionInformation = eventsEnabled = null;
		      } finally {
		        (executionContext = prevExecutionContext),
		          (ReactDOMSharedInternals.p = previousPriority),
		          (ReactSharedInternals.T = rootMutationHasEffect);
		      }
		    }
		    root.current = finishedWork;
		    pendingEffectsStatus = 2;
		  }
		}
		function flushLayoutEffects() {
		  if (2 === pendingEffectsStatus) {
		    pendingEffectsStatus = 0;
		    var root = pendingEffectsRoot,
		      finishedWork = pendingFinishedWork,
		      rootHasLayoutEffect = 0 !== (finishedWork.flags & 8772);
		    if (0 !== (finishedWork.subtreeFlags & 8772) || rootHasLayoutEffect) {
		      rootHasLayoutEffect = ReactSharedInternals.T;
		      ReactSharedInternals.T = null;
		      var previousPriority = ReactDOMSharedInternals.p;
		      ReactDOMSharedInternals.p = 2;
		      var prevExecutionContext = executionContext;
		      executionContext |= 4;
		      try {
		        commitLayoutEffectOnFiber(root, finishedWork.alternate, finishedWork);
		      } finally {
		        (executionContext = prevExecutionContext),
		          (ReactDOMSharedInternals.p = previousPriority),
		          (ReactSharedInternals.T = rootHasLayoutEffect);
		      }
		    }
		    pendingEffectsStatus = 3;
		  }
		}
		function flushSpawnedWork() {
		  if (4 === pendingEffectsStatus || 3 === pendingEffectsStatus) {
		    pendingEffectsStatus = 0;
		    requestPaint();
		    var root = pendingEffectsRoot,
		      finishedWork = pendingFinishedWork,
		      lanes = pendingEffectsLanes,
		      recoverableErrors = pendingRecoverableErrors;
		    0 !== (finishedWork.subtreeFlags & 10256) ||
		    0 !== (finishedWork.flags & 10256)
		      ? (pendingEffectsStatus = 5)
		      : ((pendingEffectsStatus = 0),
		        (pendingFinishedWork = pendingEffectsRoot = null),
		        releaseRootPooledCache(root, root.pendingLanes));
		    var remainingLanes = root.pendingLanes;
		    0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
		    lanesToEventPriority(lanes);
		    finishedWork = finishedWork.stateNode;
		    if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot)
		      try {
		        injectedHook.onCommitFiberRoot(
		          rendererID,
		          finishedWork,
		          void 0,
		          128 === (finishedWork.current.flags & 128)
		        );
		      } catch (err) {}
		    if (null !== recoverableErrors) {
		      finishedWork = ReactSharedInternals.T;
		      remainingLanes = ReactDOMSharedInternals.p;
		      ReactDOMSharedInternals.p = 2;
		      ReactSharedInternals.T = null;
		      try {
		        for (
		          var onRecoverableError = root.onRecoverableError, i = 0;
		          i < recoverableErrors.length;
		          i++
		        ) {
		          var recoverableError = recoverableErrors[i];
		          onRecoverableError(recoverableError.value, {
		            componentStack: recoverableError.stack
		          });
		        }
		      } finally {
		        (ReactSharedInternals.T = finishedWork),
		          (ReactDOMSharedInternals.p = remainingLanes);
		      }
		    }
		    0 !== (pendingEffectsLanes & 3) && flushPendingEffects();
		    ensureRootIsScheduled(root);
		    remainingLanes = root.pendingLanes;
		    0 !== (lanes & 4194090) && 0 !== (remainingLanes & 42)
		      ? root === rootWithNestedUpdates
		        ? nestedUpdateCount++
		        : ((nestedUpdateCount = 0), (rootWithNestedUpdates = root))
		      : (nestedUpdateCount = 0);
		    flushSyncWorkAcrossRoots_impl(0);
		  }
		}
		function releaseRootPooledCache(root, remainingLanes) {
		  0 === (root.pooledCacheLanes &= remainingLanes) &&
		    ((remainingLanes = root.pooledCache),
		    null != remainingLanes &&
		      ((root.pooledCache = null), releaseCache(remainingLanes)));
		}
		function flushPendingEffects(wasDelayedCommit) {
		  flushMutationEffects();
		  flushLayoutEffects();
		  flushSpawnedWork();
		  return flushPassiveEffects();
		}
		function flushPassiveEffects() {
		  if (5 !== pendingEffectsStatus) return false;
		  var root = pendingEffectsRoot,
		    remainingLanes = pendingEffectsRemainingLanes;
		  pendingEffectsRemainingLanes = 0;
		  var renderPriority = lanesToEventPriority(pendingEffectsLanes),
		    prevTransition = ReactSharedInternals.T,
		    previousPriority = ReactDOMSharedInternals.p;
		  try {
		    ReactDOMSharedInternals.p = 32 > renderPriority ? 32 : renderPriority;
		    ReactSharedInternals.T = null;
		    renderPriority = pendingPassiveTransitions;
		    pendingPassiveTransitions = null;
		    var root$jscomp$0 = pendingEffectsRoot,
		      lanes = pendingEffectsLanes;
		    pendingEffectsStatus = 0;
		    pendingFinishedWork = pendingEffectsRoot = null;
		    pendingEffectsLanes = 0;
		    if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(331));
		    var prevExecutionContext = executionContext;
		    executionContext |= 4;
		    commitPassiveUnmountOnFiber(root$jscomp$0.current);
		    commitPassiveMountOnFiber(
		      root$jscomp$0,
		      root$jscomp$0.current,
		      lanes,
		      renderPriority
		    );
		    executionContext = prevExecutionContext;
		    flushSyncWorkAcrossRoots_impl(0, !1);
		    if (
		      injectedHook &&
		      "function" === typeof injectedHook.onPostCommitFiberRoot
		    )
		      try {
		        injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
		      } catch (err) {}
		    return !0;
		  } finally {
		    (ReactDOMSharedInternals.p = previousPriority),
		      (ReactSharedInternals.T = prevTransition),
		      releaseRootPooledCache(root, remainingLanes);
		  }
		}
		function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
		  sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
		  sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
		  rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
		  null !== rootFiber &&
		    (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
		}
		function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
		  if (3 === sourceFiber.tag)
		    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
		  else
		    for (; null !== nearestMountedAncestor; ) {
		      if (3 === nearestMountedAncestor.tag) {
		        captureCommitPhaseErrorOnRoot(
		          nearestMountedAncestor,
		          sourceFiber,
		          error
		        );
		        break;
		      } else if (1 === nearestMountedAncestor.tag) {
		        var instance = nearestMountedAncestor.stateNode;
		        if (
		          "function" ===
		            typeof nearestMountedAncestor.type.getDerivedStateFromError ||
		          ("function" === typeof instance.componentDidCatch &&
		            (null === legacyErrorBoundariesThatAlreadyFailed ||
		              !legacyErrorBoundariesThatAlreadyFailed.has(instance)))
		        ) {
		          sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
		          error = createClassErrorUpdate(2);
		          instance = enqueueUpdate(nearestMountedAncestor, error, 2);
		          null !== instance &&
		            (initializeClassErrorUpdate(
		              error,
		              instance,
		              nearestMountedAncestor,
		              sourceFiber
		            ),
		            markRootUpdated$1(instance, 2),
		            ensureRootIsScheduled(instance));
		          break;
		        }
		      }
		      nearestMountedAncestor = nearestMountedAncestor.return;
		    }
		}
		function attachPingListener(root, wakeable, lanes) {
		  var pingCache = root.pingCache;
		  if (null === pingCache) {
		    pingCache = root.pingCache = new PossiblyWeakMap();
		    var threadIDs = new Set();
		    pingCache.set(wakeable, threadIDs);
		  } else
		    (threadIDs = pingCache.get(wakeable)),
		      void 0 === threadIDs &&
		        ((threadIDs = new Set()), pingCache.set(wakeable, threadIDs));
		  threadIDs.has(lanes) ||
		    ((workInProgressRootDidAttachPingListener = true),
		    threadIDs.add(lanes),
		    (root = pingSuspendedRoot.bind(null, root, wakeable, lanes)),
		    wakeable.then(root, root));
		}
		function pingSuspendedRoot(root, wakeable, pingedLanes) {
		  var pingCache = root.pingCache;
		  null !== pingCache && pingCache.delete(wakeable);
		  root.pingedLanes |= root.suspendedLanes & pingedLanes;
		  root.warmLanes &= ~pingedLanes;
		  workInProgressRoot === root &&
		    (workInProgressRootRenderLanes & pingedLanes) === pingedLanes &&
		    (4 === workInProgressRootExitStatus ||
		    (3 === workInProgressRootExitStatus &&
		      (workInProgressRootRenderLanes & 62914560) ===
		        workInProgressRootRenderLanes &&
		      300 > now() - globalMostRecentFallbackTime)
		      ? 0 === (executionContext & 2) && prepareFreshStack(root, 0)
		      : (workInProgressRootPingedLanes |= pingedLanes),
		    workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes &&
		      (workInProgressSuspendedRetryLanes = 0));
		  ensureRootIsScheduled(root);
		}
		function retryTimedOutBoundary(boundaryFiber, retryLane) {
		  0 === retryLane && (retryLane = claimNextRetryLane());
		  boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
		  null !== boundaryFiber &&
		    (markRootUpdated$1(boundaryFiber, retryLane),
		    ensureRootIsScheduled(boundaryFiber));
		}
		function retryDehydratedSuspenseBoundary(boundaryFiber) {
		  var suspenseState = boundaryFiber.memoizedState,
		    retryLane = 0;
		  null !== suspenseState && (retryLane = suspenseState.retryLane);
		  retryTimedOutBoundary(boundaryFiber, retryLane);
		}
		function resolveRetryWakeable(boundaryFiber, wakeable) {
		  var retryLane = 0;
		  switch (boundaryFiber.tag) {
		    case 13:
		      var retryCache = boundaryFiber.stateNode;
		      var suspenseState = boundaryFiber.memoizedState;
		      null !== suspenseState && (retryLane = suspenseState.retryLane);
		      break;
		    case 19:
		      retryCache = boundaryFiber.stateNode;
		      break;
		    case 22:
		      retryCache = boundaryFiber.stateNode._retryCache;
		      break;
		    default:
		      throw Error(formatProdErrorMessage(314));
		  }
		  null !== retryCache && retryCache.delete(wakeable);
		  retryTimedOutBoundary(boundaryFiber, retryLane);
		}
		function scheduleCallback$1(priorityLevel, callback) {
		  return scheduleCallback$3(priorityLevel, callback);
		}
		var firstScheduledRoot = null,
		  lastScheduledRoot = null,
		  didScheduleMicrotask = false,
		  mightHavePendingSyncWork = false,
		  isFlushingWork = false,
		  currentEventTransitionLane = 0;
		function ensureRootIsScheduled(root) {
		  root !== lastScheduledRoot &&
		    null === root.next &&
		    (null === lastScheduledRoot
		      ? (firstScheduledRoot = lastScheduledRoot = root)
		      : (lastScheduledRoot = lastScheduledRoot.next = root));
		  mightHavePendingSyncWork = true;
		  didScheduleMicrotask ||
		    ((didScheduleMicrotask = true), scheduleImmediateRootScheduleTask());
		}
		function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
		  if (!isFlushingWork && mightHavePendingSyncWork) {
		    isFlushingWork = true;
		    do {
		      var didPerformSomeWork = false;
		      for (var root$174 = firstScheduledRoot; null !== root$174; ) {
		        if (0 !== syncTransitionLanes) {
		            var pendingLanes = root$174.pendingLanes;
		            if (0 === pendingLanes) var JSCompiler_inline_result = 0;
		            else {
		              var suspendedLanes = root$174.suspendedLanes,
		                pingedLanes = root$174.pingedLanes;
		              JSCompiler_inline_result =
		                (1 << (31 - clz32(42 | syncTransitionLanes) + 1)) - 1;
		              JSCompiler_inline_result &=
		                pendingLanes & ~(suspendedLanes & ~pingedLanes);
		              JSCompiler_inline_result =
		                JSCompiler_inline_result & 201326741
		                  ? (JSCompiler_inline_result & 201326741) | 1
		                  : JSCompiler_inline_result
		                    ? JSCompiler_inline_result | 2
		                    : 0;
		            }
		            0 !== JSCompiler_inline_result &&
		              ((didPerformSomeWork = true),
		              performSyncWorkOnRoot(root$174, JSCompiler_inline_result));
		          } else
		            (JSCompiler_inline_result = workInProgressRootRenderLanes),
		              (JSCompiler_inline_result = getNextLanes(
		                root$174,
		                root$174 === workInProgressRoot ? JSCompiler_inline_result : 0,
		                null !== root$174.cancelPendingCommit ||
		                  -1 !== root$174.timeoutHandle
		              )),
		              0 === (JSCompiler_inline_result & 3) ||
		                checkIfRootIsPrerendering(root$174, JSCompiler_inline_result) ||
		                ((didPerformSomeWork = true),
		                performSyncWorkOnRoot(root$174, JSCompiler_inline_result));
		        root$174 = root$174.next;
		      }
		    } while (didPerformSomeWork);
		    isFlushingWork = false;
		  }
		}
		function processRootScheduleInImmediateTask() {
		  processRootScheduleInMicrotask();
		}
		function processRootScheduleInMicrotask() {
		  mightHavePendingSyncWork = didScheduleMicrotask = false;
		  var syncTransitionLanes = 0;
		  0 !== currentEventTransitionLane &&
		    (shouldAttemptEagerTransition() &&
		      (syncTransitionLanes = currentEventTransitionLane),
		    (currentEventTransitionLane = 0));
		  for (
		    var currentTime = now(), prev = null, root = firstScheduledRoot;
		    null !== root;

		  ) {
		    var next = root.next,
		      nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);
		    if (0 === nextLanes)
		      (root.next = null),
		        null === prev ? (firstScheduledRoot = next) : (prev.next = next),
		        null === next && (lastScheduledRoot = prev);
		    else if (
		      ((prev = root), 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))
		    )
		      mightHavePendingSyncWork = true;
		    root = next;
		  }
		  flushSyncWorkAcrossRoots_impl(syncTransitionLanes);
		}
		function scheduleTaskForRootDuringMicrotask(root, currentTime) {
		  for (
		    var suspendedLanes = root.suspendedLanes,
		      pingedLanes = root.pingedLanes,
		      expirationTimes = root.expirationTimes,
		      lanes = root.pendingLanes & -62914561;
		    0 < lanes;

		  ) {
		    var index$3 = 31 - clz32(lanes),
		      lane = 1 << index$3,
		      expirationTime = expirationTimes[index$3];
		    if (-1 === expirationTime) {
		      if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
		        expirationTimes[index$3] = computeExpirationTime(lane, currentTime);
		    } else expirationTime <= currentTime && (root.expiredLanes |= lane);
		    lanes &= ~lane;
		  }
		  currentTime = workInProgressRoot;
		  suspendedLanes = workInProgressRootRenderLanes;
		  suspendedLanes = getNextLanes(
		    root,
		    root === currentTime ? suspendedLanes : 0,
		    null !== root.cancelPendingCommit || -1 !== root.timeoutHandle
		  );
		  pingedLanes = root.callbackNode;
		  if (
		    0 === suspendedLanes ||
		    (root === currentTime &&
		      (2 === workInProgressSuspendedReason ||
		        9 === workInProgressSuspendedReason)) ||
		    null !== root.cancelPendingCommit
		  )
		    return (
		      null !== pingedLanes &&
		        null !== pingedLanes &&
		        cancelCallback$1(pingedLanes),
		      (root.callbackNode = null),
		      (root.callbackPriority = 0)
		    );
		  if (
		    0 === (suspendedLanes & 3) ||
		    checkIfRootIsPrerendering(root, suspendedLanes)
		  ) {
		    currentTime = suspendedLanes & -suspendedLanes;
		    if (currentTime === root.callbackPriority) return currentTime;
		    null !== pingedLanes && cancelCallback$1(pingedLanes);
		    switch (lanesToEventPriority(suspendedLanes)) {
		      case 2:
		      case 8:
		        suspendedLanes = UserBlockingPriority;
		        break;
		      case 32:
		        suspendedLanes = NormalPriority$1;
		        break;
		      case 268435456:
		        suspendedLanes = IdlePriority;
		        break;
		      default:
		        suspendedLanes = NormalPriority$1;
		    }
		    pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root);
		    suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
		    root.callbackPriority = currentTime;
		    root.callbackNode = suspendedLanes;
		    return currentTime;
		  }
		  null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes);
		  root.callbackPriority = 2;
		  root.callbackNode = null;
		  return 2;
		}
		function performWorkOnRootViaSchedulerTask(root, didTimeout) {
		  if (0 !== pendingEffectsStatus && 5 !== pendingEffectsStatus)
		    return (root.callbackNode = null), (root.callbackPriority = 0), null;
		  var originalCallbackNode = root.callbackNode;
		  if (flushPendingEffects() && root.callbackNode !== originalCallbackNode)
		    return null;
		  var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
		  workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
		    root,
		    root === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0,
		    null !== root.cancelPendingCommit || -1 !== root.timeoutHandle
		  );
		  if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
		  performWorkOnRoot(root, workInProgressRootRenderLanes$jscomp$0, didTimeout);
		  scheduleTaskForRootDuringMicrotask(root, now());
		  return null != root.callbackNode && root.callbackNode === originalCallbackNode
		    ? performWorkOnRootViaSchedulerTask.bind(null, root)
		    : null;
		}
		function performSyncWorkOnRoot(root, lanes) {
		  if (flushPendingEffects()) return null;
		  performWorkOnRoot(root, lanes, true);
		}
		function scheduleImmediateRootScheduleTask() {
		  scheduleMicrotask(function () {
		    0 !== (executionContext & 6)
		      ? scheduleCallback$3(
		          ImmediatePriority,
		          processRootScheduleInImmediateTask
		        )
		      : processRootScheduleInMicrotask();
		  });
		}
		function requestTransitionLane() {
		  0 === currentEventTransitionLane &&
		    (currentEventTransitionLane = claimNextTransitionLane());
		  return currentEventTransitionLane;
		}
		function coerceFormActionProp(actionProp) {
		  return null == actionProp ||
		    "symbol" === typeof actionProp ||
		    "boolean" === typeof actionProp
		    ? null
		    : "function" === typeof actionProp
		      ? actionProp
		      : sanitizeURL("" + actionProp);
		}
		function createFormDataWithSubmitter(form, submitter) {
		  var temp = submitter.ownerDocument.createElement("input");
		  temp.name = submitter.name;
		  temp.value = submitter.value;
		  form.id && temp.setAttribute("form", form.id);
		  submitter.parentNode.insertBefore(temp, submitter);
		  form = new FormData(form);
		  temp.parentNode.removeChild(temp);
		  return form;
		}
		function extractEvents$1(
		  dispatchQueue,
		  domEventName,
		  maybeTargetInst,
		  nativeEvent,
		  nativeEventTarget
		) {
		  if (
		    "submit" === domEventName &&
		    maybeTargetInst &&
		    maybeTargetInst.stateNode === nativeEventTarget
		  ) {
		    var action = coerceFormActionProp(
		        (nativeEventTarget[internalPropsKey] || null).action
		      ),
		      submitter = nativeEvent.submitter;
		    submitter &&
		      ((domEventName = (domEventName = submitter[internalPropsKey] || null)
		        ? coerceFormActionProp(domEventName.formAction)
		        : submitter.getAttribute("formAction")),
		      null !== domEventName && ((action = domEventName), (submitter = null)));
		    var event = new SyntheticEvent(
		      "action",
		      "action",
		      null,
		      nativeEvent,
		      nativeEventTarget
		    );
		    dispatchQueue.push({
		      event: event,
		      listeners: [
		        {
		          instance: null,
		          listener: function () {
		            if (nativeEvent.defaultPrevented) {
		              if (0 !== currentEventTransitionLane) {
		                var formData = submitter
		                  ? createFormDataWithSubmitter(nativeEventTarget, submitter)
		                  : new FormData(nativeEventTarget);
		                startHostTransition(
		                  maybeTargetInst,
		                  {
		                    pending: true,
		                    data: formData,
		                    method: nativeEventTarget.method,
		                    action: action
		                  },
		                  null,
		                  formData
		                );
		              }
		            } else
		              "function" === typeof action &&
		                (event.preventDefault(),
		                (formData = submitter
		                  ? createFormDataWithSubmitter(nativeEventTarget, submitter)
		                  : new FormData(nativeEventTarget)),
		                startHostTransition(
		                  maybeTargetInst,
		                  {
		                    pending: true,
		                    data: formData,
		                    method: nativeEventTarget.method,
		                    action: action
		                  },
		                  action,
		                  formData
		                ));
		          },
		          currentTarget: nativeEventTarget
		        }
		      ]
		    });
		  }
		}
		for (
		  var i$jscomp$inline_1528 = 0;
		  i$jscomp$inline_1528 < simpleEventPluginEvents.length;
		  i$jscomp$inline_1528++
		) {
		  var eventName$jscomp$inline_1529 =
		      simpleEventPluginEvents[i$jscomp$inline_1528],
		    domEventName$jscomp$inline_1530 =
		      eventName$jscomp$inline_1529.toLowerCase(),
		    capitalizedEvent$jscomp$inline_1531 =
		      eventName$jscomp$inline_1529[0].toUpperCase() +
		      eventName$jscomp$inline_1529.slice(1);
		  registerSimpleEvent(
		    domEventName$jscomp$inline_1530,
		    "on" + capitalizedEvent$jscomp$inline_1531
		  );
		}
		registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
		registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
		registerSimpleEvent(ANIMATION_START, "onAnimationStart");
		registerSimpleEvent("dblclick", "onDoubleClick");
		registerSimpleEvent("focusin", "onFocus");
		registerSimpleEvent("focusout", "onBlur");
		registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
		registerSimpleEvent(TRANSITION_START, "onTransitionStart");
		registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
		registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
		registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
		registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
		registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
		registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
		registerTwoPhaseEvent(
		  "onChange",
		  "change click focusin focusout input keydown keyup selectionchange".split(" ")
		);
		registerTwoPhaseEvent(
		  "onSelect",
		  "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
		    " "
		  )
		);
		registerTwoPhaseEvent("onBeforeInput", [
		  "compositionend",
		  "keypress",
		  "textInput",
		  "paste"
		]);
		registerTwoPhaseEvent(
		  "onCompositionEnd",
		  "compositionend focusout keydown keypress keyup mousedown".split(" ")
		);
		registerTwoPhaseEvent(
		  "onCompositionStart",
		  "compositionstart focusout keydown keypress keyup mousedown".split(" ")
		);
		registerTwoPhaseEvent(
		  "onCompositionUpdate",
		  "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
		);
		var mediaEventTypes =
		    "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
		      " "
		    ),
		  nonDelegatedEvents = new Set(
		    "beforetoggle cancel close invalid load scroll scrollend toggle"
		      .split(" ")
		      .concat(mediaEventTypes)
		  );
		function processDispatchQueue(dispatchQueue, eventSystemFlags) {
		  eventSystemFlags = 0 !== (eventSystemFlags & 4);
		  for (var i = 0; i < dispatchQueue.length; i++) {
		    var _dispatchQueue$i = dispatchQueue[i],
		      event = _dispatchQueue$i.event;
		    _dispatchQueue$i = _dispatchQueue$i.listeners;
		    a: {
		      var previousInstance = void 0;
		      if (eventSystemFlags)
		        for (
		          var i$jscomp$0 = _dispatchQueue$i.length - 1;
		          0 <= i$jscomp$0;
		          i$jscomp$0--
		        ) {
		          var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0],
		            instance = _dispatchListeners$i.instance,
		            currentTarget = _dispatchListeners$i.currentTarget;
		          _dispatchListeners$i = _dispatchListeners$i.listener;
		          if (instance !== previousInstance && event.isPropagationStopped())
		            break a;
		          previousInstance = _dispatchListeners$i;
		          event.currentTarget = currentTarget;
		          try {
		            previousInstance(event);
		          } catch (error) {
		            reportGlobalError(error);
		          }
		          event.currentTarget = null;
		          previousInstance = instance;
		        }
		      else
		        for (
		          i$jscomp$0 = 0;
		          i$jscomp$0 < _dispatchQueue$i.length;
		          i$jscomp$0++
		        ) {
		          _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
		          instance = _dispatchListeners$i.instance;
		          currentTarget = _dispatchListeners$i.currentTarget;
		          _dispatchListeners$i = _dispatchListeners$i.listener;
		          if (instance !== previousInstance && event.isPropagationStopped())
		            break a;
		          previousInstance = _dispatchListeners$i;
		          event.currentTarget = currentTarget;
		          try {
		            previousInstance(event);
		          } catch (error) {
		            reportGlobalError(error);
		          }
		          event.currentTarget = null;
		          previousInstance = instance;
		        }
		    }
		  }
		}
		function listenToNonDelegatedEvent(domEventName, targetElement) {
		  var JSCompiler_inline_result = targetElement[internalEventHandlersKey];
		  void 0 === JSCompiler_inline_result &&
		    (JSCompiler_inline_result = targetElement[internalEventHandlersKey] =
		      new Set());
		  var listenerSetKey = domEventName + "__bubble";
		  JSCompiler_inline_result.has(listenerSetKey) ||
		    (addTrappedEventListener(targetElement, domEventName, 2, false),
		    JSCompiler_inline_result.add(listenerSetKey));
		}
		function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
		  var eventSystemFlags = 0;
		  isCapturePhaseListener && (eventSystemFlags |= 4);
		  addTrappedEventListener(
		    target,
		    domEventName,
		    eventSystemFlags,
		    isCapturePhaseListener
		  );
		}
		var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
		function listenToAllSupportedEvents(rootContainerElement) {
		  if (!rootContainerElement[listeningMarker]) {
		    rootContainerElement[listeningMarker] = true;
		    allNativeEvents.forEach(function (domEventName) {
		      "selectionchange" !== domEventName &&
		        (nonDelegatedEvents.has(domEventName) ||
		          listenToNativeEvent(domEventName, false, rootContainerElement),
		        listenToNativeEvent(domEventName, true, rootContainerElement));
		    });
		    var ownerDocument =
		      9 === rootContainerElement.nodeType
		        ? rootContainerElement
		        : rootContainerElement.ownerDocument;
		    null === ownerDocument ||
		      ownerDocument[listeningMarker] ||
		      ((ownerDocument[listeningMarker] = true),
		      listenToNativeEvent("selectionchange", false, ownerDocument));
		  }
		}
		function addTrappedEventListener(
		  targetContainer,
		  domEventName,
		  eventSystemFlags,
		  isCapturePhaseListener
		) {
		  switch (getEventPriority(domEventName)) {
		    case 2:
		      var listenerWrapper = dispatchDiscreteEvent;
		      break;
		    case 8:
		      listenerWrapper = dispatchContinuousEvent;
		      break;
		    default:
		      listenerWrapper = dispatchEvent;
		  }
		  eventSystemFlags = listenerWrapper.bind(
		    null,
		    domEventName,
		    eventSystemFlags,
		    targetContainer
		  );
		  listenerWrapper = void 0;
		  !passiveBrowserEventsSupported ||
		    ("touchstart" !== domEventName &&
		      "touchmove" !== domEventName &&
		      "wheel" !== domEventName) ||
		    (listenerWrapper = true);
		  isCapturePhaseListener
		    ? void 0 !== listenerWrapper
		      ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
		          capture: true,
		          passive: listenerWrapper
		        })
		      : targetContainer.addEventListener(domEventName, eventSystemFlags, true)
		    : void 0 !== listenerWrapper
		      ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
		          passive: listenerWrapper
		        })
		      : targetContainer.addEventListener(domEventName, eventSystemFlags, false);
		}
		function dispatchEventForPluginEventSystem(
		  domEventName,
		  eventSystemFlags,
		  nativeEvent,
		  targetInst$jscomp$0,
		  targetContainer
		) {
		  var ancestorInst = targetInst$jscomp$0;
		  if (
		    0 === (eventSystemFlags & 1) &&
		    0 === (eventSystemFlags & 2) &&
		    null !== targetInst$jscomp$0
		  )
		    a: for (;;) {
		      if (null === targetInst$jscomp$0) return;
		      var nodeTag = targetInst$jscomp$0.tag;
		      if (3 === nodeTag || 4 === nodeTag) {
		        var container = targetInst$jscomp$0.stateNode.containerInfo;
		        if (container === targetContainer) break;
		        if (4 === nodeTag)
		          for (nodeTag = targetInst$jscomp$0.return; null !== nodeTag; ) {
		            var grandTag = nodeTag.tag;
		            if (
		              (3 === grandTag || 4 === grandTag) &&
		              nodeTag.stateNode.containerInfo === targetContainer
		            )
		              return;
		            nodeTag = nodeTag.return;
		          }
		        for (; null !== container; ) {
		          nodeTag = getClosestInstanceFromNode(container);
		          if (null === nodeTag) return;
		          grandTag = nodeTag.tag;
		          if (
		            5 === grandTag ||
		            6 === grandTag ||
		            26 === grandTag ||
		            27 === grandTag
		          ) {
		            targetInst$jscomp$0 = ancestorInst = nodeTag;
		            continue a;
		          }
		          container = container.parentNode;
		        }
		      }
		      targetInst$jscomp$0 = targetInst$jscomp$0.return;
		    }
		  batchedUpdates$1(function () {
		    var targetInst = ancestorInst,
		      nativeEventTarget = getEventTarget(nativeEvent),
		      dispatchQueue = [];
		    a: {
		      var reactName = topLevelEventsToReactNames.get(domEventName);
		      if (void 0 !== reactName) {
		        var SyntheticEventCtor = SyntheticEvent,
		          reactEventType = domEventName;
		        switch (domEventName) {
		          case "keypress":
		            if (0 === getEventCharCode(nativeEvent)) break a;
		          case "keydown":
		          case "keyup":
		            SyntheticEventCtor = SyntheticKeyboardEvent;
		            break;
		          case "focusin":
		            reactEventType = "focus";
		            SyntheticEventCtor = SyntheticFocusEvent;
		            break;
		          case "focusout":
		            reactEventType = "blur";
		            SyntheticEventCtor = SyntheticFocusEvent;
		            break;
		          case "beforeblur":
		          case "afterblur":
		            SyntheticEventCtor = SyntheticFocusEvent;
		            break;
		          case "click":
		            if (2 === nativeEvent.button) break a;
		          case "auxclick":
		          case "dblclick":
		          case "mousedown":
		          case "mousemove":
		          case "mouseup":
		          case "mouseout":
		          case "mouseover":
		          case "contextmenu":
		            SyntheticEventCtor = SyntheticMouseEvent;
		            break;
		          case "drag":
		          case "dragend":
		          case "dragenter":
		          case "dragexit":
		          case "dragleave":
		          case "dragover":
		          case "dragstart":
		          case "drop":
		            SyntheticEventCtor = SyntheticDragEvent;
		            break;
		          case "touchcancel":
		          case "touchend":
		          case "touchmove":
		          case "touchstart":
		            SyntheticEventCtor = SyntheticTouchEvent;
		            break;
		          case ANIMATION_END:
		          case ANIMATION_ITERATION:
		          case ANIMATION_START:
		            SyntheticEventCtor = SyntheticAnimationEvent;
		            break;
		          case TRANSITION_END:
		            SyntheticEventCtor = SyntheticTransitionEvent;
		            break;
		          case "scroll":
		          case "scrollend":
		            SyntheticEventCtor = SyntheticUIEvent;
		            break;
		          case "wheel":
		            SyntheticEventCtor = SyntheticWheelEvent;
		            break;
		          case "copy":
		          case "cut":
		          case "paste":
		            SyntheticEventCtor = SyntheticClipboardEvent;
		            break;
		          case "gotpointercapture":
		          case "lostpointercapture":
		          case "pointercancel":
		          case "pointerdown":
		          case "pointermove":
		          case "pointerout":
		          case "pointerover":
		          case "pointerup":
		            SyntheticEventCtor = SyntheticPointerEvent;
		            break;
		          case "toggle":
		          case "beforetoggle":
		            SyntheticEventCtor = SyntheticToggleEvent;
		        }
		        var inCapturePhase = 0 !== (eventSystemFlags & 4),
		          accumulateTargetOnly =
		            !inCapturePhase &&
		            ("scroll" === domEventName || "scrollend" === domEventName),
		          reactEventName = inCapturePhase
		            ? null !== reactName
		              ? reactName + "Capture"
		              : null
		            : reactName;
		        inCapturePhase = [];
		        for (
		          var instance = targetInst, lastHostComponent;
		          null !== instance;

		        ) {
		          var _instance = instance;
		          lastHostComponent = _instance.stateNode;
		          _instance = _instance.tag;
		          (5 !== _instance && 26 !== _instance && 27 !== _instance) ||
		            null === lastHostComponent ||
		            null === reactEventName ||
		            ((_instance = getListener(instance, reactEventName)),
		            null != _instance &&
		              inCapturePhase.push(
		                createDispatchListener(instance, _instance, lastHostComponent)
		              ));
		          if (accumulateTargetOnly) break;
		          instance = instance.return;
		        }
		        0 < inCapturePhase.length &&
		          ((reactName = new SyntheticEventCtor(
		            reactName,
		            reactEventType,
		            null,
		            nativeEvent,
		            nativeEventTarget
		          )),
		          dispatchQueue.push({ event: reactName, listeners: inCapturePhase }));
		      }
		    }
		    if (0 === (eventSystemFlags & 7)) {
		      a: {
		        reactName =
		          "mouseover" === domEventName || "pointerover" === domEventName;
		        SyntheticEventCtor =
		          "mouseout" === domEventName || "pointerout" === domEventName;
		        if (
		          reactName &&
		          nativeEvent !== currentReplayingEvent &&
		          (reactEventType =
		            nativeEvent.relatedTarget || nativeEvent.fromElement) &&
		          (getClosestInstanceFromNode(reactEventType) ||
		            reactEventType[internalContainerInstanceKey])
		        )
		          break a;
		        if (SyntheticEventCtor || reactName) {
		          reactName =
		            nativeEventTarget.window === nativeEventTarget
		              ? nativeEventTarget
		              : (reactName = nativeEventTarget.ownerDocument)
		                ? reactName.defaultView || reactName.parentWindow
		                : window;
		          if (SyntheticEventCtor) {
		            if (
		              ((reactEventType =
		                nativeEvent.relatedTarget || nativeEvent.toElement),
		              (SyntheticEventCtor = targetInst),
		              (reactEventType = reactEventType
		                ? getClosestInstanceFromNode(reactEventType)
		                : null),
		              null !== reactEventType &&
		                ((accumulateTargetOnly =
		                  getNearestMountedFiber(reactEventType)),
		                (inCapturePhase = reactEventType.tag),
		                reactEventType !== accumulateTargetOnly ||
		                  (5 !== inCapturePhase &&
		                    27 !== inCapturePhase &&
		                    6 !== inCapturePhase)))
		            )
		              reactEventType = null;
		          } else (SyntheticEventCtor = null), (reactEventType = targetInst);
		          if (SyntheticEventCtor !== reactEventType) {
		            inCapturePhase = SyntheticMouseEvent;
		            _instance = "onMouseLeave";
		            reactEventName = "onMouseEnter";
		            instance = "mouse";
		            if ("pointerout" === domEventName || "pointerover" === domEventName)
		              (inCapturePhase = SyntheticPointerEvent),
		                (_instance = "onPointerLeave"),
		                (reactEventName = "onPointerEnter"),
		                (instance = "pointer");
		            accumulateTargetOnly =
		              null == SyntheticEventCtor
		                ? reactName
		                : getNodeFromInstance(SyntheticEventCtor);
		            lastHostComponent =
		              null == reactEventType
		                ? reactName
		                : getNodeFromInstance(reactEventType);
		            reactName = new inCapturePhase(
		              _instance,
		              instance + "leave",
		              SyntheticEventCtor,
		              nativeEvent,
		              nativeEventTarget
		            );
		            reactName.target = accumulateTargetOnly;
		            reactName.relatedTarget = lastHostComponent;
		            _instance = null;
		            getClosestInstanceFromNode(nativeEventTarget) === targetInst &&
		              ((inCapturePhase = new inCapturePhase(
		                reactEventName,
		                instance + "enter",
		                reactEventType,
		                nativeEvent,
		                nativeEventTarget
		              )),
		              (inCapturePhase.target = lastHostComponent),
		              (inCapturePhase.relatedTarget = accumulateTargetOnly),
		              (_instance = inCapturePhase));
		            accumulateTargetOnly = _instance;
		            if (SyntheticEventCtor && reactEventType)
		              b: {
		                inCapturePhase = SyntheticEventCtor;
		                reactEventName = reactEventType;
		                instance = 0;
		                for (
		                  lastHostComponent = inCapturePhase;
		                  lastHostComponent;
		                  lastHostComponent = getParent(lastHostComponent)
		                )
		                  instance++;
		                lastHostComponent = 0;
		                for (
		                  _instance = reactEventName;
		                  _instance;
		                  _instance = getParent(_instance)
		                )
		                  lastHostComponent++;
		                for (; 0 < instance - lastHostComponent; )
		                  (inCapturePhase = getParent(inCapturePhase)), instance--;
		                for (; 0 < lastHostComponent - instance; )
		                  (reactEventName = getParent(reactEventName)),
		                    lastHostComponent--;
		                for (; instance--; ) {
		                  if (
		                    inCapturePhase === reactEventName ||
		                    (null !== reactEventName &&
		                      inCapturePhase === reactEventName.alternate)
		                  )
		                    break b;
		                  inCapturePhase = getParent(inCapturePhase);
		                  reactEventName = getParent(reactEventName);
		                }
		                inCapturePhase = null;
		              }
		            else inCapturePhase = null;
		            null !== SyntheticEventCtor &&
		              accumulateEnterLeaveListenersForEvent(
		                dispatchQueue,
		                reactName,
		                SyntheticEventCtor,
		                inCapturePhase,
		                !1
		              );
		            null !== reactEventType &&
		              null !== accumulateTargetOnly &&
		              accumulateEnterLeaveListenersForEvent(
		                dispatchQueue,
		                accumulateTargetOnly,
		                reactEventType,
		                inCapturePhase,
		                !0
		              );
		          }
		        }
		      }
		      a: {
		        reactName = targetInst ? getNodeFromInstance(targetInst) : window;
		        SyntheticEventCtor =
		          reactName.nodeName && reactName.nodeName.toLowerCase();
		        if (
		          "select" === SyntheticEventCtor ||
		          ("input" === SyntheticEventCtor && "file" === reactName.type)
		        )
		          var getTargetInstFunc = getTargetInstForChangeEvent;
		        else if (isTextInputElement(reactName))
		          if (isInputEventSupported)
		            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
		          else {
		            getTargetInstFunc = getTargetInstForInputEventPolyfill;
		            var handleEventFunc = handleEventsForInputEventPolyfill;
		          }
		        else
		          (SyntheticEventCtor = reactName.nodeName),
		            !SyntheticEventCtor ||
		            "input" !== SyntheticEventCtor.toLowerCase() ||
		            ("checkbox" !== reactName.type && "radio" !== reactName.type)
		              ? targetInst &&
		                isCustomElement(targetInst.elementType) &&
		                (getTargetInstFunc = getTargetInstForChangeEvent)
		              : (getTargetInstFunc = getTargetInstForClickEvent);
		        if (
		          getTargetInstFunc &&
		          (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))
		        ) {
		          createAndAccumulateChangeEvent(
		            dispatchQueue,
		            getTargetInstFunc,
		            nativeEvent,
		            nativeEventTarget
		          );
		          break a;
		        }
		        handleEventFunc && handleEventFunc(domEventName, reactName, targetInst);
		        "focusout" === domEventName &&
		          targetInst &&
		          "number" === reactName.type &&
		          null != targetInst.memoizedProps.value &&
		          setDefaultValue(reactName, "number", reactName.value);
		      }
		      handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window;
		      switch (domEventName) {
		        case "focusin":
		          if (
		            isTextInputElement(handleEventFunc) ||
		            "true" === handleEventFunc.contentEditable
		          )
		            (activeElement = handleEventFunc),
		              (activeElementInst = targetInst),
		              (lastSelection = null);
		          break;
		        case "focusout":
		          lastSelection = activeElementInst = activeElement = null;
		          break;
		        case "mousedown":
		          mouseDown = !0;
		          break;
		        case "contextmenu":
		        case "mouseup":
		        case "dragend":
		          mouseDown = !1;
		          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
		          break;
		        case "selectionchange":
		          if (skipSelectionChangeEvent) break;
		        case "keydown":
		        case "keyup":
		          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
		      }
		      var fallbackData;
		      if (canUseCompositionEvent)
		        b: {
		          switch (domEventName) {
		            case "compositionstart":
		              var eventType = "onCompositionStart";
		              break b;
		            case "compositionend":
		              eventType = "onCompositionEnd";
		              break b;
		            case "compositionupdate":
		              eventType = "onCompositionUpdate";
		              break b;
		          }
		          eventType = void 0;
		        }
		      else
		        isComposing
		          ? isFallbackCompositionEnd(domEventName, nativeEvent) &&
		            (eventType = "onCompositionEnd")
		          : "keydown" === domEventName &&
		            229 === nativeEvent.keyCode &&
		            (eventType = "onCompositionStart");
		      eventType &&
		        (useFallbackCompositionData &&
		          "ko" !== nativeEvent.locale &&
		          (isComposing || "onCompositionStart" !== eventType
		            ? "onCompositionEnd" === eventType &&
		              isComposing &&
		              (fallbackData = getData())
		            : ((root = nativeEventTarget),
		              (startText = "value" in root ? root.value : root.textContent),
		              (isComposing = !0))),
		        (handleEventFunc = accumulateTwoPhaseListeners(targetInst, eventType)),
		        0 < handleEventFunc.length &&
		          ((eventType = new SyntheticCompositionEvent(
		            eventType,
		            domEventName,
		            null,
		            nativeEvent,
		            nativeEventTarget
		          )),
		          dispatchQueue.push({ event: eventType, listeners: handleEventFunc }),
		          fallbackData
		            ? (eventType.data = fallbackData)
		            : ((fallbackData = getDataFromCustomEvent(nativeEvent)),
		              null !== fallbackData && (eventType.data = fallbackData))));
		      if (
		        (fallbackData = canUseTextInputEvent
		          ? getNativeBeforeInputChars(domEventName, nativeEvent)
		          : getFallbackBeforeInputChars(domEventName, nativeEvent))
		      )
		        (eventType = accumulateTwoPhaseListeners(targetInst, "onBeforeInput")),
		          0 < eventType.length &&
		            ((handleEventFunc = new SyntheticCompositionEvent(
		              "onBeforeInput",
		              "beforeinput",
		              null,
		              nativeEvent,
		              nativeEventTarget
		            )),
		            dispatchQueue.push({
		              event: handleEventFunc,
		              listeners: eventType
		            }),
		            (handleEventFunc.data = fallbackData));
		      extractEvents$1(
		        dispatchQueue,
		        domEventName,
		        targetInst,
		        nativeEvent,
		        nativeEventTarget
		      );
		    }
		    processDispatchQueue(dispatchQueue, eventSystemFlags);
		  });
		}
		function createDispatchListener(instance, listener, currentTarget) {
		  return {
		    instance: instance,
		    listener: listener,
		    currentTarget: currentTarget
		  };
		}
		function accumulateTwoPhaseListeners(targetFiber, reactName) {
		  for (
		    var captureName = reactName + "Capture", listeners = [];
		    null !== targetFiber;

		  ) {
		    var _instance2 = targetFiber,
		      stateNode = _instance2.stateNode;
		    _instance2 = _instance2.tag;
		    (5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2) ||
		      null === stateNode ||
		      ((_instance2 = getListener(targetFiber, captureName)),
		      null != _instance2 &&
		        listeners.unshift(
		          createDispatchListener(targetFiber, _instance2, stateNode)
		        ),
		      (_instance2 = getListener(targetFiber, reactName)),
		      null != _instance2 &&
		        listeners.push(
		          createDispatchListener(targetFiber, _instance2, stateNode)
		        ));
		    if (3 === targetFiber.tag) return listeners;
		    targetFiber = targetFiber.return;
		  }
		  return [];
		}
		function getParent(inst) {
		  if (null === inst) return null;
		  do inst = inst.return;
		  while (inst && 5 !== inst.tag && 27 !== inst.tag);
		  return inst ? inst : null;
		}
		function accumulateEnterLeaveListenersForEvent(
		  dispatchQueue,
		  event,
		  target,
		  common,
		  inCapturePhase
		) {
		  for (
		    var registrationName = event._reactName, listeners = [];
		    null !== target && target !== common;

		  ) {
		    var _instance3 = target,
		      alternate = _instance3.alternate,
		      stateNode = _instance3.stateNode;
		    _instance3 = _instance3.tag;
		    if (null !== alternate && alternate === common) break;
		    (5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3) ||
		      null === stateNode ||
		      ((alternate = stateNode),
		      inCapturePhase
		        ? ((stateNode = getListener(target, registrationName)),
		          null != stateNode &&
		            listeners.unshift(
		              createDispatchListener(target, stateNode, alternate)
		            ))
		        : inCapturePhase ||
		          ((stateNode = getListener(target, registrationName)),
		          null != stateNode &&
		            listeners.push(
		              createDispatchListener(target, stateNode, alternate)
		            )));
		    target = target.return;
		  }
		  0 !== listeners.length &&
		    dispatchQueue.push({ event: event, listeners: listeners });
		}
		var NORMALIZE_NEWLINES_REGEX = /\r\n?/g,
		  NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
		function normalizeMarkupForTextOrAttribute(markup) {
		  return ("string" === typeof markup ? markup : "" + markup)
		    .replace(NORMALIZE_NEWLINES_REGEX, "\n")
		    .replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
		}
		function checkForUnmatchedText(serverText, clientText) {
		  clientText = normalizeMarkupForTextOrAttribute(clientText);
		  return normalizeMarkupForTextOrAttribute(serverText) === clientText ? true : false;
		}
		function noop$1() {}
		function setProp(domElement, tag, key, value, props, prevValue) {
		  switch (key) {
		    case "children":
		      "string" === typeof value
		        ? "body" === tag ||
		          ("textarea" === tag && "" === value) ||
		          setTextContent(domElement, value)
		        : ("number" === typeof value || "bigint" === typeof value) &&
		          "body" !== tag &&
		          setTextContent(domElement, "" + value);
		      break;
		    case "className":
		      setValueForKnownAttribute(domElement, "class", value);
		      break;
		    case "tabIndex":
		      setValueForKnownAttribute(domElement, "tabindex", value);
		      break;
		    case "dir":
		    case "role":
		    case "viewBox":
		    case "width":
		    case "height":
		      setValueForKnownAttribute(domElement, key, value);
		      break;
		    case "style":
		      setValueForStyles(domElement, value, prevValue);
		      break;
		    case "data":
		      if ("object" !== tag) {
		        setValueForKnownAttribute(domElement, "data", value);
		        break;
		      }
		    case "src":
		    case "href":
		      if ("" === value && ("a" !== tag || "href" !== key)) {
		        domElement.removeAttribute(key);
		        break;
		      }
		      if (
		        null == value ||
		        "function" === typeof value ||
		        "symbol" === typeof value ||
		        "boolean" === typeof value
		      ) {
		        domElement.removeAttribute(key);
		        break;
		      }
		      value = sanitizeURL("" + value);
		      domElement.setAttribute(key, value);
		      break;
		    case "action":
		    case "formAction":
		      if ("function" === typeof value) {
		        domElement.setAttribute(
		          key,
		          "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
		        );
		        break;
		      } else
		        "function" === typeof prevValue &&
		          ("formAction" === key
		            ? ("input" !== tag &&
		                setProp(domElement, tag, "name", props.name, props, null),
		              setProp(
		                domElement,
		                tag,
		                "formEncType",
		                props.formEncType,
		                props,
		                null
		              ),
		              setProp(
		                domElement,
		                tag,
		                "formMethod",
		                props.formMethod,
		                props,
		                null
		              ),
		              setProp(
		                domElement,
		                tag,
		                "formTarget",
		                props.formTarget,
		                props,
		                null
		              ))
		            : (setProp(domElement, tag, "encType", props.encType, props, null),
		              setProp(domElement, tag, "method", props.method, props, null),
		              setProp(domElement, tag, "target", props.target, props, null)));
		      if (
		        null == value ||
		        "symbol" === typeof value ||
		        "boolean" === typeof value
		      ) {
		        domElement.removeAttribute(key);
		        break;
		      }
		      value = sanitizeURL("" + value);
		      domElement.setAttribute(key, value);
		      break;
		    case "onClick":
		      null != value && (domElement.onclick = noop$1);
		      break;
		    case "onScroll":
		      null != value && listenToNonDelegatedEvent("scroll", domElement);
		      break;
		    case "onScrollEnd":
		      null != value && listenToNonDelegatedEvent("scrollend", domElement);
		      break;
		    case "dangerouslySetInnerHTML":
		      if (null != value) {
		        if ("object" !== typeof value || !("__html" in value))
		          throw Error(formatProdErrorMessage(61));
		        key = value.__html;
		        if (null != key) {
		          if (null != props.children) throw Error(formatProdErrorMessage(60));
		          domElement.innerHTML = key;
		        }
		      }
		      break;
		    case "multiple":
		      domElement.multiple =
		        value && "function" !== typeof value && "symbol" !== typeof value;
		      break;
		    case "muted":
		      domElement.muted =
		        value && "function" !== typeof value && "symbol" !== typeof value;
		      break;
		    case "suppressContentEditableWarning":
		    case "suppressHydrationWarning":
		    case "defaultValue":
		    case "defaultChecked":
		    case "innerHTML":
		    case "ref":
		      break;
		    case "autoFocus":
		      break;
		    case "xlinkHref":
		      if (
		        null == value ||
		        "function" === typeof value ||
		        "boolean" === typeof value ||
		        "symbol" === typeof value
		      ) {
		        domElement.removeAttribute("xlink:href");
		        break;
		      }
		      key = sanitizeURL("" + value);
		      domElement.setAttributeNS(
		        "http://www.w3.org/1999/xlink",
		        "xlink:href",
		        key
		      );
		      break;
		    case "contentEditable":
		    case "spellCheck":
		    case "draggable":
		    case "value":
		    case "autoReverse":
		    case "externalResourcesRequired":
		    case "focusable":
		    case "preserveAlpha":
		      null != value && "function" !== typeof value && "symbol" !== typeof value
		        ? domElement.setAttribute(key, "" + value)
		        : domElement.removeAttribute(key);
		      break;
		    case "inert":
		    case "allowFullScreen":
		    case "async":
		    case "autoPlay":
		    case "controls":
		    case "default":
		    case "defer":
		    case "disabled":
		    case "disablePictureInPicture":
		    case "disableRemotePlayback":
		    case "formNoValidate":
		    case "hidden":
		    case "loop":
		    case "noModule":
		    case "noValidate":
		    case "open":
		    case "playsInline":
		    case "readOnly":
		    case "required":
		    case "reversed":
		    case "scoped":
		    case "seamless":
		    case "itemScope":
		      value && "function" !== typeof value && "symbol" !== typeof value
		        ? domElement.setAttribute(key, "")
		        : domElement.removeAttribute(key);
		      break;
		    case "capture":
		    case "download":
		      true === value
		        ? domElement.setAttribute(key, "")
		        : false !== value &&
		            null != value &&
		            "function" !== typeof value &&
		            "symbol" !== typeof value
		          ? domElement.setAttribute(key, value)
		          : domElement.removeAttribute(key);
		      break;
		    case "cols":
		    case "rows":
		    case "size":
		    case "span":
		      null != value &&
		      "function" !== typeof value &&
		      "symbol" !== typeof value &&
		      !isNaN(value) &&
		      1 <= value
		        ? domElement.setAttribute(key, value)
		        : domElement.removeAttribute(key);
		      break;
		    case "rowSpan":
		    case "start":
		      null == value ||
		      "function" === typeof value ||
		      "symbol" === typeof value ||
		      isNaN(value)
		        ? domElement.removeAttribute(key)
		        : domElement.setAttribute(key, value);
		      break;
		    case "popover":
		      listenToNonDelegatedEvent("beforetoggle", domElement);
		      listenToNonDelegatedEvent("toggle", domElement);
		      setValueForAttribute(domElement, "popover", value);
		      break;
		    case "xlinkActuate":
		      setValueForNamespacedAttribute(
		        domElement,
		        "http://www.w3.org/1999/xlink",
		        "xlink:actuate",
		        value
		      );
		      break;
		    case "xlinkArcrole":
		      setValueForNamespacedAttribute(
		        domElement,
		        "http://www.w3.org/1999/xlink",
		        "xlink:arcrole",
		        value
		      );
		      break;
		    case "xlinkRole":
		      setValueForNamespacedAttribute(
		        domElement,
		        "http://www.w3.org/1999/xlink",
		        "xlink:role",
		        value
		      );
		      break;
		    case "xlinkShow":
		      setValueForNamespacedAttribute(
		        domElement,
		        "http://www.w3.org/1999/xlink",
		        "xlink:show",
		        value
		      );
		      break;
		    case "xlinkTitle":
		      setValueForNamespacedAttribute(
		        domElement,
		        "http://www.w3.org/1999/xlink",
		        "xlink:title",
		        value
		      );
		      break;
		    case "xlinkType":
		      setValueForNamespacedAttribute(
		        domElement,
		        "http://www.w3.org/1999/xlink",
		        "xlink:type",
		        value
		      );
		      break;
		    case "xmlBase":
		      setValueForNamespacedAttribute(
		        domElement,
		        "http://www.w3.org/XML/1998/namespace",
		        "xml:base",
		        value
		      );
		      break;
		    case "xmlLang":
		      setValueForNamespacedAttribute(
		        domElement,
		        "http://www.w3.org/XML/1998/namespace",
		        "xml:lang",
		        value
		      );
		      break;
		    case "xmlSpace":
		      setValueForNamespacedAttribute(
		        domElement,
		        "http://www.w3.org/XML/1998/namespace",
		        "xml:space",
		        value
		      );
		      break;
		    case "is":
		      setValueForAttribute(domElement, "is", value);
		      break;
		    case "innerText":
		    case "textContent":
		      break;
		    default:
		      if (
		        !(2 < key.length) ||
		        ("o" !== key[0] && "O" !== key[0]) ||
		        ("n" !== key[1] && "N" !== key[1])
		      )
		        (key = aliases.get(key) || key),
		          setValueForAttribute(domElement, key, value);
		  }
		}
		function setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {
		  switch (key) {
		    case "style":
		      setValueForStyles(domElement, value, prevValue);
		      break;
		    case "dangerouslySetInnerHTML":
		      if (null != value) {
		        if ("object" !== typeof value || !("__html" in value))
		          throw Error(formatProdErrorMessage(61));
		        key = value.__html;
		        if (null != key) {
		          if (null != props.children) throw Error(formatProdErrorMessage(60));
		          domElement.innerHTML = key;
		        }
		      }
		      break;
		    case "children":
		      "string" === typeof value
		        ? setTextContent(domElement, value)
		        : ("number" === typeof value || "bigint" === typeof value) &&
		          setTextContent(domElement, "" + value);
		      break;
		    case "onScroll":
		      null != value && listenToNonDelegatedEvent("scroll", domElement);
		      break;
		    case "onScrollEnd":
		      null != value && listenToNonDelegatedEvent("scrollend", domElement);
		      break;
		    case "onClick":
		      null != value && (domElement.onclick = noop$1);
		      break;
		    case "suppressContentEditableWarning":
		    case "suppressHydrationWarning":
		    case "innerHTML":
		    case "ref":
		      break;
		    case "innerText":
		    case "textContent":
		      break;
		    default:
		      if (!registrationNameDependencies.hasOwnProperty(key))
		        a: {
		          if (
		            "o" === key[0] &&
		            "n" === key[1] &&
		            ((props = key.endsWith("Capture")),
		            (tag = key.slice(2, props ? key.length - 7 : void 0)),
		            (prevValue = domElement[internalPropsKey] || null),
		            (prevValue = null != prevValue ? prevValue[key] : null),
		            "function" === typeof prevValue &&
		              domElement.removeEventListener(tag, prevValue, props),
		            "function" === typeof value)
		          ) {
		            "function" !== typeof prevValue &&
		              null !== prevValue &&
		              (key in domElement
		                ? (domElement[key] = null)
		                : domElement.hasAttribute(key) &&
		                  domElement.removeAttribute(key));
		            domElement.addEventListener(tag, value, props);
		            break a;
		          }
		          key in domElement
		            ? (domElement[key] = value)
		            : true === value
		              ? domElement.setAttribute(key, "")
		              : setValueForAttribute(domElement, key, value);
		        }
		  }
		}
		function setInitialProperties(domElement, tag, props) {
		  switch (tag) {
		    case "div":
		    case "span":
		    case "svg":
		    case "path":
		    case "a":
		    case "g":
		    case "p":
		    case "li":
		      break;
		    case "img":
		      listenToNonDelegatedEvent("error", domElement);
		      listenToNonDelegatedEvent("load", domElement);
		      var hasSrc = false,
		        hasSrcSet = false,
		        propKey;
		      for (propKey in props)
		        if (props.hasOwnProperty(propKey)) {
		          var propValue = props[propKey];
		          if (null != propValue)
		            switch (propKey) {
		              case "src":
		                hasSrc = true;
		                break;
		              case "srcSet":
		                hasSrcSet = true;
		                break;
		              case "children":
		              case "dangerouslySetInnerHTML":
		                throw Error(formatProdErrorMessage(137, tag));
		              default:
		                setProp(domElement, tag, propKey, propValue, props, null);
		            }
		        }
		      hasSrcSet &&
		        setProp(domElement, tag, "srcSet", props.srcSet, props, null);
		      hasSrc && setProp(domElement, tag, "src", props.src, props, null);
		      return;
		    case "input":
		      listenToNonDelegatedEvent("invalid", domElement);
		      var defaultValue = (propKey = propValue = hasSrcSet = null),
		        checked = null,
		        defaultChecked = null;
		      for (hasSrc in props)
		        if (props.hasOwnProperty(hasSrc)) {
		          var propValue$188 = props[hasSrc];
		          if (null != propValue$188)
		            switch (hasSrc) {
		              case "name":
		                hasSrcSet = propValue$188;
		                break;
		              case "type":
		                propValue = propValue$188;
		                break;
		              case "checked":
		                checked = propValue$188;
		                break;
		              case "defaultChecked":
		                defaultChecked = propValue$188;
		                break;
		              case "value":
		                propKey = propValue$188;
		                break;
		              case "defaultValue":
		                defaultValue = propValue$188;
		                break;
		              case "children":
		              case "dangerouslySetInnerHTML":
		                if (null != propValue$188)
		                  throw Error(formatProdErrorMessage(137, tag));
		                break;
		              default:
		                setProp(domElement, tag, hasSrc, propValue$188, props, null);
		            }
		        }
		      initInput(
		        domElement,
		        propKey,
		        defaultValue,
		        checked,
		        defaultChecked,
		        propValue,
		        hasSrcSet,
		        false
		      );
		      track(domElement);
		      return;
		    case "select":
		      listenToNonDelegatedEvent("invalid", domElement);
		      hasSrc = propValue = propKey = null;
		      for (hasSrcSet in props)
		        if (
		          props.hasOwnProperty(hasSrcSet) &&
		          ((defaultValue = props[hasSrcSet]), null != defaultValue)
		        )
		          switch (hasSrcSet) {
		            case "value":
		              propKey = defaultValue;
		              break;
		            case "defaultValue":
		              propValue = defaultValue;
		              break;
		            case "multiple":
		              hasSrc = defaultValue;
		            default:
		              setProp(domElement, tag, hasSrcSet, defaultValue, props, null);
		          }
		      tag = propKey;
		      props = propValue;
		      domElement.multiple = !!hasSrc;
		      null != tag
		        ? updateOptions(domElement, !!hasSrc, tag, false)
		        : null != props && updateOptions(domElement, !!hasSrc, props, true);
		      return;
		    case "textarea":
		      listenToNonDelegatedEvent("invalid", domElement);
		      propKey = hasSrcSet = hasSrc = null;
		      for (propValue in props)
		        if (
		          props.hasOwnProperty(propValue) &&
		          ((defaultValue = props[propValue]), null != defaultValue)
		        )
		          switch (propValue) {
		            case "value":
		              hasSrc = defaultValue;
		              break;
		            case "defaultValue":
		              hasSrcSet = defaultValue;
		              break;
		            case "children":
		              propKey = defaultValue;
		              break;
		            case "dangerouslySetInnerHTML":
		              if (null != defaultValue) throw Error(formatProdErrorMessage(91));
		              break;
		            default:
		              setProp(domElement, tag, propValue, defaultValue, props, null);
		          }
		      initTextarea(domElement, hasSrc, hasSrcSet, propKey);
		      track(domElement);
		      return;
		    case "option":
		      for (checked in props)
		        if (
		          props.hasOwnProperty(checked) &&
		          ((hasSrc = props[checked]), null != hasSrc)
		        )
		          switch (checked) {
		            case "selected":
		              domElement.selected =
		                hasSrc &&
		                "function" !== typeof hasSrc &&
		                "symbol" !== typeof hasSrc;
		              break;
		            default:
		              setProp(domElement, tag, checked, hasSrc, props, null);
		          }
		      return;
		    case "dialog":
		      listenToNonDelegatedEvent("beforetoggle", domElement);
		      listenToNonDelegatedEvent("toggle", domElement);
		      listenToNonDelegatedEvent("cancel", domElement);
		      listenToNonDelegatedEvent("close", domElement);
		      break;
		    case "iframe":
		    case "object":
		      listenToNonDelegatedEvent("load", domElement);
		      break;
		    case "video":
		    case "audio":
		      for (hasSrc = 0; hasSrc < mediaEventTypes.length; hasSrc++)
		        listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);
		      break;
		    case "image":
		      listenToNonDelegatedEvent("error", domElement);
		      listenToNonDelegatedEvent("load", domElement);
		      break;
		    case "details":
		      listenToNonDelegatedEvent("toggle", domElement);
		      break;
		    case "embed":
		    case "source":
		    case "link":
		      listenToNonDelegatedEvent("error", domElement),
		        listenToNonDelegatedEvent("load", domElement);
		    case "area":
		    case "base":
		    case "br":
		    case "col":
		    case "hr":
		    case "keygen":
		    case "meta":
		    case "param":
		    case "track":
		    case "wbr":
		    case "menuitem":
		      for (defaultChecked in props)
		        if (
		          props.hasOwnProperty(defaultChecked) &&
		          ((hasSrc = props[defaultChecked]), null != hasSrc)
		        )
		          switch (defaultChecked) {
		            case "children":
		            case "dangerouslySetInnerHTML":
		              throw Error(formatProdErrorMessage(137, tag));
		            default:
		              setProp(domElement, tag, defaultChecked, hasSrc, props, null);
		          }
		      return;
		    default:
		      if (isCustomElement(tag)) {
		        for (propValue$188 in props)
		          props.hasOwnProperty(propValue$188) &&
		            ((hasSrc = props[propValue$188]),
		            void 0 !== hasSrc &&
		              setPropOnCustomElement(
		                domElement,
		                tag,
		                propValue$188,
		                hasSrc,
		                props,
		                void 0
		              ));
		        return;
		      }
		  }
		  for (defaultValue in props)
		    props.hasOwnProperty(defaultValue) &&
		      ((hasSrc = props[defaultValue]),
		      null != hasSrc &&
		        setProp(domElement, tag, defaultValue, hasSrc, props, null));
		}
		function updateProperties(domElement, tag, lastProps, nextProps) {
		  switch (tag) {
		    case "div":
		    case "span":
		    case "svg":
		    case "path":
		    case "a":
		    case "g":
		    case "p":
		    case "li":
		      break;
		    case "input":
		      var name = null,
		        type = null,
		        value = null,
		        defaultValue = null,
		        lastDefaultValue = null,
		        checked = null,
		        defaultChecked = null;
		      for (propKey in lastProps) {
		        var lastProp = lastProps[propKey];
		        if (lastProps.hasOwnProperty(propKey) && null != lastProp)
		          switch (propKey) {
		            case "checked":
		              break;
		            case "value":
		              break;
		            case "defaultValue":
		              lastDefaultValue = lastProp;
		            default:
		              nextProps.hasOwnProperty(propKey) ||
		                setProp(domElement, tag, propKey, null, nextProps, lastProp);
		          }
		      }
		      for (var propKey$205 in nextProps) {
		        var propKey = nextProps[propKey$205];
		        lastProp = lastProps[propKey$205];
		        if (
		          nextProps.hasOwnProperty(propKey$205) &&
		          (null != propKey || null != lastProp)
		        )
		          switch (propKey$205) {
		            case "type":
		              type = propKey;
		              break;
		            case "name":
		              name = propKey;
		              break;
		            case "checked":
		              checked = propKey;
		              break;
		            case "defaultChecked":
		              defaultChecked = propKey;
		              break;
		            case "value":
		              value = propKey;
		              break;
		            case "defaultValue":
		              defaultValue = propKey;
		              break;
		            case "children":
		            case "dangerouslySetInnerHTML":
		              if (null != propKey)
		                throw Error(formatProdErrorMessage(137, tag));
		              break;
		            default:
		              propKey !== lastProp &&
		                setProp(
		                  domElement,
		                  tag,
		                  propKey$205,
		                  propKey,
		                  nextProps,
		                  lastProp
		                );
		          }
		      }
		      updateInput(
		        domElement,
		        value,
		        defaultValue,
		        lastDefaultValue,
		        checked,
		        defaultChecked,
		        type,
		        name
		      );
		      return;
		    case "select":
		      propKey = value = defaultValue = propKey$205 = null;
		      for (type in lastProps)
		        if (
		          ((lastDefaultValue = lastProps[type]),
		          lastProps.hasOwnProperty(type) && null != lastDefaultValue)
		        )
		          switch (type) {
		            case "value":
		              break;
		            case "multiple":
		              propKey = lastDefaultValue;
		            default:
		              nextProps.hasOwnProperty(type) ||
		                setProp(
		                  domElement,
		                  tag,
		                  type,
		                  null,
		                  nextProps,
		                  lastDefaultValue
		                );
		          }
		      for (name in nextProps)
		        if (
		          ((type = nextProps[name]),
		          (lastDefaultValue = lastProps[name]),
		          nextProps.hasOwnProperty(name) &&
		            (null != type || null != lastDefaultValue))
		        )
		          switch (name) {
		            case "value":
		              propKey$205 = type;
		              break;
		            case "defaultValue":
		              defaultValue = type;
		              break;
		            case "multiple":
		              value = type;
		            default:
		              type !== lastDefaultValue &&
		                setProp(
		                  domElement,
		                  tag,
		                  name,
		                  type,
		                  nextProps,
		                  lastDefaultValue
		                );
		          }
		      tag = defaultValue;
		      lastProps = value;
		      nextProps = propKey;
		      null != propKey$205
		        ? updateOptions(domElement, !!lastProps, propKey$205, false)
		        : !!nextProps !== !!lastProps &&
		          (null != tag
		            ? updateOptions(domElement, !!lastProps, tag, true)
		            : updateOptions(domElement, !!lastProps, lastProps ? [] : "", false));
		      return;
		    case "textarea":
		      propKey = propKey$205 = null;
		      for (defaultValue in lastProps)
		        if (
		          ((name = lastProps[defaultValue]),
		          lastProps.hasOwnProperty(defaultValue) &&
		            null != name &&
		            !nextProps.hasOwnProperty(defaultValue))
		        )
		          switch (defaultValue) {
		            case "value":
		              break;
		            case "children":
		              break;
		            default:
		              setProp(domElement, tag, defaultValue, null, nextProps, name);
		          }
		      for (value in nextProps)
		        if (
		          ((name = nextProps[value]),
		          (type = lastProps[value]),
		          nextProps.hasOwnProperty(value) && (null != name || null != type))
		        )
		          switch (value) {
		            case "value":
		              propKey$205 = name;
		              break;
		            case "defaultValue":
		              propKey = name;
		              break;
		            case "children":
		              break;
		            case "dangerouslySetInnerHTML":
		              if (null != name) throw Error(formatProdErrorMessage(91));
		              break;
		            default:
		              name !== type &&
		                setProp(domElement, tag, value, name, nextProps, type);
		          }
		      updateTextarea(domElement, propKey$205, propKey);
		      return;
		    case "option":
		      for (var propKey$221 in lastProps)
		        if (
		          ((propKey$205 = lastProps[propKey$221]),
		          lastProps.hasOwnProperty(propKey$221) &&
		            null != propKey$205 &&
		            !nextProps.hasOwnProperty(propKey$221))
		        )
		          switch (propKey$221) {
		            case "selected":
		              domElement.selected = false;
		              break;
		            default:
		              setProp(
		                domElement,
		                tag,
		                propKey$221,
		                null,
		                nextProps,
		                propKey$205
		              );
		          }
		      for (lastDefaultValue in nextProps)
		        if (
		          ((propKey$205 = nextProps[lastDefaultValue]),
		          (propKey = lastProps[lastDefaultValue]),
		          nextProps.hasOwnProperty(lastDefaultValue) &&
		            propKey$205 !== propKey &&
		            (null != propKey$205 || null != propKey))
		        )
		          switch (lastDefaultValue) {
		            case "selected":
		              domElement.selected =
		                propKey$205 &&
		                "function" !== typeof propKey$205 &&
		                "symbol" !== typeof propKey$205;
		              break;
		            default:
		              setProp(
		                domElement,
		                tag,
		                lastDefaultValue,
		                propKey$205,
		                nextProps,
		                propKey
		              );
		          }
		      return;
		    case "img":
		    case "link":
		    case "area":
		    case "base":
		    case "br":
		    case "col":
		    case "embed":
		    case "hr":
		    case "keygen":
		    case "meta":
		    case "param":
		    case "source":
		    case "track":
		    case "wbr":
		    case "menuitem":
		      for (var propKey$226 in lastProps)
		        (propKey$205 = lastProps[propKey$226]),
		          lastProps.hasOwnProperty(propKey$226) &&
		            null != propKey$205 &&
		            !nextProps.hasOwnProperty(propKey$226) &&
		            setProp(domElement, tag, propKey$226, null, nextProps, propKey$205);
		      for (checked in nextProps)
		        if (
		          ((propKey$205 = nextProps[checked]),
		          (propKey = lastProps[checked]),
		          nextProps.hasOwnProperty(checked) &&
		            propKey$205 !== propKey &&
		            (null != propKey$205 || null != propKey))
		        )
		          switch (checked) {
		            case "children":
		            case "dangerouslySetInnerHTML":
		              if (null != propKey$205)
		                throw Error(formatProdErrorMessage(137, tag));
		              break;
		            default:
		              setProp(
		                domElement,
		                tag,
		                checked,
		                propKey$205,
		                nextProps,
		                propKey
		              );
		          }
		      return;
		    default:
		      if (isCustomElement(tag)) {
		        for (var propKey$231 in lastProps)
		          (propKey$205 = lastProps[propKey$231]),
		            lastProps.hasOwnProperty(propKey$231) &&
		              void 0 !== propKey$205 &&
		              !nextProps.hasOwnProperty(propKey$231) &&
		              setPropOnCustomElement(
		                domElement,
		                tag,
		                propKey$231,
		                void 0,
		                nextProps,
		                propKey$205
		              );
		        for (defaultChecked in nextProps)
		          (propKey$205 = nextProps[defaultChecked]),
		            (propKey = lastProps[defaultChecked]),
		            !nextProps.hasOwnProperty(defaultChecked) ||
		              propKey$205 === propKey ||
		              (void 0 === propKey$205 && void 0 === propKey) ||
		              setPropOnCustomElement(
		                domElement,
		                tag,
		                defaultChecked,
		                propKey$205,
		                nextProps,
		                propKey
		              );
		        return;
		      }
		  }
		  for (var propKey$236 in lastProps)
		    (propKey$205 = lastProps[propKey$236]),
		      lastProps.hasOwnProperty(propKey$236) &&
		        null != propKey$205 &&
		        !nextProps.hasOwnProperty(propKey$236) &&
		        setProp(domElement, tag, propKey$236, null, nextProps, propKey$205);
		  for (lastProp in nextProps)
		    (propKey$205 = nextProps[lastProp]),
		      (propKey = lastProps[lastProp]),
		      !nextProps.hasOwnProperty(lastProp) ||
		        propKey$205 === propKey ||
		        (null == propKey$205 && null == propKey) ||
		        setProp(domElement, tag, lastProp, propKey$205, nextProps, propKey);
		}
		var eventsEnabled = null,
		  selectionInformation = null;
		function getOwnerDocumentFromRootContainer(rootContainerElement) {
		  return 9 === rootContainerElement.nodeType
		    ? rootContainerElement
		    : rootContainerElement.ownerDocument;
		}
		function getOwnHostContext(namespaceURI) {
		  switch (namespaceURI) {
		    case "http://www.w3.org/2000/svg":
		      return 1;
		    case "http://www.w3.org/1998/Math/MathML":
		      return 2;
		    default:
		      return 0;
		  }
		}
		function getChildHostContextProd(parentNamespace, type) {
		  if (0 === parentNamespace)
		    switch (type) {
		      case "svg":
		        return 1;
		      case "math":
		        return 2;
		      default:
		        return 0;
		    }
		  return 1 === parentNamespace && "foreignObject" === type
		    ? 0
		    : parentNamespace;
		}
		function shouldSetTextContent(type, props) {
		  return (
		    "textarea" === type ||
		    "noscript" === type ||
		    "string" === typeof props.children ||
		    "number" === typeof props.children ||
		    "bigint" === typeof props.children ||
		    ("object" === typeof props.dangerouslySetInnerHTML &&
		      null !== props.dangerouslySetInnerHTML &&
		      null != props.dangerouslySetInnerHTML.__html)
		  );
		}
		var currentPopstateTransitionEvent = null;
		function shouldAttemptEagerTransition() {
		  var event = window.event;
		  if (event && "popstate" === event.type) {
		    if (event === currentPopstateTransitionEvent) return false;
		    currentPopstateTransitionEvent = event;
		    return true;
		  }
		  currentPopstateTransitionEvent = null;
		  return false;
		}
		var scheduleTimeout = "function" === typeof setTimeout ? setTimeout : void 0,
		  cancelTimeout = "function" === typeof clearTimeout ? clearTimeout : void 0,
		  localPromise = "function" === typeof Promise ? Promise : void 0,
		  scheduleMicrotask =
		    "function" === typeof queueMicrotask
		      ? queueMicrotask
		      : "undefined" !== typeof localPromise
		        ? function (callback) {
		            return localPromise
		              .resolve(null)
		              .then(callback)
		              .catch(handleErrorInNextTick);
		          }
		        : scheduleTimeout;
		function handleErrorInNextTick(error) {
		  setTimeout(function () {
		    throw error;
		  });
		}
		function isSingletonScope(type) {
		  return "head" === type;
		}
		function clearSuspenseBoundary(parentInstance, suspenseInstance) {
		  var node = suspenseInstance,
		    possiblePreambleContribution = 0,
		    depth = 0;
		  do {
		    var nextNode = node.nextSibling;
		    parentInstance.removeChild(node);
		    if (nextNode && 8 === nextNode.nodeType)
		      if (((node = nextNode.data), "/$" === node)) {
		        if (
		          0 < possiblePreambleContribution &&
		          8 > possiblePreambleContribution
		        ) {
		          node = possiblePreambleContribution;
		          var ownerDocument = parentInstance.ownerDocument;
		          node & 1 && releaseSingletonInstance(ownerDocument.documentElement);
		          node & 2 && releaseSingletonInstance(ownerDocument.body);
		          if (node & 4)
		            for (
		              node = ownerDocument.head,
		                releaseSingletonInstance(node),
		                ownerDocument = node.firstChild;
		              ownerDocument;

		            ) {
		              var nextNode$jscomp$0 = ownerDocument.nextSibling,
		                nodeName = ownerDocument.nodeName;
		              ownerDocument[internalHoistableMarker] ||
		                "SCRIPT" === nodeName ||
		                "STYLE" === nodeName ||
		                ("LINK" === nodeName &&
		                  "stylesheet" === ownerDocument.rel.toLowerCase()) ||
		                node.removeChild(ownerDocument);
		              ownerDocument = nextNode$jscomp$0;
		            }
		        }
		        if (0 === depth) {
		          parentInstance.removeChild(nextNode);
		          retryIfBlockedOn(suspenseInstance);
		          return;
		        }
		        depth--;
		      } else
		        "$" === node || "$?" === node || "$!" === node
		          ? depth++
		          : (possiblePreambleContribution = node.charCodeAt(0) - 48);
		    else possiblePreambleContribution = 0;
		    node = nextNode;
		  } while (node);
		  retryIfBlockedOn(suspenseInstance);
		}
		function clearContainerSparingly(container) {
		  var nextNode = container.firstChild;
		  nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling);
		  for (; nextNode; ) {
		    var node = nextNode;
		    nextNode = nextNode.nextSibling;
		    switch (node.nodeName) {
		      case "HTML":
		      case "HEAD":
		      case "BODY":
		        clearContainerSparingly(node);
		        detachDeletedInstance(node);
		        continue;
		      case "SCRIPT":
		      case "STYLE":
		        continue;
		      case "LINK":
		        if ("stylesheet" === node.rel.toLowerCase()) continue;
		    }
		    container.removeChild(node);
		  }
		}
		function canHydrateInstance(instance, type, props, inRootOrSingleton) {
		  for (; 1 === instance.nodeType; ) {
		    var anyProps = props;
		    if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
		      if (
		        !inRootOrSingleton &&
		        ("INPUT" !== instance.nodeName || "hidden" !== instance.type)
		      )
		        break;
		    } else if (!inRootOrSingleton)
		      if ("input" === type && "hidden" === instance.type) {
		        var name = null == anyProps.name ? null : "" + anyProps.name;
		        if (
		          "hidden" === anyProps.type &&
		          instance.getAttribute("name") === name
		        )
		          return instance;
		      } else return instance;
		    else if (!instance[internalHoistableMarker])
		      switch (type) {
		        case "meta":
		          if (!instance.hasAttribute("itemprop")) break;
		          return instance;
		        case "link":
		          name = instance.getAttribute("rel");
		          if ("stylesheet" === name && instance.hasAttribute("data-precedence"))
		            break;
		          else if (
		            name !== anyProps.rel ||
		            instance.getAttribute("href") !==
		              (null == anyProps.href || "" === anyProps.href
		                ? null
		                : anyProps.href) ||
		            instance.getAttribute("crossorigin") !==
		              (null == anyProps.crossOrigin ? null : anyProps.crossOrigin) ||
		            instance.getAttribute("title") !==
		              (null == anyProps.title ? null : anyProps.title)
		          )
		            break;
		          return instance;
		        case "style":
		          if (instance.hasAttribute("data-precedence")) break;
		          return instance;
		        case "script":
		          name = instance.getAttribute("src");
		          if (
		            (name !== (null == anyProps.src ? null : anyProps.src) ||
		              instance.getAttribute("type") !==
		                (null == anyProps.type ? null : anyProps.type) ||
		              instance.getAttribute("crossorigin") !==
		                (null == anyProps.crossOrigin ? null : anyProps.crossOrigin)) &&
		            name &&
		            instance.hasAttribute("async") &&
		            !instance.hasAttribute("itemprop")
		          )
		            break;
		          return instance;
		        default:
		          return instance;
		      }
		    instance = getNextHydratable(instance.nextSibling);
		    if (null === instance) break;
		  }
		  return null;
		}
		function canHydrateTextInstance(instance, text, inRootOrSingleton) {
		  if ("" === text) return null;
		  for (; 3 !== instance.nodeType; ) {
		    if (
		      (1 !== instance.nodeType ||
		        "INPUT" !== instance.nodeName ||
		        "hidden" !== instance.type) &&
		      !inRootOrSingleton
		    )
		      return null;
		    instance = getNextHydratable(instance.nextSibling);
		    if (null === instance) return null;
		  }
		  return instance;
		}
		function isSuspenseInstanceFallback(instance) {
		  return (
		    "$!" === instance.data ||
		    ("$?" === instance.data && "complete" === instance.ownerDocument.readyState)
		  );
		}
		function registerSuspenseInstanceRetry(instance, callback) {
		  var ownerDocument = instance.ownerDocument;
		  if ("$?" !== instance.data || "complete" === ownerDocument.readyState)
		    callback();
		  else {
		    var listener = function () {
		      callback();
		      ownerDocument.removeEventListener("DOMContentLoaded", listener);
		    };
		    ownerDocument.addEventListener("DOMContentLoaded", listener);
		    instance._reactRetry = listener;
		  }
		}
		function getNextHydratable(node) {
		  for (; null != node; node = node.nextSibling) {
		    var nodeType = node.nodeType;
		    if (1 === nodeType || 3 === nodeType) break;
		    if (8 === nodeType) {
		      nodeType = node.data;
		      if (
		        "$" === nodeType ||
		        "$!" === nodeType ||
		        "$?" === nodeType ||
		        "F!" === nodeType ||
		        "F" === nodeType
		      )
		        break;
		      if ("/$" === nodeType) return null;
		    }
		  }
		  return node;
		}
		var previousHydratableOnEnteringScopedSingleton = null;
		function getParentSuspenseInstance(targetInstance) {
		  targetInstance = targetInstance.previousSibling;
		  for (var depth = 0; targetInstance; ) {
		    if (8 === targetInstance.nodeType) {
		      var data = targetInstance.data;
		      if ("$" === data || "$!" === data || "$?" === data) {
		        if (0 === depth) return targetInstance;
		        depth--;
		      } else "/$" === data && depth++;
		    }
		    targetInstance = targetInstance.previousSibling;
		  }
		  return null;
		}
		function resolveSingletonInstance(type, props, rootContainerInstance) {
		  props = getOwnerDocumentFromRootContainer(rootContainerInstance);
		  switch (type) {
		    case "html":
		      type = props.documentElement;
		      if (!type) throw Error(formatProdErrorMessage(452));
		      return type;
		    case "head":
		      type = props.head;
		      if (!type) throw Error(formatProdErrorMessage(453));
		      return type;
		    case "body":
		      type = props.body;
		      if (!type) throw Error(formatProdErrorMessage(454));
		      return type;
		    default:
		      throw Error(formatProdErrorMessage(451));
		  }
		}
		function releaseSingletonInstance(instance) {
		  for (var attributes = instance.attributes; attributes.length; )
		    instance.removeAttributeNode(attributes[0]);
		  detachDeletedInstance(instance);
		}
		var preloadPropsMap = new Map(),
		  preconnectsSet = new Set();
		function getHoistableRoot(container) {
		  return "function" === typeof container.getRootNode
		    ? container.getRootNode()
		    : 9 === container.nodeType
		      ? container
		      : container.ownerDocument;
		}
		var previousDispatcher = ReactDOMSharedInternals.d;
		ReactDOMSharedInternals.d = {
		  f: flushSyncWork,
		  r: requestFormReset,
		  D: prefetchDNS,
		  C: preconnect,
		  L: preload,
		  m: preloadModule,
		  X: preinitScript,
		  S: preinitStyle,
		  M: preinitModuleScript
		};
		function flushSyncWork() {
		  var previousWasRendering = previousDispatcher.f(),
		    wasRendering = flushSyncWork$1();
		  return previousWasRendering || wasRendering;
		}
		function requestFormReset(form) {
		  var formInst = getInstanceFromNode(form);
		  null !== formInst && 5 === formInst.tag && "form" === formInst.type
		    ? requestFormReset$1(formInst)
		    : previousDispatcher.r(form);
		}
		var globalDocument = "undefined" === typeof document ? null : document;
		function preconnectAs(rel, href, crossOrigin) {
		  var ownerDocument = globalDocument;
		  if (ownerDocument && "string" === typeof href && href) {
		    var limitedEscapedHref =
		      escapeSelectorAttributeValueInsideDoubleQuotes(href);
		    limitedEscapedHref =
		      'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
		    "string" === typeof crossOrigin &&
		      (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
		    preconnectsSet.has(limitedEscapedHref) ||
		      (preconnectsSet.add(limitedEscapedHref),
		      (rel = { rel: rel, crossOrigin: crossOrigin, href: href }),
		      null === ownerDocument.querySelector(limitedEscapedHref) &&
		        ((href = ownerDocument.createElement("link")),
		        setInitialProperties(href, "link", rel),
		        markNodeAsHoistable(href),
		        ownerDocument.head.appendChild(href)));
		  }
		}
		function prefetchDNS(href) {
		  previousDispatcher.D(href);
		  preconnectAs("dns-prefetch", href, null);
		}
		function preconnect(href, crossOrigin) {
		  previousDispatcher.C(href, crossOrigin);
		  preconnectAs("preconnect", href, crossOrigin);
		}
		function preload(href, as, options) {
		  previousDispatcher.L(href, as, options);
		  var ownerDocument = globalDocument;
		  if (ownerDocument && href && as) {
		    var preloadSelector =
		      'link[rel="preload"][as="' +
		      escapeSelectorAttributeValueInsideDoubleQuotes(as) +
		      '"]';
		    "image" === as
		      ? options && options.imageSrcSet
		        ? ((preloadSelector +=
		            '[imagesrcset="' +
		            escapeSelectorAttributeValueInsideDoubleQuotes(
		              options.imageSrcSet
		            ) +
		            '"]'),
		          "string" === typeof options.imageSizes &&
		            (preloadSelector +=
		              '[imagesizes="' +
		              escapeSelectorAttributeValueInsideDoubleQuotes(
		                options.imageSizes
		              ) +
		              '"]'))
		        : (preloadSelector +=
		            '[href="' +
		            escapeSelectorAttributeValueInsideDoubleQuotes(href) +
		            '"]')
		      : (preloadSelector +=
		          '[href="' +
		          escapeSelectorAttributeValueInsideDoubleQuotes(href) +
		          '"]');
		    var key = preloadSelector;
		    switch (as) {
		      case "style":
		        key = getStyleKey(href);
		        break;
		      case "script":
		        key = getScriptKey(href);
		    }
		    preloadPropsMap.has(key) ||
		      ((href = assign(
		        {
		          rel: "preload",
		          href:
		            "image" === as && options && options.imageSrcSet ? void 0 : href,
		          as: as
		        },
		        options
		      )),
		      preloadPropsMap.set(key, href),
		      null !== ownerDocument.querySelector(preloadSelector) ||
		        ("style" === as &&
		          ownerDocument.querySelector(getStylesheetSelectorFromKey(key))) ||
		        ("script" === as &&
		          ownerDocument.querySelector(getScriptSelectorFromKey(key))) ||
		        ((as = ownerDocument.createElement("link")),
		        setInitialProperties(as, "link", href),
		        markNodeAsHoistable(as),
		        ownerDocument.head.appendChild(as)));
		  }
		}
		function preloadModule(href, options) {
		  previousDispatcher.m(href, options);
		  var ownerDocument = globalDocument;
		  if (ownerDocument && href) {
		    var as = options && "string" === typeof options.as ? options.as : "script",
		      preloadSelector =
		        'link[rel="modulepreload"][as="' +
		        escapeSelectorAttributeValueInsideDoubleQuotes(as) +
		        '"][href="' +
		        escapeSelectorAttributeValueInsideDoubleQuotes(href) +
		        '"]',
		      key = preloadSelector;
		    switch (as) {
		      case "audioworklet":
		      case "paintworklet":
		      case "serviceworker":
		      case "sharedworker":
		      case "worker":
		      case "script":
		        key = getScriptKey(href);
		    }
		    if (
		      !preloadPropsMap.has(key) &&
		      ((href = assign({ rel: "modulepreload", href: href }, options)),
		      preloadPropsMap.set(key, href),
		      null === ownerDocument.querySelector(preloadSelector))
		    ) {
		      switch (as) {
		        case "audioworklet":
		        case "paintworklet":
		        case "serviceworker":
		        case "sharedworker":
		        case "worker":
		        case "script":
		          if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))
		            return;
		      }
		      as = ownerDocument.createElement("link");
		      setInitialProperties(as, "link", href);
		      markNodeAsHoistable(as);
		      ownerDocument.head.appendChild(as);
		    }
		  }
		}
		function preinitStyle(href, precedence, options) {
		  previousDispatcher.S(href, precedence, options);
		  var ownerDocument = globalDocument;
		  if (ownerDocument && href) {
		    var styles = getResourcesFromRoot(ownerDocument).hoistableStyles,
		      key = getStyleKey(href);
		    precedence = precedence || "default";
		    var resource = styles.get(key);
		    if (!resource) {
		      var state = { loading: 0, preload: null };
		      if (
		        (resource = ownerDocument.querySelector(
		          getStylesheetSelectorFromKey(key)
		        ))
		      )
		        state.loading = 5;
		      else {
		        href = assign(
		          { rel: "stylesheet", href: href, "data-precedence": precedence },
		          options
		        );
		        (options = preloadPropsMap.get(key)) &&
		          adoptPreloadPropsForStylesheet(href, options);
		        var link = (resource = ownerDocument.createElement("link"));
		        markNodeAsHoistable(link);
		        setInitialProperties(link, "link", href);
		        link._p = new Promise(function (resolve, reject) {
		          link.onload = resolve;
		          link.onerror = reject;
		        });
		        link.addEventListener("load", function () {
		          state.loading |= 1;
		        });
		        link.addEventListener("error", function () {
		          state.loading |= 2;
		        });
		        state.loading |= 4;
		        insertStylesheet(resource, precedence, ownerDocument);
		      }
		      resource = {
		        type: "stylesheet",
		        instance: resource,
		        count: 1,
		        state: state
		      };
		      styles.set(key, resource);
		    }
		  }
		}
		function preinitScript(src, options) {
		  previousDispatcher.X(src, options);
		  var ownerDocument = globalDocument;
		  if (ownerDocument && src) {
		    var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts,
		      key = getScriptKey(src),
		      resource = scripts.get(key);
		    resource ||
		      ((resource = ownerDocument.querySelector(getScriptSelectorFromKey(key))),
		      resource ||
		        ((src = assign({ src: src, async: true }, options)),
		        (options = preloadPropsMap.get(key)) &&
		          adoptPreloadPropsForScript(src, options),
		        (resource = ownerDocument.createElement("script")),
		        markNodeAsHoistable(resource),
		        setInitialProperties(resource, "link", src),
		        ownerDocument.head.appendChild(resource)),
		      (resource = {
		        type: "script",
		        instance: resource,
		        count: 1,
		        state: null
		      }),
		      scripts.set(key, resource));
		  }
		}
		function preinitModuleScript(src, options) {
		  previousDispatcher.M(src, options);
		  var ownerDocument = globalDocument;
		  if (ownerDocument && src) {
		    var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts,
		      key = getScriptKey(src),
		      resource = scripts.get(key);
		    resource ||
		      ((resource = ownerDocument.querySelector(getScriptSelectorFromKey(key))),
		      resource ||
		        ((src = assign({ src: src, async: true, type: "module" }, options)),
		        (options = preloadPropsMap.get(key)) &&
		          adoptPreloadPropsForScript(src, options),
		        (resource = ownerDocument.createElement("script")),
		        markNodeAsHoistable(resource),
		        setInitialProperties(resource, "link", src),
		        ownerDocument.head.appendChild(resource)),
		      (resource = {
		        type: "script",
		        instance: resource,
		        count: 1,
		        state: null
		      }),
		      scripts.set(key, resource));
		  }
		}
		function getResource(type, currentProps, pendingProps, currentResource) {
		  var JSCompiler_inline_result = (JSCompiler_inline_result =
		    rootInstanceStackCursor.current)
		    ? getHoistableRoot(JSCompiler_inline_result)
		    : null;
		  if (!JSCompiler_inline_result) throw Error(formatProdErrorMessage(446));
		  switch (type) {
		    case "meta":
		    case "title":
		      return null;
		    case "style":
		      return "string" === typeof pendingProps.precedence &&
		        "string" === typeof pendingProps.href
		        ? ((currentProps = getStyleKey(pendingProps.href)),
		          (pendingProps = getResourcesFromRoot(
		            JSCompiler_inline_result
		          ).hoistableStyles),
		          (currentResource = pendingProps.get(currentProps)),
		          currentResource ||
		            ((currentResource = {
		              type: "style",
		              instance: null,
		              count: 0,
		              state: null
		            }),
		            pendingProps.set(currentProps, currentResource)),
		          currentResource)
		        : { type: "void", instance: null, count: 0, state: null };
		    case "link":
		      if (
		        "stylesheet" === pendingProps.rel &&
		        "string" === typeof pendingProps.href &&
		        "string" === typeof pendingProps.precedence
		      ) {
		        type = getStyleKey(pendingProps.href);
		        var styles$244 = getResourcesFromRoot(
		            JSCompiler_inline_result
		          ).hoistableStyles,
		          resource$245 = styles$244.get(type);
		        resource$245 ||
		          ((JSCompiler_inline_result =
		            JSCompiler_inline_result.ownerDocument || JSCompiler_inline_result),
		          (resource$245 = {
		            type: "stylesheet",
		            instance: null,
		            count: 0,
		            state: { loading: 0, preload: null }
		          }),
		          styles$244.set(type, resource$245),
		          (styles$244 = JSCompiler_inline_result.querySelector(
		            getStylesheetSelectorFromKey(type)
		          )) &&
		            !styles$244._p &&
		            ((resource$245.instance = styles$244),
		            (resource$245.state.loading = 5)),
		          preloadPropsMap.has(type) ||
		            ((pendingProps = {
		              rel: "preload",
		              as: "style",
		              href: pendingProps.href,
		              crossOrigin: pendingProps.crossOrigin,
		              integrity: pendingProps.integrity,
		              media: pendingProps.media,
		              hrefLang: pendingProps.hrefLang,
		              referrerPolicy: pendingProps.referrerPolicy
		            }),
		            preloadPropsMap.set(type, pendingProps),
		            styles$244 ||
		              preloadStylesheet(
		                JSCompiler_inline_result,
		                type,
		                pendingProps,
		                resource$245.state
		              )));
		        if (currentProps && null === currentResource)
		          throw Error(formatProdErrorMessage(528, ""));
		        return resource$245;
		      }
		      if (currentProps && null !== currentResource)
		        throw Error(formatProdErrorMessage(529, ""));
		      return null;
		    case "script":
		      return (
		        (currentProps = pendingProps.async),
		        (pendingProps = pendingProps.src),
		        "string" === typeof pendingProps &&
		        currentProps &&
		        "function" !== typeof currentProps &&
		        "symbol" !== typeof currentProps
		          ? ((currentProps = getScriptKey(pendingProps)),
		            (pendingProps = getResourcesFromRoot(
		              JSCompiler_inline_result
		            ).hoistableScripts),
		            (currentResource = pendingProps.get(currentProps)),
		            currentResource ||
		              ((currentResource = {
		                type: "script",
		                instance: null,
		                count: 0,
		                state: null
		              }),
		              pendingProps.set(currentProps, currentResource)),
		            currentResource)
		          : { type: "void", instance: null, count: 0, state: null }
		      );
		    default:
		      throw Error(formatProdErrorMessage(444, type));
		  }
		}
		function getStyleKey(href) {
		  return 'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"';
		}
		function getStylesheetSelectorFromKey(key) {
		  return 'link[rel="stylesheet"][' + key + "]";
		}
		function stylesheetPropsFromRawProps(rawProps) {
		  return assign({}, rawProps, {
		    "data-precedence": rawProps.precedence,
		    precedence: null
		  });
		}
		function preloadStylesheet(ownerDocument, key, preloadProps, state) {
		  ownerDocument.querySelector('link[rel="preload"][as="style"][' + key + "]")
		    ? (state.loading = 1)
		    : ((key = ownerDocument.createElement("link")),
		      (state.preload = key),
		      key.addEventListener("load", function () {
		        return (state.loading |= 1);
		      }),
		      key.addEventListener("error", function () {
		        return (state.loading |= 2);
		      }),
		      setInitialProperties(key, "link", preloadProps),
		      markNodeAsHoistable(key),
		      ownerDocument.head.appendChild(key));
		}
		function getScriptKey(src) {
		  return '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]';
		}
		function getScriptSelectorFromKey(key) {
		  return "script[async]" + key;
		}
		function acquireResource(hoistableRoot, resource, props) {
		  resource.count++;
		  if (null === resource.instance)
		    switch (resource.type) {
		      case "style":
		        var instance = hoistableRoot.querySelector(
		          'style[data-href~="' +
		            escapeSelectorAttributeValueInsideDoubleQuotes(props.href) +
		            '"]'
		        );
		        if (instance)
		          return (
		            (resource.instance = instance),
		            markNodeAsHoistable(instance),
		            instance
		          );
		        var styleProps = assign({}, props, {
		          "data-href": props.href,
		          "data-precedence": props.precedence,
		          href: null,
		          precedence: null
		        });
		        instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement(
		          "style"
		        );
		        markNodeAsHoistable(instance);
		        setInitialProperties(instance, "style", styleProps);
		        insertStylesheet(instance, props.precedence, hoistableRoot);
		        return (resource.instance = instance);
		      case "stylesheet":
		        styleProps = getStyleKey(props.href);
		        var instance$250 = hoistableRoot.querySelector(
		          getStylesheetSelectorFromKey(styleProps)
		        );
		        if (instance$250)
		          return (
		            (resource.state.loading |= 4),
		            (resource.instance = instance$250),
		            markNodeAsHoistable(instance$250),
		            instance$250
		          );
		        instance = stylesheetPropsFromRawProps(props);
		        (styleProps = preloadPropsMap.get(styleProps)) &&
		          adoptPreloadPropsForStylesheet(instance, styleProps);
		        instance$250 = (
		          hoistableRoot.ownerDocument || hoistableRoot
		        ).createElement("link");
		        markNodeAsHoistable(instance$250);
		        var linkInstance = instance$250;
		        linkInstance._p = new Promise(function (resolve, reject) {
		          linkInstance.onload = resolve;
		          linkInstance.onerror = reject;
		        });
		        setInitialProperties(instance$250, "link", instance);
		        resource.state.loading |= 4;
		        insertStylesheet(instance$250, props.precedence, hoistableRoot);
		        return (resource.instance = instance$250);
		      case "script":
		        instance$250 = getScriptKey(props.src);
		        if (
		          (styleProps = hoistableRoot.querySelector(
		            getScriptSelectorFromKey(instance$250)
		          ))
		        )
		          return (
		            (resource.instance = styleProps),
		            markNodeAsHoistable(styleProps),
		            styleProps
		          );
		        instance = props;
		        if ((styleProps = preloadPropsMap.get(instance$250)))
		          (instance = assign({}, props)),
		            adoptPreloadPropsForScript(instance, styleProps);
		        hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
		        styleProps = hoistableRoot.createElement("script");
		        markNodeAsHoistable(styleProps);
		        setInitialProperties(styleProps, "link", instance);
		        hoistableRoot.head.appendChild(styleProps);
		        return (resource.instance = styleProps);
		      case "void":
		        return null;
		      default:
		        throw Error(formatProdErrorMessage(443, resource.type));
		    }
		  else
		    "stylesheet" === resource.type &&
		      0 === (resource.state.loading & 4) &&
		      ((instance = resource.instance),
		      (resource.state.loading |= 4),
		      insertStylesheet(instance, props.precedence, hoistableRoot));
		  return resource.instance;
		}
		function insertStylesheet(instance, precedence, root) {
		  for (
		    var nodes = root.querySelectorAll(
		        'link[rel="stylesheet"][data-precedence],style[data-precedence]'
		      ),
		      last = nodes.length ? nodes[nodes.length - 1] : null,
		      prior = last,
		      i = 0;
		    i < nodes.length;
		    i++
		  ) {
		    var node = nodes[i];
		    if (node.dataset.precedence === precedence) prior = node;
		    else if (prior !== last) break;
		  }
		  prior
		    ? prior.parentNode.insertBefore(instance, prior.nextSibling)
		    : ((precedence = 9 === root.nodeType ? root.head : root),
		      precedence.insertBefore(instance, precedence.firstChild));
		}
		function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
		  null == stylesheetProps.crossOrigin &&
		    (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
		  null == stylesheetProps.referrerPolicy &&
		    (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
		  null == stylesheetProps.title && (stylesheetProps.title = preloadProps.title);
		}
		function adoptPreloadPropsForScript(scriptProps, preloadProps) {
		  null == scriptProps.crossOrigin &&
		    (scriptProps.crossOrigin = preloadProps.crossOrigin);
		  null == scriptProps.referrerPolicy &&
		    (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
		  null == scriptProps.integrity &&
		    (scriptProps.integrity = preloadProps.integrity);
		}
		var tagCaches = null;
		function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
		  if (null === tagCaches) {
		    var cache = new Map();
		    var caches = (tagCaches = new Map());
		    caches.set(ownerDocument, cache);
		  } else
		    (caches = tagCaches),
		      (cache = caches.get(ownerDocument)),
		      cache || ((cache = new Map()), caches.set(ownerDocument, cache));
		  if (cache.has(type)) return cache;
		  cache.set(type, null);
		  ownerDocument = ownerDocument.getElementsByTagName(type);
		  for (caches = 0; caches < ownerDocument.length; caches++) {
		    var node = ownerDocument[caches];
		    if (
		      !(
		        node[internalHoistableMarker] ||
		        node[internalInstanceKey] ||
		        ("link" === type && "stylesheet" === node.getAttribute("rel"))
		      ) &&
		      "http://www.w3.org/2000/svg" !== node.namespaceURI
		    ) {
		      var nodeKey = node.getAttribute(keyAttribute) || "";
		      nodeKey = type + nodeKey;
		      var existing = cache.get(nodeKey);
		      existing ? existing.push(node) : cache.set(nodeKey, [node]);
		    }
		  }
		  return cache;
		}
		function mountHoistable(hoistableRoot, type, instance) {
		  hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
		  hoistableRoot.head.insertBefore(
		    instance,
		    "title" === type ? hoistableRoot.querySelector("head > title") : null
		  );
		}
		function isHostHoistableType(type, props, hostContext) {
		  if (1 === hostContext || null != props.itemProp) return false;
		  switch (type) {
		    case "meta":
		    case "title":
		      return true;
		    case "style":
		      if (
		        "string" !== typeof props.precedence ||
		        "string" !== typeof props.href ||
		        "" === props.href
		      )
		        break;
		      return true;
		    case "link":
		      if (
		        "string" !== typeof props.rel ||
		        "string" !== typeof props.href ||
		        "" === props.href ||
		        props.onLoad ||
		        props.onError
		      )
		        break;
		      switch (props.rel) {
		        case "stylesheet":
		          return (
		            (type = props.disabled),
		            "string" === typeof props.precedence && null == type
		          );
		        default:
		          return true;
		      }
		    case "script":
		      if (
		        props.async &&
		        "function" !== typeof props.async &&
		        "symbol" !== typeof props.async &&
		        !props.onLoad &&
		        !props.onError &&
		        props.src &&
		        "string" === typeof props.src
		      )
		        return true;
		  }
		  return false;
		}
		function preloadResource(resource) {
		  return "stylesheet" === resource.type && 0 === (resource.state.loading & 3)
		    ? false
		    : true;
		}
		var suspendedState = null;
		function noop() {}
		function suspendResource(hoistableRoot, resource, props) {
		  if (null === suspendedState) throw Error(formatProdErrorMessage(475));
		  var state = suspendedState;
		  if (
		    "stylesheet" === resource.type &&
		    ("string" !== typeof props.media ||
		      false !== matchMedia(props.media).matches) &&
		    0 === (resource.state.loading & 4)
		  ) {
		    if (null === resource.instance) {
		      var key = getStyleKey(props.href),
		        instance = hoistableRoot.querySelector(
		          getStylesheetSelectorFromKey(key)
		        );
		      if (instance) {
		        hoistableRoot = instance._p;
		        null !== hoistableRoot &&
		          "object" === typeof hoistableRoot &&
		          "function" === typeof hoistableRoot.then &&
		          (state.count++,
		          (state = onUnsuspend.bind(state)),
		          hoistableRoot.then(state, state));
		        resource.state.loading |= 4;
		        resource.instance = instance;
		        markNodeAsHoistable(instance);
		        return;
		      }
		      instance = hoistableRoot.ownerDocument || hoistableRoot;
		      props = stylesheetPropsFromRawProps(props);
		      (key = preloadPropsMap.get(key)) &&
		        adoptPreloadPropsForStylesheet(props, key);
		      instance = instance.createElement("link");
		      markNodeAsHoistable(instance);
		      var linkInstance = instance;
		      linkInstance._p = new Promise(function (resolve, reject) {
		        linkInstance.onload = resolve;
		        linkInstance.onerror = reject;
		      });
		      setInitialProperties(instance, "link", props);
		      resource.instance = instance;
		    }
		    null === state.stylesheets && (state.stylesheets = new Map());
		    state.stylesheets.set(resource, hoistableRoot);
		    (hoistableRoot = resource.state.preload) &&
		      0 === (resource.state.loading & 3) &&
		      (state.count++,
		      (resource = onUnsuspend.bind(state)),
		      hoistableRoot.addEventListener("load", resource),
		      hoistableRoot.addEventListener("error", resource));
		  }
		}
		function waitForCommitToBeReady() {
		  if (null === suspendedState) throw Error(formatProdErrorMessage(475));
		  var state = suspendedState;
		  state.stylesheets &&
		    0 === state.count &&
		    insertSuspendedStylesheets(state, state.stylesheets);
		  return 0 < state.count
		    ? function (commit) {
		        var stylesheetTimer = setTimeout(function () {
		          state.stylesheets &&
		            insertSuspendedStylesheets(state, state.stylesheets);
		          if (state.unsuspend) {
		            var unsuspend = state.unsuspend;
		            state.unsuspend = null;
		            unsuspend();
		          }
		        }, 6e4);
		        state.unsuspend = commit;
		        return function () {
		          state.unsuspend = null;
		          clearTimeout(stylesheetTimer);
		        };
		      }
		    : null;
		}
		function onUnsuspend() {
		  this.count--;
		  if (0 === this.count)
		    if (this.stylesheets) insertSuspendedStylesheets(this, this.stylesheets);
		    else if (this.unsuspend) {
		      var unsuspend = this.unsuspend;
		      this.unsuspend = null;
		      unsuspend();
		    }
		}
		var precedencesByRoot = null;
		function insertSuspendedStylesheets(state, resources) {
		  state.stylesheets = null;
		  null !== state.unsuspend &&
		    (state.count++,
		    (precedencesByRoot = new Map()),
		    resources.forEach(insertStylesheetIntoRoot, state),
		    (precedencesByRoot = null),
		    onUnsuspend.call(state));
		}
		function insertStylesheetIntoRoot(root, resource) {
		  if (!(resource.state.loading & 4)) {
		    var precedences = precedencesByRoot.get(root);
		    if (precedences) var last = precedences.get(null);
		    else {
		      precedences = new Map();
		      precedencesByRoot.set(root, precedences);
		      for (
		        var nodes = root.querySelectorAll(
		            "link[data-precedence],style[data-precedence]"
		          ),
		          i = 0;
		        i < nodes.length;
		        i++
		      ) {
		        var node = nodes[i];
		        if (
		          "LINK" === node.nodeName ||
		          "not all" !== node.getAttribute("media")
		        )
		          precedences.set(node.dataset.precedence, node), (last = node);
		      }
		      last && precedences.set(null, last);
		    }
		    nodes = resource.instance;
		    node = nodes.getAttribute("data-precedence");
		    i = precedences.get(node) || last;
		    i === last && precedences.set(null, nodes);
		    precedences.set(node, nodes);
		    this.count++;
		    last = onUnsuspend.bind(this);
		    nodes.addEventListener("load", last);
		    nodes.addEventListener("error", last);
		    i
		      ? i.parentNode.insertBefore(nodes, i.nextSibling)
		      : ((root = 9 === root.nodeType ? root.head : root),
		        root.insertBefore(nodes, root.firstChild));
		    resource.state.loading |= 4;
		  }
		}
		var HostTransitionContext = {
		  $$typeof: REACT_CONTEXT_TYPE,
		  Provider: null,
		  Consumer: null,
		  _currentValue: sharedNotPendingObject,
		  _currentValue2: sharedNotPendingObject,
		  _threadCount: 0
		};
		function FiberRootNode(
		  containerInfo,
		  tag,
		  hydrate,
		  identifierPrefix,
		  onUncaughtError,
		  onCaughtError,
		  onRecoverableError,
		  formState
		) {
		  this.tag = 1;
		  this.containerInfo = containerInfo;
		  this.pingCache = this.current = this.pendingChildren = null;
		  this.timeoutHandle = -1;
		  this.callbackNode =
		    this.next =
		    this.pendingContext =
		    this.context =
		    this.cancelPendingCommit =
		      null;
		  this.callbackPriority = 0;
		  this.expirationTimes = createLaneMap(-1);
		  this.entangledLanes =
		    this.shellSuspendCounter =
		    this.errorRecoveryDisabledLanes =
		    this.expiredLanes =
		    this.warmLanes =
		    this.pingedLanes =
		    this.suspendedLanes =
		    this.pendingLanes =
		      0;
		  this.entanglements = createLaneMap(0);
		  this.hiddenUpdates = createLaneMap(null);
		  this.identifierPrefix = identifierPrefix;
		  this.onUncaughtError = onUncaughtError;
		  this.onCaughtError = onCaughtError;
		  this.onRecoverableError = onRecoverableError;
		  this.pooledCache = null;
		  this.pooledCacheLanes = 0;
		  this.formState = formState;
		  this.incompleteTransitions = new Map();
		}
		function createFiberRoot(
		  containerInfo,
		  tag,
		  hydrate,
		  initialChildren,
		  hydrationCallbacks,
		  isStrictMode,
		  identifierPrefix,
		  onUncaughtError,
		  onCaughtError,
		  onRecoverableError,
		  transitionCallbacks,
		  formState
		) {
		  containerInfo = new FiberRootNode(
		    containerInfo,
		    tag,
		    hydrate,
		    identifierPrefix,
		    onUncaughtError,
		    onCaughtError,
		    onRecoverableError,
		    formState
		  );
		  tag = 1;
		  true === isStrictMode && (tag |= 24);
		  isStrictMode = createFiberImplClass(3, null, null, tag);
		  containerInfo.current = isStrictMode;
		  isStrictMode.stateNode = containerInfo;
		  tag = createCache();
		  tag.refCount++;
		  containerInfo.pooledCache = tag;
		  tag.refCount++;
		  isStrictMode.memoizedState = {
		    element: initialChildren,
		    isDehydrated: hydrate,
		    cache: tag
		  };
		  initializeUpdateQueue(isStrictMode);
		  return containerInfo;
		}
		function getContextForSubtree(parentComponent) {
		  if (!parentComponent) return emptyContextObject;
		  parentComponent = emptyContextObject;
		  return parentComponent;
		}
		function updateContainerImpl(
		  rootFiber,
		  lane,
		  element,
		  container,
		  parentComponent,
		  callback
		) {
		  parentComponent = getContextForSubtree(parentComponent);
		  null === container.context
		    ? (container.context = parentComponent)
		    : (container.pendingContext = parentComponent);
		  container = createUpdate(lane);
		  container.payload = { element: element };
		  callback = void 0 === callback ? null : callback;
		  null !== callback && (container.callback = callback);
		  element = enqueueUpdate(rootFiber, container, lane);
		  null !== element &&
		    (scheduleUpdateOnFiber(element, rootFiber, lane),
		    entangleTransitions(element, rootFiber, lane));
		}
		function markRetryLaneImpl(fiber, retryLane) {
		  fiber = fiber.memoizedState;
		  if (null !== fiber && null !== fiber.dehydrated) {
		    var a = fiber.retryLane;
		    fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;
		  }
		}
		function markRetryLaneIfNotHydrated(fiber, retryLane) {
		  markRetryLaneImpl(fiber, retryLane);
		  (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
		}
		function attemptContinuousHydration(fiber) {
		  if (13 === fiber.tag) {
		    var root = enqueueConcurrentRenderForLane(fiber, 67108864);
		    null !== root && scheduleUpdateOnFiber(root, fiber, 67108864);
		    markRetryLaneIfNotHydrated(fiber, 67108864);
		  }
		}
		var _enabled = true;
		function dispatchDiscreteEvent(
		  domEventName,
		  eventSystemFlags,
		  container,
		  nativeEvent
		) {
		  var prevTransition = ReactSharedInternals.T;
		  ReactSharedInternals.T = null;
		  var previousPriority = ReactDOMSharedInternals.p;
		  try {
		    (ReactDOMSharedInternals.p = 2),
		      dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
		  } finally {
		    (ReactDOMSharedInternals.p = previousPriority),
		      (ReactSharedInternals.T = prevTransition);
		  }
		}
		function dispatchContinuousEvent(
		  domEventName,
		  eventSystemFlags,
		  container,
		  nativeEvent
		) {
		  var prevTransition = ReactSharedInternals.T;
		  ReactSharedInternals.T = null;
		  var previousPriority = ReactDOMSharedInternals.p;
		  try {
		    (ReactDOMSharedInternals.p = 8),
		      dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
		  } finally {
		    (ReactDOMSharedInternals.p = previousPriority),
		      (ReactSharedInternals.T = prevTransition);
		  }
		}
		function dispatchEvent(
		  domEventName,
		  eventSystemFlags,
		  targetContainer,
		  nativeEvent
		) {
		  if (_enabled) {
		    var blockedOn = findInstanceBlockingEvent(nativeEvent);
		    if (null === blockedOn)
		      dispatchEventForPluginEventSystem(
		        domEventName,
		        eventSystemFlags,
		        nativeEvent,
		        return_targetInst,
		        targetContainer
		      ),
		        clearIfContinuousEvent(domEventName, nativeEvent);
		    else if (
		      queueIfContinuousEvent(
		        blockedOn,
		        domEventName,
		        eventSystemFlags,
		        targetContainer,
		        nativeEvent
		      )
		    )
		      nativeEvent.stopPropagation();
		    else if (
		      (clearIfContinuousEvent(domEventName, nativeEvent),
		      eventSystemFlags & 4 &&
		        -1 < discreteReplayableEvents.indexOf(domEventName))
		    ) {
		      for (; null !== blockedOn; ) {
		        var fiber = getInstanceFromNode(blockedOn);
		        if (null !== fiber)
		          switch (fiber.tag) {
		            case 3:
		              fiber = fiber.stateNode;
		              if (fiber.current.memoizedState.isDehydrated) {
		                var lanes = getHighestPriorityLanes(fiber.pendingLanes);
		                if (0 !== lanes) {
		                  var root = fiber;
		                  root.pendingLanes |= 2;
		                  for (root.entangledLanes |= 2; lanes; ) {
		                    var lane = 1 << (31 - clz32(lanes));
		                    root.entanglements[1] |= lane;
		                    lanes &= ~lane;
		                  }
		                  ensureRootIsScheduled(fiber);
		                  0 === (executionContext & 6) &&
		                    ((workInProgressRootRenderTargetTime = now() + 500),
		                    flushSyncWorkAcrossRoots_impl(0));
		                }
		              }
		              break;
		            case 13:
		              (root = enqueueConcurrentRenderForLane(fiber, 2)),
		                null !== root && scheduleUpdateOnFiber(root, fiber, 2),
		                flushSyncWork$1(),
		                markRetryLaneIfNotHydrated(fiber, 2);
		          }
		        fiber = findInstanceBlockingEvent(nativeEvent);
		        null === fiber &&
		          dispatchEventForPluginEventSystem(
		            domEventName,
		            eventSystemFlags,
		            nativeEvent,
		            return_targetInst,
		            targetContainer
		          );
		        if (fiber === blockedOn) break;
		        blockedOn = fiber;
		      }
		      null !== blockedOn && nativeEvent.stopPropagation();
		    } else
		      dispatchEventForPluginEventSystem(
		        domEventName,
		        eventSystemFlags,
		        nativeEvent,
		        null,
		        targetContainer
		      );
		  }
		}
		function findInstanceBlockingEvent(nativeEvent) {
		  nativeEvent = getEventTarget(nativeEvent);
		  return findInstanceBlockingTarget(nativeEvent);
		}
		var return_targetInst = null;
		function findInstanceBlockingTarget(targetNode) {
		  return_targetInst = null;
		  targetNode = getClosestInstanceFromNode(targetNode);
		  if (null !== targetNode) {
		    var nearestMounted = getNearestMountedFiber(targetNode);
		    if (null === nearestMounted) targetNode = null;
		    else {
		      var tag = nearestMounted.tag;
		      if (13 === tag) {
		        targetNode = getSuspenseInstanceFromFiber(nearestMounted);
		        if (null !== targetNode) return targetNode;
		        targetNode = null;
		      } else if (3 === tag) {
		        if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
		          return 3 === nearestMounted.tag
		            ? nearestMounted.stateNode.containerInfo
		            : null;
		        targetNode = null;
		      } else nearestMounted !== targetNode && (targetNode = null);
		    }
		  }
		  return_targetInst = targetNode;
		  return null;
		}
		function getEventPriority(domEventName) {
		  switch (domEventName) {
		    case "beforetoggle":
		    case "cancel":
		    case "click":
		    case "close":
		    case "contextmenu":
		    case "copy":
		    case "cut":
		    case "auxclick":
		    case "dblclick":
		    case "dragend":
		    case "dragstart":
		    case "drop":
		    case "focusin":
		    case "focusout":
		    case "input":
		    case "invalid":
		    case "keydown":
		    case "keypress":
		    case "keyup":
		    case "mousedown":
		    case "mouseup":
		    case "paste":
		    case "pause":
		    case "play":
		    case "pointercancel":
		    case "pointerdown":
		    case "pointerup":
		    case "ratechange":
		    case "reset":
		    case "resize":
		    case "seeked":
		    case "submit":
		    case "toggle":
		    case "touchcancel":
		    case "touchend":
		    case "touchstart":
		    case "volumechange":
		    case "change":
		    case "selectionchange":
		    case "textInput":
		    case "compositionstart":
		    case "compositionend":
		    case "compositionupdate":
		    case "beforeblur":
		    case "afterblur":
		    case "beforeinput":
		    case "blur":
		    case "fullscreenchange":
		    case "focus":
		    case "hashchange":
		    case "popstate":
		    case "select":
		    case "selectstart":
		      return 2;
		    case "drag":
		    case "dragenter":
		    case "dragexit":
		    case "dragleave":
		    case "dragover":
		    case "mousemove":
		    case "mouseout":
		    case "mouseover":
		    case "pointermove":
		    case "pointerout":
		    case "pointerover":
		    case "scroll":
		    case "touchmove":
		    case "wheel":
		    case "mouseenter":
		    case "mouseleave":
		    case "pointerenter":
		    case "pointerleave":
		      return 8;
		    case "message":
		      switch (getCurrentPriorityLevel()) {
		        case ImmediatePriority:
		          return 2;
		        case UserBlockingPriority:
		          return 8;
		        case NormalPriority$1:
		        case LowPriority:
		          return 32;
		        case IdlePriority:
		          return 268435456;
		        default:
		          return 32;
		      }
		    default:
		      return 32;
		  }
		}
		var hasScheduledReplayAttempt = false,
		  queuedFocus = null,
		  queuedDrag = null,
		  queuedMouse = null,
		  queuedPointers = new Map(),
		  queuedPointerCaptures = new Map(),
		  queuedExplicitHydrationTargets = [],
		  discreteReplayableEvents =
		    "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
		      " "
		    );
		function clearIfContinuousEvent(domEventName, nativeEvent) {
		  switch (domEventName) {
		    case "focusin":
		    case "focusout":
		      queuedFocus = null;
		      break;
		    case "dragenter":
		    case "dragleave":
		      queuedDrag = null;
		      break;
		    case "mouseover":
		    case "mouseout":
		      queuedMouse = null;
		      break;
		    case "pointerover":
		    case "pointerout":
		      queuedPointers.delete(nativeEvent.pointerId);
		      break;
		    case "gotpointercapture":
		    case "lostpointercapture":
		      queuedPointerCaptures.delete(nativeEvent.pointerId);
		  }
		}
		function accumulateOrCreateContinuousQueuedReplayableEvent(
		  existingQueuedEvent,
		  blockedOn,
		  domEventName,
		  eventSystemFlags,
		  targetContainer,
		  nativeEvent
		) {
		  if (
		    null === existingQueuedEvent ||
		    existingQueuedEvent.nativeEvent !== nativeEvent
		  )
		    return (
		      (existingQueuedEvent = {
		        blockedOn: blockedOn,
		        domEventName: domEventName,
		        eventSystemFlags: eventSystemFlags,
		        nativeEvent: nativeEvent,
		        targetContainers: [targetContainer]
		      }),
		      null !== blockedOn &&
		        ((blockedOn = getInstanceFromNode(blockedOn)),
		        null !== blockedOn && attemptContinuousHydration(blockedOn)),
		      existingQueuedEvent
		    );
		  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
		  blockedOn = existingQueuedEvent.targetContainers;
		  null !== targetContainer &&
		    -1 === blockedOn.indexOf(targetContainer) &&
		    blockedOn.push(targetContainer);
		  return existingQueuedEvent;
		}
		function queueIfContinuousEvent(
		  blockedOn,
		  domEventName,
		  eventSystemFlags,
		  targetContainer,
		  nativeEvent
		) {
		  switch (domEventName) {
		    case "focusin":
		      return (
		        (queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
		          queuedFocus,
		          blockedOn,
		          domEventName,
		          eventSystemFlags,
		          targetContainer,
		          nativeEvent
		        )),
		        true
		      );
		    case "dragenter":
		      return (
		        (queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
		          queuedDrag,
		          blockedOn,
		          domEventName,
		          eventSystemFlags,
		          targetContainer,
		          nativeEvent
		        )),
		        true
		      );
		    case "mouseover":
		      return (
		        (queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
		          queuedMouse,
		          blockedOn,
		          domEventName,
		          eventSystemFlags,
		          targetContainer,
		          nativeEvent
		        )),
		        true
		      );
		    case "pointerover":
		      var pointerId = nativeEvent.pointerId;
		      queuedPointers.set(
		        pointerId,
		        accumulateOrCreateContinuousQueuedReplayableEvent(
		          queuedPointers.get(pointerId) || null,
		          blockedOn,
		          domEventName,
		          eventSystemFlags,
		          targetContainer,
		          nativeEvent
		        )
		      );
		      return true;
		    case "gotpointercapture":
		      return (
		        (pointerId = nativeEvent.pointerId),
		        queuedPointerCaptures.set(
		          pointerId,
		          accumulateOrCreateContinuousQueuedReplayableEvent(
		            queuedPointerCaptures.get(pointerId) || null,
		            blockedOn,
		            domEventName,
		            eventSystemFlags,
		            targetContainer,
		            nativeEvent
		          )
		        ),
		        true
		      );
		  }
		  return false;
		}
		function attemptExplicitHydrationTarget(queuedTarget) {
		  var targetInst = getClosestInstanceFromNode(queuedTarget.target);
		  if (null !== targetInst) {
		    var nearestMounted = getNearestMountedFiber(targetInst);
		    if (null !== nearestMounted)
		      if (((targetInst = nearestMounted.tag), 13 === targetInst)) {
		        if (
		          ((targetInst = getSuspenseInstanceFromFiber(nearestMounted)),
		          null !== targetInst)
		        ) {
		          queuedTarget.blockedOn = targetInst;
		          runWithPriority(queuedTarget.priority, function () {
		            if (13 === nearestMounted.tag) {
		              var lane = requestUpdateLane();
		              lane = getBumpedLaneForHydrationByLane(lane);
		              var root = enqueueConcurrentRenderForLane(nearestMounted, lane);
		              null !== root &&
		                scheduleUpdateOnFiber(root, nearestMounted, lane);
		              markRetryLaneIfNotHydrated(nearestMounted, lane);
		            }
		          });
		          return;
		        }
		      } else if (
		        3 === targetInst &&
		        nearestMounted.stateNode.current.memoizedState.isDehydrated
		      ) {
		        queuedTarget.blockedOn =
		          3 === nearestMounted.tag
		            ? nearestMounted.stateNode.containerInfo
		            : null;
		        return;
		      }
		  }
		  queuedTarget.blockedOn = null;
		}
		function attemptReplayContinuousQueuedEvent(queuedEvent) {
		  if (null !== queuedEvent.blockedOn) return false;
		  for (
		    var targetContainers = queuedEvent.targetContainers;
		    0 < targetContainers.length;

		  ) {
		    var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
		    if (null === nextBlockedOn) {
		      nextBlockedOn = queuedEvent.nativeEvent;
		      var nativeEventClone = new nextBlockedOn.constructor(
		        nextBlockedOn.type,
		        nextBlockedOn
		      );
		      currentReplayingEvent = nativeEventClone;
		      nextBlockedOn.target.dispatchEvent(nativeEventClone);
		      currentReplayingEvent = null;
		    } else
		      return (
		        (targetContainers = getInstanceFromNode(nextBlockedOn)),
		        null !== targetContainers &&
		          attemptContinuousHydration(targetContainers),
		        (queuedEvent.blockedOn = nextBlockedOn),
		        false
		      );
		    targetContainers.shift();
		  }
		  return true;
		}
		function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
		  attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
		}
		function replayUnblockedEvents() {
		  hasScheduledReplayAttempt = false;
		  null !== queuedFocus &&
		    attemptReplayContinuousQueuedEvent(queuedFocus) &&
		    (queuedFocus = null);
		  null !== queuedDrag &&
		    attemptReplayContinuousQueuedEvent(queuedDrag) &&
		    (queuedDrag = null);
		  null !== queuedMouse &&
		    attemptReplayContinuousQueuedEvent(queuedMouse) &&
		    (queuedMouse = null);
		  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
		  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
		}
		function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
		  queuedEvent.blockedOn === unblocked &&
		    ((queuedEvent.blockedOn = null),
		    hasScheduledReplayAttempt ||
		      ((hasScheduledReplayAttempt = true),
		      Scheduler.unstable_scheduleCallback(
		        Scheduler.unstable_NormalPriority,
		        replayUnblockedEvents
		      )));
		}
		var lastScheduledReplayQueue = null;
		function scheduleReplayQueueIfNeeded(formReplayingQueue) {
		  lastScheduledReplayQueue !== formReplayingQueue &&
		    ((lastScheduledReplayQueue = formReplayingQueue),
		    Scheduler.unstable_scheduleCallback(
		      Scheduler.unstable_NormalPriority,
		      function () {
		        lastScheduledReplayQueue === formReplayingQueue &&
		          (lastScheduledReplayQueue = null);
		        for (var i = 0; i < formReplayingQueue.length; i += 3) {
		          var form = formReplayingQueue[i],
		            submitterOrAction = formReplayingQueue[i + 1],
		            formData = formReplayingQueue[i + 2];
		          if ("function" !== typeof submitterOrAction)
		            if (null === findInstanceBlockingTarget(submitterOrAction || form))
		              continue;
		            else break;
		          var formInst = getInstanceFromNode(form);
		          null !== formInst &&
		            (formReplayingQueue.splice(i, 3),
		            (i -= 3),
		            startHostTransition(
		              formInst,
		              {
		                pending: true,
		                data: formData,
		                method: form.method,
		                action: submitterOrAction
		              },
		              submitterOrAction,
		              formData
		            ));
		        }
		      }
		    ));
		}
		function retryIfBlockedOn(unblocked) {
		  function unblock(queuedEvent) {
		    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
		  }
		  null !== queuedFocus && scheduleCallbackIfUnblocked(queuedFocus, unblocked);
		  null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
		  null !== queuedMouse && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
		  queuedPointers.forEach(unblock);
		  queuedPointerCaptures.forEach(unblock);
		  for (var i = 0; i < queuedExplicitHydrationTargets.length; i++) {
		    var queuedTarget = queuedExplicitHydrationTargets[i];
		    queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
		  }
		  for (
		    ;
		    0 < queuedExplicitHydrationTargets.length &&
		    ((i = queuedExplicitHydrationTargets[0]), null === i.blockedOn);

		  )
		    attemptExplicitHydrationTarget(i),
		      null === i.blockedOn && queuedExplicitHydrationTargets.shift();
		  i = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
		  if (null != i)
		    for (queuedTarget = 0; queuedTarget < i.length; queuedTarget += 3) {
		      var form = i[queuedTarget],
		        submitterOrAction = i[queuedTarget + 1],
		        formProps = form[internalPropsKey] || null;
		      if ("function" === typeof submitterOrAction)
		        formProps || scheduleReplayQueueIfNeeded(i);
		      else if (formProps) {
		        var action = null;
		        if (submitterOrAction && submitterOrAction.hasAttribute("formAction"))
		          if (
		            ((form = submitterOrAction),
		            (formProps = submitterOrAction[internalPropsKey] || null))
		          )
		            action = formProps.formAction;
		          else {
		            if (null !== findInstanceBlockingTarget(form)) continue;
		          }
		        else action = formProps.action;
		        "function" === typeof action
		          ? (i[queuedTarget + 1] = action)
		          : (i.splice(queuedTarget, 3), (queuedTarget -= 3));
		        scheduleReplayQueueIfNeeded(i);
		      }
		    }
		}
		function ReactDOMRoot(internalRoot) {
		  this._internalRoot = internalRoot;
		}
		ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render =
		  function (children) {
		    var root = this._internalRoot;
		    if (null === root) throw Error(formatProdErrorMessage(409));
		    var current = root.current,
		      lane = requestUpdateLane();
		    updateContainerImpl(current, lane, children, root, null, null);
		  };
		ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount =
		  function () {
		    var root = this._internalRoot;
		    if (null !== root) {
		      this._internalRoot = null;
		      var container = root.containerInfo;
		      updateContainerImpl(root.current, 2, null, root, null, null);
		      flushSyncWork$1();
		      container[internalContainerInstanceKey] = null;
		    }
		  };
		function ReactDOMHydrationRoot(internalRoot) {
		  this._internalRoot = internalRoot;
		}
		ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function (target) {
		  if (target) {
		    var updatePriority = resolveUpdatePriority();
		    target = { blockedOn: null, target: target, priority: updatePriority };
		    for (
		      var i = 0;
		      i < queuedExplicitHydrationTargets.length &&
		      0 !== updatePriority &&
		      updatePriority < queuedExplicitHydrationTargets[i].priority;
		      i++
		    );
		    queuedExplicitHydrationTargets.splice(i, 0, target);
		    0 === i && attemptExplicitHydrationTarget(target);
		  }
		};
		var isomorphicReactPackageVersion$jscomp$inline_1785 = React.version;
		if (
		  "19.1.0" !==
		  isomorphicReactPackageVersion$jscomp$inline_1785
		)
		  throw Error(
		    formatProdErrorMessage(
		      527,
		      isomorphicReactPackageVersion$jscomp$inline_1785,
		      "19.1.0"
		    )
		  );
		ReactDOMSharedInternals.findDOMNode = function (componentOrElement) {
		  var fiber = componentOrElement._reactInternals;
		  if (void 0 === fiber) {
		    if ("function" === typeof componentOrElement.render)
		      throw Error(formatProdErrorMessage(188));
		    componentOrElement = Object.keys(componentOrElement).join(",");
		    throw Error(formatProdErrorMessage(268, componentOrElement));
		  }
		  componentOrElement = findCurrentFiberUsingSlowPath(fiber);
		  componentOrElement =
		    null !== componentOrElement
		      ? findCurrentHostFiberImpl(componentOrElement)
		      : null;
		  componentOrElement =
		    null === componentOrElement ? null : componentOrElement.stateNode;
		  return componentOrElement;
		};
		var internals$jscomp$inline_2256 = {
		  bundleType: 0,
		  version: "19.1.0",
		  rendererPackageName: "react-dom",
		  currentDispatcherRef: ReactSharedInternals,
		  reconcilerVersion: "19.1.0"
		};
		if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
		  var hook$jscomp$inline_2257 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
		  if (
		    !hook$jscomp$inline_2257.isDisabled &&
		    hook$jscomp$inline_2257.supportsFiber
		  )
		    try {
		      (rendererID = hook$jscomp$inline_2257.inject(
		        internals$jscomp$inline_2256
		      )),
		        (injectedHook = hook$jscomp$inline_2257);
		    } catch (err) {}
		}
		reactDomClient_production.createRoot = function (container, options) {
		  if (!isValidContainer(container)) throw Error(formatProdErrorMessage(299));
		  var isStrictMode = false,
		    identifierPrefix = "",
		    onUncaughtError = defaultOnUncaughtError,
		    onCaughtError = defaultOnCaughtError,
		    onRecoverableError = defaultOnRecoverableError,
		    transitionCallbacks = null;
		  null !== options &&
		    void 0 !== options &&
		    (true === options.unstable_strictMode && (isStrictMode = true),
		    void 0 !== options.identifierPrefix &&
		      (identifierPrefix = options.identifierPrefix),
		    void 0 !== options.onUncaughtError &&
		      (onUncaughtError = options.onUncaughtError),
		    void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError),
		    void 0 !== options.onRecoverableError &&
		      (onRecoverableError = options.onRecoverableError),
		    void 0 !== options.unstable_transitionCallbacks &&
		      (transitionCallbacks = options.unstable_transitionCallbacks));
		  options = createFiberRoot(
		    container,
		    1,
		    false,
		    null,
		    null,
		    isStrictMode,
		    identifierPrefix,
		    onUncaughtError,
		    onCaughtError,
		    onRecoverableError,
		    transitionCallbacks,
		    null
		  );
		  container[internalContainerInstanceKey] = options.current;
		  listenToAllSupportedEvents(container);
		  return new ReactDOMRoot(options);
		};
		reactDomClient_production.hydrateRoot = function (container, initialChildren, options) {
		  if (!isValidContainer(container)) throw Error(formatProdErrorMessage(299));
		  var isStrictMode = false,
		    identifierPrefix = "",
		    onUncaughtError = defaultOnUncaughtError,
		    onCaughtError = defaultOnCaughtError,
		    onRecoverableError = defaultOnRecoverableError,
		    transitionCallbacks = null,
		    formState = null;
		  null !== options &&
		    void 0 !== options &&
		    (true === options.unstable_strictMode && (isStrictMode = true),
		    void 0 !== options.identifierPrefix &&
		      (identifierPrefix = options.identifierPrefix),
		    void 0 !== options.onUncaughtError &&
		      (onUncaughtError = options.onUncaughtError),
		    void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError),
		    void 0 !== options.onRecoverableError &&
		      (onRecoverableError = options.onRecoverableError),
		    void 0 !== options.unstable_transitionCallbacks &&
		      (transitionCallbacks = options.unstable_transitionCallbacks),
		    void 0 !== options.formState && (formState = options.formState));
		  initialChildren = createFiberRoot(
		    container,
		    1,
		    true,
		    initialChildren,
		    null != options ? options : null,
		    isStrictMode,
		    identifierPrefix,
		    onUncaughtError,
		    onCaughtError,
		    onRecoverableError,
		    transitionCallbacks,
		    formState
		  );
		  initialChildren.context = getContextForSubtree(null);
		  options = initialChildren.current;
		  isStrictMode = requestUpdateLane();
		  isStrictMode = getBumpedLaneForHydrationByLane(isStrictMode);
		  identifierPrefix = createUpdate(isStrictMode);
		  identifierPrefix.callback = null;
		  enqueueUpdate(options, identifierPrefix, isStrictMode);
		  options = isStrictMode;
		  initialChildren.current.lanes = options;
		  markRootUpdated$1(initialChildren, options);
		  ensureRootIsScheduled(initialChildren);
		  container[internalContainerInstanceKey] = initialChildren.current;
		  listenToAllSupportedEvents(container);
		  return new ReactDOMHydrationRoot(initialChildren);
		};
		reactDomClient_production.version = "19.1.0";
		return reactDomClient_production;
	}

	var hasRequiredClient;

	function requireClient () {
		if (hasRequiredClient) return client.exports;
		hasRequiredClient = 1;

		function checkDCE() {
		  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		  if (
		    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
		    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
		  ) {
		    return;
		  }
		  try {
		    // Verify that the code above has been dead code eliminated (DCE'd).
		    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
		  } catch (err) {
		    // DevTools shouldn't crash React, no matter what.
		    // We should still report in case we break this code.
		    console.error(err);
		  }
		}

		{
		  // DCE check should happen before ReactDOM bundle executes so that
		  // DevTools can report bad minification during injection.
		  checkDCE();
		  client.exports = requireReactDomClient_production();
		}
		return client.exports;
	}

	var clientExports = requireClient();

	function isHTMLElement$1(el) {
	  return el != null && typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
	}
	function isBrowser$2() {
	  return Boolean(globalThis?.document);
	}
	function isHiddenElement(element) {
	  if (element.parentElement && isHiddenElement(element.parentElement))
	    return true;
	  return element.hidden;
	}
	function isContentEditableElement(element) {
	  const value = element.getAttribute("contenteditable");
	  return value !== "false" && value != null;
	}
	function isDisabledElement(element) {
	  return Boolean(element.getAttribute("disabled")) === true || Boolean(element.getAttribute("aria-disabled")) === true;
	}

	function assignAfter(target, ...sources) {
	  if (target == null) {
	    throw new TypeError("Cannot convert undefined or null to object");
	  }
	  const result = { ...target };
	  for (const nextSource of sources) {
	    if (nextSource == null)
	      continue;
	    for (const nextKey in nextSource) {
	      if (!Object.prototype.hasOwnProperty.call(nextSource, nextKey))
	        continue;
	      if (nextKey in result)
	        delete result[nextKey];
	      result[nextKey] = nextSource[nextKey];
	    }
	  }
	  return result;
	}

	const dataAttr = (condition) => condition ? "" : void 0;
	const ariaAttr = (condition) => condition ? true : void 0;

	function isArray(value) {
	  return Array.isArray(value);
	}
	function isObject$1(value) {
	  const type = typeof value;
	  return value != null && (type === "object" || type === "function") && !isArray(value);
	}

	function getLastItem(array) {
	  const length = array == null ? 0 : array.length;
	  return length ? array[length - 1] : void 0;
	}
	function analyzeCSSValue$1(value) {
	  const num = parseFloat(value.toString());
	  const unit = value.toString().replace(String(num), "");
	  return { unitless: !unit, value: num, unit };
	}
	function px$1(value) {
	  if (value == null)
	    return value;
	  const { unitless } = analyzeCSSValue$1(value);
	  return unitless || typeof value === "number" ? `${value}px` : value;
	}
	const sortByBreakpointValue = (a, b) => parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;
	const sortBps = (breakpoints) => Object.fromEntries(Object.entries(breakpoints).sort(sortByBreakpointValue));
	function normalize$1(breakpoints) {
	  const sorted = sortBps(breakpoints);
	  return Object.assign(Object.values(sorted), sorted);
	}
	function keys(breakpoints) {
	  const value = Object.keys(sortBps(breakpoints));
	  return new Set(value);
	}
	function subtract$2(value) {
	  if (!value)
	    return value;
	  value = px$1(value) ?? value;
	  const OFFSET = -0.02;
	  return typeof value === "number" ? `${value + OFFSET}` : value.replace(/(\d+\.?\d*)/u, (m) => `${parseFloat(m) + OFFSET}`);
	}
	function toMediaQueryString(min, max) {
	  const query = ["@media screen"];
	  if (min)
	    query.push("and", `(min-width: ${px$1(min)})`);
	  if (max)
	    query.push("and", `(max-width: ${px$1(max)})`);
	  return query.join(" ");
	}
	function analyzeBreakpoints(breakpoints) {
	  if (!breakpoints)
	    return null;
	  breakpoints.base = breakpoints.base ?? "0px";
	  const normalized = normalize$1(breakpoints);
	  const queries = Object.entries(breakpoints).sort(sortByBreakpointValue).map(([breakpoint, minW], index, entry) => {
	    let [, maxW] = entry[index + 1] ?? [];
	    maxW = parseFloat(maxW) > 0 ? subtract$2(maxW) : void 0;
	    return {
	      _minW: subtract$2(minW),
	      breakpoint,
	      minW,
	      maxW,
	      maxWQuery: toMediaQueryString(null, maxW),
	      minWQuery: toMediaQueryString(minW),
	      minMaxQuery: toMediaQueryString(minW, maxW)
	    };
	  });
	  const _keys = keys(breakpoints);
	  const _keysArr = Array.from(_keys.values());
	  return {
	    keys: _keys,
	    normalized,
	    isResponsive(test) {
	      const keys2 = Object.keys(test);
	      return keys2.length > 0 && keys2.every((key) => _keys.has(key));
	    },
	    asObject: sortBps(breakpoints),
	    asArray: normalize$1(breakpoints),
	    details: queries,
	    get(key) {
	      return queries.find((q) => q.breakpoint === key);
	    },
	    media: [
	      null,
	      ...normalized.map((minW) => toMediaQueryString(minW)).slice(1)
	    ],
	    /**
	     * Converts the object responsive syntax to array syntax
	     *
	     * @example
	     * toArrayValue({ base: 1, sm: 2, md: 3 }) // => [1, 2, 3]
	     */
	    toArrayValue(test) {
	      if (!isObject$1(test)) {
	        throw new Error("toArrayValue: value must be an object");
	      }
	      const result = _keysArr.map((bp) => test[bp] ?? null);
	      while (getLastItem(result) === null) {
	        result.pop();
	      }
	      return result;
	    },
	    /**
	     * Converts the array responsive syntax to object syntax
	     *
	     * @example
	     * toObjectValue([1, 2, 3]) // => { base: 1, sm: 2, md: 3 }
	     */
	    toObjectValue(test) {
	      if (!Array.isArray(test)) {
	        throw new Error("toObjectValue: value must be an array");
	      }
	      return test.reduce(
	        (acc, value, index) => {
	          const key = _keysArr[index];
	          if (key != null && value != null)
	            acc[key] = value;
	          return acc;
	        },
	        {}
	      );
	    }
	  };
	}

	function callAllHandlers(...fns) {
	  return function func(event) {
	    fns.some((fn) => {
	      fn?.(event);
	      return event?.defaultPrevented;
	    });
	  };
	}

	var reactExports = requireReact();
	var React = /*@__PURE__*/getDefaultExportFromCjs(reactExports);

	var React$1 = /*#__PURE__*/_mergeNamespaces({
		__proto__: null,
		default: React
	}, [reactExports]);

	function getValidChildren(children) {
	  return reactExports.Children.toArray(children).filter(
	    (child) => reactExports.isValidElement(child)
	  );
	}

	function compact(object) {
	  const clone = Object.assign({}, object);
	  for (let key in clone) {
	    if (clone[key] === void 0)
	      delete clone[key];
	  }
	  return clone;
	}

	function getErrorMessage(hook, provider) {
	  return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
	}
	function createContext(options = {}) {
	  const {
	    name,
	    strict = true,
	    hookName = "useContext",
	    providerName = "Provider",
	    errorMessage,
	    defaultValue
	  } = options;
	  const Context = reactExports.createContext(defaultValue);
	  Context.displayName = name;
	  function useContext$1() {
	    const context = reactExports.useContext(Context);
	    if (!context && strict) {
	      const error = new Error(
	        errorMessage ?? getErrorMessage(hookName, providerName)
	      );
	      error.name = "ContextError";
	      Error.captureStackTrace?.(error, useContext$1);
	      throw error;
	    }
	    return context;
	  }
	  return [Context.Provider, useContext$1, Context];
	}

	const cx = (...classNames) => classNames.filter(Boolean).join(" ");

	const hasTabIndex = (element) => element.hasAttribute("tabindex");
	function isFocusable(element) {
	  if (!isHTMLElement$1(element) || isHiddenElement(element) || isDisabledElement(element)) {
	    return false;
	  }
	  const { localName } = element;
	  const focusableTags = ["input", "select", "textarea", "button"];
	  if (focusableTags.indexOf(localName) >= 0)
	    return true;
	  const others = {
	    a: () => element.hasAttribute("href"),
	    audio: () => element.hasAttribute("controls"),
	    video: () => element.hasAttribute("controls")
	  };
	  if (localName in others) {
	    return others[localName]();
	  }
	  if (isContentEditableElement(element))
	    return true;
	  return hasTabIndex(element);
	}

	const focusableElList = [
	  "input:not(:disabled):not([disabled])",
	  "select:not(:disabled):not([disabled])",
	  "textarea:not(:disabled):not([disabled])",
	  "embed",
	  "iframe",
	  "object",
	  "a[href]",
	  "area[href]",
	  "button:not(:disabled):not([disabled])",
	  "[tabindex]",
	  "audio[controls]",
	  "video[controls]",
	  "*[tabindex]:not([aria-disabled])",
	  "*[contenteditable]"
	];
	const focusableElSelector = focusableElList.join();
	const isVisible = (el) => el.offsetWidth > 0 && el.offsetHeight > 0;
	function getAllFocusable(container) {
	  const focusableEls = Array.from(
	    container.querySelectorAll(focusableElSelector)
	  );
	  focusableEls.unshift(container);
	  return focusableEls.filter((el) => isFocusable(el) && isVisible(el));
	}

	function get$2(obj, path, fallback, index) {
	  const key = typeof path === "string" ? path.split(".") : [path];
	  for (index = 0; index < key.length; index += 1) {
	    if (!obj)
	      break;
	    obj = obj[key[index]];
	  }
	  return obj === void 0 ? fallback : obj;
	}
	const memoize$2 = (fn) => {
	  const cache = /* @__PURE__ */ new WeakMap();
	  const memoizedFn = (obj, path, fallback, index) => {
	    if (typeof obj === "undefined") {
	      return fn(obj, path, fallback);
	    }
	    if (!cache.has(obj)) {
	      cache.set(obj, /* @__PURE__ */ new Map());
	    }
	    const map = cache.get(obj);
	    if (map.has(path)) {
	      return map.get(path);
	    }
	    const value = fn(obj, path, fallback, index);
	    map.set(path, value);
	    return value;
	  };
	  return memoizedFn;
	};
	const memoizedGet$1 = memoize$2(get$2);

	const interopDefault = (mod) => mod.default || mod;

	function omit(object, keysToOmit = []) {
	  const clone = Object.assign({}, object);
	  for (const key of keysToOmit) {
	    if (key in clone) {
	      delete clone[key];
	    }
	  }
	  return clone;
	}

	function pick(object, keysToPick) {
	  const result = {};
	  for (const key of keysToPick) {
	    if (key in object) {
	      result[key] = object[key];
	    }
	  }
	  return result;
	}

	function mapResponsive(prop, mapper) {
	  if (Array.isArray(prop)) {
	    return prop.map((item) => item === null ? null : mapper(item));
	  }
	  if (isObject$1(prop)) {
	    return Object.keys(prop).reduce((result, key) => {
	      result[key] = mapper(prop[key]);
	      return result;
	    }, {});
	  }
	  if (prop != null) {
	    return mapper(prop);
	  }
	  return null;
	}

	const isFunction$2 = (value) => typeof value === "function";
	function runIfFn$1(valueOrFn, ...args) {
	  return isFunction$2(valueOrFn) ? valueOrFn(...args) : valueOrFn;
	}

	function split(object, keys) {
	  const picked = {};
	  const omitted = {};
	  for (const [key, value] of Object.entries(object)) {
	    if (keys.includes(key))
	      picked[key] = value;
	    else
	      omitted[key] = value;
	  }
	  return [picked, omitted];
	}

	function splitProps(props, ...keys) {
	  const descriptors = Object.getOwnPropertyDescriptors(props);
	  const dKeys = Object.keys(descriptors);
	  const split = (k) => {
	    const clone = {};
	    for (let i = 0; i < k.length; i++) {
	      const key = k[i];
	      if (descriptors[key]) {
	        Object.defineProperty(clone, key, descriptors[key]);
	        delete descriptors[key];
	      }
	    }
	    return clone;
	  };
	  const fn = (key) => split(Array.isArray(key) ? key : dKeys.filter(key));
	  return keys.map(fn).concat(split(dKeys));
	}

	function walkObject(target, predicate, options = {}) {
	  const { stop, getKey } = options;
	  function inner(value, path = []) {
	    if (isObject$1(value) || Array.isArray(value)) {
	      const result = {};
	      for (const [prop, child] of Object.entries(value)) {
	        const key = getKey?.(prop) ?? prop;
	        const childPath = [...path, key];
	        if (stop?.(value, childPath)) {
	          return predicate(value, path);
	        }
	        result[key] = inner(child, childPath);
	      }
	      return result;
	    }
	    return predicate(value, path);
	  }
	  return inner(target);
	}

	var lodash_mergewith = {exports: {}};

	/**
	 * Lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	lodash_mergewith.exports;

	var hasRequiredLodash_mergewith;

	function requireLodash_mergewith () {
		if (hasRequiredLodash_mergewith) return lodash_mergewith.exports;
		hasRequiredLodash_mergewith = 1;
		(function (module, exports) {
			/** Used as the size to enable large array optimizations. */
			var LARGE_ARRAY_SIZE = 200;

			/** Used to stand-in for `undefined` hash values. */
			var HASH_UNDEFINED = '__lodash_hash_undefined__';

			/** Used to detect hot functions by number of calls within a span of milliseconds. */
			var HOT_COUNT = 800,
			    HOT_SPAN = 16;

			/** Used as references for various `Number` constants. */
			var MAX_SAFE_INTEGER = 9007199254740991;

			/** `Object#toString` result references. */
			var argsTag = '[object Arguments]',
			    arrayTag = '[object Array]',
			    asyncTag = '[object AsyncFunction]',
			    boolTag = '[object Boolean]',
			    dateTag = '[object Date]',
			    errorTag = '[object Error]',
			    funcTag = '[object Function]',
			    genTag = '[object GeneratorFunction]',
			    mapTag = '[object Map]',
			    numberTag = '[object Number]',
			    nullTag = '[object Null]',
			    objectTag = '[object Object]',
			    proxyTag = '[object Proxy]',
			    regexpTag = '[object RegExp]',
			    setTag = '[object Set]',
			    stringTag = '[object String]',
			    undefinedTag = '[object Undefined]',
			    weakMapTag = '[object WeakMap]';

			var arrayBufferTag = '[object ArrayBuffer]',
			    dataViewTag = '[object DataView]',
			    float32Tag = '[object Float32Array]',
			    float64Tag = '[object Float64Array]',
			    int8Tag = '[object Int8Array]',
			    int16Tag = '[object Int16Array]',
			    int32Tag = '[object Int32Array]',
			    uint8Tag = '[object Uint8Array]',
			    uint8ClampedTag = '[object Uint8ClampedArray]',
			    uint16Tag = '[object Uint16Array]',
			    uint32Tag = '[object Uint32Array]';

			/**
			 * Used to match `RegExp`
			 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
			 */
			var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

			/** Used to detect host constructors (Safari). */
			var reIsHostCtor = /^\[object .+?Constructor\]$/;

			/** Used to detect unsigned integer values. */
			var reIsUint = /^(?:0|[1-9]\d*)$/;

			/** Used to identify `toStringTag` values of typed arrays. */
			var typedArrayTags = {};
			typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
			typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
			typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
			typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
			typedArrayTags[uint32Tag] = true;
			typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
			typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
			typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
			typedArrayTags[errorTag] = typedArrayTags[funcTag] =
			typedArrayTags[mapTag] = typedArrayTags[numberTag] =
			typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
			typedArrayTags[setTag] = typedArrayTags[stringTag] =
			typedArrayTags[weakMapTag] = false;

			/** Detect free variable `global` from Node.js. */
			var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

			/** Detect free variable `self`. */
			var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

			/** Used as a reference to the global object. */
			var root = freeGlobal || freeSelf || Function('return this')();

			/** Detect free variable `exports`. */
			var freeExports = exports && !exports.nodeType && exports;

			/** Detect free variable `module`. */
			var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

			/** Detect the popular CommonJS extension `module.exports`. */
			var moduleExports = freeModule && freeModule.exports === freeExports;

			/** Detect free variable `process` from Node.js. */
			var freeProcess = moduleExports && freeGlobal.process;

			/** Used to access faster Node.js helpers. */
			var nodeUtil = (function() {
			  try {
			    // Use `util.types` for Node.js 10+.
			    var types = freeModule && freeModule.require && freeModule.require('util').types;

			    if (types) {
			      return types;
			    }

			    // Legacy `process.binding('util')` for Node.js < 10.
			    return freeProcess && freeProcess.binding && freeProcess.binding('util');
			  } catch (e) {}
			}());

			/* Node.js helper references. */
			var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

			/**
			 * A faster alternative to `Function#apply`, this function invokes `func`
			 * with the `this` binding of `thisArg` and the arguments of `args`.
			 *
			 * @private
			 * @param {Function} func The function to invoke.
			 * @param {*} thisArg The `this` binding of `func`.
			 * @param {Array} args The arguments to invoke `func` with.
			 * @returns {*} Returns the result of `func`.
			 */
			function apply(func, thisArg, args) {
			  switch (args.length) {
			    case 0: return func.call(thisArg);
			    case 1: return func.call(thisArg, args[0]);
			    case 2: return func.call(thisArg, args[0], args[1]);
			    case 3: return func.call(thisArg, args[0], args[1], args[2]);
			  }
			  return func.apply(thisArg, args);
			}

			/**
			 * The base implementation of `_.times` without support for iteratee shorthands
			 * or max array length checks.
			 *
			 * @private
			 * @param {number} n The number of times to invoke `iteratee`.
			 * @param {Function} iteratee The function invoked per iteration.
			 * @returns {Array} Returns the array of results.
			 */
			function baseTimes(n, iteratee) {
			  var index = -1,
			      result = Array(n);

			  while (++index < n) {
			    result[index] = iteratee(index);
			  }
			  return result;
			}

			/**
			 * The base implementation of `_.unary` without support for storing metadata.
			 *
			 * @private
			 * @param {Function} func The function to cap arguments for.
			 * @returns {Function} Returns the new capped function.
			 */
			function baseUnary(func) {
			  return function(value) {
			    return func(value);
			  };
			}

			/**
			 * Gets the value at `key` of `object`.
			 *
			 * @private
			 * @param {Object} [object] The object to query.
			 * @param {string} key The key of the property to get.
			 * @returns {*} Returns the property value.
			 */
			function getValue(object, key) {
			  return object == null ? undefined : object[key];
			}

			/**
			 * Creates a unary function that invokes `func` with its argument transformed.
			 *
			 * @private
			 * @param {Function} func The function to wrap.
			 * @param {Function} transform The argument transform.
			 * @returns {Function} Returns the new function.
			 */
			function overArg(func, transform) {
			  return function(arg) {
			    return func(transform(arg));
			  };
			}

			/** Used for built-in method references. */
			var arrayProto = Array.prototype,
			    funcProto = Function.prototype,
			    objectProto = Object.prototype;

			/** Used to detect overreaching core-js shims. */
			var coreJsData = root['__core-js_shared__'];

			/** Used to resolve the decompiled source of functions. */
			var funcToString = funcProto.toString;

			/** Used to check objects for own properties. */
			var hasOwnProperty = objectProto.hasOwnProperty;

			/** Used to detect methods masquerading as native. */
			var maskSrcKey = (function() {
			  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
			  return uid ? ('Symbol(src)_1.' + uid) : '';
			}());

			/**
			 * Used to resolve the
			 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
			 * of values.
			 */
			var nativeObjectToString = objectProto.toString;

			/** Used to infer the `Object` constructor. */
			var objectCtorString = funcToString.call(Object);

			/** Used to detect if a method is native. */
			var reIsNative = RegExp('^' +
			  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
			  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
			);

			/** Built-in value references. */
			var Buffer = moduleExports ? root.Buffer : undefined,
			    Symbol = root.Symbol,
			    Uint8Array = root.Uint8Array;
			    Buffer ? Buffer.allocUnsafe : undefined;
			    var getPrototype = overArg(Object.getPrototypeOf, Object),
			    objectCreate = Object.create,
			    propertyIsEnumerable = objectProto.propertyIsEnumerable,
			    splice = arrayProto.splice,
			    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

			var defineProperty = (function() {
			  try {
			    var func = getNative(Object, 'defineProperty');
			    func({}, '', {});
			    return func;
			  } catch (e) {}
			}());

			/* Built-in method references for those with the same name as other `lodash` methods. */
			var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
			    nativeMax = Math.max,
			    nativeNow = Date.now;

			/* Built-in method references that are verified to be native. */
			var Map = getNative(root, 'Map'),
			    nativeCreate = getNative(Object, 'create');

			/**
			 * The base implementation of `_.create` without support for assigning
			 * properties to the created object.
			 *
			 * @private
			 * @param {Object} proto The object to inherit from.
			 * @returns {Object} Returns the new object.
			 */
			var baseCreate = (function() {
			  function object() {}
			  return function(proto) {
			    if (!isObject(proto)) {
			      return {};
			    }
			    if (objectCreate) {
			      return objectCreate(proto);
			    }
			    object.prototype = proto;
			    var result = new object;
			    object.prototype = undefined;
			    return result;
			  };
			}());

			/**
			 * Creates a hash object.
			 *
			 * @private
			 * @constructor
			 * @param {Array} [entries] The key-value pairs to cache.
			 */
			function Hash(entries) {
			  var index = -1,
			      length = entries == null ? 0 : entries.length;

			  this.clear();
			  while (++index < length) {
			    var entry = entries[index];
			    this.set(entry[0], entry[1]);
			  }
			}

			/**
			 * Removes all key-value entries from the hash.
			 *
			 * @private
			 * @name clear
			 * @memberOf Hash
			 */
			function hashClear() {
			  this.__data__ = nativeCreate ? nativeCreate(null) : {};
			  this.size = 0;
			}

			/**
			 * Removes `key` and its value from the hash.
			 *
			 * @private
			 * @name delete
			 * @memberOf Hash
			 * @param {Object} hash The hash to modify.
			 * @param {string} key The key of the value to remove.
			 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
			 */
			function hashDelete(key) {
			  var result = this.has(key) && delete this.__data__[key];
			  this.size -= result ? 1 : 0;
			  return result;
			}

			/**
			 * Gets the hash value for `key`.
			 *
			 * @private
			 * @name get
			 * @memberOf Hash
			 * @param {string} key The key of the value to get.
			 * @returns {*} Returns the entry value.
			 */
			function hashGet(key) {
			  var data = this.__data__;
			  if (nativeCreate) {
			    var result = data[key];
			    return result === HASH_UNDEFINED ? undefined : result;
			  }
			  return hasOwnProperty.call(data, key) ? data[key] : undefined;
			}

			/**
			 * Checks if a hash value for `key` exists.
			 *
			 * @private
			 * @name has
			 * @memberOf Hash
			 * @param {string} key The key of the entry to check.
			 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			 */
			function hashHas(key) {
			  var data = this.__data__;
			  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
			}

			/**
			 * Sets the hash `key` to `value`.
			 *
			 * @private
			 * @name set
			 * @memberOf Hash
			 * @param {string} key The key of the value to set.
			 * @param {*} value The value to set.
			 * @returns {Object} Returns the hash instance.
			 */
			function hashSet(key, value) {
			  var data = this.__data__;
			  this.size += this.has(key) ? 0 : 1;
			  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
			  return this;
			}

			// Add methods to `Hash`.
			Hash.prototype.clear = hashClear;
			Hash.prototype['delete'] = hashDelete;
			Hash.prototype.get = hashGet;
			Hash.prototype.has = hashHas;
			Hash.prototype.set = hashSet;

			/**
			 * Creates an list cache object.
			 *
			 * @private
			 * @constructor
			 * @param {Array} [entries] The key-value pairs to cache.
			 */
			function ListCache(entries) {
			  var index = -1,
			      length = entries == null ? 0 : entries.length;

			  this.clear();
			  while (++index < length) {
			    var entry = entries[index];
			    this.set(entry[0], entry[1]);
			  }
			}

			/**
			 * Removes all key-value entries from the list cache.
			 *
			 * @private
			 * @name clear
			 * @memberOf ListCache
			 */
			function listCacheClear() {
			  this.__data__ = [];
			  this.size = 0;
			}

			/**
			 * Removes `key` and its value from the list cache.
			 *
			 * @private
			 * @name delete
			 * @memberOf ListCache
			 * @param {string} key The key of the value to remove.
			 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
			 */
			function listCacheDelete(key) {
			  var data = this.__data__,
			      index = assocIndexOf(data, key);

			  if (index < 0) {
			    return false;
			  }
			  var lastIndex = data.length - 1;
			  if (index == lastIndex) {
			    data.pop();
			  } else {
			    splice.call(data, index, 1);
			  }
			  --this.size;
			  return true;
			}

			/**
			 * Gets the list cache value for `key`.
			 *
			 * @private
			 * @name get
			 * @memberOf ListCache
			 * @param {string} key The key of the value to get.
			 * @returns {*} Returns the entry value.
			 */
			function listCacheGet(key) {
			  var data = this.__data__,
			      index = assocIndexOf(data, key);

			  return index < 0 ? undefined : data[index][1];
			}

			/**
			 * Checks if a list cache value for `key` exists.
			 *
			 * @private
			 * @name has
			 * @memberOf ListCache
			 * @param {string} key The key of the entry to check.
			 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			 */
			function listCacheHas(key) {
			  return assocIndexOf(this.__data__, key) > -1;
			}

			/**
			 * Sets the list cache `key` to `value`.
			 *
			 * @private
			 * @name set
			 * @memberOf ListCache
			 * @param {string} key The key of the value to set.
			 * @param {*} value The value to set.
			 * @returns {Object} Returns the list cache instance.
			 */
			function listCacheSet(key, value) {
			  var data = this.__data__,
			      index = assocIndexOf(data, key);

			  if (index < 0) {
			    ++this.size;
			    data.push([key, value]);
			  } else {
			    data[index][1] = value;
			  }
			  return this;
			}

			// Add methods to `ListCache`.
			ListCache.prototype.clear = listCacheClear;
			ListCache.prototype['delete'] = listCacheDelete;
			ListCache.prototype.get = listCacheGet;
			ListCache.prototype.has = listCacheHas;
			ListCache.prototype.set = listCacheSet;

			/**
			 * Creates a map cache object to store key-value pairs.
			 *
			 * @private
			 * @constructor
			 * @param {Array} [entries] The key-value pairs to cache.
			 */
			function MapCache(entries) {
			  var index = -1,
			      length = entries == null ? 0 : entries.length;

			  this.clear();
			  while (++index < length) {
			    var entry = entries[index];
			    this.set(entry[0], entry[1]);
			  }
			}

			/**
			 * Removes all key-value entries from the map.
			 *
			 * @private
			 * @name clear
			 * @memberOf MapCache
			 */
			function mapCacheClear() {
			  this.size = 0;
			  this.__data__ = {
			    'hash': new Hash,
			    'map': new (Map || ListCache),
			    'string': new Hash
			  };
			}

			/**
			 * Removes `key` and its value from the map.
			 *
			 * @private
			 * @name delete
			 * @memberOf MapCache
			 * @param {string} key The key of the value to remove.
			 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
			 */
			function mapCacheDelete(key) {
			  var result = getMapData(this, key)['delete'](key);
			  this.size -= result ? 1 : 0;
			  return result;
			}

			/**
			 * Gets the map value for `key`.
			 *
			 * @private
			 * @name get
			 * @memberOf MapCache
			 * @param {string} key The key of the value to get.
			 * @returns {*} Returns the entry value.
			 */
			function mapCacheGet(key) {
			  return getMapData(this, key).get(key);
			}

			/**
			 * Checks if a map value for `key` exists.
			 *
			 * @private
			 * @name has
			 * @memberOf MapCache
			 * @param {string} key The key of the entry to check.
			 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			 */
			function mapCacheHas(key) {
			  return getMapData(this, key).has(key);
			}

			/**
			 * Sets the map `key` to `value`.
			 *
			 * @private
			 * @name set
			 * @memberOf MapCache
			 * @param {string} key The key of the value to set.
			 * @param {*} value The value to set.
			 * @returns {Object} Returns the map cache instance.
			 */
			function mapCacheSet(key, value) {
			  var data = getMapData(this, key),
			      size = data.size;

			  data.set(key, value);
			  this.size += data.size == size ? 0 : 1;
			  return this;
			}

			// Add methods to `MapCache`.
			MapCache.prototype.clear = mapCacheClear;
			MapCache.prototype['delete'] = mapCacheDelete;
			MapCache.prototype.get = mapCacheGet;
			MapCache.prototype.has = mapCacheHas;
			MapCache.prototype.set = mapCacheSet;

			/**
			 * Creates a stack cache object to store key-value pairs.
			 *
			 * @private
			 * @constructor
			 * @param {Array} [entries] The key-value pairs to cache.
			 */
			function Stack(entries) {
			  var data = this.__data__ = new ListCache(entries);
			  this.size = data.size;
			}

			/**
			 * Removes all key-value entries from the stack.
			 *
			 * @private
			 * @name clear
			 * @memberOf Stack
			 */
			function stackClear() {
			  this.__data__ = new ListCache;
			  this.size = 0;
			}

			/**
			 * Removes `key` and its value from the stack.
			 *
			 * @private
			 * @name delete
			 * @memberOf Stack
			 * @param {string} key The key of the value to remove.
			 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
			 */
			function stackDelete(key) {
			  var data = this.__data__,
			      result = data['delete'](key);

			  this.size = data.size;
			  return result;
			}

			/**
			 * Gets the stack value for `key`.
			 *
			 * @private
			 * @name get
			 * @memberOf Stack
			 * @param {string} key The key of the value to get.
			 * @returns {*} Returns the entry value.
			 */
			function stackGet(key) {
			  return this.__data__.get(key);
			}

			/**
			 * Checks if a stack value for `key` exists.
			 *
			 * @private
			 * @name has
			 * @memberOf Stack
			 * @param {string} key The key of the entry to check.
			 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
			 */
			function stackHas(key) {
			  return this.__data__.has(key);
			}

			/**
			 * Sets the stack `key` to `value`.
			 *
			 * @private
			 * @name set
			 * @memberOf Stack
			 * @param {string} key The key of the value to set.
			 * @param {*} value The value to set.
			 * @returns {Object} Returns the stack cache instance.
			 */
			function stackSet(key, value) {
			  var data = this.__data__;
			  if (data instanceof ListCache) {
			    var pairs = data.__data__;
			    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
			      pairs.push([key, value]);
			      this.size = ++data.size;
			      return this;
			    }
			    data = this.__data__ = new MapCache(pairs);
			  }
			  data.set(key, value);
			  this.size = data.size;
			  return this;
			}

			// Add methods to `Stack`.
			Stack.prototype.clear = stackClear;
			Stack.prototype['delete'] = stackDelete;
			Stack.prototype.get = stackGet;
			Stack.prototype.has = stackHas;
			Stack.prototype.set = stackSet;

			/**
			 * Creates an array of the enumerable property names of the array-like `value`.
			 *
			 * @private
			 * @param {*} value The value to query.
			 * @param {boolean} inherited Specify returning inherited property names.
			 * @returns {Array} Returns the array of property names.
			 */
			function arrayLikeKeys(value, inherited) {
			  var isArr = isArray(value),
			      isArg = !isArr && isArguments(value),
			      isBuff = !isArr && !isArg && isBuffer(value),
			      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
			      skipIndexes = isArr || isArg || isBuff || isType,
			      result = skipIndexes ? baseTimes(value.length, String) : [],
			      length = result.length;

			  for (var key in value) {
			    if (!(skipIndexes && (
			           // Safari 9 has enumerable `arguments.length` in strict mode.
			           key == 'length' ||
			           // Node.js 0.10 has enumerable non-index properties on buffers.
			           (isBuff && (key == 'offset' || key == 'parent')) ||
			           // PhantomJS 2 has enumerable non-index properties on typed arrays.
			           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
			           // Skip index properties.
			           isIndex(key, length)
			        ))) {
			      result.push(key);
			    }
			  }
			  return result;
			}

			/**
			 * This function is like `assignValue` except that it doesn't assign
			 * `undefined` values.
			 *
			 * @private
			 * @param {Object} object The object to modify.
			 * @param {string} key The key of the property to assign.
			 * @param {*} value The value to assign.
			 */
			function assignMergeValue(object, key, value) {
			  if ((value !== undefined && !eq(object[key], value)) ||
			      (value === undefined && !(key in object))) {
			    baseAssignValue(object, key, value);
			  }
			}

			/**
			 * Assigns `value` to `key` of `object` if the existing value is not equivalent
			 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
			 * for equality comparisons.
			 *
			 * @private
			 * @param {Object} object The object to modify.
			 * @param {string} key The key of the property to assign.
			 * @param {*} value The value to assign.
			 */
			function assignValue(object, key, value) {
			  var objValue = object[key];
			  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
			      (value === undefined && !(key in object))) {
			    baseAssignValue(object, key, value);
			  }
			}

			/**
			 * Gets the index at which the `key` is found in `array` of key-value pairs.
			 *
			 * @private
			 * @param {Array} array The array to inspect.
			 * @param {*} key The key to search for.
			 * @returns {number} Returns the index of the matched value, else `-1`.
			 */
			function assocIndexOf(array, key) {
			  var length = array.length;
			  while (length--) {
			    if (eq(array[length][0], key)) {
			      return length;
			    }
			  }
			  return -1;
			}

			/**
			 * The base implementation of `assignValue` and `assignMergeValue` without
			 * value checks.
			 *
			 * @private
			 * @param {Object} object The object to modify.
			 * @param {string} key The key of the property to assign.
			 * @param {*} value The value to assign.
			 */
			function baseAssignValue(object, key, value) {
			  if (key == '__proto__' && defineProperty) {
			    defineProperty(object, key, {
			      'configurable': true,
			      'enumerable': true,
			      'value': value,
			      'writable': true
			    });
			  } else {
			    object[key] = value;
			  }
			}

			/**
			 * The base implementation of `baseForOwn` which iterates over `object`
			 * properties returned by `keysFunc` and invokes `iteratee` for each property.
			 * Iteratee functions may exit iteration early by explicitly returning `false`.
			 *
			 * @private
			 * @param {Object} object The object to iterate over.
			 * @param {Function} iteratee The function invoked per iteration.
			 * @param {Function} keysFunc The function to get the keys of `object`.
			 * @returns {Object} Returns `object`.
			 */
			var baseFor = createBaseFor();

			/**
			 * The base implementation of `getTag` without fallbacks for buggy environments.
			 *
			 * @private
			 * @param {*} value The value to query.
			 * @returns {string} Returns the `toStringTag`.
			 */
			function baseGetTag(value) {
			  if (value == null) {
			    return value === undefined ? undefinedTag : nullTag;
			  }
			  return (symToStringTag && symToStringTag in Object(value))
			    ? getRawTag(value)
			    : objectToString(value);
			}

			/**
			 * The base implementation of `_.isArguments`.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
			 */
			function baseIsArguments(value) {
			  return isObjectLike(value) && baseGetTag(value) == argsTag;
			}

			/**
			 * The base implementation of `_.isNative` without bad shim checks.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a native function,
			 *  else `false`.
			 */
			function baseIsNative(value) {
			  if (!isObject(value) || isMasked(value)) {
			    return false;
			  }
			  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
			  return pattern.test(toSource(value));
			}

			/**
			 * The base implementation of `_.isTypedArray` without Node.js optimizations.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
			 */
			function baseIsTypedArray(value) {
			  return isObjectLike(value) &&
			    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
			}

			/**
			 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of property names.
			 */
			function baseKeysIn(object) {
			  if (!isObject(object)) {
			    return nativeKeysIn(object);
			  }
			  var isProto = isPrototype(object),
			      result = [];

			  for (var key in object) {
			    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
			      result.push(key);
			    }
			  }
			  return result;
			}

			/**
			 * The base implementation of `_.merge` without support for multiple sources.
			 *
			 * @private
			 * @param {Object} object The destination object.
			 * @param {Object} source The source object.
			 * @param {number} srcIndex The index of `source`.
			 * @param {Function} [customizer] The function to customize merged values.
			 * @param {Object} [stack] Tracks traversed source values and their merged
			 *  counterparts.
			 */
			function baseMerge(object, source, srcIndex, customizer, stack) {
			  if (object === source) {
			    return;
			  }
			  baseFor(source, function(srcValue, key) {
			    stack || (stack = new Stack);
			    if (isObject(srcValue)) {
			      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
			    }
			    else {
			      var newValue = customizer
			        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
			        : undefined;

			      if (newValue === undefined) {
			        newValue = srcValue;
			      }
			      assignMergeValue(object, key, newValue);
			    }
			  }, keysIn);
			}

			/**
			 * A specialized version of `baseMerge` for arrays and objects which performs
			 * deep merges and tracks traversed objects enabling objects with circular
			 * references to be merged.
			 *
			 * @private
			 * @param {Object} object The destination object.
			 * @param {Object} source The source object.
			 * @param {string} key The key of the value to merge.
			 * @param {number} srcIndex The index of `source`.
			 * @param {Function} mergeFunc The function to merge values.
			 * @param {Function} [customizer] The function to customize assigned values.
			 * @param {Object} [stack] Tracks traversed source values and their merged
			 *  counterparts.
			 */
			function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
			  var objValue = safeGet(object, key),
			      srcValue = safeGet(source, key),
			      stacked = stack.get(srcValue);

			  if (stacked) {
			    assignMergeValue(object, key, stacked);
			    return;
			  }
			  var newValue = customizer
			    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
			    : undefined;

			  var isCommon = newValue === undefined;

			  if (isCommon) {
			    var isArr = isArray(srcValue),
			        isBuff = !isArr && isBuffer(srcValue),
			        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

			    newValue = srcValue;
			    if (isArr || isBuff || isTyped) {
			      if (isArray(objValue)) {
			        newValue = objValue;
			      }
			      else if (isArrayLikeObject(objValue)) {
			        newValue = copyArray(objValue);
			      }
			      else if (isBuff) {
			        isCommon = false;
			        newValue = cloneBuffer(srcValue);
			      }
			      else if (isTyped) {
			        isCommon = false;
			        newValue = cloneTypedArray(srcValue);
			      }
			      else {
			        newValue = [];
			      }
			    }
			    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
			      newValue = objValue;
			      if (isArguments(objValue)) {
			        newValue = toPlainObject(objValue);
			      }
			      else if (!isObject(objValue) || isFunction(objValue)) {
			        newValue = initCloneObject(srcValue);
			      }
			    }
			    else {
			      isCommon = false;
			    }
			  }
			  if (isCommon) {
			    // Recursively merge objects and arrays (susceptible to call stack limits).
			    stack.set(srcValue, newValue);
			    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
			    stack['delete'](srcValue);
			  }
			  assignMergeValue(object, key, newValue);
			}

			/**
			 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
			 *
			 * @private
			 * @param {Function} func The function to apply a rest parameter to.
			 * @param {number} [start=func.length-1] The start position of the rest parameter.
			 * @returns {Function} Returns the new function.
			 */
			function baseRest(func, start) {
			  return setToString(overRest(func, start, identity), func + '');
			}

			/**
			 * The base implementation of `setToString` without support for hot loop shorting.
			 *
			 * @private
			 * @param {Function} func The function to modify.
			 * @param {Function} string The `toString` result.
			 * @returns {Function} Returns `func`.
			 */
			var baseSetToString = !defineProperty ? identity : function(func, string) {
			  return defineProperty(func, 'toString', {
			    'configurable': true,
			    'enumerable': false,
			    'value': constant(string),
			    'writable': true
			  });
			};

			/**
			 * Creates a clone of  `buffer`.
			 *
			 * @private
			 * @param {Buffer} buffer The buffer to clone.
			 * @param {boolean} [isDeep] Specify a deep clone.
			 * @returns {Buffer} Returns the cloned buffer.
			 */
			function cloneBuffer(buffer, isDeep) {
			  {
			    return buffer.slice();
			  }
			}

			/**
			 * Creates a clone of `arrayBuffer`.
			 *
			 * @private
			 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
			 * @returns {ArrayBuffer} Returns the cloned array buffer.
			 */
			function cloneArrayBuffer(arrayBuffer) {
			  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
			  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
			  return result;
			}

			/**
			 * Creates a clone of `typedArray`.
			 *
			 * @private
			 * @param {Object} typedArray The typed array to clone.
			 * @param {boolean} [isDeep] Specify a deep clone.
			 * @returns {Object} Returns the cloned typed array.
			 */
			function cloneTypedArray(typedArray, isDeep) {
			  var buffer = cloneArrayBuffer(typedArray.buffer) ;
			  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
			}

			/**
			 * Copies the values of `source` to `array`.
			 *
			 * @private
			 * @param {Array} source The array to copy values from.
			 * @param {Array} [array=[]] The array to copy values to.
			 * @returns {Array} Returns `array`.
			 */
			function copyArray(source, array) {
			  var index = -1,
			      length = source.length;

			  array || (array = Array(length));
			  while (++index < length) {
			    array[index] = source[index];
			  }
			  return array;
			}

			/**
			 * Copies properties of `source` to `object`.
			 *
			 * @private
			 * @param {Object} source The object to copy properties from.
			 * @param {Array} props The property identifiers to copy.
			 * @param {Object} [object={}] The object to copy properties to.
			 * @param {Function} [customizer] The function to customize copied values.
			 * @returns {Object} Returns `object`.
			 */
			function copyObject(source, props, object, customizer) {
			  var isNew = !object;
			  object || (object = {});

			  var index = -1,
			      length = props.length;

			  while (++index < length) {
			    var key = props[index];

			    var newValue = undefined;

			    if (newValue === undefined) {
			      newValue = source[key];
			    }
			    if (isNew) {
			      baseAssignValue(object, key, newValue);
			    } else {
			      assignValue(object, key, newValue);
			    }
			  }
			  return object;
			}

			/**
			 * Creates a function like `_.assign`.
			 *
			 * @private
			 * @param {Function} assigner The function to assign values.
			 * @returns {Function} Returns the new assigner function.
			 */
			function createAssigner(assigner) {
			  return baseRest(function(object, sources) {
			    var index = -1,
			        length = sources.length,
			        customizer = length > 1 ? sources[length - 1] : undefined,
			        guard = length > 2 ? sources[2] : undefined;

			    customizer = (assigner.length > 3 && typeof customizer == 'function')
			      ? (length--, customizer)
			      : undefined;

			    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
			      customizer = length < 3 ? undefined : customizer;
			      length = 1;
			    }
			    object = Object(object);
			    while (++index < length) {
			      var source = sources[index];
			      if (source) {
			        assigner(object, source, index, customizer);
			      }
			    }
			    return object;
			  });
			}

			/**
			 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
			 *
			 * @private
			 * @param {boolean} [fromRight] Specify iterating from right to left.
			 * @returns {Function} Returns the new base function.
			 */
			function createBaseFor(fromRight) {
			  return function(object, iteratee, keysFunc) {
			    var index = -1,
			        iterable = Object(object),
			        props = keysFunc(object),
			        length = props.length;

			    while (length--) {
			      var key = props[++index];
			      if (iteratee(iterable[key], key, iterable) === false) {
			        break;
			      }
			    }
			    return object;
			  };
			}

			/**
			 * Gets the data for `map`.
			 *
			 * @private
			 * @param {Object} map The map to query.
			 * @param {string} key The reference key.
			 * @returns {*} Returns the map data.
			 */
			function getMapData(map, key) {
			  var data = map.__data__;
			  return isKeyable(key)
			    ? data[typeof key == 'string' ? 'string' : 'hash']
			    : data.map;
			}

			/**
			 * Gets the native function at `key` of `object`.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @param {string} key The key of the method to get.
			 * @returns {*} Returns the function if it's native, else `undefined`.
			 */
			function getNative(object, key) {
			  var value = getValue(object, key);
			  return baseIsNative(value) ? value : undefined;
			}

			/**
			 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
			 *
			 * @private
			 * @param {*} value The value to query.
			 * @returns {string} Returns the raw `toStringTag`.
			 */
			function getRawTag(value) {
			  var isOwn = hasOwnProperty.call(value, symToStringTag),
			      tag = value[symToStringTag];

			  try {
			    value[symToStringTag] = undefined;
			    var unmasked = true;
			  } catch (e) {}

			  var result = nativeObjectToString.call(value);
			  if (unmasked) {
			    if (isOwn) {
			      value[symToStringTag] = tag;
			    } else {
			      delete value[symToStringTag];
			    }
			  }
			  return result;
			}

			/**
			 * Initializes an object clone.
			 *
			 * @private
			 * @param {Object} object The object to clone.
			 * @returns {Object} Returns the initialized clone.
			 */
			function initCloneObject(object) {
			  return (typeof object.constructor == 'function' && !isPrototype(object))
			    ? baseCreate(getPrototype(object))
			    : {};
			}

			/**
			 * Checks if `value` is a valid array-like index.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
			 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
			 */
			function isIndex(value, length) {
			  var type = typeof value;
			  length = length == null ? MAX_SAFE_INTEGER : length;

			  return !!length &&
			    (type == 'number' ||
			      (type != 'symbol' && reIsUint.test(value))) &&
			        (value > -1 && value % 1 == 0 && value < length);
			}

			/**
			 * Checks if the given arguments are from an iteratee call.
			 *
			 * @private
			 * @param {*} value The potential iteratee value argument.
			 * @param {*} index The potential iteratee index or key argument.
			 * @param {*} object The potential iteratee object argument.
			 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
			 *  else `false`.
			 */
			function isIterateeCall(value, index, object) {
			  if (!isObject(object)) {
			    return false;
			  }
			  var type = typeof index;
			  if (type == 'number'
			        ? (isArrayLike(object) && isIndex(index, object.length))
			        : (type == 'string' && index in object)
			      ) {
			    return eq(object[index], value);
			  }
			  return false;
			}

			/**
			 * Checks if `value` is suitable for use as unique object key.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
			 */
			function isKeyable(value) {
			  var type = typeof value;
			  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
			    ? (value !== '__proto__')
			    : (value === null);
			}

			/**
			 * Checks if `func` has its source masked.
			 *
			 * @private
			 * @param {Function} func The function to check.
			 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
			 */
			function isMasked(func) {
			  return !!maskSrcKey && (maskSrcKey in func);
			}

			/**
			 * Checks if `value` is likely a prototype object.
			 *
			 * @private
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
			 */
			function isPrototype(value) {
			  var Ctor = value && value.constructor,
			      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

			  return value === proto;
			}

			/**
			 * This function is like
			 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
			 * except that it includes inherited enumerable properties.
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of property names.
			 */
			function nativeKeysIn(object) {
			  var result = [];
			  if (object != null) {
			    for (var key in Object(object)) {
			      result.push(key);
			    }
			  }
			  return result;
			}

			/**
			 * Converts `value` to a string using `Object.prototype.toString`.
			 *
			 * @private
			 * @param {*} value The value to convert.
			 * @returns {string} Returns the converted string.
			 */
			function objectToString(value) {
			  return nativeObjectToString.call(value);
			}

			/**
			 * A specialized version of `baseRest` which transforms the rest array.
			 *
			 * @private
			 * @param {Function} func The function to apply a rest parameter to.
			 * @param {number} [start=func.length-1] The start position of the rest parameter.
			 * @param {Function} transform The rest array transform.
			 * @returns {Function} Returns the new function.
			 */
			function overRest(func, start, transform) {
			  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
			  return function() {
			    var args = arguments,
			        index = -1,
			        length = nativeMax(args.length - start, 0),
			        array = Array(length);

			    while (++index < length) {
			      array[index] = args[start + index];
			    }
			    index = -1;
			    var otherArgs = Array(start + 1);
			    while (++index < start) {
			      otherArgs[index] = args[index];
			    }
			    otherArgs[start] = transform(array);
			    return apply(func, this, otherArgs);
			  };
			}

			/**
			 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
			 *
			 * @private
			 * @param {Object} object The object to query.
			 * @param {string} key The key of the property to get.
			 * @returns {*} Returns the property value.
			 */
			function safeGet(object, key) {
			  if (key === 'constructor' && typeof object[key] === 'function') {
			    return;
			  }

			  if (key == '__proto__') {
			    return;
			  }

			  return object[key];
			}

			/**
			 * Sets the `toString` method of `func` to return `string`.
			 *
			 * @private
			 * @param {Function} func The function to modify.
			 * @param {Function} string The `toString` result.
			 * @returns {Function} Returns `func`.
			 */
			var setToString = shortOut(baseSetToString);

			/**
			 * Creates a function that'll short out and invoke `identity` instead
			 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
			 * milliseconds.
			 *
			 * @private
			 * @param {Function} func The function to restrict.
			 * @returns {Function} Returns the new shortable function.
			 */
			function shortOut(func) {
			  var count = 0,
			      lastCalled = 0;

			  return function() {
			    var stamp = nativeNow(),
			        remaining = HOT_SPAN - (stamp - lastCalled);

			    lastCalled = stamp;
			    if (remaining > 0) {
			      if (++count >= HOT_COUNT) {
			        return arguments[0];
			      }
			    } else {
			      count = 0;
			    }
			    return func.apply(undefined, arguments);
			  };
			}

			/**
			 * Converts `func` to its source code.
			 *
			 * @private
			 * @param {Function} func The function to convert.
			 * @returns {string} Returns the source code.
			 */
			function toSource(func) {
			  if (func != null) {
			    try {
			      return funcToString.call(func);
			    } catch (e) {}
			    try {
			      return (func + '');
			    } catch (e) {}
			  }
			  return '';
			}

			/**
			 * Performs a
			 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
			 * comparison between two values to determine if they are equivalent.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to compare.
			 * @param {*} other The other value to compare.
			 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
			 * @example
			 *
			 * var object = { 'a': 1 };
			 * var other = { 'a': 1 };
			 *
			 * _.eq(object, object);
			 * // => true
			 *
			 * _.eq(object, other);
			 * // => false
			 *
			 * _.eq('a', 'a');
			 * // => true
			 *
			 * _.eq('a', Object('a'));
			 * // => false
			 *
			 * _.eq(NaN, NaN);
			 * // => true
			 */
			function eq(value, other) {
			  return value === other || (value !== value && other !== other);
			}

			/**
			 * Checks if `value` is likely an `arguments` object.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
			 *  else `false`.
			 * @example
			 *
			 * _.isArguments(function() { return arguments; }());
			 * // => true
			 *
			 * _.isArguments([1, 2, 3]);
			 * // => false
			 */
			var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
			  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
			    !propertyIsEnumerable.call(value, 'callee');
			};

			/**
			 * Checks if `value` is classified as an `Array` object.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
			 * @example
			 *
			 * _.isArray([1, 2, 3]);
			 * // => true
			 *
			 * _.isArray(document.body.children);
			 * // => false
			 *
			 * _.isArray('abc');
			 * // => false
			 *
			 * _.isArray(_.noop);
			 * // => false
			 */
			var isArray = Array.isArray;

			/**
			 * Checks if `value` is array-like. A value is considered array-like if it's
			 * not a function and has a `value.length` that's an integer greater than or
			 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
			 * @example
			 *
			 * _.isArrayLike([1, 2, 3]);
			 * // => true
			 *
			 * _.isArrayLike(document.body.children);
			 * // => true
			 *
			 * _.isArrayLike('abc');
			 * // => true
			 *
			 * _.isArrayLike(_.noop);
			 * // => false
			 */
			function isArrayLike(value) {
			  return value != null && isLength(value.length) && !isFunction(value);
			}

			/**
			 * This method is like `_.isArrayLike` except that it also checks if `value`
			 * is an object.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is an array-like object,
			 *  else `false`.
			 * @example
			 *
			 * _.isArrayLikeObject([1, 2, 3]);
			 * // => true
			 *
			 * _.isArrayLikeObject(document.body.children);
			 * // => true
			 *
			 * _.isArrayLikeObject('abc');
			 * // => false
			 *
			 * _.isArrayLikeObject(_.noop);
			 * // => false
			 */
			function isArrayLikeObject(value) {
			  return isObjectLike(value) && isArrayLike(value);
			}

			/**
			 * Checks if `value` is a buffer.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.3.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
			 * @example
			 *
			 * _.isBuffer(new Buffer(2));
			 * // => true
			 *
			 * _.isBuffer(new Uint8Array(2));
			 * // => false
			 */
			var isBuffer = nativeIsBuffer || stubFalse;

			/**
			 * Checks if `value` is classified as a `Function` object.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
			 * @example
			 *
			 * _.isFunction(_);
			 * // => true
			 *
			 * _.isFunction(/abc/);
			 * // => false
			 */
			function isFunction(value) {
			  if (!isObject(value)) {
			    return false;
			  }
			  // The use of `Object#toString` avoids issues with the `typeof` operator
			  // in Safari 9 which returns 'object' for typed arrays and other constructors.
			  var tag = baseGetTag(value);
			  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
			}

			/**
			 * Checks if `value` is a valid array-like length.
			 *
			 * **Note:** This method is loosely based on
			 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
			 * @example
			 *
			 * _.isLength(3);
			 * // => true
			 *
			 * _.isLength(Number.MIN_VALUE);
			 * // => false
			 *
			 * _.isLength(Infinity);
			 * // => false
			 *
			 * _.isLength('3');
			 * // => false
			 */
			function isLength(value) {
			  return typeof value == 'number' &&
			    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
			}

			/**
			 * Checks if `value` is the
			 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
			 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
			 *
			 * @static
			 * @memberOf _
			 * @since 0.1.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
			 * @example
			 *
			 * _.isObject({});
			 * // => true
			 *
			 * _.isObject([1, 2, 3]);
			 * // => true
			 *
			 * _.isObject(_.noop);
			 * // => true
			 *
			 * _.isObject(null);
			 * // => false
			 */
			function isObject(value) {
			  var type = typeof value;
			  return value != null && (type == 'object' || type == 'function');
			}

			/**
			 * Checks if `value` is object-like. A value is object-like if it's not `null`
			 * and has a `typeof` result of "object".
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
			 * @example
			 *
			 * _.isObjectLike({});
			 * // => true
			 *
			 * _.isObjectLike([1, 2, 3]);
			 * // => true
			 *
			 * _.isObjectLike(_.noop);
			 * // => false
			 *
			 * _.isObjectLike(null);
			 * // => false
			 */
			function isObjectLike(value) {
			  return value != null && typeof value == 'object';
			}

			/**
			 * Checks if `value` is a plain object, that is, an object created by the
			 * `Object` constructor or one with a `[[Prototype]]` of `null`.
			 *
			 * @static
			 * @memberOf _
			 * @since 0.8.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
			 * @example
			 *
			 * function Foo() {
			 *   this.a = 1;
			 * }
			 *
			 * _.isPlainObject(new Foo);
			 * // => false
			 *
			 * _.isPlainObject([1, 2, 3]);
			 * // => false
			 *
			 * _.isPlainObject({ 'x': 0, 'y': 0 });
			 * // => true
			 *
			 * _.isPlainObject(Object.create(null));
			 * // => true
			 */
			function isPlainObject(value) {
			  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
			    return false;
			  }
			  var proto = getPrototype(value);
			  if (proto === null) {
			    return true;
			  }
			  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
			  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
			    funcToString.call(Ctor) == objectCtorString;
			}

			/**
			 * Checks if `value` is classified as a typed array.
			 *
			 * @static
			 * @memberOf _
			 * @since 3.0.0
			 * @category Lang
			 * @param {*} value The value to check.
			 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
			 * @example
			 *
			 * _.isTypedArray(new Uint8Array);
			 * // => true
			 *
			 * _.isTypedArray([]);
			 * // => false
			 */
			var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

			/**
			 * Converts `value` to a plain object flattening inherited enumerable string
			 * keyed properties of `value` to own properties of the plain object.
			 *
			 * @static
			 * @memberOf _
			 * @since 3.0.0
			 * @category Lang
			 * @param {*} value The value to convert.
			 * @returns {Object} Returns the converted plain object.
			 * @example
			 *
			 * function Foo() {
			 *   this.b = 2;
			 * }
			 *
			 * Foo.prototype.c = 3;
			 *
			 * _.assign({ 'a': 1 }, new Foo);
			 * // => { 'a': 1, 'b': 2 }
			 *
			 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
			 * // => { 'a': 1, 'b': 2, 'c': 3 }
			 */
			function toPlainObject(value) {
			  return copyObject(value, keysIn(value));
			}

			/**
			 * Creates an array of the own and inherited enumerable property names of `object`.
			 *
			 * **Note:** Non-object values are coerced to objects.
			 *
			 * @static
			 * @memberOf _
			 * @since 3.0.0
			 * @category Object
			 * @param {Object} object The object to query.
			 * @returns {Array} Returns the array of property names.
			 * @example
			 *
			 * function Foo() {
			 *   this.a = 1;
			 *   this.b = 2;
			 * }
			 *
			 * Foo.prototype.c = 3;
			 *
			 * _.keysIn(new Foo);
			 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
			 */
			function keysIn(object) {
			  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeysIn(object);
			}

			/**
			 * This method is like `_.merge` except that it accepts `customizer` which
			 * is invoked to produce the merged values of the destination and source
			 * properties. If `customizer` returns `undefined`, merging is handled by the
			 * method instead. The `customizer` is invoked with six arguments:
			 * (objValue, srcValue, key, object, source, stack).
			 *
			 * **Note:** This method mutates `object`.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.0.0
			 * @category Object
			 * @param {Object} object The destination object.
			 * @param {...Object} sources The source objects.
			 * @param {Function} customizer The function to customize assigned values.
			 * @returns {Object} Returns `object`.
			 * @example
			 *
			 * function customizer(objValue, srcValue) {
			 *   if (_.isArray(objValue)) {
			 *     return objValue.concat(srcValue);
			 *   }
			 * }
			 *
			 * var object = { 'a': [1], 'b': [2] };
			 * var other = { 'a': [3], 'b': [4] };
			 *
			 * _.mergeWith(object, other, customizer);
			 * // => { 'a': [1, 3], 'b': [2, 4] }
			 */
			var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
			  baseMerge(object, source, srcIndex, customizer);
			});

			/**
			 * Creates a function that returns `value`.
			 *
			 * @static
			 * @memberOf _
			 * @since 2.4.0
			 * @category Util
			 * @param {*} value The value to return from the new function.
			 * @returns {Function} Returns the new constant function.
			 * @example
			 *
			 * var objects = _.times(2, _.constant({ 'a': 1 }));
			 *
			 * console.log(objects);
			 * // => [{ 'a': 1 }, { 'a': 1 }]
			 *
			 * console.log(objects[0] === objects[1]);
			 * // => true
			 */
			function constant(value) {
			  return function() {
			    return value;
			  };
			}

			/**
			 * This method returns the first argument it receives.
			 *
			 * @static
			 * @since 0.1.0
			 * @memberOf _
			 * @category Util
			 * @param {*} value Any value.
			 * @returns {*} Returns `value`.
			 * @example
			 *
			 * var object = { 'a': 1 };
			 *
			 * console.log(_.identity(object) === object);
			 * // => true
			 */
			function identity(value) {
			  return value;
			}

			/**
			 * This method returns `false`.
			 *
			 * @static
			 * @memberOf _
			 * @since 4.13.0
			 * @category Util
			 * @returns {boolean} Returns `false`.
			 * @example
			 *
			 * _.times(2, _.stubFalse);
			 * // => [false, false]
			 */
			function stubFalse() {
			  return false;
			}

			module.exports = mergeWith; 
		} (lodash_mergewith, lodash_mergewith.exports));
		return lodash_mergewith.exports;
	}

	var lodash_mergewithExports = requireLodash_mergewith();
	var mergeWith = /*@__PURE__*/getDefaultExportFromCjs(lodash_mergewithExports);

	function useCallbackRef$1(callback, deps = []) {
	  const callbackRef = reactExports.useRef(callback);
	  reactExports.useEffect(() => {
	    callbackRef.current = callback;
	  });
	  return reactExports.useCallback((...args) => callbackRef.current?.(...args), deps);
	}

	function useDisclosure(props = {}) {
	  const {
	    onClose: onCloseProp,
	    onOpen: onOpenProp,
	    isOpen: isOpenProp,
	    id: idProp
	  } = props;
	  const handleOpen = useCallbackRef$1(onOpenProp);
	  const handleClose = useCallbackRef$1(onCloseProp);
	  const [isOpenState, setIsOpen] = reactExports.useState(props.defaultIsOpen || false);
	  const isOpen = isOpenProp !== void 0 ? isOpenProp : isOpenState;
	  const isControlled = isOpenProp !== void 0;
	  const uid = reactExports.useId();
	  const id = idProp ?? `disclosure-${uid}`;
	  const onClose = reactExports.useCallback(() => {
	    if (!isControlled) {
	      setIsOpen(false);
	    }
	    handleClose?.();
	  }, [isControlled, handleClose]);
	  const onOpen = reactExports.useCallback(() => {
	    if (!isControlled) {
	      setIsOpen(true);
	    }
	    handleOpen?.();
	  }, [isControlled, handleOpen]);
	  const onToggle = reactExports.useCallback(() => {
	    if (isOpen) {
	      onClose();
	    } else {
	      onOpen();
	    }
	  }, [isOpen, onOpen, onClose]);
	  function getButtonProps(props2 = {}) {
	    return {
	      ...props2,
	      "aria-expanded": isOpen,
	      "aria-controls": id,
	      onClick(event) {
	        props2.onClick?.(event);
	        onToggle();
	      }
	    };
	  }
	  function getDisclosureProps(props2 = {}) {
	    return {
	      ...props2,
	      hidden: !isOpen,
	      id
	    };
	  }
	  return {
	    isOpen,
	    onOpen,
	    onClose,
	    onToggle,
	    isControlled,
	    getButtonProps,
	    getDisclosureProps
	  };
	}

	const useSafeLayoutEffect$1 = Boolean(globalThis?.document) ? reactExports.useLayoutEffect : reactExports.useEffect;

	const useUpdateEffect = (effect, deps) => {
	  const renderCycleRef = reactExports.useRef(false);
	  const effectCycleRef = reactExports.useRef(false);
	  reactExports.useEffect(() => {
	    const isMounted = renderCycleRef.current;
	    const shouldRun = isMounted && effectCycleRef.current;
	    if (shouldRun) {
	      return effect();
	    }
	    effectCycleRef.current = true;
	  }, deps);
	  reactExports.useEffect(() => {
	    renderCycleRef.current = true;
	    return () => {
	      renderCycleRef.current = false;
	    };
	  }, []);
	};

	function assignRef$1(ref, value) {
	  if (ref == null)
	    return;
	  if (typeof ref === "function") {
	    ref(value);
	    return;
	  }
	  try {
	    ref.current = value;
	  } catch (error) {
	    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);
	  }
	}
	function mergeRefs(...refs) {
	  return (node) => {
	    refs.forEach((ref) => {
	      assignRef$1(ref, node);
	    });
	  };
	}
	function useMergeRefs$1(...refs) {
	  return reactExports.useMemo(() => mergeRefs(...refs), refs);
	}

	function useTimeout(callback, delay) {
	  const fn = useCallbackRef$1(callback);
	  reactExports.useEffect(() => {
	    if (delay == null)
	      return void 0;
	    let timeoutId = null;
	    timeoutId = window.setTimeout(() => {
	      fn();
	    }, delay);
	    return () => {
	      if (timeoutId) {
	        window.clearTimeout(timeoutId);
	      }
	    };
	  }, [delay, fn]);
	}

	const state = {
	  open: (str, post) => `${str}[data-open], ${str}[open], ${str}[data-state=open] ${post}`,
	  closed: (str, post) => `${str}[data-closed], ${str}[data-state=closed] ${post}`,
	  hover: (str, post) => `${str}:hover ${post}, ${str}[data-hover] ${post}`,
	  focus: (str, post) => `${str}:focus ${post}, ${str}[data-focus] ${post}`,
	  focusVisible: (str, post) => `${str}:focus-visible ${post}`,
	  focusWithin: (str, post) => `${str}:focus-within ${post}`,
	  active: (str, post) => `${str}:active ${post}, ${str}[data-active] ${post}`,
	  disabled: (str, post) => `${str}:disabled ${post}, ${str}[data-disabled] ${post}`,
	  invalid: (str, post) => `${str}:invalid ${post}, ${str}[data-invalid] ${post}`,
	  checked: (str, post) => `${str}:checked ${post}, ${str}[data-checked] ${post}`,
	  placeholderShown: (str, post) => `${str}:placeholder-shown ${post}`
	};
	const toGroup = (fn) => merge((v) => fn(v, "&"), "[role=group]", "[data-group]", ".group");
	const toPeer = (fn) => merge((v) => fn(v, "~ &"), "[data-peer]", ".peer");
	const merge = (fn, ...selectors) => selectors.map(fn).join(", ");
	const pseudoSelectors = {
	  /**
	   * Styles for CSS selector `&:hover`
	   */
	  _hover: "&:hover, &[data-hover]",
	  /**
	   * Styles for CSS Selector `&:active`
	   */
	  _active: "&:active, &[data-active]",
	  /**
	   * Styles for CSS selector `&:focus`
	   *
	   */
	  _focus: "&:focus, &[data-focus]",
	  /**
	   * Styles for the highlighted state.
	   */
	  _highlighted: "&[data-highlighted]",
	  /**
	   * Styles to apply when a child of this element has received focus
	   * - CSS Selector `&:focus-within`
	   */
	  _focusWithin: "&:focus-within, &[data-focus-within]",
	  /**
	   * Styles to apply when this element has received focus via tabbing
	   * - CSS Selector `&:focus-visible`
	   */
	  _focusVisible: "&:focus-visible, &[data-focus-visible]",
	  /**
	   * Styles to apply when this element is disabled. The passed styles are applied to these CSS selectors:
	   * - `&[aria-disabled=true]`
	   * - `&:disabled`
	   * - `&[data-disabled]`
	   * - `&[disabled]`
	   */
	  _disabled: "&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]",
	  /**
	   * Styles for CSS Selector `&:readonly`
	   */
	  _readOnly: "&[aria-readonly=true], &[readonly], &[data-readonly]",
	  /**
	   * Styles for CSS selector `&::before`
	   *
	   * NOTE:When using this, ensure the `content` is wrapped in a backtick.
	   * @example
	   * ```jsx
	   * <Box _before={{content:`""` }}/>
	   * ```
	   */
	  _before: "&::before",
	  /**
	   * Styles for CSS selector `&::after`
	   *
	   * NOTE:When using this, ensure the `content` is wrapped in a backtick.
	   * @example
	   * ```jsx
	   * <Box _after={{content:`""` }}/>
	   * ```
	   */
	  _after: "&::after",
	  /**
	   * Styles for CSS selector `&:empty`
	   */
	  _empty: "&:empty, &[data-empty]",
	  /**
	   * Styles to apply when the ARIA attribute `aria-expanded` is `true`
	   * - CSS selector `&[aria-expanded=true]`
	   */
	  _expanded: "&[aria-expanded=true], &[data-expanded], &[data-state=expanded]",
	  /**
	   * Styles to apply when the ARIA attribute `aria-checked` is `true`
	   * - CSS selector `&[aria-checked=true]`
	   */
	  _checked: "&[aria-checked=true], &[data-checked], &[data-state=checked]",
	  /**
	   * Styles to apply when the ARIA attribute `aria-grabbed` is `true`
	   * - CSS selector `&[aria-grabbed=true]`
	   */
	  _grabbed: "&[aria-grabbed=true], &[data-grabbed]",
	  /**
	   * Styles for CSS Selector `&[aria-pressed=true]`
	   * Typically used to style the current "pressed" state of toggle buttons
	   */
	  _pressed: "&[aria-pressed=true], &[data-pressed]",
	  /**
	   * Styles to apply when the ARIA attribute `aria-invalid` is `true`
	   * - CSS selector `&[aria-invalid=true]`
	   */
	  _invalid: "&[aria-invalid=true], &[data-invalid]",
	  /**
	   * Styles for the valid state
	   * - CSS selector `&[data-valid], &[data-state=valid]`
	   */
	  _valid: "&[data-valid], &[data-state=valid]",
	  /**
	   * Styles for CSS Selector `&[aria-busy=true]` or `&[data-loading=true]`.
	   * Useful for styling loading states
	   */
	  _loading: "&[data-loading], &[aria-busy=true]",
	  /**
	   * Styles to apply when the ARIA attribute `aria-selected` is `true`
	   *
	   * - CSS selector `&[aria-selected=true]`
	   */
	  _selected: "&[aria-selected=true], &[data-selected]",
	  /**
	   * Styles for CSS Selector `[hidden=true]`
	   */
	  _hidden: "&[hidden], &[data-hidden]",
	  /**
	   * Styles for CSS Selector `&:-webkit-autofill`
	   */
	  _autofill: "&:-webkit-autofill",
	  /**
	   * Styles for CSS Selector `&:nth-child(even)`
	   */
	  _even: "&:nth-of-type(even)",
	  /**
	   * Styles for CSS Selector `&:nth-child(odd)`
	   */
	  _odd: "&:nth-of-type(odd)",
	  /**
	   * Styles for CSS Selector `&:first-of-type`
	   */
	  _first: "&:first-of-type",
	  /**
	   * Styles for CSS selector `&::first-letter`
	   *
	   * NOTE: This selector is only applied for block-level elements and not preceded by an image or table.
	   * @example
	   * ```jsx
	   * <Text _firstLetter={{ textDecoration: 'underline' }}>Once upon a time</Text>
	   * ```
	   */
	  _firstLetter: "&::first-letter",
	  /**
	   * Styles for CSS Selector `&:last-of-type`
	   */
	  _last: "&:last-of-type",
	  /**
	   * Styles for CSS Selector `&:not(:first-of-type)`
	   */
	  _notFirst: "&:not(:first-of-type)",
	  /**
	   * Styles for CSS Selector `&:not(:last-of-type)`
	   */
	  _notLast: "&:not(:last-of-type)",
	  /**
	   * Styles for CSS Selector `&:visited`
	   */
	  _visited: "&:visited",
	  /**
	   * Used to style the active link in a navigation
	   * Styles for CSS Selector `&[aria-current=page]`
	   */
	  _activeLink: "&[aria-current=page]",
	  /**
	   * Used to style the current step within a process
	   * Styles for CSS Selector `&[aria-current=step]`
	   */
	  _activeStep: "&[aria-current=step]",
	  /**
	   * Styles to apply when the ARIA attribute `aria-checked` is `mixed`
	   * - CSS selector `&[aria-checked=mixed]`
	   */
	  _indeterminate: "&:indeterminate, &[aria-checked=mixed], &[data-indeterminate], &[data-state=indeterminate]",
	  /**
	   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is open
	   */
	  _groupOpen: toGroup(state.open),
	  /**
	   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is closed
	   */
	  _groupClosed: toGroup(state.closed),
	  /**
	   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is hovered
	   */
	  _groupHover: toGroup(state.hover),
	  /**
	   * Styles to apply when a sibling element with `.peer` or `data-peer` is hovered
	   */
	  _peerHover: toPeer(state.hover),
	  /**
	   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is focused
	   */
	  _groupFocus: toGroup(state.focus),
	  /**
	   * Styles to apply when a sibling element with `.peer` or `data-peer` is focused
	   */
	  _peerFocus: toPeer(state.focus),
	  /**
	   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` has visible focus
	   */
	  _groupFocusVisible: toGroup(state.focusVisible),
	  /**
	   * Styles to apply when a sibling element with `.peer`or `data-peer` has visible focus
	   */
	  _peerFocusVisible: toPeer(state.focusVisible),
	  /**
	   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is active
	   */
	  _groupActive: toGroup(state.active),
	  /**
	   * Styles to apply when a sibling element with `.peer` or `data-peer` is active
	   */
	  _peerActive: toPeer(state.active),
	  /**
	   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is disabled
	   */
	  _groupDisabled: toGroup(state.disabled),
	  /**
	   *  Styles to apply when a sibling element with `.peer` or `data-peer` is disabled
	   */
	  _peerDisabled: toPeer(state.disabled),
	  /**
	   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` is invalid
	   */
	  _groupInvalid: toGroup(state.invalid),
	  /**
	   *  Styles to apply when a sibling element with `.peer` or `data-peer` is invalid
	   */
	  _peerInvalid: toPeer(state.invalid),
	  /**
	   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is checked
	   */
	  _groupChecked: toGroup(state.checked),
	  /**
	   * Styles to apply when a sibling element with `.peer` or `data-peer` is checked
	   */
	  _peerChecked: toPeer(state.checked),
	  /**
	   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` has focus within
	   */
	  _groupFocusWithin: toGroup(state.focusWithin),
	  /**
	   *  Styles to apply when a sibling element with `.peer` or `data-peer` has focus within
	   */
	  _peerFocusWithin: toPeer(state.focusWithin),
	  /**
	   * Styles to apply when a sibling element with `.peer` or `data-peer` has placeholder shown
	   */
	  _peerPlaceholderShown: toPeer(state.placeholderShown),
	  /**
	   * Styles for CSS Selector `&::placeholder`.
	   */
	  _placeholder: "&::placeholder, &[data-placeholder]",
	  /**
	   * Styles for CSS Selector `&:placeholder-shown`.
	   */
	  _placeholderShown: "&:placeholder-shown, &[data-placeholder-shown]",
	  /**
	   * Styles for CSS Selector `&:fullscreen`.
	   */
	  _fullScreen: "&:fullscreen, &[data-fullscreen]",
	  /**
	   * Styles for CSS Selector `&::selection`
	   */
	  _selection: "&::selection",
	  /**
	   * Styles for CSS Selector `[dir=rtl] &`
	   * It is applied when a parent element or this element has `dir="rtl"`
	   */
	  _rtl: "[dir=rtl] &, &[dir=rtl]",
	  /**
	   * Styles for CSS Selector `[dir=ltr] &`
	   * It is applied when a parent element or this element has `dir="ltr"`
	   */
	  _ltr: "[dir=ltr] &, &[dir=ltr]",
	  /**
	   * Styles for CSS Selector `@media (prefers-color-scheme: dark)`
	   * It is used when the user has requested the system use a light or dark color theme.
	   */
	  _mediaDark: "@media (prefers-color-scheme: dark)",
	  /**
	   * Styles for CSS Selector `@media (prefers-reduced-motion: reduce)`
	   * It is used when the user has requested the system to reduce the amount of animations.
	   */
	  _mediaReduceMotion: "@media (prefers-reduced-motion: reduce)",
	  /**
	   * Styles for when `data-theme` is applied to any parent of
	   * this component or element.
	   */
	  _dark: ".chakra-ui-dark &:not([data-theme]),[data-theme=dark] &:not([data-theme]),&[data-theme=dark]",
	  /**
	   * Styles for when `data-theme` is applied to any parent of
	   * this component or element.
	   */
	  _light: ".chakra-ui-light &:not([data-theme]),[data-theme=light] &:not([data-theme]),&[data-theme=light]",
	  /**
	   * Styles for the CSS Selector `&[data-orientation=horizontal]`
	   */
	  _horizontal: "&[data-orientation=horizontal]",
	  /**
	   * Styles for the CSS Selector `&[data-orientation=vertical]`
	   */
	  _vertical: "&[data-orientation=vertical]",
	  /**
	   * Styles for the CSS Selector `&[data-open], &[open], &[data-state=open]`
	   */
	  _open: "&[data-open], &[open], &[data-state=open]",
	  /**
	   * Styles for the CSS Selector `&[data-closed], &[data-state=closed]`
	   */
	  _closed: "&[data-closed], &[data-state=closed]",
	  /**
	   * Styles for the CSS Selector `&[data-complete]`
	   */
	  _complete: "&[data-complete]",
	  /**
	   * Styles for the CSS Selector `&[data-incomplete]`
	   */
	  _incomplete: "&[data-incomplete]",
	  /**
	   * Styles for the CSS Selector `&[data-current]`
	   */
	  _current: "&[data-current]"
	};
	const pseudoPropNames = Object.keys(
	  pseudoSelectors
	);

	const isImportant = (value) => /!(important)?$/.test(value);
	const withoutImportant = (value) => typeof value === "string" ? value.replace(/!(important)?$/, "").trim() : value;
	const tokenToCSSVar = (scale, value) => (theme) => {
	  const valueStr = String(value);
	  const important = isImportant(valueStr);
	  const valueWithoutImportant = withoutImportant(valueStr);
	  const key = scale ? `${scale}.${valueWithoutImportant}` : valueWithoutImportant;
	  let transformed = isObject$1(theme.__cssMap) && key in theme.__cssMap ? theme.__cssMap[key].varRef : value;
	  transformed = withoutImportant(transformed);
	  return important ? `${transformed} !important` : transformed;
	};
	function createTransform(options) {
	  const { scale, transform, compose } = options;
	  const fn = (value, theme) => {
	    const _value = tokenToCSSVar(scale, value)(theme);
	    let result = transform?.(_value, theme) ?? _value;
	    if (compose) {
	      result = compose(result, theme);
	    }
	    return result;
	  };
	  return fn;
	}

	const pipe$2 = (...fns) => (v) => fns.reduce((a, b) => b(a), v);

	function toConfig(scale, transform) {
	  return (property) => {
	    const result = { property, scale };
	    result.transform = createTransform({
	      scale,
	      transform
	    });
	    return result;
	  };
	}
	const getRtl = ({ rtl, ltr }) => (theme) => theme.direction === "rtl" ? rtl : ltr;
	function logical(options) {
	  const { property, scale, transform } = options;
	  return {
	    scale,
	    property: getRtl(property),
	    transform: scale ? createTransform({
	      scale,
	      compose: transform
	    }) : transform
	  };
	}

	const transformTemplate = [
	  "rotate(var(--chakra-rotate, 0))",
	  "scaleX(var(--chakra-scale-x, 1))",
	  "scaleY(var(--chakra-scale-y, 1))",
	  "skewX(var(--chakra-skew-x, 0))",
	  "skewY(var(--chakra-skew-y, 0))"
	];
	function getTransformTemplate() {
	  return [
	    "translateX(var(--chakra-translate-x, 0))",
	    "translateY(var(--chakra-translate-y, 0))",
	    ...transformTemplate
	  ].join(" ");
	}
	function getTransformGpuTemplate() {
	  return [
	    "translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)",
	    ...transformTemplate
	  ].join(" ");
	}
	const filterTemplate = {
	  "--chakra-blur": "var(--chakra-empty,/*!*/ /*!*/)",
	  "--chakra-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
	  "--chakra-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
	  "--chakra-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
	  "--chakra-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
	  "--chakra-invert": "var(--chakra-empty,/*!*/ /*!*/)",
	  "--chakra-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
	  "--chakra-sepia": "var(--chakra-empty,/*!*/ /*!*/)",
	  "--chakra-drop-shadow": "var(--chakra-empty,/*!*/ /*!*/)",
	  filter: [
	    "var(--chakra-blur)",
	    "var(--chakra-brightness)",
	    "var(--chakra-contrast)",
	    "var(--chakra-grayscale)",
	    "var(--chakra-hue-rotate)",
	    "var(--chakra-invert)",
	    "var(--chakra-saturate)",
	    "var(--chakra-sepia)",
	    "var(--chakra-drop-shadow)"
	  ].join(" ")
	};
	const backdropFilterTemplate = {
	  backdropFilter: [
	    "var(--chakra-backdrop-blur)",
	    "var(--chakra-backdrop-brightness)",
	    "var(--chakra-backdrop-contrast)",
	    "var(--chakra-backdrop-grayscale)",
	    "var(--chakra-backdrop-hue-rotate)",
	    "var(--chakra-backdrop-invert)",
	    "var(--chakra-backdrop-opacity)",
	    "var(--chakra-backdrop-saturate)",
	    "var(--chakra-backdrop-sepia)"
	  ].join(" "),
	  "--chakra-backdrop-blur": "var(--chakra-empty,/*!*/ /*!*/)",
	  "--chakra-backdrop-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
	  "--chakra-backdrop-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
	  "--chakra-backdrop-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
	  "--chakra-backdrop-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
	  "--chakra-backdrop-invert": "var(--chakra-empty,/*!*/ /*!*/)",
	  "--chakra-backdrop-opacity": "var(--chakra-empty,/*!*/ /*!*/)",
	  "--chakra-backdrop-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
	  "--chakra-backdrop-sepia": "var(--chakra-empty,/*!*/ /*!*/)"
	};
	function getRingTemplate(value) {
	  return {
	    "--chakra-ring-offset-shadow": `var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset-width) var(--chakra-ring-offset-color)`,
	    "--chakra-ring-shadow": `var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset-width)) var(--chakra-ring-color)`,
	    "--chakra-ring-width": value,
	    boxShadow: [
	      `var(--chakra-ring-offset-shadow)`,
	      `var(--chakra-ring-shadow)`,
	      `var(--chakra-shadow, 0 0 #0000)`
	    ].join(", ")
	  };
	}
	const flexDirectionTemplate = {
	  "row-reverse": {
	    space: "--chakra-space-x-reverse",
	    divide: "--chakra-divide-x-reverse"
	  },
	  "column-reverse": {
	    space: "--chakra-space-y-reverse",
	    divide: "--chakra-divide-y-reverse"
	  }
	};

	const directionMap = {
	  "to-t": "to top",
	  "to-tr": "to top right",
	  "to-r": "to right",
	  "to-br": "to bottom right",
	  "to-b": "to bottom",
	  "to-bl": "to bottom left",
	  "to-l": "to left",
	  "to-tl": "to top left"
	};
	const valueSet = new Set(Object.values(directionMap));
	const globalSet = /* @__PURE__ */ new Set([
	  "none",
	  "-moz-initial",
	  "inherit",
	  "initial",
	  "revert",
	  "unset"
	]);
	const trimSpace = (str) => str.trim();
	function parseGradient(value, theme) {
	  if (value == null || globalSet.has(value))
	    return value;
	  const prevent = isCSSFunction(value) || globalSet.has(value);
	  if (!prevent)
	    return `url('${value}')`;
	  const regex = /(^[a-z-A-Z]+)\((.*)\)/g;
	  const results = regex.exec(value);
	  const type = results?.[1];
	  const values = results?.[2];
	  if (!type || !values)
	    return value;
	  const _type = type.includes("-gradient") ? type : `${type}-gradient`;
	  const [maybeDirection, ...stops] = values.split(",").map(trimSpace).filter(Boolean);
	  if (stops?.length === 0)
	    return value;
	  const direction = maybeDirection in directionMap ? directionMap[maybeDirection] : maybeDirection;
	  stops.unshift(direction);
	  const _values = stops.map((stop) => {
	    if (valueSet.has(stop))
	      return stop;
	    const firstStop = stop.indexOf(" ");
	    const [_color, _stop] = firstStop !== -1 ? [stop.substr(0, firstStop), stop.substr(firstStop + 1)] : [stop];
	    const _stopOrFunc = isCSSFunction(_stop) ? _stop : _stop && _stop.split(" ");
	    const key = `colors.${_color}`;
	    const color = key in theme.__cssMap ? theme.__cssMap[key].varRef : _color;
	    return _stopOrFunc ? [
	      color,
	      ...Array.isArray(_stopOrFunc) ? _stopOrFunc : [_stopOrFunc]
	    ].join(" ") : color;
	  });
	  return `${_type}(${_values.join(", ")})`;
	}
	const isCSSFunction = (value) => {
	  return typeof value === "string" && value.includes("(") && value.includes(")");
	};
	const gradientTransform = (value, theme) => parseGradient(value, theme ?? {});

	function isCssVar$1(value) {
	  return /^var\(--.+\)$/.test(value);
	}
	const analyzeCSSValue = (value) => {
	  const num = parseFloat(value.toString());
	  const unit = value.toString().replace(String(num), "");
	  return { unitless: !unit, value: num, unit };
	};
	const wrap = (str) => (value) => `${str}(${value})`;
	const transformFunctions = {
	  filter(value) {
	    return value !== "auto" ? value : filterTemplate;
	  },
	  backdropFilter(value) {
	    return value !== "auto" ? value : backdropFilterTemplate;
	  },
	  ring(value) {
	    return getRingTemplate(transformFunctions.px(value));
	  },
	  bgClip(value) {
	    return value === "text" ? { color: "transparent", backgroundClip: "text" } : { backgroundClip: value };
	  },
	  transform(value) {
	    if (value === "auto")
	      return getTransformTemplate();
	    if (value === "auto-gpu")
	      return getTransformGpuTemplate();
	    return value;
	  },
	  vh(value) {
	    return value === "$100vh" ? "var(--chakra-vh)" : value;
	  },
	  px(value) {
	    if (value == null)
	      return value;
	    const { unitless } = analyzeCSSValue(value);
	    return unitless || typeof value === "number" ? `${value}px` : value;
	  },
	  fraction(value) {
	    return !(typeof value === "number") || value > 1 ? value : `${value * 100}%`;
	  },
	  float(value, theme) {
	    const map = { left: "right", right: "left" };
	    return theme.direction === "rtl" ? map[value] : value;
	  },
	  degree(value) {
	    if (isCssVar$1(value) || value == null)
	      return value;
	    const unitless = typeof value === "string" && !value.endsWith("deg");
	    return typeof value === "number" || unitless ? `${value}deg` : value;
	  },
	  gradient: gradientTransform,
	  blur: wrap("blur"),
	  opacity: wrap("opacity"),
	  brightness: wrap("brightness"),
	  contrast: wrap("contrast"),
	  dropShadow: wrap("drop-shadow"),
	  grayscale: wrap("grayscale"),
	  hueRotate: (value) => wrap("hue-rotate")(transformFunctions.degree(value)),
	  invert: wrap("invert"),
	  saturate: wrap("saturate"),
	  sepia: wrap("sepia"),
	  bgImage(value) {
	    if (value == null)
	      return value;
	    const prevent = isCSSFunction(value) || globalSet.has(value);
	    return !prevent ? `url(${value})` : value;
	  },
	  outline(value) {
	    const isNoneOrZero = String(value) === "0" || String(value) === "none";
	    return value !== null && isNoneOrZero ? { outline: "2px solid transparent", outlineOffset: "2px" } : { outline: value };
	  },
	  flexDirection(value) {
	    const { space, divide } = flexDirectionTemplate[value] ?? {};
	    const result = { flexDirection: value };
	    if (space)
	      result[space] = 1;
	    if (divide)
	      result[divide] = 1;
	    return result;
	  }
	};

	const t = {
	  borderWidths: toConfig("borderWidths"),
	  borderStyles: toConfig("borderStyles"),
	  colors: toConfig("colors"),
	  borders: toConfig("borders"),
	  gradients: toConfig("gradients", transformFunctions.gradient),
	  radii: toConfig("radii", transformFunctions.px),
	  space: toConfig("space", pipe$2(transformFunctions.vh, transformFunctions.px)),
	  spaceT: toConfig("space", pipe$2(transformFunctions.vh, transformFunctions.px)),
	  degreeT(property) {
	    return { property, transform: transformFunctions.degree };
	  },
	  prop(property, scale, transform) {
	    return {
	      property,
	      scale,
	      ...scale && {
	        transform: createTransform({ scale, transform })
	      }
	    };
	  },
	  propT(property, transform) {
	    return { property, transform };
	  },
	  sizes: toConfig("sizes", pipe$2(transformFunctions.vh, transformFunctions.px)),
	  sizesT: toConfig("sizes", pipe$2(transformFunctions.vh, transformFunctions.fraction)),
	  shadows: toConfig("shadows"),
	  logical,
	  blur: toConfig("blur", transformFunctions.blur)
	};

	const background = {
	  background: t.colors("background"),
	  backgroundColor: t.colors("backgroundColor"),
	  backgroundImage: t.gradients("backgroundImage"),
	  backgroundSize: true,
	  backgroundPosition: true,
	  backgroundRepeat: true,
	  backgroundAttachment: true,
	  backgroundClip: { transform: transformFunctions.bgClip },
	  bgSize: t.prop("backgroundSize"),
	  bgPosition: t.prop("backgroundPosition"),
	  bg: t.colors("background"),
	  bgColor: t.colors("backgroundColor"),
	  bgPos: t.prop("backgroundPosition"),
	  bgRepeat: t.prop("backgroundRepeat"),
	  bgAttachment: t.prop("backgroundAttachment"),
	  bgGradient: t.gradients("backgroundImage"),
	  bgClip: { transform: transformFunctions.bgClip }
	};
	Object.assign(background, {
	  bgImage: background.backgroundImage,
	  bgImg: background.backgroundImage
	});

	const border = {
	  border: t.borders("border"),
	  borderWidth: t.borderWidths("borderWidth"),
	  borderStyle: t.borderStyles("borderStyle"),
	  borderColor: t.colors("borderColor"),
	  borderRadius: t.radii("borderRadius"),
	  borderTop: t.borders("borderTop"),
	  borderBlockStart: t.borders("borderBlockStart"),
	  borderTopLeftRadius: t.radii("borderTopLeftRadius"),
	  borderStartStartRadius: t.logical({
	    scale: "radii",
	    property: {
	      ltr: "borderTopLeftRadius",
	      rtl: "borderTopRightRadius"
	    }
	  }),
	  borderEndStartRadius: t.logical({
	    scale: "radii",
	    property: {
	      ltr: "borderBottomLeftRadius",
	      rtl: "borderBottomRightRadius"
	    }
	  }),
	  borderTopRightRadius: t.radii("borderTopRightRadius"),
	  borderStartEndRadius: t.logical({
	    scale: "radii",
	    property: {
	      ltr: "borderTopRightRadius",
	      rtl: "borderTopLeftRadius"
	    }
	  }),
	  borderEndEndRadius: t.logical({
	    scale: "radii",
	    property: {
	      ltr: "borderBottomRightRadius",
	      rtl: "borderBottomLeftRadius"
	    }
	  }),
	  borderRight: t.borders("borderRight"),
	  borderInlineEnd: t.borders("borderInlineEnd"),
	  borderBottom: t.borders("borderBottom"),
	  borderBlockEnd: t.borders("borderBlockEnd"),
	  borderBottomLeftRadius: t.radii("borderBottomLeftRadius"),
	  borderBottomRightRadius: t.radii("borderBottomRightRadius"),
	  borderLeft: t.borders("borderLeft"),
	  borderInlineStart: {
	    property: "borderInlineStart",
	    scale: "borders"
	  },
	  borderInlineStartRadius: t.logical({
	    scale: "radii",
	    property: {
	      ltr: ["borderTopLeftRadius", "borderBottomLeftRadius"],
	      rtl: ["borderTopRightRadius", "borderBottomRightRadius"]
	    }
	  }),
	  borderInlineEndRadius: t.logical({
	    scale: "radii",
	    property: {
	      ltr: ["borderTopRightRadius", "borderBottomRightRadius"],
	      rtl: ["borderTopLeftRadius", "borderBottomLeftRadius"]
	    }
	  }),
	  borderX: t.borders(["borderLeft", "borderRight"]),
	  borderInline: t.borders("borderInline"),
	  borderY: t.borders(["borderTop", "borderBottom"]),
	  borderBlock: t.borders("borderBlock"),
	  borderTopWidth: t.borderWidths("borderTopWidth"),
	  borderBlockStartWidth: t.borderWidths("borderBlockStartWidth"),
	  borderTopColor: t.colors("borderTopColor"),
	  borderBlockStartColor: t.colors("borderBlockStartColor"),
	  borderTopStyle: t.borderStyles("borderTopStyle"),
	  borderBlockStartStyle: t.borderStyles("borderBlockStartStyle"),
	  borderBottomWidth: t.borderWidths("borderBottomWidth"),
	  borderBlockEndWidth: t.borderWidths("borderBlockEndWidth"),
	  borderBottomColor: t.colors("borderBottomColor"),
	  borderBlockEndColor: t.colors("borderBlockEndColor"),
	  borderBottomStyle: t.borderStyles("borderBottomStyle"),
	  borderBlockEndStyle: t.borderStyles("borderBlockEndStyle"),
	  borderLeftWidth: t.borderWidths("borderLeftWidth"),
	  borderInlineStartWidth: t.borderWidths("borderInlineStartWidth"),
	  borderLeftColor: t.colors("borderLeftColor"),
	  borderInlineStartColor: t.colors("borderInlineStartColor"),
	  borderLeftStyle: t.borderStyles("borderLeftStyle"),
	  borderInlineStartStyle: t.borderStyles("borderInlineStartStyle"),
	  borderRightWidth: t.borderWidths("borderRightWidth"),
	  borderInlineEndWidth: t.borderWidths("borderInlineEndWidth"),
	  borderRightColor: t.colors("borderRightColor"),
	  borderInlineEndColor: t.colors("borderInlineEndColor"),
	  borderRightStyle: t.borderStyles("borderRightStyle"),
	  borderInlineEndStyle: t.borderStyles("borderInlineEndStyle"),
	  borderTopRadius: t.radii(["borderTopLeftRadius", "borderTopRightRadius"]),
	  borderBottomRadius: t.radii([
	    "borderBottomLeftRadius",
	    "borderBottomRightRadius"
	  ]),
	  borderLeftRadius: t.radii(["borderTopLeftRadius", "borderBottomLeftRadius"]),
	  borderRightRadius: t.radii([
	    "borderTopRightRadius",
	    "borderBottomRightRadius"
	  ])
	};
	Object.assign(border, {
	  rounded: border.borderRadius,
	  roundedTop: border.borderTopRadius,
	  roundedTopLeft: border.borderTopLeftRadius,
	  roundedTopRight: border.borderTopRightRadius,
	  roundedTopStart: border.borderStartStartRadius,
	  roundedTopEnd: border.borderStartEndRadius,
	  roundedBottom: border.borderBottomRadius,
	  roundedBottomLeft: border.borderBottomLeftRadius,
	  roundedBottomRight: border.borderBottomRightRadius,
	  roundedBottomStart: border.borderEndStartRadius,
	  roundedBottomEnd: border.borderEndEndRadius,
	  roundedLeft: border.borderLeftRadius,
	  roundedRight: border.borderRightRadius,
	  roundedStart: border.borderInlineStartRadius,
	  roundedEnd: border.borderInlineEndRadius,
	  borderStart: border.borderInlineStart,
	  borderEnd: border.borderInlineEnd,
	  borderTopStartRadius: border.borderStartStartRadius,
	  borderTopEndRadius: border.borderStartEndRadius,
	  borderBottomStartRadius: border.borderEndStartRadius,
	  borderBottomEndRadius: border.borderEndEndRadius,
	  borderStartRadius: border.borderInlineStartRadius,
	  borderEndRadius: border.borderInlineEndRadius,
	  borderStartWidth: border.borderInlineStartWidth,
	  borderEndWidth: border.borderInlineEndWidth,
	  borderStartColor: border.borderInlineStartColor,
	  borderEndColor: border.borderInlineEndColor,
	  borderStartStyle: border.borderInlineStartStyle,
	  borderEndStyle: border.borderInlineEndStyle
	});

	const color$1 = {
	  color: t.colors("color"),
	  textColor: t.colors("color"),
	  fill: t.colors("fill"),
	  stroke: t.colors("stroke"),
	  accentColor: t.colors("accentColor"),
	  textFillColor: t.colors("textFillColor")
	};

	const flexbox = {
	  alignItems: true,
	  alignContent: true,
	  justifyItems: true,
	  justifyContent: true,
	  flexWrap: true,
	  flexDirection: { transform: transformFunctions.flexDirection },
	  flex: true,
	  flexFlow: true,
	  flexGrow: true,
	  flexShrink: true,
	  flexBasis: t.sizes("flexBasis"),
	  justifySelf: true,
	  alignSelf: true,
	  order: true,
	  placeItems: true,
	  placeContent: true,
	  placeSelf: true,
	  gap: t.space("gap"),
	  rowGap: t.space("rowGap"),
	  columnGap: t.space("columnGap")
	};
	Object.assign(flexbox, {
	  flexDir: flexbox.flexDirection
	});

	const layout$1 = {
	  width: t.sizesT("width"),
	  inlineSize: t.sizesT("inlineSize"),
	  height: t.sizes("height"),
	  blockSize: t.sizes("blockSize"),
	  boxSize: t.sizes(["width", "height"]),
	  minWidth: t.sizes("minWidth"),
	  minInlineSize: t.sizes("minInlineSize"),
	  minHeight: t.sizes("minHeight"),
	  minBlockSize: t.sizes("minBlockSize"),
	  maxWidth: t.sizes("maxWidth"),
	  maxInlineSize: t.sizes("maxInlineSize"),
	  maxHeight: t.sizes("maxHeight"),
	  maxBlockSize: t.sizes("maxBlockSize"),
	  overflow: true,
	  overflowX: true,
	  overflowY: true,
	  overscrollBehavior: true,
	  overscrollBehaviorX: true,
	  overscrollBehaviorY: true,
	  display: true,
	  aspectRatio: true,
	  hideFrom: {
	    scale: "breakpoints",
	    transform: (value, theme) => {
	      const breakpoint = theme.__breakpoints?.get(value)?.minW ?? value;
	      const mq = `@media screen and (min-width: ${breakpoint})`;
	      return { [mq]: { display: "none" } };
	    }
	  },
	  hideBelow: {
	    scale: "breakpoints",
	    transform: (value, theme) => {
	      const breakpoint = theme.__breakpoints?.get(value)?._minW ?? value;
	      const mq = `@media screen and (max-width: ${breakpoint})`;
	      return { [mq]: { display: "none" } };
	    }
	  },
	  verticalAlign: true,
	  boxSizing: true,
	  boxDecorationBreak: true,
	  float: t.propT("float", transformFunctions.float),
	  objectFit: true,
	  objectPosition: true,
	  visibility: true,
	  isolation: true
	};
	Object.assign(layout$1, {
	  w: layout$1.width,
	  h: layout$1.height,
	  minW: layout$1.minWidth,
	  maxW: layout$1.maxWidth,
	  minH: layout$1.minHeight,
	  maxH: layout$1.maxHeight,
	  overscroll: layout$1.overscrollBehavior,
	  overscrollX: layout$1.overscrollBehaviorX,
	  overscrollY: layout$1.overscrollBehaviorY
	});

	const filter$1 = {
	  filter: { transform: transformFunctions.filter },
	  blur: t.blur("--chakra-blur"),
	  brightness: t.propT("--chakra-brightness", transformFunctions.brightness),
	  contrast: t.propT("--chakra-contrast", transformFunctions.contrast),
	  hueRotate: t.propT("--chakra-hue-rotate", transformFunctions.hueRotate),
	  invert: t.propT("--chakra-invert", transformFunctions.invert),
	  saturate: t.propT("--chakra-saturate", transformFunctions.saturate),
	  dropShadow: t.propT("--chakra-drop-shadow", transformFunctions.dropShadow),
	  backdropFilter: { transform: transformFunctions.backdropFilter },
	  backdropBlur: t.blur("--chakra-backdrop-blur"),
	  backdropBrightness: t.propT(
	    "--chakra-backdrop-brightness",
	    transformFunctions.brightness
	  ),
	  backdropContrast: t.propT("--chakra-backdrop-contrast", transformFunctions.contrast),
	  backdropHueRotate: t.propT(
	    "--chakra-backdrop-hue-rotate",
	    transformFunctions.hueRotate
	  ),
	  backdropInvert: t.propT("--chakra-backdrop-invert", transformFunctions.invert),
	  backdropSaturate: t.propT("--chakra-backdrop-saturate", transformFunctions.saturate)
	};

	const ring = {
	  ring: { transform: transformFunctions.ring },
	  ringColor: t.colors("--chakra-ring-color"),
	  ringOffset: t.prop("--chakra-ring-offset-width"),
	  ringOffsetColor: t.colors("--chakra-ring-offset-color"),
	  ringInset: t.prop("--chakra-ring-inset")
	};

	const interactivity = {
	  appearance: true,
	  cursor: true,
	  resize: true,
	  userSelect: true,
	  pointerEvents: true,
	  outline: { transform: transformFunctions.outline },
	  outlineOffset: true,
	  outlineColor: t.colors("outlineColor")
	};

	const grid = {
	  gridGap: t.space("gridGap"),
	  gridColumnGap: t.space("gridColumnGap"),
	  gridRowGap: t.space("gridRowGap"),
	  gridColumn: true,
	  gridRow: true,
	  gridAutoFlow: true,
	  gridAutoColumns: true,
	  gridColumnStart: true,
	  gridColumnEnd: true,
	  gridRowStart: true,
	  gridRowEnd: true,
	  gridAutoRows: true,
	  gridTemplate: true,
	  gridTemplateColumns: true,
	  gridTemplateRows: true,
	  gridTemplateAreas: true,
	  gridArea: true
	};

	function get$1(obj, path, fallback, index) {
	  const key = typeof path === "string" ? path.split(".") : [path];
	  for (index = 0; index < key.length; index += 1) {
	    if (!obj)
	      break;
	    obj = obj[key[index]];
	  }
	  return obj === void 0 ? fallback : obj;
	}
	const memoize$1 = (fn) => {
	  const cache = /* @__PURE__ */ new WeakMap();
	  const memoizedFn = (obj, path, fallback, index) => {
	    if (typeof obj === "undefined") {
	      return fn(obj, path, fallback);
	    }
	    if (!cache.has(obj)) {
	      cache.set(obj, /* @__PURE__ */ new Map());
	    }
	    const map = cache.get(obj);
	    if (map.has(path)) {
	      return map.get(path);
	    }
	    const value = fn(obj, path, fallback, index);
	    map.set(path, value);
	    return value;
	  };
	  return memoizedFn;
	};
	const memoizedGet = memoize$1(get$1);

	const srOnly = {
	  border: "0px",
	  clip: "rect(0, 0, 0, 0)",
	  width: "1px",
	  height: "1px",
	  margin: "-1px",
	  padding: "0px",
	  overflow: "hidden",
	  whiteSpace: "nowrap",
	  position: "absolute"
	};
	const srFocusable = {
	  position: "static",
	  width: "auto",
	  height: "auto",
	  clip: "auto",
	  padding: "0",
	  margin: "0",
	  overflow: "visible",
	  whiteSpace: "normal"
	};
	const getWithPriority = (theme, key, styles) => {
	  const result = {};
	  const obj = memoizedGet(theme, key, {});
	  for (const prop in obj) {
	    const isInStyles = prop in styles && styles[prop] != null;
	    if (!isInStyles)
	      result[prop] = obj[prop];
	  }
	  return result;
	};
	const others = {
	  srOnly: {
	    transform(value) {
	      if (value === true)
	        return srOnly;
	      if (value === "focusable")
	        return srFocusable;
	      return {};
	    }
	  },
	  layerStyle: {
	    processResult: true,
	    transform: (value, theme, styles) => getWithPriority(theme, `layerStyles.${value}`, styles)
	  },
	  textStyle: {
	    processResult: true,
	    transform: (value, theme, styles) => getWithPriority(theme, `textStyles.${value}`, styles)
	  },
	  apply: {
	    processResult: true,
	    transform: (value, theme, styles) => getWithPriority(theme, value, styles)
	  }
	};

	const position = {
	  position: true,
	  pos: t.prop("position"),
	  zIndex: t.prop("zIndex", "zIndices"),
	  inset: t.spaceT("inset"),
	  insetX: t.spaceT(["left", "right"]),
	  insetInline: t.spaceT("insetInline"),
	  insetY: t.spaceT(["top", "bottom"]),
	  insetBlock: t.spaceT("insetBlock"),
	  top: t.spaceT("top"),
	  insetBlockStart: t.spaceT("insetBlockStart"),
	  bottom: t.spaceT("bottom"),
	  insetBlockEnd: t.spaceT("insetBlockEnd"),
	  left: t.spaceT("left"),
	  insetInlineStart: t.logical({
	    scale: "space",
	    property: { ltr: "left", rtl: "right" }
	  }),
	  right: t.spaceT("right"),
	  insetInlineEnd: t.logical({
	    scale: "space",
	    property: { ltr: "right", rtl: "left" }
	  })
	};
	Object.assign(position, {
	  insetStart: position.insetInlineStart,
	  insetEnd: position.insetInlineEnd
	});

	const effect = {
	  boxShadow: t.shadows("boxShadow"),
	  mixBlendMode: true,
	  blendMode: t.prop("mixBlendMode"),
	  backgroundBlendMode: true,
	  bgBlendMode: t.prop("backgroundBlendMode"),
	  opacity: true
	};
	Object.assign(effect, {
	  shadow: effect.boxShadow
	});

	const space = {
	  margin: t.spaceT("margin"),
	  marginTop: t.spaceT("marginTop"),
	  marginBlockStart: t.spaceT("marginBlockStart"),
	  marginRight: t.spaceT("marginRight"),
	  marginInlineEnd: t.spaceT("marginInlineEnd"),
	  marginBottom: t.spaceT("marginBottom"),
	  marginBlockEnd: t.spaceT("marginBlockEnd"),
	  marginLeft: t.spaceT("marginLeft"),
	  marginInlineStart: t.spaceT("marginInlineStart"),
	  marginX: t.spaceT(["marginInlineStart", "marginInlineEnd"]),
	  marginInline: t.spaceT("marginInline"),
	  marginY: t.spaceT(["marginTop", "marginBottom"]),
	  marginBlock: t.spaceT("marginBlock"),
	  padding: t.space("padding"),
	  paddingTop: t.space("paddingTop"),
	  paddingBlockStart: t.space("paddingBlockStart"),
	  paddingRight: t.space("paddingRight"),
	  paddingBottom: t.space("paddingBottom"),
	  paddingBlockEnd: t.space("paddingBlockEnd"),
	  paddingLeft: t.space("paddingLeft"),
	  paddingInlineStart: t.space("paddingInlineStart"),
	  paddingInlineEnd: t.space("paddingInlineEnd"),
	  paddingX: t.space(["paddingInlineStart", "paddingInlineEnd"]),
	  paddingInline: t.space("paddingInline"),
	  paddingY: t.space(["paddingTop", "paddingBottom"]),
	  paddingBlock: t.space("paddingBlock")
	};
	Object.assign(space, {
	  m: space.margin,
	  mt: space.marginTop,
	  mr: space.marginRight,
	  me: space.marginInlineEnd,
	  marginEnd: space.marginInlineEnd,
	  mb: space.marginBottom,
	  ml: space.marginLeft,
	  ms: space.marginInlineStart,
	  marginStart: space.marginInlineStart,
	  mx: space.marginX,
	  my: space.marginY,
	  p: space.padding,
	  pt: space.paddingTop,
	  py: space.paddingY,
	  px: space.paddingX,
	  pb: space.paddingBottom,
	  pl: space.paddingLeft,
	  ps: space.paddingInlineStart,
	  paddingStart: space.paddingInlineStart,
	  pr: space.paddingRight,
	  pe: space.paddingInlineEnd,
	  paddingEnd: space.paddingInlineEnd
	});

	const scroll = {
	  scrollBehavior: true,
	  scrollSnapAlign: true,
	  scrollSnapStop: true,
	  scrollSnapType: true,
	  // scroll margin
	  scrollMargin: t.spaceT("scrollMargin"),
	  scrollMarginTop: t.spaceT("scrollMarginTop"),
	  scrollMarginBottom: t.spaceT("scrollMarginBottom"),
	  scrollMarginLeft: t.spaceT("scrollMarginLeft"),
	  scrollMarginRight: t.spaceT("scrollMarginRight"),
	  scrollMarginX: t.spaceT(["scrollMarginLeft", "scrollMarginRight"]),
	  scrollMarginY: t.spaceT(["scrollMarginTop", "scrollMarginBottom"]),
	  // scroll padding
	  scrollPadding: t.spaceT("scrollPadding"),
	  scrollPaddingTop: t.spaceT("scrollPaddingTop"),
	  scrollPaddingBottom: t.spaceT("scrollPaddingBottom"),
	  scrollPaddingLeft: t.spaceT("scrollPaddingLeft"),
	  scrollPaddingRight: t.spaceT("scrollPaddingRight"),
	  scrollPaddingX: t.spaceT(["scrollPaddingLeft", "scrollPaddingRight"]),
	  scrollPaddingY: t.spaceT(["scrollPaddingTop", "scrollPaddingBottom"])
	};

	const typography$1 = {
	  fontFamily: t.prop("fontFamily", "fonts"),
	  fontSize: t.prop("fontSize", "fontSizes", transformFunctions.px),
	  fontWeight: t.prop("fontWeight", "fontWeights"),
	  lineHeight: t.prop("lineHeight", "lineHeights"),
	  letterSpacing: t.prop("letterSpacing", "letterSpacings"),
	  textAlign: true,
	  fontStyle: true,
	  textIndent: true,
	  wordBreak: true,
	  overflowWrap: true,
	  textOverflow: true,
	  textTransform: true,
	  whiteSpace: true,
	  isTruncated: {
	    transform(value) {
	      if (value === true) {
	        return {
	          overflow: "hidden",
	          textOverflow: "ellipsis",
	          whiteSpace: "nowrap"
	        };
	      }
	    }
	  },
	  noOfLines: {
	    static: {
	      overflow: "hidden",
	      textOverflow: "ellipsis",
	      display: "-webkit-box",
	      WebkitBoxOrient: "vertical",
	      //@ts-ignore
	      WebkitLineClamp: "var(--chakra-line-clamp)"
	    },
	    property: "--chakra-line-clamp"
	  }
	};

	const textDecoration = {
	  textDecorationColor: t.colors("textDecorationColor"),
	  textDecoration: true,
	  textDecor: { property: "textDecoration" },
	  textDecorationLine: true,
	  textDecorationStyle: true,
	  textDecorationThickness: true,
	  textUnderlineOffset: true,
	  textShadow: t.shadows("textShadow")
	};

	const transform = {
	  clipPath: true,
	  transform: t.propT("transform", transformFunctions.transform),
	  transformOrigin: true,
	  translateX: t.spaceT("--chakra-translate-x"),
	  translateY: t.spaceT("--chakra-translate-y"),
	  skewX: t.degreeT("--chakra-skew-x"),
	  skewY: t.degreeT("--chakra-skew-y"),
	  scaleX: t.prop("--chakra-scale-x"),
	  scaleY: t.prop("--chakra-scale-y"),
	  scale: t.prop(["--chakra-scale-x", "--chakra-scale-y"]),
	  rotate: t.degreeT("--chakra-rotate")
	};

	const list = {
	  listStyleType: true,
	  listStylePosition: true,
	  listStylePos: t.prop("listStylePosition"),
	  listStyleImage: true,
	  listStyleImg: t.prop("listStyleImage")
	};

	const transition$1 = {
	  transition: true,
	  transitionDelay: true,
	  animation: true,
	  willChange: true,
	  transitionDuration: t.prop("transitionDuration", "transition.duration"),
	  transitionProperty: t.prop("transitionProperty", "transition.property"),
	  transitionTimingFunction: t.prop(
	    "transitionTimingFunction",
	    "transition.easing"
	  )
	};

	const systemProps = mergeWith(
	  {},
	  background,
	  border,
	  color$1,
	  flexbox,
	  layout$1,
	  filter$1,
	  ring,
	  interactivity,
	  grid,
	  others,
	  position,
	  effect,
	  space,
	  scroll,
	  typography$1,
	  textDecoration,
	  transform,
	  list,
	  transition$1
	);
	const layoutSystem = Object.assign({}, space, layout$1, flexbox, grid, position);
	const layoutPropNames = Object.keys(
	  layoutSystem
	);
	const propNames = [...Object.keys(systemProps), ...pseudoPropNames];
	const styleProps = { ...systemProps, ...pseudoSelectors };
	const isStyleProp = (prop) => prop in styleProps;

	const expandResponsive = (styles) => (theme) => {
	  if (!theme.__breakpoints)
	    return styles;
	  const { isResponsive, toArrayValue, media: medias } = theme.__breakpoints;
	  const computedStyles = {};
	  for (const key in styles) {
	    let value = runIfFn$1(styles[key], theme);
	    if (value == null)
	      continue;
	    value = isObject$1(value) && isResponsive(value) ? toArrayValue(value) : value;
	    if (!Array.isArray(value)) {
	      computedStyles[key] = value;
	      continue;
	    }
	    const queries = value.slice(0, medias.length).length;
	    for (let index = 0; index < queries; index += 1) {
	      const media = medias?.[index];
	      if (!media) {
	        computedStyles[key] = value[index];
	        continue;
	      }
	      computedStyles[media] = computedStyles[media] || {};
	      if (value[index] == null) {
	        continue;
	      }
	      computedStyles[media][key] = value[index];
	    }
	  }
	  return computedStyles;
	};

	function splitByComma(value) {
	  const chunks = [];
	  let chunk = "";
	  let inParens = false;
	  for (let i = 0; i < value.length; i++) {
	    const char = value[i];
	    if (char === "(") {
	      inParens = true;
	      chunk += char;
	    } else if (char === ")") {
	      inParens = false;
	      chunk += char;
	    } else if (char === "," && !inParens) {
	      chunks.push(chunk);
	      chunk = "";
	    } else {
	      chunk += char;
	    }
	  }
	  chunk = chunk.trim();
	  if (chunk) {
	    chunks.push(chunk);
	  }
	  return chunks;
	}

	function isCssVar(value) {
	  return /^var\(--.+\)$/.test(value);
	}
	const isCSSVariableTokenValue = (key, value) => key.startsWith("--") && typeof value === "string" && !isCssVar(value);
	const resolveTokenValue = (theme, value) => {
	  if (value == null)
	    return value;
	  const getVar = (val) => theme.__cssMap?.[val]?.varRef;
	  const getValue = (val) => getVar(val) ?? val;
	  const [tokenValue, fallbackValue] = splitByComma(value);
	  value = getVar(tokenValue) ?? getValue(fallbackValue) ?? getValue(value);
	  return value;
	};
	function getCss(options) {
	  const { configs = {}, pseudos = {}, theme } = options;
	  const css2 = (stylesOrFn, nested = false) => {
	    const _styles = runIfFn$1(stylesOrFn, theme);
	    const styles = expandResponsive(_styles)(theme);
	    let computedStyles = {};
	    for (let key in styles) {
	      const valueOrFn = styles[key];
	      let value = runIfFn$1(valueOrFn, theme);
	      if (key in pseudos) {
	        key = pseudos[key];
	      }
	      if (isCSSVariableTokenValue(key, value)) {
	        value = resolveTokenValue(theme, value);
	      }
	      let config = configs[key];
	      if (config === true) {
	        config = { property: key };
	      }
	      if (isObject$1(value)) {
	        computedStyles[key] = computedStyles[key] ?? {};
	        computedStyles[key] = mergeWith(
	          {},
	          computedStyles[key],
	          css2(value, true)
	        );
	        continue;
	      }
	      let rawValue = config?.transform?.(value, theme, _styles) ?? value;
	      rawValue = config?.processResult ? css2(rawValue, true) : rawValue;
	      const configProperty = runIfFn$1(config?.property, theme);
	      if (!nested && config?.static) {
	        const staticStyles = runIfFn$1(config.static, theme);
	        computedStyles = mergeWith({}, computedStyles, staticStyles);
	      }
	      if (configProperty && Array.isArray(configProperty)) {
	        for (const property of configProperty) {
	          computedStyles[property] = rawValue;
	        }
	        continue;
	      }
	      if (configProperty) {
	        if (configProperty === "&" && isObject$1(rawValue)) {
	          computedStyles = mergeWith({}, computedStyles, rawValue);
	        } else {
	          computedStyles[configProperty] = rawValue;
	        }
	        continue;
	      }
	      if (isObject$1(rawValue)) {
	        computedStyles = mergeWith({}, computedStyles, rawValue);
	        continue;
	      }
	      computedStyles[key] = rawValue;
	    }
	    return computedStyles;
	  };
	  return css2;
	}
	const css$2 = (styles) => (theme) => {
	  const cssFn = getCss({
	    theme,
	    pseudos: pseudoSelectors,
	    configs: systemProps
	  });
	  return cssFn(styles);
	};

	function defineStyle(styles) {
	  return styles;
	}
	function defineStyleConfig(config) {
	  return config;
	}
	function createMultiStyleConfigHelpers(parts) {
	  return {
	    definePartsStyle(config) {
	      return config;
	    },
	    defineMultiStyleConfig(config) {
	      return { parts, ...config };
	    }
	  };
	}

	function normalize(value, toArray) {
	  if (Array.isArray(value))
	    return value;
	  if (isObject$1(value))
	    return toArray(value);
	  if (value != null)
	    return [value];
	}
	function getNextIndex(values, i) {
	  for (let j = i + 1; j < values.length; j++) {
	    if (values[j] != null)
	      return j;
	  }
	  return -1;
	}
	function createResolver(theme) {
	  const breakpointUtil = theme.__breakpoints;
	  return function resolver(config, prop, value, props) {
	    if (!breakpointUtil)
	      return;
	    const result = {};
	    const normalized = normalize(value, breakpointUtil.toArrayValue);
	    if (!normalized)
	      return result;
	    const len = normalized.length;
	    const isSingle = len === 1;
	    const isMultipart = !!config.parts;
	    for (let i = 0; i < len; i++) {
	      const key = breakpointUtil.details[i];
	      const nextKey = breakpointUtil.details[getNextIndex(normalized, i)];
	      const query = toMediaQueryString(key.minW, nextKey?._minW);
	      const styles = runIfFn$1(config[prop]?.[normalized[i]], props);
	      if (!styles)
	        continue;
	      if (isMultipart) {
	        config.parts?.forEach((part) => {
	          mergeWith(result, {
	            [part]: isSingle ? styles[part] : { [query]: styles[part] }
	          });
	        });
	        continue;
	      }
	      if (!isMultipart) {
	        if (isSingle)
	          mergeWith(result, styles);
	        else
	          result[query] = styles;
	        continue;
	      }
	      result[query] = styles;
	    }
	    return result;
	  };
	}
	function resolveStyleConfig(config) {
	  return (props) => {
	    const { variant, size, theme } = props;
	    const recipe = createResolver(theme);
	    return mergeWith(
	      {},
	      runIfFn$1(config.baseStyle ?? {}, props),
	      recipe(config, "sizes", size, props),
	      recipe(config, "variants", variant, props)
	    );
	  };
	}

	function omitThemingProps(props) {
	  return omit(props, ["styleConfig", "size", "variant", "colorScheme"]);
	}

	function resolveReference(operand) {
	  if (isObject$1(operand) && operand.reference) {
	    return operand.reference;
	  }
	  return String(operand);
	}
	const toExpression = (operator, ...operands) => operands.map(resolveReference).join(` ${operator} `).replace(/calc/g, "");
	const add$1 = (...operands) => `calc(${toExpression("+", ...operands)})`;
	const subtract$1 = (...operands) => `calc(${toExpression("-", ...operands)})`;
	const multiply$1 = (...operands) => `calc(${toExpression("*", ...operands)})`;
	const divide$1 = (...operands) => `calc(${toExpression("/", ...operands)})`;
	const negate$1 = (x) => {
	  const value = resolveReference(x);
	  if (value != null && !Number.isNaN(parseFloat(value))) {
	    return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
	  }
	  return multiply$1(value, -1);
	};
	const calc$1 = Object.assign(
	  (x) => ({
	    add: (...operands) => calc$1(add$1(x, ...operands)),
	    subtract: (...operands) => calc$1(subtract$1(x, ...operands)),
	    multiply: (...operands) => calc$1(multiply$1(x, ...operands)),
	    divide: (...operands) => calc$1(divide$1(x, ...operands)),
	    negate: () => calc$1(negate$1(x)),
	    toString: () => x.toString()
	  }),
	  {
	    add: add$1,
	    subtract: subtract$1,
	    multiply: multiply$1,
	    divide: divide$1,
	    negate: negate$1
	  }
	);

	function replaceWhiteSpace$1(value, replaceValue = "-") {
	  return value.replace(/\s+/g, replaceValue);
	}
	function escape$1(value) {
	  const valueStr = replaceWhiteSpace$1(value.toString());
	  return escapeSymbol(escapeDot(valueStr));
	}
	function escapeDot(value) {
	  if (value.includes("\\."))
	    return value;
	  const isDecimal = !Number.isInteger(parseFloat(value.toString()));
	  return isDecimal ? value.replace(".", `\\.`) : value;
	}
	function escapeSymbol(value) {
	  return value.replace(/[!-,/:-@[-^`{-~]/g, "\\$&");
	}
	function addPrefix$1(value, prefix = "") {
	  return [prefix, value].filter(Boolean).join("-");
	}
	function toVarReference(name, fallback) {
	  return `var(${name}${fallback ? `, ${fallback}` : ""})`;
	}
	function toVarDefinition(value, prefix = "") {
	  return escape$1(`--${addPrefix$1(value, prefix)}`);
	}
	function cssVar$1(name, fallback, cssVarPrefix) {
	  const cssVariable = toVarDefinition(name, cssVarPrefix);
	  return {
	    variable: cssVariable,
	    reference: toVarReference(cssVariable, fallback)
	  };
	}
	function defineCssVars(scope, keys) {
	  const vars = {};
	  for (const key of keys) {
	    if (Array.isArray(key)) {
	      const [name, fallback] = key;
	      vars[name] = cssVar$1(`${scope}-${name}`, fallback);
	      continue;
	    }
	    vars[key] = cssVar$1(`${scope}-${key}`);
	  }
	  return vars;
	}

	const tokens = [
	  "colors",
	  "borders",
	  "borderWidths",
	  "borderStyles",
	  "fonts",
	  "fontSizes",
	  "fontWeights",
	  "gradients",
	  "letterSpacings",
	  "lineHeights",
	  "radii",
	  "space",
	  "shadows",
	  "sizes",
	  "zIndices",
	  "transition",
	  "blur",
	  "breakpoints"
	];
	function extractTokens(theme) {
	  const _tokens = tokens;
	  return pick(theme, _tokens);
	}
	function extractSemanticTokens(theme) {
	  return theme.semanticTokens;
	}
	function omitVars(rawTheme) {
	  const { __cssMap, __cssVars, __breakpoints, ...cleanTheme } = rawTheme;
	  return cleanTheme;
	}

	function flattenTokens(theme) {
	  const tokens = extractTokens(theme);
	  const semanticTokens = extractSemanticTokens(theme);
	  const isSemanticCondition = (key) => (
	    // @ts-ignore
	    pseudoPropNames.includes(key) || "default" === key
	  );
	  const result = {};
	  walkObject(tokens, (value, path) => {
	    if (value == null)
	      return;
	    result[path.join(".")] = { isSemantic: false, value };
	  });
	  walkObject(
	    semanticTokens,
	    (value, path) => {
	      if (value == null)
	        return;
	      result[path.join(".")] = { isSemantic: true, value };
	    },
	    {
	      stop: (value) => Object.keys(value).every(isSemanticCondition)
	    }
	  );
	  return result;
	}

	function tokenToCssVar(token, prefix) {
	  return cssVar$1(String(token).replace(/\./g, "-"), void 0, prefix);
	}
	function createThemeVars(theme) {
	  const flatTokens = flattenTokens(theme);
	  const cssVarPrefix = theme.config?.cssVarPrefix;
	  let cssVars = {};
	  const cssMap = {};
	  function lookupToken(token, maybeToken) {
	    const scale = String(token).split(".")[0];
	    const withScale = [scale, maybeToken].join(".");
	    const resolvedTokenValue = flatTokens[withScale];
	    if (!resolvedTokenValue)
	      return maybeToken;
	    const { reference } = tokenToCssVar(withScale, cssVarPrefix);
	    return reference;
	  }
	  for (const [token, tokenValue] of Object.entries(flatTokens)) {
	    const { isSemantic, value } = tokenValue;
	    const { variable, reference } = tokenToCssVar(token, cssVarPrefix);
	    if (!isSemantic) {
	      if (token.startsWith("space")) {
	        const keys = token.split(".");
	        const [firstKey, ...referenceKeys] = keys;
	        const negativeLookupKey = `${firstKey}.-${referenceKeys.join(".")}`;
	        const negativeValue = calc$1.negate(value);
	        const negatedReference = calc$1.negate(reference);
	        cssMap[negativeLookupKey] = {
	          value: negativeValue,
	          var: variable,
	          varRef: negatedReference
	        };
	      }
	      cssVars[variable] = value;
	      cssMap[token] = {
	        value,
	        var: variable,
	        varRef: reference
	      };
	      continue;
	    }
	    const normalizedValue = isObject$1(value) ? value : { default: value };
	    cssVars = mergeWith(
	      cssVars,
	      Object.entries(normalizedValue).reduce(
	        (acc, [conditionAlias, conditionValue]) => {
	          if (!conditionValue)
	            return acc;
	          const tokenReference = lookupToken(token, `${conditionValue}`);
	          if (conditionAlias === "default") {
	            acc[variable] = tokenReference;
	            return acc;
	          }
	          const conditionSelector = pseudoSelectors?.[conditionAlias] ?? conditionAlias;
	          acc[conditionSelector] = { [variable]: tokenReference };
	          return acc;
	        },
	        {}
	      )
	    );
	    cssMap[token] = {
	      value: reference,
	      var: variable,
	      varRef: reference
	    };
	  }
	  return {
	    cssVars,
	    cssMap
	  };
	}

	function toCSSVar(rawTheme) {
	  const theme = omitVars(rawTheme);
	  const {
	    /**
	     * This is more like a dictionary of tokens users will type `green.500`,
	     * and their equivalent css variable.
	     */
	    cssMap,
	    /**
	     * The extracted css variables will be stored here, and used in
	     * the emotion's <Global/> component to attach variables to `:root`
	     */
	    cssVars
	  } = createThemeVars(theme);
	  const defaultCssVars = {
	    "--chakra-ring-inset": "var(--chakra-empty,/*!*/ /*!*/)",
	    "--chakra-ring-offset-width": "0px",
	    "--chakra-ring-offset-color": "#fff",
	    "--chakra-ring-color": "rgba(66, 153, 225, 0.6)",
	    "--chakra-ring-offset-shadow": "0 0 #0000",
	    "--chakra-ring-shadow": "0 0 #0000",
	    "--chakra-space-x-reverse": "0",
	    "--chakra-space-y-reverse": "0"
	  };
	  Object.assign(theme, {
	    __cssVars: { ...defaultCssVars, ...cssVars },
	    __cssMap: cssMap,
	    __breakpoints: analyzeBreakpoints(theme.breakpoints)
	  });
	  return theme;
	}

	function anatomy(name, map = {}) {
	  let called = false;
	  function assert() {
	    if (!called) {
	      called = true;
	      return;
	    }
	    throw new Error(
	      "[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?"
	    );
	  }
	  function parts(...values) {
	    assert();
	    for (const part of values) {
	      map[part] = toPart(part);
	    }
	    return anatomy(name, map);
	  }
	  function extend(...parts2) {
	    for (const part of parts2) {
	      if (part in map)
	        continue;
	      map[part] = toPart(part);
	    }
	    return anatomy(name, map);
	  }
	  function selectors() {
	    const value = Object.fromEntries(
	      Object.entries(map).map(([key, part]) => [key, part.selector])
	    );
	    return value;
	  }
	  function classnames() {
	    const value = Object.fromEntries(
	      Object.entries(map).map(([key, part]) => [key, part.className])
	    );
	    return value;
	  }
	  function toPart(part) {
	    const el = ["container", "root"].includes(part ?? "") ? [name] : [name, part];
	    const attr = el.filter(Boolean).join("__");
	    const className = `chakra-${attr}`;
	    const partObj = {
	      className,
	      selector: `.${className}`,
	      toString: () => part
	    };
	    return partObj;
	  }
	  const __type = {};
	  return {
	    parts,
	    toPart,
	    extend,
	    selectors,
	    classnames,
	    get keys() {
	      return Object.keys(map);
	    },
	    __type
	  };
	}

	const accordionAnatomy = anatomy("accordion").parts(
	  "root",
	  "container",
	  "button",
	  "panel",
	  "icon"
	);
	const alertAnatomy = anatomy("alert").parts(
	  "title",
	  "description",
	  "container",
	  "icon",
	  "spinner"
	);
	const avatarAnatomy = anatomy("avatar").parts(
	  "label",
	  "badge",
	  "container",
	  "excessLabel",
	  "group"
	);
	const breadcrumbAnatomy = anatomy("breadcrumb").parts(
	  "link",
	  "item",
	  "container",
	  "separator"
	);
	anatomy("button").parts();
	const checkboxAnatomy = anatomy("checkbox").parts(
	  "control",
	  "icon",
	  "container",
	  "label"
	);
	anatomy("progress").parts(
	  "track",
	  "filledTrack",
	  "label"
	);
	const drawerAnatomy = anatomy("drawer").parts(
	  "overlay",
	  "dialogContainer",
	  "dialog",
	  "header",
	  "closeButton",
	  "body",
	  "footer"
	);
	const editableAnatomy = anatomy("editable").parts(
	  "preview",
	  "input",
	  "textarea"
	);
	const formAnatomy = anatomy("form").parts(
	  "container",
	  "requiredIndicator",
	  "helperText"
	);
	const formErrorAnatomy = anatomy("formError").parts("text", "icon");
	const inputAnatomy = anatomy("input").parts(
	  "addon",
	  "field",
	  "element",
	  "group"
	);
	const listAnatomy = anatomy("list").parts("container", "item", "icon");
	const menuAnatomy = anatomy("menu").parts(
	  "button",
	  "list",
	  "item",
	  "groupTitle",
	  "icon",
	  "command",
	  "divider"
	);
	const modalAnatomy = anatomy("modal").parts(
	  "overlay",
	  "dialogContainer",
	  "dialog",
	  "header",
	  "closeButton",
	  "body",
	  "footer"
	);
	const numberInputAnatomy = anatomy("numberinput").parts(
	  "root",
	  "field",
	  "stepperGroup",
	  "stepper"
	);
	anatomy("pininput").parts("field");
	const popoverAnatomy = anatomy("popover").parts(
	  "content",
	  "header",
	  "body",
	  "footer",
	  "popper",
	  "arrow",
	  "closeButton"
	);
	const progressAnatomy = anatomy("progress").parts(
	  "label",
	  "filledTrack",
	  "track"
	);
	const radioAnatomy = anatomy("radio").parts(
	  "container",
	  "control",
	  "label"
	);
	const selectAnatomy = anatomy("select").parts("field", "icon");
	const sliderAnatomy = anatomy("slider").parts(
	  "container",
	  "track",
	  "thumb",
	  "filledTrack",
	  "mark"
	);
	const statAnatomy = anatomy("stat").parts(
	  "container",
	  "label",
	  "helpText",
	  "number",
	  "icon"
	);
	const switchAnatomy = anatomy("switch").parts(
	  "container",
	  "track",
	  "thumb",
	  "label"
	);
	const tableAnatomy = anatomy("table").parts(
	  "table",
	  "thead",
	  "tbody",
	  "tr",
	  "th",
	  "td",
	  "tfoot",
	  "caption"
	);
	const tabsAnatomy = anatomy("tabs").parts(
	  "root",
	  "tab",
	  "tablist",
	  "tabpanel",
	  "tabpanels",
	  "indicator"
	);
	const tagAnatomy = anatomy("tag").parts(
	  "container",
	  "label",
	  "closeButton"
	);
	const cardAnatomy = anatomy("card").parts(
	  "container",
	  "header",
	  "body",
	  "footer"
	);
	anatomy("stepper").parts(
	  "stepper",
	  "step",
	  "title",
	  "description",
	  "indicator",
	  "separator",
	  "icon",
	  "number"
	);

	const { definePartsStyle: definePartsStyle$p, defineMultiStyleConfig: defineMultiStyleConfig$p } = createMultiStyleConfigHelpers(accordionAnatomy.keys);
	const baseStyleContainer$4 = defineStyle({
	  borderTopWidth: "1px",
	  borderColor: "inherit",
	  _last: {
	    borderBottomWidth: "1px"
	  }
	});
	const baseStyleButton$1 = defineStyle({
	  transitionProperty: "common",
	  transitionDuration: "normal",
	  fontSize: "md",
	  _focusVisible: {
	    boxShadow: "outline"
	  },
	  _hover: {
	    bg: "blackAlpha.50"
	  },
	  _disabled: {
	    opacity: 0.4,
	    cursor: "not-allowed"
	  },
	  px: "4",
	  py: "2"
	});
	const baseStylePanel = defineStyle({
	  pt: "2",
	  px: "4",
	  pb: "5"
	});
	const baseStyleIcon$6 = defineStyle({
	  fontSize: "1.25em"
	});
	const baseStyle$F = definePartsStyle$p({
	  container: baseStyleContainer$4,
	  button: baseStyleButton$1,
	  panel: baseStylePanel,
	  icon: baseStyleIcon$6
	});
	const accordionTheme = defineMultiStyleConfig$p({ baseStyle: baseStyle$F });

	/**
	 * A simple guard function:
	 *
	 * ```js
	 * Math.min(Math.max(low, value), high)
	 * ```
	 */
	function guard(low, high, value) {
	  return Math.min(Math.max(low, value), high);
	}

	class ColorError extends Error {
	  constructor(color) {
	    super(`Failed to parse color: "${color}"`);
	  }
	}
	var ColorError$1 = ColorError;

	/**
	 * Parses a color into red, gree, blue, alpha parts
	 *
	 * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color
	 */
	function parseToRgba(color) {
	  if (typeof color !== 'string') throw new ColorError$1(color);
	  if (color.trim().toLowerCase() === 'transparent') return [0, 0, 0, 0];
	  let normalizedColor = color.trim();
	  normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;
	  const reducedHexMatch = reducedHexRegex.exec(normalizedColor);
	  if (reducedHexMatch) {
	    const arr = Array.from(reducedHexMatch).slice(1);
	    return [...arr.slice(0, 3).map(x => parseInt(r(x, 2), 16)), parseInt(r(arr[3] || 'f', 2), 16) / 255];
	  }
	  const hexMatch = hexRegex.exec(normalizedColor);
	  if (hexMatch) {
	    const arr = Array.from(hexMatch).slice(1);
	    return [...arr.slice(0, 3).map(x => parseInt(x, 16)), parseInt(arr[3] || 'ff', 16) / 255];
	  }
	  const rgbaMatch = rgbaRegex.exec(normalizedColor);
	  if (rgbaMatch) {
	    const arr = Array.from(rgbaMatch).slice(1);
	    return [...arr.slice(0, 3).map(x => parseInt(x, 10)), parseFloat(arr[3] || '1')];
	  }
	  const hslaMatch = hslaRegex.exec(normalizedColor);
	  if (hslaMatch) {
	    const [h, s, l, a] = Array.from(hslaMatch).slice(1).map(parseFloat);
	    if (guard(0, 100, s) !== s) throw new ColorError$1(color);
	    if (guard(0, 100, l) !== l) throw new ColorError$1(color);
	    return [...hslToRgb(h, s, l), Number.isNaN(a) ? 1 : a];
	  }
	  throw new ColorError$1(color);
	}
	function hash(str) {
	  let hash = 5381;
	  let i = str.length;
	  while (i) {
	    hash = hash * 33 ^ str.charCodeAt(--i);
	  }

	  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
	   * integers. Since we want the results to be always positive, convert the
	   * signed int to an unsigned by doing an unsigned bitshift. */
	  return (hash >>> 0) % 2341;
	}
	const colorToInt = x => parseInt(x.replace(/_/g, ''), 36);
	const compressedColorMap = '1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm'.split(' ').reduce((acc, next) => {
	  const key = colorToInt(next.substring(0, 3));
	  const hex = colorToInt(next.substring(3)).toString(16);

	  // NOTE: padStart could be used here but it breaks Node 6 compat
	  // https://github.com/ricokahler/color2k/issues/351
	  let prefix = '';
	  for (let i = 0; i < 6 - hex.length; i++) {
	    prefix += '0';
	  }
	  acc[key] = `${prefix}${hex}`;
	  return acc;
	}, {});

	/**
	 * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.
	 */
	function nameToHex(color) {
	  const normalizedColorName = color.toLowerCase().trim();
	  const result = compressedColorMap[hash(normalizedColorName)];
	  if (!result) throw new ColorError$1(color);
	  return `#${result}`;
	}
	const r = (str, amount) => Array.from(Array(amount)).map(() => str).join('');
	const reducedHexRegex = new RegExp(`^#${r('([a-f0-9])', 3)}([a-f0-9])?$`, 'i');
	const hexRegex = new RegExp(`^#${r('([a-f0-9]{2})', 3)}([a-f0-9]{2})?$`, 'i');
	const rgbaRegex = new RegExp(`^rgba?\\(\\s*(\\d+)\\s*${r(',\\s*(\\d+)\\s*', 2)}(?:,\\s*([\\d.]+))?\\s*\\)$`, 'i');
	const hslaRegex = /^hsla?\(\s*([\d.]+)\s*,\s*([\d.]+)%\s*,\s*([\d.]+)%(?:\s*,\s*([\d.]+))?\s*\)$/i;
	const namedColorRegex = /^[a-z]+$/i;
	const roundColor = color => {
	  return Math.round(color * 255);
	};
	const hslToRgb = (hue, saturation, lightness) => {
	  let l = lightness / 100;
	  if (saturation === 0) {
	    // achromatic
	    return [l, l, l].map(roundColor);
	  }

	  // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV
	  const huePrime = (hue % 360 + 360) % 360 / 60;
	  const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);
	  const secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
	  let red = 0;
	  let green = 0;
	  let blue = 0;
	  if (huePrime >= 0 && huePrime < 1) {
	    red = chroma;
	    green = secondComponent;
	  } else if (huePrime >= 1 && huePrime < 2) {
	    red = secondComponent;
	    green = chroma;
	  } else if (huePrime >= 2 && huePrime < 3) {
	    green = chroma;
	    blue = secondComponent;
	  } else if (huePrime >= 3 && huePrime < 4) {
	    green = secondComponent;
	    blue = chroma;
	  } else if (huePrime >= 4 && huePrime < 5) {
	    red = secondComponent;
	    blue = chroma;
	  } else if (huePrime >= 5 && huePrime < 6) {
	    red = chroma;
	    blue = secondComponent;
	  }
	  const lightnessModification = l - chroma / 2;
	  const finalRed = red + lightnessModification;
	  const finalGreen = green + lightnessModification;
	  const finalBlue = blue + lightnessModification;
	  return [finalRed, finalGreen, finalBlue].map(roundColor);
	};

	/**
	 * Takes in rgba parts and returns an rgba string
	 *
	 * @param red The amount of red in the red channel, given in a number between 0 and 255 inclusive
	 * @param green The amount of green in the red channel, given in a number between 0 and 255 inclusive
	 * @param blue The amount of blue in the red channel, given in a number between 0 and 255 inclusive
	 * @param alpha Percentage of opacity, given as a decimal between 0 and 1
	 */
	function rgba$1(red, green, blue, alpha) {
	  return `rgba(${guard(0, 255, red).toFixed()}, ${guard(0, 255, green).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(guard(0, 1, alpha).toFixed(3))})`;
	}

	/**
	 * Takes in a color and makes it more transparent by convert to `rgba` and
	 * decreasing the amount in the alpha channel.
	 *
	 * @param amount The amount to increase the transparency by, given as a decimal between 0 and 1
	 */
	function transparentize$1(color, amount) {
	  const [r, g, b, a] = parseToRgba(color);
	  return rgba$1(r, g, b, a - amount);
	}

	/**
	 * Takes in any color and returns it as a hex code.
	 */
	function toHex(color) {
	  const [r, g, b, a] = parseToRgba(color);
	  let hex = x => {
	    const h = guard(0, 255, x).toString(16);
	    // NOTE: padStart could be used here but it breaks Node 6 compat
	    // https://github.com/ricokahler/color2k/issues/351
	    return h.length === 1 ? `0${h}` : h;
	  };
	  return `#${hex(r)}${hex(g)}${hex(b)}${a < 1 ? hex(Math.round(a * 255)) : ''}`;
	}

	const isEmptyObject = (obj) => Object.keys(obj).length === 0;
	function get(obj, key, def, p, undef) {
	  key = key.split ? key.split(".") : key;
	  for (p = 0; p < key.length; p++) {
	    obj = obj ? obj[key[p]] : undef;
	  }
	  return obj === undef ? def : obj;
	}
	const getColor = (theme, color, fallback) => {
	  const hex = get(theme, `colors.${color}`, color);
	  try {
	    toHex(hex);
	    return hex;
	  } catch {
	    return "#000000";
	  }
	};
	const getBrightness = (color) => {
	  const [r, g, b] = parseToRgba(color);
	  return (r * 299 + g * 587 + b * 114) / 1e3;
	};
	const tone = (color) => (theme) => {
	  const hex = getColor(theme, color);
	  const brightness = getBrightness(hex);
	  const isDark2 = brightness < 128;
	  return isDark2 ? "dark" : "light";
	};
	const isDark = (color) => (theme) => tone(color)(theme) === "dark";
	const transparentize = (color, opacity) => (theme) => {
	  const raw = getColor(theme, color);
	  return transparentize$1(raw, 1 - opacity);
	};
	function generateStripe(size = "1rem", color = "rgba(255, 255, 255, 0.15)") {
	  return {
	    backgroundImage: `linear-gradient(
    45deg,
    ${color} 25%,
    transparent 25%,
    transparent 50%,
    ${color} 50%,
    ${color} 75%,
    transparent 75%,
    transparent
  )`,
	    backgroundSize: `${size} ${size}`
	  };
	}
	const randomHex = () => `#${Math.floor(Math.random() * 16777215).toString(16).padEnd(6, "0")}`;
	function randomColor(opts) {
	  const fallback = randomHex();
	  if (!opts || isEmptyObject(opts)) {
	    return fallback;
	  }
	  if (opts.string && opts.colors) {
	    return randomColorFromList(opts.string, opts.colors);
	  }
	  if (opts.string && !opts.colors) {
	    return randomColorFromString(opts.string);
	  }
	  if (opts.colors && !opts.string) {
	    return randomFromList(opts.colors);
	  }
	  return fallback;
	}
	function randomColorFromString(str) {
	  let hash = 0;
	  if (str.length === 0)
	    return hash.toString();
	  for (let i = 0; i < str.length; i += 1) {
	    hash = str.charCodeAt(i) + ((hash << 5) - hash);
	    hash = hash & hash;
	  }
	  let color = "#";
	  for (let j = 0; j < 3; j += 1) {
	    const value = hash >> j * 8 & 255;
	    color += `00${value.toString(16)}`.substr(-2);
	  }
	  return color;
	}
	function randomColorFromList(str, list) {
	  let index = 0;
	  if (str.length === 0)
	    return list[0];
	  for (let i = 0; i < str.length; i += 1) {
	    index = str.charCodeAt(i) + ((index << 5) - index);
	    index = index & index;
	  }
	  index = (index % list.length + list.length) % list.length;
	  return list[index];
	}
	function randomFromList(list) {
	  return list[Math.floor(Math.random() * list.length)];
	}

	function mode(light, dark) {
	  return (props) => props.colorMode === "dark" ? dark : light;
	}
	function orient(options) {
	  const { orientation, vertical, horizontal } = options;
	  if (!orientation)
	    return {};
	  return orientation === "vertical" ? vertical : horizontal;
	}

	function toRef(operand) {
	  if (isObject$1(operand) && operand.reference) {
	    return operand.reference;
	  }
	  return String(operand);
	}
	const toExpr = (operator, ...operands) => operands.map(toRef).join(` ${operator} `).replace(/calc/g, "");
	const add = (...operands) => `calc(${toExpr("+", ...operands)})`;
	const subtract = (...operands) => `calc(${toExpr("-", ...operands)})`;
	const multiply = (...operands) => `calc(${toExpr("*", ...operands)})`;
	const divide = (...operands) => `calc(${toExpr("/", ...operands)})`;
	const negate = (x) => {
	  const value = toRef(x);
	  if (value != null && !Number.isNaN(parseFloat(value))) {
	    return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
	  }
	  return multiply(value, -1);
	};
	const calc = Object.assign(
	  (x) => ({
	    add: (...operands) => calc(add(x, ...operands)),
	    subtract: (...operands) => calc(subtract(x, ...operands)),
	    multiply: (...operands) => calc(multiply(x, ...operands)),
	    divide: (...operands) => calc(divide(x, ...operands)),
	    negate: () => calc(negate(x)),
	    toString: () => x.toString()
	  }),
	  {
	    add,
	    subtract,
	    multiply,
	    divide,
	    negate
	  }
	);

	function isDecimal(value) {
	  return !Number.isInteger(parseFloat(value.toString()));
	}
	function replaceWhiteSpace(value, replaceValue = "-") {
	  return value.replace(/\s+/g, replaceValue);
	}
	function escape(value) {
	  const valueStr = replaceWhiteSpace(value.toString());
	  if (valueStr.includes("\\."))
	    return value;
	  return isDecimal(value) ? valueStr.replace(".", `\\.`) : value;
	}
	function addPrefix(value, prefix = "") {
	  return [prefix, escape(value)].filter(Boolean).join("-");
	}
	function toVarRef(name, fallback) {
	  return `var(${escape(name)}${fallback ? `, ${fallback}` : ""})`;
	}
	function toVar(value, prefix = "") {
	  return `--${addPrefix(value, prefix)}`;
	}
	function cssVar(name, options) {
	  const cssVariable = toVar(name, options?.prefix);
	  return {
	    variable: cssVariable,
	    reference: toVarRef(cssVariable, getFallback(options?.fallback))
	  };
	}
	function getFallback(fallback) {
	  return fallback?.reference;
	}

	const { definePartsStyle: definePartsStyle$o, defineMultiStyleConfig: defineMultiStyleConfig$o } = createMultiStyleConfigHelpers(alertAnatomy.keys);
	const $fg$5 = cssVar$1("alert-fg");
	const $bg$f = cssVar$1("alert-bg");
	const baseStyle$E = definePartsStyle$o({
	  container: {
	    bg: $bg$f.reference,
	    px: "4",
	    py: "3"
	  },
	  title: {
	    fontWeight: "bold",
	    lineHeight: "6",
	    marginEnd: "2"
	  },
	  description: {
	    lineHeight: "6"
	  },
	  icon: {
	    color: $fg$5.reference,
	    flexShrink: 0,
	    marginEnd: "3",
	    w: "5",
	    h: "6"
	  },
	  spinner: {
	    color: $fg$5.reference,
	    flexShrink: 0,
	    marginEnd: "3",
	    w: "5",
	    h: "5"
	  }
	});
	function getBg(props) {
	  const { theme, colorScheme: c } = props;
	  const darkBg = transparentize(`${c}.200`, 0.16)(theme);
	  return {
	    light: `colors.${c}.100`,
	    dark: darkBg
	  };
	}
	const variantSubtle$1 = definePartsStyle$o((props) => {
	  const { colorScheme: c } = props;
	  const bg = getBg(props);
	  return {
	    container: {
	      [$fg$5.variable]: `colors.${c}.600`,
	      [$bg$f.variable]: bg.light,
	      _dark: {
	        [$fg$5.variable]: `colors.${c}.200`,
	        [$bg$f.variable]: bg.dark
	      }
	    }
	  };
	});
	const variantLeftAccent = definePartsStyle$o((props) => {
	  const { colorScheme: c } = props;
	  const bg = getBg(props);
	  return {
	    container: {
	      [$fg$5.variable]: `colors.${c}.600`,
	      [$bg$f.variable]: bg.light,
	      _dark: {
	        [$fg$5.variable]: `colors.${c}.200`,
	        [$bg$f.variable]: bg.dark
	      },
	      paddingStart: "3",
	      borderStartWidth: "4px",
	      borderStartColor: $fg$5.reference
	    }
	  };
	});
	const variantTopAccent = definePartsStyle$o((props) => {
	  const { colorScheme: c } = props;
	  const bg = getBg(props);
	  return {
	    container: {
	      [$fg$5.variable]: `colors.${c}.600`,
	      [$bg$f.variable]: bg.light,
	      _dark: {
	        [$fg$5.variable]: `colors.${c}.200`,
	        [$bg$f.variable]: bg.dark
	      },
	      pt: "2",
	      borderTopWidth: "4px",
	      borderTopColor: $fg$5.reference
	    }
	  };
	});
	const variantSolid$3 = definePartsStyle$o((props) => {
	  const { colorScheme: c } = props;
	  return {
	    container: {
	      [$fg$5.variable]: `colors.white`,
	      [$bg$f.variable]: `colors.${c}.600`,
	      _dark: {
	        [$fg$5.variable]: `colors.gray.900`,
	        [$bg$f.variable]: `colors.${c}.200`
	      },
	      color: $fg$5.reference
	    }
	  };
	});
	const variants$e = {
	  subtle: variantSubtle$1,
	  "left-accent": variantLeftAccent,
	  "top-accent": variantTopAccent,
	  solid: variantSolid$3
	};
	const alertTheme = defineMultiStyleConfig$o({
	  baseStyle: baseStyle$E,
	  variants: variants$e,
	  defaultProps: {
	    variant: "subtle",
	    colorScheme: "blue"
	  }
	});

	const spacing = {
	  px: "1px",
	  0.5: "0.125rem",
	  1: "0.25rem",
	  1.5: "0.375rem",
	  2: "0.5rem",
	  2.5: "0.625rem",
	  3: "0.75rem",
	  3.5: "0.875rem",
	  4: "1rem",
	  5: "1.25rem",
	  6: "1.5rem",
	  7: "1.75rem",
	  8: "2rem",
	  9: "2.25rem",
	  10: "2.5rem",
	  12: "3rem",
	  14: "3.5rem",
	  16: "4rem",
	  20: "5rem",
	  24: "6rem",
	  28: "7rem",
	  32: "8rem",
	  36: "9rem",
	  40: "10rem",
	  44: "11rem",
	  48: "12rem",
	  52: "13rem",
	  56: "14rem",
	  60: "15rem",
	  64: "16rem",
	  72: "18rem",
	  80: "20rem",
	  96: "24rem"
	};

	const largeSizes = {
	  max: "max-content",
	  min: "min-content",
	  full: "100%",
	  "3xs": "14rem",
	  "2xs": "16rem",
	  xs: "20rem",
	  sm: "24rem",
	  md: "28rem",
	  lg: "32rem",
	  xl: "36rem",
	  "2xl": "42rem",
	  "3xl": "48rem",
	  "4xl": "56rem",
	  "5xl": "64rem",
	  "6xl": "72rem",
	  "7xl": "80rem",
	  "8xl": "90rem",
	  prose: "60ch"
	};
	const container$1 = {
	  sm: "640px",
	  md: "768px",
	  lg: "1024px",
	  xl: "1280px"
	};
	const sizes$m = {
	  ...spacing,
	  ...largeSizes,
	  container: container$1
	};

	const isFunction$1 = (value) => typeof value === "function";
	function runIfFn(valueOrFn, ...args) {
	  return isFunction$1(valueOrFn) ? valueOrFn(...args) : valueOrFn;
	}

	const { definePartsStyle: definePartsStyle$n, defineMultiStyleConfig: defineMultiStyleConfig$n } = createMultiStyleConfigHelpers(avatarAnatomy.keys);
	const $border$3 = cssVar$1("avatar-border-color");
	const $bg$e = cssVar$1("avatar-bg");
	const $fs = cssVar$1("avatar-font-size");
	const $size$4 = cssVar$1("avatar-size");
	const baseStyleBadge = defineStyle({
	  borderRadius: "full",
	  border: "0.2em solid",
	  borderColor: $border$3.reference,
	  [$border$3.variable]: "white",
	  _dark: {
	    [$border$3.variable]: "colors.gray.800"
	  }
	});
	const baseStyleExcessLabel = defineStyle({
	  bg: $bg$e.reference,
	  fontSize: $fs.reference,
	  width: $size$4.reference,
	  height: $size$4.reference,
	  lineHeight: "1",
	  [$bg$e.variable]: "colors.gray.200",
	  _dark: {
	    [$bg$e.variable]: "colors.whiteAlpha.400"
	  }
	});
	const baseStyleContainer$3 = defineStyle((props) => {
	  const { name, theme } = props;
	  const bg = name ? randomColor({ string: name }) : "colors.gray.400";
	  const isBgDark = isDark(bg)(theme);
	  let color = "white";
	  if (!isBgDark)
	    color = "gray.800";
	  return {
	    bg: $bg$e.reference,
	    fontSize: $fs.reference,
	    color,
	    borderColor: $border$3.reference,
	    verticalAlign: "top",
	    width: $size$4.reference,
	    height: $size$4.reference,
	    "&:not([data-loaded])": {
	      [$bg$e.variable]: bg
	    },
	    [$border$3.variable]: "colors.white",
	    _dark: {
	      [$border$3.variable]: "colors.gray.800"
	    }
	  };
	});
	const baseStyleLabel$4 = defineStyle({
	  fontSize: $fs.reference,
	  lineHeight: "1"
	});
	const baseStyle$D = definePartsStyle$n((props) => ({
	  badge: runIfFn(baseStyleBadge, props),
	  excessLabel: runIfFn(baseStyleExcessLabel, props),
	  container: runIfFn(baseStyleContainer$3, props),
	  label: baseStyleLabel$4
	}));
	function getSize$3(size) {
	  const themeSize = size !== "100%" ? sizes$m[size] : void 0;
	  return definePartsStyle$n({
	    container: {
	      [$size$4.variable]: themeSize ?? size,
	      [$fs.variable]: `calc(${themeSize ?? size} / 2.5)`
	    },
	    excessLabel: {
	      [$size$4.variable]: themeSize ?? size,
	      [$fs.variable]: `calc(${themeSize ?? size} / 2.5)`
	    }
	  });
	}
	const sizes$l = {
	  "2xs": getSize$3(4),
	  xs: getSize$3(6),
	  sm: getSize$3(8),
	  md: getSize$3(12),
	  lg: getSize$3(16),
	  xl: getSize$3(24),
	  "2xl": getSize$3(32),
	  full: getSize$3("100%")
	};
	const avatarTheme = defineMultiStyleConfig$n({
	  baseStyle: baseStyle$D,
	  sizes: sizes$l,
	  defaultProps: {
	    size: "md"
	  }
	});

	const vars = defineCssVars("badge", ["bg", "color", "shadow"]);
	const baseStyle$C = defineStyle({
	  px: 1,
	  textTransform: "uppercase",
	  fontSize: "xs",
	  borderRadius: "sm",
	  fontWeight: "bold",
	  bg: vars.bg.reference,
	  color: vars.color.reference,
	  boxShadow: vars.shadow.reference
	});
	const variantSolid$2 = defineStyle((props) => {
	  const { colorScheme: c, theme } = props;
	  const dark = transparentize(`${c}.500`, 0.6)(theme);
	  return {
	    [vars.bg.variable]: `colors.${c}.500`,
	    [vars.color.variable]: `colors.white`,
	    _dark: {
	      [vars.bg.variable]: dark,
	      [vars.color.variable]: `colors.whiteAlpha.800`
	    }
	  };
	});
	const variantSubtle = defineStyle((props) => {
	  const { colorScheme: c, theme } = props;
	  const darkBg = transparentize(`${c}.200`, 0.16)(theme);
	  return {
	    [vars.bg.variable]: `colors.${c}.100`,
	    [vars.color.variable]: `colors.${c}.800`,
	    _dark: {
	      [vars.bg.variable]: darkBg,
	      [vars.color.variable]: `colors.${c}.200`
	    }
	  };
	});
	const variantOutline$2 = defineStyle((props) => {
	  const { colorScheme: c, theme } = props;
	  const darkColor = transparentize(`${c}.200`, 0.8)(theme);
	  return {
	    [vars.color.variable]: `colors.${c}.500`,
	    _dark: {
	      [vars.color.variable]: darkColor
	    },
	    [vars.shadow.variable]: `inset 0 0 0px 1px ${vars.color.reference}`
	  };
	});
	const variants$d = {
	  solid: variantSolid$2,
	  subtle: variantSubtle,
	  outline: variantOutline$2
	};
	const badgeTheme = defineStyleConfig({
	  baseStyle: baseStyle$C,
	  variants: variants$d,
	  defaultProps: {
	    variant: "subtle",
	    colorScheme: "gray"
	  }
	});

	const { defineMultiStyleConfig: defineMultiStyleConfig$m, definePartsStyle: definePartsStyle$m } = createMultiStyleConfigHelpers(breadcrumbAnatomy.keys);
	const $decor = cssVar$1("breadcrumb-link-decor");
	const baseStyleLink = defineStyle({
	  transitionProperty: "common",
	  transitionDuration: "fast",
	  transitionTimingFunction: "ease-out",
	  outline: "none",
	  color: "inherit",
	  textDecoration: $decor.reference,
	  [$decor.variable]: "none",
	  "&:not([aria-current=page])": {
	    cursor: "pointer",
	    _hover: {
	      [$decor.variable]: "underline"
	    },
	    _focusVisible: {
	      boxShadow: "outline"
	    }
	  }
	});
	const baseStyle$B = definePartsStyle$m({
	  link: baseStyleLink
	});
	const breadcrumbTheme = defineMultiStyleConfig$m({
	  baseStyle: baseStyle$B
	});

	const baseStyle$A = defineStyle({
	  lineHeight: "1.2",
	  borderRadius: "md",
	  fontWeight: "semibold",
	  transitionProperty: "common",
	  transitionDuration: "normal",
	  _focusVisible: {
	    boxShadow: "outline"
	  },
	  _disabled: {
	    opacity: 0.4,
	    cursor: "not-allowed",
	    boxShadow: "none"
	  },
	  _hover: {
	    _disabled: {
	      bg: "initial"
	    }
	  }
	});
	const variantGhost = defineStyle((props) => {
	  const { colorScheme: c, theme } = props;
	  if (c === "gray") {
	    return {
	      color: mode(`gray.800`, `whiteAlpha.900`)(props),
	      _hover: {
	        bg: mode(`gray.100`, `whiteAlpha.200`)(props)
	      },
	      _active: { bg: mode(`gray.200`, `whiteAlpha.300`)(props) }
	    };
	  }
	  const darkHoverBg = transparentize(`${c}.200`, 0.12)(theme);
	  const darkActiveBg = transparentize(`${c}.200`, 0.24)(theme);
	  return {
	    color: mode(`${c}.600`, `${c}.200`)(props),
	    bg: "transparent",
	    _hover: {
	      bg: mode(`${c}.50`, darkHoverBg)(props)
	    },
	    _active: {
	      bg: mode(`${c}.100`, darkActiveBg)(props)
	    }
	  };
	});
	const variantOutline$1 = defineStyle((props) => {
	  const { colorScheme: c } = props;
	  const borderColor = mode(`gray.200`, `whiteAlpha.300`)(props);
	  return {
	    border: "1px solid",
	    borderColor: c === "gray" ? borderColor : "currentColor",
	    ".chakra-button__group[data-attached][data-orientation=horizontal] > &:not(:last-of-type)": { marginEnd: "-1px" },
	    ".chakra-button__group[data-attached][data-orientation=vertical] > &:not(:last-of-type)": { marginBottom: "-1px" },
	    ...runIfFn(variantGhost, props)
	  };
	});
	const accessibleColorMap = {
	  yellow: {
	    bg: "yellow.400",
	    color: "black",
	    hoverBg: "yellow.500",
	    activeBg: "yellow.600"
	  },
	  cyan: {
	    bg: "cyan.400",
	    color: "black",
	    hoverBg: "cyan.500",
	    activeBg: "cyan.600"
	  }
	};
	const variantSolid$1 = defineStyle((props) => {
	  const { colorScheme: c } = props;
	  if (c === "gray") {
	    const bg2 = mode(`gray.100`, `whiteAlpha.200`)(props);
	    return {
	      bg: bg2,
	      color: mode(`gray.800`, `whiteAlpha.900`)(props),
	      _hover: {
	        bg: mode(`gray.200`, `whiteAlpha.300`)(props),
	        _disabled: {
	          bg: bg2
	        }
	      },
	      _active: { bg: mode(`gray.300`, `whiteAlpha.400`)(props) }
	    };
	  }
	  const {
	    bg = `${c}.500`,
	    color = "white",
	    hoverBg = `${c}.600`,
	    activeBg = `${c}.700`
	  } = accessibleColorMap[c] ?? {};
	  const background = mode(bg, `${c}.200`)(props);
	  return {
	    bg: background,
	    color: mode(color, `gray.800`)(props),
	    _hover: {
	      bg: mode(hoverBg, `${c}.300`)(props),
	      _disabled: {
	        bg: background
	      }
	    },
	    _active: { bg: mode(activeBg, `${c}.400`)(props) }
	  };
	});
	const variantLink = defineStyle((props) => {
	  const { colorScheme: c } = props;
	  return {
	    padding: 0,
	    height: "auto",
	    lineHeight: "normal",
	    verticalAlign: "baseline",
	    color: mode(`${c}.500`, `${c}.200`)(props),
	    _hover: {
	      textDecoration: "underline",
	      _disabled: {
	        textDecoration: "none"
	      }
	    },
	    _active: {
	      color: mode(`${c}.700`, `${c}.500`)(props)
	    }
	  };
	});
	const variantUnstyled$2 = defineStyle({
	  bg: "none",
	  color: "inherit",
	  display: "inline",
	  lineHeight: "inherit",
	  m: "0",
	  p: "0"
	});
	const variants$c = {
	  ghost: variantGhost,
	  outline: variantOutline$1,
	  solid: variantSolid$1,
	  link: variantLink,
	  unstyled: variantUnstyled$2
	};
	const sizes$k = {
	  lg: defineStyle({
	    h: "12",
	    minW: "12",
	    fontSize: "lg",
	    px: "6"
	  }),
	  md: defineStyle({
	    h: "10",
	    minW: "10",
	    fontSize: "md",
	    px: "4"
	  }),
	  sm: defineStyle({
	    h: "8",
	    minW: "8",
	    fontSize: "sm",
	    px: "3"
	  }),
	  xs: defineStyle({
	    h: "6",
	    minW: "6",
	    fontSize: "xs",
	    px: "2"
	  })
	};
	const buttonTheme = defineStyleConfig({
	  baseStyle: baseStyle$A,
	  variants: variants$c,
	  sizes: sizes$k,
	  defaultProps: {
	    variant: "solid",
	    size: "md",
	    colorScheme: "gray"
	  }
	});

	const { definePartsStyle: definePartsStyle$l, defineMultiStyleConfig: defineMultiStyleConfig$l } = createMultiStyleConfigHelpers(cardAnatomy.keys);
	const $bg$d = cssVar$1("card-bg");
	const $padding$1 = cssVar$1("card-padding");
	const $shadow$3 = cssVar$1("card-shadow");
	const $radius = cssVar$1("card-radius");
	const $border$2 = cssVar$1("card-border-width", "0");
	const $borderColor = cssVar$1("card-border-color");
	const baseStyle$z = definePartsStyle$l({
	  container: {
	    [$bg$d.variable]: "colors.chakra-body-bg",
	    backgroundColor: $bg$d.reference,
	    boxShadow: $shadow$3.reference,
	    borderRadius: $radius.reference,
	    color: "chakra-body-text",
	    borderWidth: $border$2.reference,
	    borderColor: $borderColor.reference
	  },
	  body: {
	    padding: $padding$1.reference,
	    flex: "1 1 0%"
	  },
	  header: {
	    padding: $padding$1.reference
	  },
	  footer: {
	    padding: $padding$1.reference
	  }
	});
	const sizes$j = {
	  sm: definePartsStyle$l({
	    container: {
	      [$radius.variable]: "radii.base",
	      [$padding$1.variable]: "space.3"
	    }
	  }),
	  md: definePartsStyle$l({
	    container: {
	      [$radius.variable]: "radii.md",
	      [$padding$1.variable]: "space.5"
	    }
	  }),
	  lg: definePartsStyle$l({
	    container: {
	      [$radius.variable]: "radii.xl",
	      [$padding$1.variable]: "space.7"
	    }
	  })
	};
	const variants$b = {
	  elevated: definePartsStyle$l({
	    container: {
	      [$shadow$3.variable]: "shadows.base",
	      _dark: {
	        [$bg$d.variable]: "colors.gray.700"
	      }
	    }
	  }),
	  outline: definePartsStyle$l({
	    container: {
	      [$border$2.variable]: "1px",
	      [$borderColor.variable]: "colors.chakra-border-color"
	    }
	  }),
	  filled: definePartsStyle$l({
	    container: {
	      [$bg$d.variable]: "colors.chakra-subtle-bg"
	    }
	  }),
	  unstyled: {
	    body: {
	      [$padding$1.variable]: 0
	    },
	    header: {
	      [$padding$1.variable]: 0
	    },
	    footer: {
	      [$padding$1.variable]: 0
	    }
	  }
	};
	const cardTheme = defineMultiStyleConfig$l({
	  baseStyle: baseStyle$z,
	  variants: variants$b,
	  sizes: sizes$j,
	  defaultProps: {
	    variant: "elevated",
	    size: "md"
	  }
	});

	const { definePartsStyle: definePartsStyle$k, defineMultiStyleConfig: defineMultiStyleConfig$k } = createMultiStyleConfigHelpers(checkboxAnatomy.keys);
	const $size$3 = cssVar$1("checkbox-size");
	const baseStyleControl$1 = defineStyle((props) => {
	  const { colorScheme: c } = props;
	  return {
	    w: $size$3.reference,
	    h: $size$3.reference,
	    transitionProperty: "box-shadow",
	    transitionDuration: "normal",
	    border: "2px solid",
	    borderRadius: "sm",
	    borderColor: "inherit",
	    color: "white",
	    _checked: {
	      bg: mode(`${c}.500`, `${c}.200`)(props),
	      borderColor: mode(`${c}.500`, `${c}.200`)(props),
	      color: mode("white", "gray.900")(props),
	      _hover: {
	        bg: mode(`${c}.600`, `${c}.300`)(props),
	        borderColor: mode(`${c}.600`, `${c}.300`)(props)
	      },
	      _disabled: {
	        borderColor: mode("gray.200", "transparent")(props),
	        bg: mode("gray.200", "whiteAlpha.300")(props),
	        color: mode("gray.500", "whiteAlpha.500")(props)
	      }
	    },
	    _indeterminate: {
	      bg: mode(`${c}.500`, `${c}.200`)(props),
	      borderColor: mode(`${c}.500`, `${c}.200`)(props),
	      color: mode("white", "gray.900")(props)
	    },
	    _disabled: {
	      bg: mode("gray.100", "whiteAlpha.100")(props),
	      borderColor: mode("gray.100", "transparent")(props)
	    },
	    _focusVisible: {
	      boxShadow: "outline"
	    },
	    _invalid: {
	      borderColor: mode("red.500", "red.300")(props)
	    }
	  };
	});
	const baseStyleContainer$2 = defineStyle({
	  _disabled: { cursor: "not-allowed" }
	});
	const baseStyleLabel$3 = defineStyle({
	  userSelect: "none",
	  _disabled: { opacity: 0.4 }
	});
	const baseStyleIcon$5 = defineStyle({
	  transitionProperty: "transform",
	  transitionDuration: "normal"
	});
	const baseStyle$y = definePartsStyle$k((props) => ({
	  icon: baseStyleIcon$5,
	  container: baseStyleContainer$2,
	  control: runIfFn(baseStyleControl$1, props),
	  label: baseStyleLabel$3
	}));
	const sizes$i = {
	  sm: definePartsStyle$k({
	    control: { [$size$3.variable]: "sizes.3" },
	    label: { fontSize: "sm" },
	    icon: { fontSize: "3xs" }
	  }),
	  md: definePartsStyle$k({
	    control: { [$size$3.variable]: "sizes.4" },
	    label: { fontSize: "md" },
	    icon: { fontSize: "2xs" }
	  }),
	  lg: definePartsStyle$k({
	    control: { [$size$3.variable]: "sizes.5" },
	    label: { fontSize: "lg" },
	    icon: { fontSize: "2xs" }
	  })
	};
	const checkboxTheme = defineMultiStyleConfig$k({
	  baseStyle: baseStyle$y,
	  sizes: sizes$i,
	  defaultProps: {
	    size: "md",
	    colorScheme: "blue"
	  }
	});

	const $size$2 = cssVar("close-button-size");
	const $bg$c = cssVar("close-button-bg");
	const baseStyle$x = defineStyle({
	  w: [$size$2.reference],
	  h: [$size$2.reference],
	  borderRadius: "md",
	  transitionProperty: "common",
	  transitionDuration: "normal",
	  _disabled: {
	    opacity: 0.4,
	    cursor: "not-allowed",
	    boxShadow: "none"
	  },
	  _hover: {
	    [$bg$c.variable]: "colors.blackAlpha.100",
	    _dark: {
	      [$bg$c.variable]: "colors.whiteAlpha.100"
	    }
	  },
	  _active: {
	    [$bg$c.variable]: "colors.blackAlpha.200",
	    _dark: {
	      [$bg$c.variable]: "colors.whiteAlpha.200"
	    }
	  },
	  _focusVisible: {
	    boxShadow: "outline"
	  },
	  bg: $bg$c.reference
	});
	const sizes$h = {
	  lg: defineStyle({
	    [$size$2.variable]: "sizes.10",
	    fontSize: "md"
	  }),
	  md: defineStyle({
	    [$size$2.variable]: "sizes.8",
	    fontSize: "xs"
	  }),
	  sm: defineStyle({
	    [$size$2.variable]: "sizes.6",
	    fontSize: "2xs"
	  })
	};
	const closeButtonTheme = defineStyleConfig({
	  baseStyle: baseStyle$x,
	  sizes: sizes$h,
	  defaultProps: {
	    size: "md"
	  }
	});

	const { variants: variants$a, defaultProps } = badgeTheme;
	const baseStyle$w = defineStyle({
	  fontFamily: "mono",
	  fontSize: "sm",
	  px: "0.2em",
	  borderRadius: "sm",
	  bg: vars.bg.reference,
	  color: vars.color.reference,
	  boxShadow: vars.shadow.reference
	});
	const codeTheme = defineStyleConfig({
	  baseStyle: baseStyle$w,
	  variants: variants$a,
	  defaultProps
	});

	const baseStyle$v = defineStyle({
	  w: "100%",
	  mx: "auto",
	  maxW: "prose",
	  px: "4"
	});
	const containerTheme = defineStyleConfig({
	  baseStyle: baseStyle$v
	});

	const baseStyle$u = defineStyle({
	  opacity: 0.6,
	  borderColor: "inherit"
	});
	const variantSolid = defineStyle({
	  borderStyle: "solid"
	});
	const variantDashed = defineStyle({
	  borderStyle: "dashed"
	});
	const variants$9 = {
	  solid: variantSolid,
	  dashed: variantDashed
	};
	const dividerTheme = defineStyleConfig({
	  baseStyle: baseStyle$u,
	  variants: variants$9,
	  defaultProps: {
	    variant: "solid"
	  }
	});

	const { definePartsStyle: definePartsStyle$j, defineMultiStyleConfig: defineMultiStyleConfig$j } = createMultiStyleConfigHelpers(drawerAnatomy.keys);
	const $bg$b = cssVar$1("drawer-bg");
	const $bs = cssVar$1("drawer-box-shadow");
	function getSize$2(value) {
	  if (value === "full") {
	    return definePartsStyle$j({
	      dialog: { maxW: "100vw", h: "100vh" }
	    });
	  }
	  return definePartsStyle$j({
	    dialog: { maxW: value }
	  });
	}
	const baseStyleOverlay$1 = defineStyle({
	  bg: "blackAlpha.600",
	  zIndex: "modal"
	});
	const baseStyleDialogContainer$1 = defineStyle({
	  display: "flex",
	  zIndex: "modal",
	  justifyContent: "center"
	});
	const baseStyleDialog$1 = defineStyle((props) => {
	  const { isFullHeight } = props;
	  return {
	    ...isFullHeight && { height: "100vh" },
	    zIndex: "modal",
	    maxH: "100vh",
	    color: "inherit",
	    [$bg$b.variable]: "colors.white",
	    [$bs.variable]: "shadows.lg",
	    _dark: {
	      [$bg$b.variable]: "colors.gray.700",
	      [$bs.variable]: "shadows.dark-lg"
	    },
	    bg: $bg$b.reference,
	    boxShadow: $bs.reference
	  };
	});
	const baseStyleHeader$2 = defineStyle({
	  px: "6",
	  py: "4",
	  fontSize: "xl",
	  fontWeight: "semibold"
	});
	const baseStyleCloseButton$3 = defineStyle({
	  position: "absolute",
	  top: "2",
	  insetEnd: "3"
	});
	const baseStyleBody$2 = defineStyle({
	  px: "6",
	  py: "2",
	  flex: "1",
	  overflow: "auto"
	});
	const baseStyleFooter$2 = defineStyle({
	  px: "6",
	  py: "4"
	});
	const baseStyle$t = definePartsStyle$j((props) => ({
	  overlay: baseStyleOverlay$1,
	  dialogContainer: baseStyleDialogContainer$1,
	  dialog: runIfFn(baseStyleDialog$1, props),
	  header: baseStyleHeader$2,
	  closeButton: baseStyleCloseButton$3,
	  body: baseStyleBody$2,
	  footer: baseStyleFooter$2
	}));
	const sizes$g = {
	  xs: getSize$2("xs"),
	  sm: getSize$2("md"),
	  md: getSize$2("lg"),
	  lg: getSize$2("2xl"),
	  xl: getSize$2("4xl"),
	  full: getSize$2("full")
	};
	const drawerTheme = defineMultiStyleConfig$j({
	  baseStyle: baseStyle$t,
	  sizes: sizes$g,
	  defaultProps: {
	    size: "xs"
	  }
	});

	const { definePartsStyle: definePartsStyle$i, defineMultiStyleConfig: defineMultiStyleConfig$i } = createMultiStyleConfigHelpers(editableAnatomy.keys);
	const baseStylePreview = defineStyle({
	  borderRadius: "md",
	  py: "1",
	  transitionProperty: "common",
	  transitionDuration: "normal"
	});
	const baseStyleInput = defineStyle({
	  borderRadius: "md",
	  py: "1",
	  transitionProperty: "common",
	  transitionDuration: "normal",
	  width: "full",
	  _focusVisible: { boxShadow: "outline" },
	  _placeholder: { opacity: 0.6 }
	});
	const baseStyleTextarea = defineStyle({
	  borderRadius: "md",
	  py: "1",
	  transitionProperty: "common",
	  transitionDuration: "normal",
	  width: "full",
	  _focusVisible: { boxShadow: "outline" },
	  _placeholder: { opacity: 0.6 }
	});
	const baseStyle$s = definePartsStyle$i({
	  preview: baseStylePreview,
	  input: baseStyleInput,
	  textarea: baseStyleTextarea
	});
	const editableTheme = defineMultiStyleConfig$i({
	  baseStyle: baseStyle$s
	});

	const { definePartsStyle: definePartsStyle$h, defineMultiStyleConfig: defineMultiStyleConfig$h } = createMultiStyleConfigHelpers(formAnatomy.keys);
	const $fg$4 = cssVar$1("form-control-color");
	const baseStyleRequiredIndicator = defineStyle({
	  marginStart: "1",
	  [$fg$4.variable]: "colors.red.500",
	  _dark: {
	    [$fg$4.variable]: "colors.red.300"
	  },
	  color: $fg$4.reference
	});
	const baseStyleHelperText = defineStyle({
	  mt: "2",
	  [$fg$4.variable]: "colors.gray.600",
	  _dark: {
	    [$fg$4.variable]: "colors.whiteAlpha.600"
	  },
	  color: $fg$4.reference,
	  lineHeight: "normal",
	  fontSize: "sm"
	});
	const baseStyle$r = definePartsStyle$h({
	  container: {
	    width: "100%",
	    position: "relative"
	  },
	  requiredIndicator: baseStyleRequiredIndicator,
	  helperText: baseStyleHelperText
	});
	const formTheme = defineMultiStyleConfig$h({
	  baseStyle: baseStyle$r
	});

	const { definePartsStyle: definePartsStyle$g, defineMultiStyleConfig: defineMultiStyleConfig$g } = createMultiStyleConfigHelpers(formErrorAnatomy.keys);
	const $fg$3 = cssVar$1("form-error-color");
	const baseStyleText = defineStyle({
	  [$fg$3.variable]: `colors.red.500`,
	  _dark: {
	    [$fg$3.variable]: `colors.red.300`
	  },
	  color: $fg$3.reference,
	  mt: "2",
	  fontSize: "sm",
	  lineHeight: "normal"
	});
	const baseStyleIcon$4 = defineStyle({
	  marginEnd: "0.5em",
	  [$fg$3.variable]: `colors.red.500`,
	  _dark: {
	    [$fg$3.variable]: `colors.red.300`
	  },
	  color: $fg$3.reference
	});
	const baseStyle$q = definePartsStyle$g({
	  text: baseStyleText,
	  icon: baseStyleIcon$4
	});
	const formErrorTheme = defineMultiStyleConfig$g({
	  baseStyle: baseStyle$q
	});

	const baseStyle$p = defineStyle({
	  fontSize: "md",
	  marginEnd: "3",
	  mb: "2",
	  fontWeight: "medium",
	  transitionProperty: "common",
	  transitionDuration: "normal",
	  opacity: 1,
	  _disabled: {
	    opacity: 0.4
	  }
	});
	const formLabelTheme = defineStyleConfig({
	  baseStyle: baseStyle$p
	});

	const baseStyle$o = defineStyle({
	  fontFamily: "heading",
	  fontWeight: "bold"
	});
	const sizes$f = {
	  "4xl": defineStyle({
	    fontSize: ["6xl", null, "7xl"],
	    lineHeight: 1
	  }),
	  "3xl": defineStyle({
	    fontSize: ["5xl", null, "6xl"],
	    lineHeight: 1
	  }),
	  "2xl": defineStyle({
	    fontSize: ["4xl", null, "5xl"],
	    lineHeight: [1.2, null, 1]
	  }),
	  xl: defineStyle({
	    fontSize: ["3xl", null, "4xl"],
	    lineHeight: [1.33, null, 1.2]
	  }),
	  lg: defineStyle({
	    fontSize: ["2xl", null, "3xl"],
	    lineHeight: [1.33, null, 1.2]
	  }),
	  md: defineStyle({
	    fontSize: "xl",
	    lineHeight: 1.2
	  }),
	  sm: defineStyle({
	    fontSize: "md",
	    lineHeight: 1.2
	  }),
	  xs: defineStyle({
	    fontSize: "sm",
	    lineHeight: 1.2
	  })
	};
	const headingTheme = defineStyleConfig({
	  baseStyle: baseStyle$o,
	  sizes: sizes$f,
	  defaultProps: {
	    size: "xl"
	  }
	});

	const { definePartsStyle: definePartsStyle$f, defineMultiStyleConfig: defineMultiStyleConfig$f } = createMultiStyleConfigHelpers(inputAnatomy.keys);
	const $height$1 = cssVar$1("input-height");
	const $fontSize$1 = cssVar$1("input-font-size");
	const $padding = cssVar$1("input-padding");
	const $borderRadius = cssVar$1("input-border-radius");
	const baseStyle$n = definePartsStyle$f({
	  addon: {
	    height: $height$1.reference,
	    fontSize: $fontSize$1.reference,
	    px: $padding.reference,
	    borderRadius: $borderRadius.reference
	  },
	  field: {
	    width: "100%",
	    height: $height$1.reference,
	    fontSize: $fontSize$1.reference,
	    px: $padding.reference,
	    borderRadius: $borderRadius.reference,
	    minWidth: 0,
	    outline: 0,
	    position: "relative",
	    appearance: "none",
	    transitionProperty: "common",
	    transitionDuration: "normal",
	    _disabled: {
	      opacity: 0.4,
	      cursor: "not-allowed"
	    }
	  }
	});
	const size = {
	  lg: defineStyle({
	    [$fontSize$1.variable]: "fontSizes.lg",
	    [$padding.variable]: "space.4",
	    [$borderRadius.variable]: "radii.md",
	    [$height$1.variable]: "sizes.12"
	  }),
	  md: defineStyle({
	    [$fontSize$1.variable]: "fontSizes.md",
	    [$padding.variable]: "space.4",
	    [$borderRadius.variable]: "radii.md",
	    [$height$1.variable]: "sizes.10"
	  }),
	  sm: defineStyle({
	    [$fontSize$1.variable]: "fontSizes.sm",
	    [$padding.variable]: "space.3",
	    [$borderRadius.variable]: "radii.sm",
	    [$height$1.variable]: "sizes.8"
	  }),
	  xs: defineStyle({
	    [$fontSize$1.variable]: "fontSizes.xs",
	    [$padding.variable]: "space.2",
	    [$borderRadius.variable]: "radii.sm",
	    [$height$1.variable]: "sizes.6"
	  })
	};
	const sizes$e = {
	  lg: definePartsStyle$f({
	    field: size.lg,
	    group: size.lg
	  }),
	  md: definePartsStyle$f({
	    field: size.md,
	    group: size.md
	  }),
	  sm: definePartsStyle$f({
	    field: size.sm,
	    group: size.sm
	  }),
	  xs: definePartsStyle$f({
	    field: size.xs,
	    group: size.xs
	  })
	};
	function getDefaults(props) {
	  const { focusBorderColor: fc, errorBorderColor: ec } = props;
	  return {
	    focusBorderColor: fc || mode("blue.500", "blue.300")(props),
	    errorBorderColor: ec || mode("red.500", "red.300")(props)
	  };
	}
	const variantOutline = definePartsStyle$f((props) => {
	  const { theme } = props;
	  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
	  return {
	    field: {
	      border: "1px solid",
	      borderColor: "inherit",
	      bg: "inherit",
	      _hover: {
	        borderColor: mode("gray.300", "whiteAlpha.400")(props)
	      },
	      _readOnly: {
	        boxShadow: "none !important",
	        userSelect: "all"
	      },
	      _invalid: {
	        borderColor: getColor(theme, ec),
	        boxShadow: `0 0 0 1px ${getColor(theme, ec)}`
	      },
	      _focusVisible: {
	        zIndex: 1,
	        borderColor: getColor(theme, fc),
	        boxShadow: `0 0 0 1px ${getColor(theme, fc)}`
	      }
	    },
	    addon: {
	      border: "1px solid",
	      borderColor: mode("inherit", "whiteAlpha.50")(props),
	      bg: mode("gray.100", "whiteAlpha.300")(props)
	    }
	  };
	});
	const variantFilled = definePartsStyle$f((props) => {
	  const { theme } = props;
	  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
	  return {
	    field: {
	      border: "2px solid",
	      borderColor: "transparent",
	      bg: mode("gray.100", "whiteAlpha.50")(props),
	      _hover: {
	        bg: mode("gray.200", "whiteAlpha.100")(props)
	      },
	      _readOnly: {
	        boxShadow: "none !important",
	        userSelect: "all"
	      },
	      _invalid: {
	        borderColor: getColor(theme, ec)
	      },
	      _focusVisible: {
	        bg: "transparent",
	        borderColor: getColor(theme, fc)
	      }
	    },
	    addon: {
	      border: "2px solid",
	      borderColor: "transparent",
	      bg: mode("gray.100", "whiteAlpha.50")(props)
	    }
	  };
	});
	const variantFlushed = definePartsStyle$f((props) => {
	  const { theme } = props;
	  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
	  return {
	    field: {
	      borderBottom: "1px solid",
	      borderColor: "inherit",
	      borderRadius: "0",
	      px: "0",
	      bg: "transparent",
	      _readOnly: {
	        boxShadow: "none !important",
	        userSelect: "all"
	      },
	      _invalid: {
	        borderColor: getColor(theme, ec),
	        boxShadow: `0px 1px 0px 0px ${getColor(theme, ec)}`
	      },
	      _focusVisible: {
	        borderColor: getColor(theme, fc),
	        boxShadow: `0px 1px 0px 0px ${getColor(theme, fc)}`
	      }
	    },
	    addon: {
	      borderBottom: "2px solid",
	      borderColor: "inherit",
	      borderRadius: "0",
	      px: "0",
	      bg: "transparent"
	    }
	  };
	});
	const variantUnstyled$1 = definePartsStyle$f({
	  field: {
	    bg: "transparent",
	    px: "0",
	    height: "auto"
	  },
	  addon: {
	    bg: "transparent",
	    px: "0",
	    height: "auto"
	  }
	});
	const variants$8 = {
	  outline: variantOutline,
	  filled: variantFilled,
	  flushed: variantFlushed,
	  unstyled: variantUnstyled$1
	};
	const inputTheme = defineMultiStyleConfig$f({
	  baseStyle: baseStyle$n,
	  sizes: sizes$e,
	  variants: variants$8,
	  defaultProps: {
	    size: "md",
	    variant: "outline"
	  }
	});

	const $bg$a = cssVar$1("kbd-bg");
	const baseStyle$m = defineStyle({
	  [$bg$a.variable]: "colors.gray.100",
	  _dark: {
	    [$bg$a.variable]: "colors.whiteAlpha.100"
	  },
	  bg: $bg$a.reference,
	  borderRadius: "md",
	  borderWidth: "1px",
	  borderBottomWidth: "3px",
	  fontSize: "0.8em",
	  fontWeight: "bold",
	  lineHeight: "normal",
	  px: "0.4em",
	  whiteSpace: "nowrap"
	});
	const kbdTheme = defineStyleConfig({
	  baseStyle: baseStyle$m
	});

	const baseStyle$l = defineStyle({
	  transitionProperty: "common",
	  transitionDuration: "fast",
	  transitionTimingFunction: "ease-out",
	  cursor: "pointer",
	  textDecoration: "none",
	  outline: "none",
	  color: "inherit",
	  _hover: {
	    textDecoration: "underline"
	  },
	  _focusVisible: {
	    boxShadow: "outline"
	  }
	});
	const linkTheme = defineStyleConfig({
	  baseStyle: baseStyle$l
	});

	const { defineMultiStyleConfig: defineMultiStyleConfig$e, definePartsStyle: definePartsStyle$e } = createMultiStyleConfigHelpers(listAnatomy.keys);
	const baseStyleIcon$3 = defineStyle({
	  marginEnd: "2",
	  display: "inline",
	  verticalAlign: "text-bottom"
	});
	const baseStyle$k = definePartsStyle$e({
	  icon: baseStyleIcon$3
	});
	const listTheme = defineMultiStyleConfig$e({
	  baseStyle: baseStyle$k
	});

	const { defineMultiStyleConfig: defineMultiStyleConfig$d, definePartsStyle: definePartsStyle$d } = createMultiStyleConfigHelpers(menuAnatomy.keys);
	const $bg$9 = cssVar$1("menu-bg");
	const $shadow$2 = cssVar$1("menu-shadow");
	const baseStyleList = defineStyle({
	  [$bg$9.variable]: "#fff",
	  [$shadow$2.variable]: "shadows.sm",
	  _dark: {
	    [$bg$9.variable]: "colors.gray.700",
	    [$shadow$2.variable]: "shadows.dark-lg"
	  },
	  color: "inherit",
	  minW: "3xs",
	  py: "2",
	  zIndex: "dropdown",
	  borderRadius: "md",
	  borderWidth: "1px",
	  bg: $bg$9.reference,
	  boxShadow: $shadow$2.reference
	});
	const baseStyleItem = defineStyle({
	  py: "1.5",
	  px: "3",
	  transitionProperty: "background",
	  transitionDuration: "ultra-fast",
	  transitionTimingFunction: "ease-in",
	  _focus: {
	    [$bg$9.variable]: "colors.gray.100",
	    _dark: {
	      [$bg$9.variable]: "colors.whiteAlpha.100"
	    }
	  },
	  _active: {
	    [$bg$9.variable]: "colors.gray.200",
	    _dark: {
	      [$bg$9.variable]: "colors.whiteAlpha.200"
	    }
	  },
	  _expanded: {
	    [$bg$9.variable]: "colors.gray.100",
	    _dark: {
	      [$bg$9.variable]: "colors.whiteAlpha.100"
	    }
	  },
	  _disabled: {
	    opacity: 0.4,
	    cursor: "not-allowed"
	  },
	  bg: $bg$9.reference
	});
	const baseStyleGroupTitle = defineStyle({
	  mx: 4,
	  my: 2,
	  fontWeight: "semibold",
	  fontSize: "sm"
	});
	const baseStyleIcon$2 = defineStyle({
	  display: "inline-flex",
	  alignItems: "center",
	  justifyContent: "center",
	  flexShrink: 0
	});
	const baseStyleCommand = defineStyle({
	  opacity: 0.6
	});
	const baseStyleDivider = defineStyle({
	  border: 0,
	  borderBottom: "1px solid",
	  borderColor: "inherit",
	  my: "2",
	  opacity: 0.6
	});
	const baseStyleButton = defineStyle({
	  transitionProperty: "common",
	  transitionDuration: "normal"
	});
	const baseStyle$j = definePartsStyle$d({
	  button: baseStyleButton,
	  list: baseStyleList,
	  item: baseStyleItem,
	  groupTitle: baseStyleGroupTitle,
	  icon: baseStyleIcon$2,
	  command: baseStyleCommand,
	  divider: baseStyleDivider
	});
	const menuTheme = defineMultiStyleConfig$d({
	  baseStyle: baseStyle$j
	});

	const { defineMultiStyleConfig: defineMultiStyleConfig$c, definePartsStyle: definePartsStyle$c } = createMultiStyleConfigHelpers(modalAnatomy.keys);
	const $bg$8 = cssVar$1("modal-bg");
	const $shadow$1 = cssVar$1("modal-shadow");
	const baseStyleOverlay = defineStyle({
	  bg: "blackAlpha.600",
	  zIndex: "modal"
	});
	const baseStyleDialogContainer = defineStyle((props) => {
	  const { isCentered, scrollBehavior } = props;
	  return {
	    display: "flex",
	    zIndex: "modal",
	    justifyContent: "center",
	    alignItems: isCentered ? "center" : "flex-start",
	    overflow: scrollBehavior === "inside" ? "hidden" : "auto",
	    overscrollBehaviorY: "none"
	  };
	});
	const baseStyleDialog = defineStyle((props) => {
	  const { isCentered, scrollBehavior } = props;
	  return {
	    borderRadius: "md",
	    color: "inherit",
	    my: isCentered ? "auto" : "16",
	    mx: isCentered ? "auto" : void 0,
	    zIndex: "modal",
	    maxH: scrollBehavior === "inside" ? "calc(100% - 7.5rem)" : void 0,
	    [$bg$8.variable]: "colors.white",
	    [$shadow$1.variable]: "shadows.lg",
	    _dark: {
	      [$bg$8.variable]: "colors.gray.700",
	      [$shadow$1.variable]: "shadows.dark-lg"
	    },
	    bg: $bg$8.reference,
	    boxShadow: $shadow$1.reference
	  };
	});
	const baseStyleHeader$1 = defineStyle({
	  px: "6",
	  py: "4",
	  fontSize: "xl",
	  fontWeight: "semibold"
	});
	const baseStyleCloseButton$2 = defineStyle({
	  position: "absolute",
	  top: "2",
	  insetEnd: "3"
	});
	const baseStyleBody$1 = defineStyle((props) => {
	  const { scrollBehavior } = props;
	  return {
	    px: "6",
	    py: "2",
	    flex: "1",
	    overflow: scrollBehavior === "inside" ? "auto" : void 0
	  };
	});
	const baseStyleFooter$1 = defineStyle({
	  px: "6",
	  py: "4"
	});
	const baseStyle$i = definePartsStyle$c((props) => ({
	  overlay: baseStyleOverlay,
	  dialogContainer: runIfFn(baseStyleDialogContainer, props),
	  dialog: runIfFn(baseStyleDialog, props),
	  header: baseStyleHeader$1,
	  closeButton: baseStyleCloseButton$2,
	  body: runIfFn(baseStyleBody$1, props),
	  footer: baseStyleFooter$1
	}));
	function getSize$1(value) {
	  if (value === "full") {
	    return definePartsStyle$c({
	      dialog: {
	        maxW: "100vw",
	        minH: "$100vh",
	        my: "0",
	        borderRadius: "0"
	      }
	    });
	  }
	  return definePartsStyle$c({
	    dialog: { maxW: value }
	  });
	}
	const sizes$d = {
	  xs: getSize$1("xs"),
	  sm: getSize$1("sm"),
	  md: getSize$1("md"),
	  lg: getSize$1("lg"),
	  xl: getSize$1("xl"),
	  "2xl": getSize$1("2xl"),
	  "3xl": getSize$1("3xl"),
	  "4xl": getSize$1("4xl"),
	  "5xl": getSize$1("5xl"),
	  "6xl": getSize$1("6xl"),
	  full: getSize$1("full")
	};
	const modalTheme = defineMultiStyleConfig$c({
	  baseStyle: baseStyle$i,
	  sizes: sizes$d,
	  defaultProps: { size: "md" }
	});

	const typography = {
	  letterSpacings: {
	    tighter: "-0.05em",
	    tight: "-0.025em",
	    normal: "0",
	    wide: "0.025em",
	    wider: "0.05em",
	    widest: "0.1em"
	  },
	  lineHeights: {
	    normal: "normal",
	    none: 1,
	    shorter: 1.25,
	    short: 1.375,
	    base: 1.5,
	    tall: 1.625,
	    taller: "2",
	    "3": ".75rem",
	    "4": "1rem",
	    "5": "1.25rem",
	    "6": "1.5rem",
	    "7": "1.75rem",
	    "8": "2rem",
	    "9": "2.25rem",
	    "10": "2.5rem"
	  },
	  fontWeights: {
	    hairline: 100,
	    thin: 200,
	    light: 300,
	    normal: 400,
	    medium: 500,
	    semibold: 600,
	    bold: 700,
	    extrabold: 800,
	    black: 900
	  },
	  fonts: {
	    heading: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
	    body: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
	    mono: `SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace`
	  },
	  fontSizes: {
	    "3xs": "0.45rem",
	    "2xs": "0.625rem",
	    xs: "0.75rem",
	    sm: "0.875rem",
	    md: "1rem",
	    lg: "1.125rem",
	    xl: "1.25rem",
	    "2xl": "1.5rem",
	    "3xl": "1.875rem",
	    "4xl": "2.25rem",
	    "5xl": "3rem",
	    "6xl": "3.75rem",
	    "7xl": "4.5rem",
	    "8xl": "6rem",
	    "9xl": "8rem"
	  }
	};

	const { defineMultiStyleConfig: defineMultiStyleConfig$b, definePartsStyle: definePartsStyle$b } = createMultiStyleConfigHelpers(numberInputAnatomy.keys);
	const $stepperWidth = cssVar("number-input-stepper-width");
	const $inputPadding = cssVar("number-input-input-padding");
	const inputPaddingValue = calc($stepperWidth).add("0.5rem").toString();
	const $bg$7 = cssVar("number-input-bg");
	const $fg$2 = cssVar("number-input-color");
	const $border$1 = cssVar("number-input-border-color");
	const baseStyleRoot$1 = defineStyle({
	  [$stepperWidth.variable]: "sizes.6",
	  [$inputPadding.variable]: inputPaddingValue
	});
	const baseStyleField$1 = defineStyle(
	  (props) => runIfFn(inputTheme.baseStyle, props)?.field ?? {}
	);
	const baseStyleStepperGroup = defineStyle({
	  width: $stepperWidth.reference
	});
	const baseStyleStepper = defineStyle({
	  borderStart: "1px solid",
	  borderStartColor: $border$1.reference,
	  color: $fg$2.reference,
	  bg: $bg$7.reference,
	  [$fg$2.variable]: "colors.chakra-body-text",
	  [$border$1.variable]: "colors.chakra-border-color",
	  _dark: {
	    [$fg$2.variable]: "colors.whiteAlpha.800",
	    [$border$1.variable]: "colors.whiteAlpha.300"
	  },
	  _active: {
	    [$bg$7.variable]: "colors.gray.200",
	    _dark: {
	      [$bg$7.variable]: "colors.whiteAlpha.300"
	    }
	  },
	  _disabled: {
	    opacity: 0.4,
	    cursor: "not-allowed"
	  }
	});
	const baseStyle$h = definePartsStyle$b((props) => ({
	  root: baseStyleRoot$1,
	  field: runIfFn(baseStyleField$1, props) ?? {},
	  stepperGroup: baseStyleStepperGroup,
	  stepper: baseStyleStepper
	}));
	function getSize(size) {
	  const sizeStyle = inputTheme.sizes?.[size];
	  const radius = {
	    lg: "md",
	    md: "md",
	    sm: "sm",
	    xs: "sm"
	  };
	  const _fontSize = sizeStyle.field?.fontSize ?? "md";
	  const fontSize = typography.fontSizes[_fontSize];
	  return definePartsStyle$b({
	    field: {
	      ...sizeStyle.field,
	      paddingInlineEnd: $inputPadding.reference,
	      verticalAlign: "top"
	    },
	    stepper: {
	      fontSize: calc(fontSize).multiply(0.75).toString(),
	      _first: {
	        borderTopEndRadius: radius[size]
	      },
	      _last: {
	        borderBottomEndRadius: radius[size],
	        mt: "-1px",
	        borderTopWidth: 1
	      }
	    }
	  });
	}
	const sizes$c = {
	  xs: getSize("xs"),
	  sm: getSize("sm"),
	  md: getSize("md"),
	  lg: getSize("lg")
	};
	const numberInputTheme = defineMultiStyleConfig$b({
	  baseStyle: baseStyle$h,
	  sizes: sizes$c,
	  variants: inputTheme.variants,
	  defaultProps: inputTheme.defaultProps
	});

	const baseStyle$g = defineStyle({
	  ...inputTheme.baseStyle?.field,
	  textAlign: "center"
	});
	const sizes$b = {
	  lg: defineStyle({
	    fontSize: "lg",
	    w: 12,
	    h: 12,
	    borderRadius: "md"
	  }),
	  md: defineStyle({
	    fontSize: "md",
	    w: 10,
	    h: 10,
	    borderRadius: "md"
	  }),
	  sm: defineStyle({
	    fontSize: "sm",
	    w: 8,
	    h: 8,
	    borderRadius: "sm"
	  }),
	  xs: defineStyle({
	    fontSize: "xs",
	    w: 6,
	    h: 6,
	    borderRadius: "sm"
	  })
	};
	const variants$7 = {
	  outline: defineStyle(
	    (props) => runIfFn(inputTheme.variants?.outline, props)?.field ?? {}
	  ),
	  flushed: defineStyle(
	    (props) => runIfFn(inputTheme.variants?.flushed, props)?.field ?? {}
	  ),
	  filled: defineStyle(
	    (props) => runIfFn(inputTheme.variants?.filled, props)?.field ?? {}
	  ),
	  unstyled: inputTheme.variants?.unstyled.field ?? {}
	};
	const pinInputTheme = defineStyleConfig({
	  baseStyle: baseStyle$g,
	  sizes: sizes$b,
	  variants: variants$7,
	  defaultProps: inputTheme.defaultProps
	});

	const { defineMultiStyleConfig: defineMultiStyleConfig$a, definePartsStyle: definePartsStyle$a } = createMultiStyleConfigHelpers(popoverAnatomy.keys);
	const $popperBg = cssVar("popper-bg");
	const $arrowBg$1 = cssVar("popper-arrow-bg");
	const $arrowShadowColor = cssVar("popper-arrow-shadow-color");
	const baseStylePopper = defineStyle({
	  zIndex: "popover"
	});
	const baseStyleContent = defineStyle({
	  [$popperBg.variable]: `colors.white`,
	  bg: $popperBg.reference,
	  [$arrowBg$1.variable]: $popperBg.reference,
	  [$arrowShadowColor.variable]: `colors.gray.200`,
	  _dark: {
	    [$popperBg.variable]: `colors.gray.700`,
	    [$arrowShadowColor.variable]: `colors.whiteAlpha.300`
	  },
	  width: "xs",
	  border: "1px solid",
	  borderColor: "inherit",
	  borderRadius: "md",
	  boxShadow: "sm",
	  zIndex: "inherit",
	  _focusVisible: {
	    outline: 0,
	    boxShadow: "outline"
	  }
	});
	const baseStyleHeader = defineStyle({
	  px: 3,
	  py: 2,
	  borderBottomWidth: "1px"
	});
	const baseStyleBody = defineStyle({
	  px: 3,
	  py: 2
	});
	const baseStyleFooter = defineStyle({
	  px: 3,
	  py: 2,
	  borderTopWidth: "1px"
	});
	const baseStyleCloseButton$1 = defineStyle({
	  position: "absolute",
	  borderRadius: "md",
	  top: 1,
	  insetEnd: 2,
	  padding: 2
	});
	const baseStyle$f = definePartsStyle$a({
	  popper: baseStylePopper,
	  content: baseStyleContent,
	  header: baseStyleHeader,
	  body: baseStyleBody,
	  footer: baseStyleFooter,
	  closeButton: baseStyleCloseButton$1
	});
	const popoverTheme = defineMultiStyleConfig$a({
	  baseStyle: baseStyle$f
	});

	const { defineMultiStyleConfig: defineMultiStyleConfig$9, definePartsStyle: definePartsStyle$9 } = createMultiStyleConfigHelpers(progressAnatomy.keys);
	const filledStyle = defineStyle((props) => {
	  const { colorScheme: c, theme: t, isIndeterminate, hasStripe } = props;
	  const stripeStyle = mode(
	    generateStripe(),
	    generateStripe("1rem", "rgba(0,0,0,0.1)")
	  )(props);
	  const bgColor = mode(`${c}.500`, `${c}.200`)(props);
	  const gradient = `linear-gradient(
    to right,
    transparent 0%,
    ${getColor(t, bgColor)} 50%,
    transparent 100%
  )`;
	  const addStripe = !isIndeterminate && hasStripe;
	  return {
	    ...addStripe && stripeStyle,
	    ...isIndeterminate ? { bgImage: gradient } : { bgColor }
	  };
	});
	const baseStyleLabel$2 = defineStyle({
	  lineHeight: "1",
	  fontSize: "0.25em",
	  fontWeight: "bold",
	  color: "white"
	});
	const baseStyleTrack$2 = defineStyle((props) => {
	  return {
	    bg: mode("gray.100", "whiteAlpha.300")(props)
	  };
	});
	const baseStyleFilledTrack$1 = defineStyle((props) => {
	  return {
	    transitionProperty: "common",
	    transitionDuration: "slow",
	    ...filledStyle(props)
	  };
	});
	const baseStyle$e = definePartsStyle$9((props) => ({
	  label: baseStyleLabel$2,
	  filledTrack: baseStyleFilledTrack$1(props),
	  track: baseStyleTrack$2(props)
	}));
	const sizes$a = {
	  xs: definePartsStyle$9({
	    track: { h: "1" }
	  }),
	  sm: definePartsStyle$9({
	    track: { h: "2" }
	  }),
	  md: definePartsStyle$9({
	    track: { h: "3" }
	  }),
	  lg: definePartsStyle$9({
	    track: { h: "4" }
	  })
	};
	const progressTheme = defineMultiStyleConfig$9({
	  sizes: sizes$a,
	  baseStyle: baseStyle$e,
	  defaultProps: {
	    size: "md",
	    colorScheme: "blue"
	  }
	});

	const { defineMultiStyleConfig: defineMultiStyleConfig$8, definePartsStyle: definePartsStyle$8 } = createMultiStyleConfigHelpers(radioAnatomy.keys);
	const baseStyleControl = defineStyle((props) => {
	  const controlStyle = runIfFn(checkboxTheme.baseStyle, props)?.control;
	  return {
	    ...controlStyle,
	    borderRadius: "full",
	    _checked: {
	      ...controlStyle?.["_checked"],
	      _before: {
	        content: `""`,
	        display: "inline-block",
	        pos: "relative",
	        w: "50%",
	        h: "50%",
	        borderRadius: "50%",
	        bg: "currentColor"
	      }
	    }
	  };
	});
	const baseStyle$d = definePartsStyle$8((props) => ({
	  label: checkboxTheme.baseStyle?.(props).label,
	  container: checkboxTheme.baseStyle?.(props).container,
	  control: baseStyleControl(props)
	}));
	const sizes$9 = {
	  md: definePartsStyle$8({
	    control: { w: "4", h: "4" },
	    label: { fontSize: "md" }
	  }),
	  lg: definePartsStyle$8({
	    control: { w: "5", h: "5" },
	    label: { fontSize: "lg" }
	  }),
	  sm: definePartsStyle$8({
	    control: { width: "3", height: "3" },
	    label: { fontSize: "sm" }
	  })
	};
	const radioTheme = defineMultiStyleConfig$8({
	  baseStyle: baseStyle$d,
	  sizes: sizes$9,
	  defaultProps: {
	    size: "md",
	    colorScheme: "blue"
	  }
	});

	const { defineMultiStyleConfig: defineMultiStyleConfig$7, definePartsStyle: definePartsStyle$7 } = createMultiStyleConfigHelpers(selectAnatomy.keys);
	const $bg$6 = cssVar$1("select-bg");
	const baseStyleField = defineStyle({
	  ...inputTheme.baseStyle?.field,
	  appearance: "none",
	  paddingBottom: "1px",
	  lineHeight: "normal",
	  bg: $bg$6.reference,
	  [$bg$6.variable]: "colors.white",
	  _dark: {
	    [$bg$6.variable]: "colors.gray.700"
	  },
	  "> option, > optgroup": {
	    bg: $bg$6.reference
	  }
	});
	const baseStyleIcon$1 = defineStyle({
	  width: "6",
	  height: "100%",
	  insetEnd: "2",
	  position: "relative",
	  color: "currentColor",
	  fontSize: "xl",
	  _disabled: {
	    opacity: 0.5
	  }
	});
	const baseStyle$c = definePartsStyle$7({
	  field: baseStyleField,
	  icon: baseStyleIcon$1
	});
	const iconSpacing = defineStyle({
	  paddingInlineEnd: "8"
	});
	const sizes$8 = {
	  lg: {
	    ...inputTheme.sizes?.lg,
	    field: {
	      ...inputTheme.sizes?.lg.field,
	      ...iconSpacing
	    }
	  },
	  md: {
	    ...inputTheme.sizes?.md,
	    field: {
	      ...inputTheme.sizes?.md.field,
	      ...iconSpacing
	    }
	  },
	  sm: {
	    ...inputTheme.sizes?.sm,
	    field: {
	      ...inputTheme.sizes?.sm.field,
	      ...iconSpacing
	    }
	  },
	  xs: {
	    ...inputTheme.sizes?.xs,
	    field: {
	      ...inputTheme.sizes?.xs.field,
	      ...iconSpacing
	    },
	    icon: {
	      insetEnd: "1"
	    }
	  }
	};
	const selectTheme = defineMultiStyleConfig$7({
	  baseStyle: baseStyle$c,
	  sizes: sizes$8,
	  variants: inputTheme.variants,
	  defaultProps: inputTheme.defaultProps
	});

	const $startColor = cssVar$1("skeleton-start-color");
	const $endColor = cssVar$1("skeleton-end-color");
	const baseStyle$b = defineStyle({
	  [$startColor.variable]: "colors.gray.100",
	  [$endColor.variable]: "colors.gray.400",
	  _dark: {
	    [$startColor.variable]: "colors.gray.800",
	    [$endColor.variable]: "colors.gray.600"
	  },
	  background: $startColor.reference,
	  borderColor: $endColor.reference,
	  opacity: 0.7,
	  borderRadius: "sm"
	});
	const skeletonTheme = defineStyleConfig({
	  baseStyle: baseStyle$b
	});

	const $bg$5 = cssVar$1("skip-link-bg");
	const baseStyle$a = defineStyle({
	  borderRadius: "md",
	  fontWeight: "semibold",
	  _focusVisible: {
	    boxShadow: "outline",
	    padding: "4",
	    position: "fixed",
	    top: "6",
	    insetStart: "6",
	    [$bg$5.variable]: "colors.white",
	    _dark: {
	      [$bg$5.variable]: "colors.gray.700"
	    },
	    bg: $bg$5.reference
	  }
	});
	const skipLinkTheme = defineStyleConfig({
	  baseStyle: baseStyle$a
	});

	const { defineMultiStyleConfig: defineMultiStyleConfig$6, definePartsStyle: definePartsStyle$6 } = createMultiStyleConfigHelpers(sliderAnatomy.keys);
	const $thumbSize = cssVar$1("slider-thumb-size");
	const $trackSize = cssVar$1("slider-track-size");
	const $bg$4 = cssVar$1("slider-bg");
	const baseStyleContainer$1 = defineStyle((props) => {
	  const { orientation } = props;
	  return {
	    display: "inline-block",
	    position: "relative",
	    cursor: "pointer",
	    _disabled: {
	      opacity: 0.6,
	      cursor: "default",
	      pointerEvents: "none"
	    },
	    ...orient({
	      orientation,
	      vertical: {
	        h: "100%",
	        px: calc$1($thumbSize.reference).divide(2).toString()
	      },
	      horizontal: {
	        w: "100%",
	        py: calc$1($thumbSize.reference).divide(2).toString()
	      }
	    })
	  };
	});
	const baseStyleTrack$1 = defineStyle((props) => {
	  const orientationStyles = orient({
	    orientation: props.orientation,
	    horizontal: { h: $trackSize.reference },
	    vertical: { w: $trackSize.reference }
	  });
	  return {
	    ...orientationStyles,
	    overflow: "hidden",
	    borderRadius: "sm",
	    [$bg$4.variable]: "colors.gray.200",
	    _dark: {
	      [$bg$4.variable]: "colors.whiteAlpha.200"
	    },
	    _disabled: {
	      [$bg$4.variable]: "colors.gray.300",
	      _dark: {
	        [$bg$4.variable]: "colors.whiteAlpha.300"
	      }
	    },
	    bg: $bg$4.reference
	  };
	});
	const baseStyleThumb$1 = defineStyle((props) => {
	  const { orientation } = props;
	  const orientationStyle = orient({
	    orientation,
	    vertical: { left: "50%" },
	    horizontal: { top: "50%" }
	  });
	  return {
	    ...orientationStyle,
	    w: $thumbSize.reference,
	    h: $thumbSize.reference,
	    display: "flex",
	    alignItems: "center",
	    justifyContent: "center",
	    position: "absolute",
	    outline: 0,
	    zIndex: 1,
	    borderRadius: "full",
	    bg: "white",
	    boxShadow: "base",
	    border: "1px solid",
	    borderColor: "transparent",
	    transitionProperty: "transform",
	    transitionDuration: "normal",
	    _focusVisible: {
	      boxShadow: "outline"
	    },
	    _active: {
	      "--slider-thumb-scale": `1.15`
	    },
	    _disabled: {
	      bg: "gray.300"
	    }
	  };
	});
	const baseStyleFilledTrack = defineStyle((props) => {
	  const { colorScheme: c } = props;
	  return {
	    width: "inherit",
	    height: "inherit",
	    [$bg$4.variable]: `colors.${c}.500`,
	    _dark: {
	      [$bg$4.variable]: `colors.${c}.200`
	    },
	    bg: $bg$4.reference
	  };
	});
	const baseStyle$9 = definePartsStyle$6((props) => ({
	  container: baseStyleContainer$1(props),
	  track: baseStyleTrack$1(props),
	  thumb: baseStyleThumb$1(props),
	  filledTrack: baseStyleFilledTrack(props)
	}));
	const sizeLg = definePartsStyle$6({
	  container: {
	    [$thumbSize.variable]: `sizes.4`,
	    [$trackSize.variable]: `sizes.1`
	  }
	});
	const sizeMd = definePartsStyle$6({
	  container: {
	    [$thumbSize.variable]: `sizes.3.5`,
	    [$trackSize.variable]: `sizes.1`
	  }
	});
	const sizeSm = definePartsStyle$6({
	  container: {
	    [$thumbSize.variable]: `sizes.2.5`,
	    [$trackSize.variable]: `sizes.0.5`
	  }
	});
	const sizes$7 = {
	  lg: sizeLg,
	  md: sizeMd,
	  sm: sizeSm
	};
	const sliderTheme = defineMultiStyleConfig$6({
	  baseStyle: baseStyle$9,
	  sizes: sizes$7,
	  defaultProps: {
	    size: "md",
	    colorScheme: "blue"
	  }
	});

	const $size$1 = cssVar("spinner-size");
	const baseStyle$8 = defineStyle({
	  width: [$size$1.reference],
	  height: [$size$1.reference]
	});
	const sizes$6 = {
	  xs: defineStyle({
	    [$size$1.variable]: "sizes.3"
	  }),
	  sm: defineStyle({
	    [$size$1.variable]: "sizes.4"
	  }),
	  md: defineStyle({
	    [$size$1.variable]: "sizes.6"
	  }),
	  lg: defineStyle({
	    [$size$1.variable]: "sizes.8"
	  }),
	  xl: defineStyle({
	    [$size$1.variable]: "sizes.12"
	  })
	};
	const spinnerTheme = defineStyleConfig({
	  baseStyle: baseStyle$8,
	  sizes: sizes$6,
	  defaultProps: {
	    size: "md"
	  }
	});

	const { defineMultiStyleConfig: defineMultiStyleConfig$5, definePartsStyle: definePartsStyle$5 } = createMultiStyleConfigHelpers(statAnatomy.keys);
	const baseStyleLabel$1 = defineStyle({
	  fontWeight: "medium"
	});
	const baseStyleHelpText = defineStyle({
	  opacity: 0.8,
	  marginBottom: "2"
	});
	const baseStyleNumber = defineStyle({
	  verticalAlign: "baseline",
	  fontWeight: "semibold"
	});
	const baseStyleIcon = defineStyle({
	  marginEnd: 1,
	  w: "3.5",
	  h: "3.5",
	  verticalAlign: "middle"
	});
	const baseStyle$7 = definePartsStyle$5({
	  container: {},
	  label: baseStyleLabel$1,
	  helpText: baseStyleHelpText,
	  number: baseStyleNumber,
	  icon: baseStyleIcon
	});
	const sizes$5 = {
	  md: definePartsStyle$5({
	    label: { fontSize: "sm" },
	    helpText: { fontSize: "sm" },
	    number: { fontSize: "2xl" }
	  })
	};
	const statTheme = defineMultiStyleConfig$5({
	  baseStyle: baseStyle$7,
	  sizes: sizes$5,
	  defaultProps: {
	    size: "md"
	  }
	});

	const { defineMultiStyleConfig: defineMultiStyleConfig$4, definePartsStyle: definePartsStyle$4 } = createMultiStyleConfigHelpers([
	  "stepper",
	  "step",
	  "title",
	  "description",
	  "indicator",
	  "separator",
	  "icon",
	  "number"
	]);
	const $size = cssVar$1("stepper-indicator-size");
	const $iconSize = cssVar$1("stepper-icon-size");
	const $titleFontSize = cssVar$1("stepper-title-font-size");
	const $descFontSize = cssVar$1("stepper-description-font-size");
	const $accentColor = cssVar$1("stepper-accent-color");
	const baseStyle$6 = definePartsStyle$4(({ colorScheme: c }) => ({
	  stepper: {
	    display: "flex",
	    justifyContent: "space-between",
	    gap: "4",
	    "&[data-orientation=vertical]": {
	      flexDirection: "column",
	      alignItems: "flex-start"
	    },
	    "&[data-orientation=horizontal]": {
	      flexDirection: "row",
	      alignItems: "center"
	    },
	    [$accentColor.variable]: `colors.${c}.500`,
	    _dark: {
	      [$accentColor.variable]: `colors.${c}.200`
	    }
	  },
	  title: {
	    fontSize: $titleFontSize.reference,
	    fontWeight: "medium"
	  },
	  description: {
	    fontSize: $descFontSize.reference,
	    color: "chakra-subtle-text"
	  },
	  number: {
	    fontSize: $titleFontSize.reference
	  },
	  step: {
	    flexShrink: 0,
	    position: "relative",
	    display: "flex",
	    gap: "2",
	    "&[data-orientation=horizontal]": {
	      alignItems: "center"
	    },
	    flex: "1",
	    "&:last-of-type:not([data-stretch])": {
	      flex: "initial"
	    }
	  },
	  icon: {
	    flexShrink: 0,
	    width: $iconSize.reference,
	    height: $iconSize.reference
	  },
	  indicator: {
	    flexShrink: 0,
	    borderRadius: "full",
	    width: $size.reference,
	    height: $size.reference,
	    display: "flex",
	    justifyContent: "center",
	    alignItems: "center",
	    "&[data-status=active]": {
	      borderWidth: "2px",
	      borderColor: $accentColor.reference
	    },
	    "&[data-status=complete]": {
	      bg: $accentColor.reference,
	      color: "chakra-inverse-text"
	    },
	    "&[data-status=incomplete]": {
	      borderWidth: "2px"
	    }
	  },
	  separator: {
	    bg: "chakra-border-color",
	    flex: "1",
	    "&[data-status=complete]": {
	      bg: $accentColor.reference
	    },
	    "&[data-orientation=horizontal]": {
	      width: "100%",
	      height: "2px",
	      marginStart: "2"
	    },
	    "&[data-orientation=vertical]": {
	      width: "2px",
	      position: "absolute",
	      height: "100%",
	      maxHeight: `calc(100% - ${$size.reference} - 8px)`,
	      top: `calc(${$size.reference} + 4px)`,
	      insetStart: `calc(${$size.reference} / 2 - 1px)`
	    }
	  }
	}));
	const stepperTheme = defineMultiStyleConfig$4({
	  baseStyle: baseStyle$6,
	  sizes: {
	    xs: definePartsStyle$4({
	      stepper: {
	        [$size.variable]: "sizes.4",
	        [$iconSize.variable]: "sizes.3",
	        [$titleFontSize.variable]: "fontSizes.xs",
	        [$descFontSize.variable]: "fontSizes.xs"
	      }
	    }),
	    sm: definePartsStyle$4({
	      stepper: {
	        [$size.variable]: "sizes.6",
	        [$iconSize.variable]: "sizes.4",
	        [$titleFontSize.variable]: "fontSizes.sm",
	        [$descFontSize.variable]: "fontSizes.xs"
	      }
	    }),
	    md: definePartsStyle$4({
	      stepper: {
	        [$size.variable]: "sizes.8",
	        [$iconSize.variable]: "sizes.5",
	        [$titleFontSize.variable]: "fontSizes.md",
	        [$descFontSize.variable]: "fontSizes.sm"
	      }
	    }),
	    lg: definePartsStyle$4({
	      stepper: {
	        [$size.variable]: "sizes.10",
	        [$iconSize.variable]: "sizes.6",
	        [$titleFontSize.variable]: "fontSizes.lg",
	        [$descFontSize.variable]: "fontSizes.md"
	      }
	    })
	  },
	  defaultProps: {
	    size: "md",
	    colorScheme: "blue"
	  }
	});

	const { defineMultiStyleConfig: defineMultiStyleConfig$3, definePartsStyle: definePartsStyle$3 } = createMultiStyleConfigHelpers(switchAnatomy.keys);
	const $width = cssVar("switch-track-width");
	const $height = cssVar("switch-track-height");
	const $diff = cssVar("switch-track-diff");
	const diffValue = calc.subtract($width, $height);
	const $translateX = cssVar("switch-thumb-x");
	const $bg$3 = cssVar("switch-bg");
	const baseStyleTrack = defineStyle((props) => {
	  const { colorScheme: c } = props;
	  return {
	    borderRadius: "full",
	    p: "0.5",
	    width: [$width.reference],
	    height: [$height.reference],
	    transitionProperty: "common",
	    transitionDuration: "fast",
	    [$bg$3.variable]: "colors.gray.300",
	    _dark: {
	      [$bg$3.variable]: "colors.whiteAlpha.400"
	    },
	    _focusVisible: {
	      boxShadow: "outline"
	    },
	    _disabled: {
	      opacity: 0.4,
	      cursor: "not-allowed"
	    },
	    _checked: {
	      [$bg$3.variable]: `colors.${c}.500`,
	      _dark: {
	        [$bg$3.variable]: `colors.${c}.200`
	      }
	    },
	    bg: $bg$3.reference
	  };
	});
	const baseStyleThumb = defineStyle({
	  bg: "white",
	  transitionProperty: "transform",
	  transitionDuration: "normal",
	  borderRadius: "inherit",
	  width: [$height.reference],
	  height: [$height.reference],
	  _checked: {
	    transform: `translateX(${$translateX.reference})`
	  }
	});
	const baseStyle$5 = definePartsStyle$3((props) => ({
	  container: {
	    [$diff.variable]: diffValue,
	    [$translateX.variable]: $diff.reference,
	    _rtl: {
	      [$translateX.variable]: calc($diff).negate().toString()
	    }
	  },
	  track: baseStyleTrack(props),
	  thumb: baseStyleThumb
	}));
	const sizes$4 = {
	  sm: definePartsStyle$3({
	    container: {
	      [$width.variable]: "1.375rem",
	      [$height.variable]: "sizes.3"
	    }
	  }),
	  md: definePartsStyle$3({
	    container: {
	      [$width.variable]: "1.875rem",
	      [$height.variable]: "sizes.4"
	    }
	  }),
	  lg: definePartsStyle$3({
	    container: {
	      [$width.variable]: "2.875rem",
	      [$height.variable]: "sizes.6"
	    }
	  })
	};
	const switchTheme = defineMultiStyleConfig$3({
	  baseStyle: baseStyle$5,
	  sizes: sizes$4,
	  defaultProps: {
	    size: "md",
	    colorScheme: "blue"
	  }
	});

	const { defineMultiStyleConfig: defineMultiStyleConfig$2, definePartsStyle: definePartsStyle$2 } = createMultiStyleConfigHelpers(tableAnatomy.keys);
	const baseStyle$4 = definePartsStyle$2({
	  table: {
	    fontVariantNumeric: "lining-nums tabular-nums",
	    borderCollapse: "collapse",
	    width: "full"
	  },
	  th: {
	    fontFamily: "heading",
	    fontWeight: "bold",
	    textTransform: "uppercase",
	    letterSpacing: "wider",
	    textAlign: "start"
	  },
	  td: {
	    textAlign: "start"
	  },
	  caption: {
	    mt: 4,
	    fontFamily: "heading",
	    textAlign: "center",
	    fontWeight: "medium"
	  }
	});
	const numericStyles = defineStyle({
	  "&[data-is-numeric=true]": {
	    textAlign: "end"
	  }
	});
	const variantSimple = definePartsStyle$2((props) => {
	  const { colorScheme: c } = props;
	  return {
	    th: {
	      color: mode("gray.600", "gray.400")(props),
	      borderBottom: "1px",
	      borderColor: mode(`${c}.100`, `${c}.700`)(props),
	      ...numericStyles
	    },
	    td: {
	      borderBottom: "1px",
	      borderColor: mode(`${c}.100`, `${c}.700`)(props),
	      ...numericStyles
	    },
	    caption: {
	      color: mode("gray.600", "gray.100")(props)
	    },
	    tfoot: {
	      tr: {
	        "&:last-of-type": {
	          th: { borderBottomWidth: 0 }
	        }
	      }
	    }
	  };
	});
	const variantStripe = definePartsStyle$2((props) => {
	  const { colorScheme: c } = props;
	  return {
	    th: {
	      color: mode("gray.600", "gray.400")(props),
	      borderBottom: "1px",
	      borderColor: mode(`${c}.100`, `${c}.700`)(props),
	      ...numericStyles
	    },
	    td: {
	      borderBottom: "1px",
	      borderColor: mode(`${c}.100`, `${c}.700`)(props),
	      ...numericStyles
	    },
	    caption: {
	      color: mode("gray.600", "gray.100")(props)
	    },
	    tbody: {
	      tr: {
	        "&:nth-of-type(odd)": {
	          "th, td": {
	            borderBottomWidth: "1px",
	            borderColor: mode(`${c}.100`, `${c}.700`)(props)
	          },
	          td: {
	            background: mode(`${c}.100`, `${c}.700`)(props)
	          }
	        }
	      }
	    },
	    tfoot: {
	      tr: {
	        "&:last-of-type": {
	          th: { borderBottomWidth: 0 }
	        }
	      }
	    }
	  };
	});
	const variants$6 = {
	  simple: variantSimple,
	  striped: variantStripe,
	  unstyled: defineStyle({})
	};
	const sizes$3 = {
	  sm: definePartsStyle$2({
	    th: {
	      px: "4",
	      py: "1",
	      lineHeight: "4",
	      fontSize: "xs"
	    },
	    td: {
	      px: "4",
	      py: "2",
	      fontSize: "sm",
	      lineHeight: "4"
	    },
	    caption: {
	      px: "4",
	      py: "2",
	      fontSize: "xs"
	    }
	  }),
	  md: definePartsStyle$2({
	    th: {
	      px: "6",
	      py: "3",
	      lineHeight: "4",
	      fontSize: "xs"
	    },
	    td: {
	      px: "6",
	      py: "4",
	      lineHeight: "5"
	    },
	    caption: {
	      px: "6",
	      py: "2",
	      fontSize: "sm"
	    }
	  }),
	  lg: definePartsStyle$2({
	    th: {
	      px: "8",
	      py: "4",
	      lineHeight: "5",
	      fontSize: "sm"
	    },
	    td: {
	      px: "8",
	      py: "5",
	      lineHeight: "6"
	    },
	    caption: {
	      px: "6",
	      py: "2",
	      fontSize: "md"
	    }
	  })
	};
	const tableTheme = defineMultiStyleConfig$2({
	  baseStyle: baseStyle$4,
	  variants: variants$6,
	  sizes: sizes$3,
	  defaultProps: {
	    variant: "simple",
	    size: "md",
	    colorScheme: "gray"
	  }
	});

	const $fg$1 = cssVar$1("tabs-color");
	const $bg$2 = cssVar$1("tabs-bg");
	const $border = cssVar$1("tabs-border-color");
	const { defineMultiStyleConfig: defineMultiStyleConfig$1, definePartsStyle: definePartsStyle$1 } = createMultiStyleConfigHelpers(tabsAnatomy.keys);
	const baseStyleRoot = defineStyle((props) => {
	  const { orientation } = props;
	  return {
	    display: orientation === "vertical" ? "flex" : "block"
	  };
	});
	const baseStyleTab = defineStyle((props) => {
	  const { isFitted } = props;
	  return {
	    flex: isFitted ? 1 : void 0,
	    transitionProperty: "common",
	    transitionDuration: "normal",
	    _focusVisible: {
	      zIndex: 1,
	      boxShadow: "outline"
	    },
	    _disabled: {
	      cursor: "not-allowed",
	      opacity: 0.4
	    }
	  };
	});
	const baseStyleTablist = defineStyle((props) => {
	  const { align = "start", orientation } = props;
	  const alignments = {
	    end: "flex-end",
	    center: "center",
	    start: "flex-start"
	  };
	  return {
	    justifyContent: alignments[align],
	    flexDirection: orientation === "vertical" ? "column" : "row"
	  };
	});
	const baseStyleTabpanel = defineStyle({
	  p: 4
	});
	const baseStyle$3 = definePartsStyle$1((props) => ({
	  root: baseStyleRoot(props),
	  tab: baseStyleTab(props),
	  tablist: baseStyleTablist(props),
	  tabpanel: baseStyleTabpanel
	}));
	const sizes$2 = {
	  sm: definePartsStyle$1({
	    tab: {
	      py: 1,
	      px: 4,
	      fontSize: "sm"
	    }
	  }),
	  md: definePartsStyle$1({
	    tab: {
	      fontSize: "md",
	      py: 2,
	      px: 4
	    }
	  }),
	  lg: definePartsStyle$1({
	    tab: {
	      fontSize: "lg",
	      py: 3,
	      px: 4
	    }
	  })
	};
	const variantLine = definePartsStyle$1((props) => {
	  const { colorScheme: c, orientation } = props;
	  const isVertical = orientation === "vertical";
	  const borderProp = isVertical ? "borderStart" : "borderBottom";
	  const marginProp = isVertical ? "marginStart" : "marginBottom";
	  return {
	    tablist: {
	      [borderProp]: "2px solid",
	      borderColor: "inherit"
	    },
	    tab: {
	      [borderProp]: "2px solid",
	      borderColor: "transparent",
	      [marginProp]: "-2px",
	      _selected: {
	        [$fg$1.variable]: `colors.${c}.600`,
	        _dark: {
	          [$fg$1.variable]: `colors.${c}.300`
	        },
	        borderColor: "currentColor"
	      },
	      _active: {
	        [$bg$2.variable]: "colors.gray.200",
	        _dark: {
	          [$bg$2.variable]: "colors.whiteAlpha.300"
	        }
	      },
	      _disabled: {
	        _active: { bg: "none" }
	      },
	      color: $fg$1.reference,
	      bg: $bg$2.reference
	    }
	  };
	});
	const variantEnclosed = definePartsStyle$1((props) => {
	  const { colorScheme: c } = props;
	  return {
	    tab: {
	      borderTopRadius: "md",
	      border: "1px solid",
	      borderColor: "transparent",
	      mb: "-1px",
	      [$border.variable]: "transparent",
	      _selected: {
	        [$fg$1.variable]: `colors.${c}.600`,
	        [$border.variable]: `colors.white`,
	        _dark: {
	          [$fg$1.variable]: `colors.${c}.300`,
	          [$border.variable]: `colors.gray.800`
	        },
	        borderColor: "inherit",
	        borderBottomColor: $border.reference
	      },
	      color: $fg$1.reference
	    },
	    tablist: {
	      mb: "-1px",
	      borderBottom: "1px solid",
	      borderColor: "inherit"
	    }
	  };
	});
	const variantEnclosedColored = definePartsStyle$1((props) => {
	  const { colorScheme: c } = props;
	  return {
	    tab: {
	      border: "1px solid",
	      borderColor: "inherit",
	      [$bg$2.variable]: "colors.gray.50",
	      _dark: {
	        [$bg$2.variable]: "colors.whiteAlpha.50"
	      },
	      mb: "-1px",
	      _notLast: {
	        marginEnd: "-1px"
	      },
	      _selected: {
	        [$bg$2.variable]: "colors.white",
	        [$fg$1.variable]: `colors.${c}.600`,
	        _dark: {
	          [$bg$2.variable]: "colors.gray.800",
	          [$fg$1.variable]: `colors.${c}.300`
	        },
	        borderColor: "inherit",
	        borderTopColor: "currentColor",
	        borderBottomColor: "transparent"
	      },
	      color: $fg$1.reference,
	      bg: $bg$2.reference
	    },
	    tablist: {
	      mb: "-1px",
	      borderBottom: "1px solid",
	      borderColor: "inherit"
	    }
	  };
	});
	const variantSoftRounded = definePartsStyle$1((props) => {
	  const { colorScheme: c, theme } = props;
	  return {
	    tab: {
	      borderRadius: "full",
	      fontWeight: "semibold",
	      color: "gray.600",
	      _selected: {
	        color: getColor(theme, `${c}.700`),
	        bg: getColor(theme, `${c}.100`)
	      }
	    }
	  };
	});
	const variantSolidRounded = definePartsStyle$1((props) => {
	  const { colorScheme: c } = props;
	  return {
	    tab: {
	      borderRadius: "full",
	      fontWeight: "semibold",
	      [$fg$1.variable]: "colors.gray.600",
	      _dark: {
	        [$fg$1.variable]: "inherit"
	      },
	      _selected: {
	        [$fg$1.variable]: "colors.white",
	        [$bg$2.variable]: `colors.${c}.600`,
	        _dark: {
	          [$fg$1.variable]: "colors.gray.800",
	          [$bg$2.variable]: `colors.${c}.300`
	        }
	      },
	      color: $fg$1.reference,
	      bg: $bg$2.reference
	    }
	  };
	});
	const variantUnstyled = definePartsStyle$1({});
	const variants$5 = {
	  line: variantLine,
	  enclosed: variantEnclosed,
	  "enclosed-colored": variantEnclosedColored,
	  "soft-rounded": variantSoftRounded,
	  "solid-rounded": variantSolidRounded,
	  unstyled: variantUnstyled
	};
	const tabsTheme = defineMultiStyleConfig$1({
	  baseStyle: baseStyle$3,
	  sizes: sizes$2,
	  variants: variants$5,
	  defaultProps: {
	    size: "md",
	    variant: "line",
	    colorScheme: "blue"
	  }
	});

	const { defineMultiStyleConfig, definePartsStyle } = createMultiStyleConfigHelpers(tagAnatomy.keys);
	const $bg$1 = cssVar$1("tag-bg");
	const $color = cssVar$1("tag-color");
	const $shadow = cssVar$1("tag-shadow");
	const $minH = cssVar$1("tag-min-height");
	const $minW = cssVar$1("tag-min-width");
	const $fontSize = cssVar$1("tag-font-size");
	const $paddingX = cssVar$1("tag-padding-inline");
	const baseStyleContainer = defineStyle({
	  fontWeight: "medium",
	  lineHeight: 1.2,
	  outline: 0,
	  [$color.variable]: vars.color.reference,
	  [$bg$1.variable]: vars.bg.reference,
	  [$shadow.variable]: vars.shadow.reference,
	  color: $color.reference,
	  bg: $bg$1.reference,
	  boxShadow: $shadow.reference,
	  borderRadius: "md",
	  minH: $minH.reference,
	  minW: $minW.reference,
	  fontSize: $fontSize.reference,
	  px: $paddingX.reference,
	  _focusVisible: {
	    [$shadow.variable]: "shadows.outline"
	  }
	});
	const baseStyleLabel = defineStyle({
	  lineHeight: 1.2,
	  overflow: "visible"
	});
	const baseStyleCloseButton = defineStyle({
	  fontSize: "lg",
	  w: "5",
	  h: "5",
	  transitionProperty: "common",
	  transitionDuration: "normal",
	  borderRadius: "full",
	  marginStart: "1.5",
	  marginEnd: "-1",
	  opacity: 0.5,
	  _disabled: {
	    opacity: 0.4
	  },
	  _focusVisible: {
	    boxShadow: "outline",
	    bg: "rgba(0, 0, 0, 0.14)"
	  },
	  _hover: {
	    opacity: 0.8
	  },
	  _active: {
	    opacity: 1
	  }
	});
	const baseStyle$2 = definePartsStyle({
	  container: baseStyleContainer,
	  label: baseStyleLabel,
	  closeButton: baseStyleCloseButton
	});
	const sizes$1 = {
	  sm: definePartsStyle({
	    container: {
	      [$minH.variable]: "sizes.5",
	      [$minW.variable]: "sizes.5",
	      [$fontSize.variable]: "fontSizes.xs",
	      [$paddingX.variable]: "space.2"
	    },
	    closeButton: {
	      marginEnd: "-2px",
	      marginStart: "0.35rem"
	    }
	  }),
	  md: definePartsStyle({
	    container: {
	      [$minH.variable]: "sizes.6",
	      [$minW.variable]: "sizes.6",
	      [$fontSize.variable]: "fontSizes.sm",
	      [$paddingX.variable]: "space.2"
	    }
	  }),
	  lg: definePartsStyle({
	    container: {
	      [$minH.variable]: "sizes.8",
	      [$minW.variable]: "sizes.8",
	      [$fontSize.variable]: "fontSizes.md",
	      [$paddingX.variable]: "space.3"
	    }
	  })
	};
	const variants$4 = {
	  subtle: definePartsStyle((props) => ({
	    container: badgeTheme.variants?.subtle(props)
	  })),
	  solid: definePartsStyle((props) => ({
	    container: badgeTheme.variants?.solid(props)
	  })),
	  outline: definePartsStyle((props) => ({
	    container: badgeTheme.variants?.outline(props)
	  }))
	};
	const tagTheme = defineMultiStyleConfig({
	  variants: variants$4,
	  baseStyle: baseStyle$2,
	  sizes: sizes$1,
	  defaultProps: {
	    size: "md",
	    variant: "subtle",
	    colorScheme: "gray"
	  }
	});

	const baseStyle$1 = defineStyle({
	  ...inputTheme.baseStyle?.field,
	  paddingY: "2",
	  minHeight: "20",
	  lineHeight: "short",
	  verticalAlign: "top"
	});
	const variants$3 = {
	  outline: defineStyle(
	    (props) => inputTheme.variants?.outline(props).field ?? {}
	  ),
	  flushed: defineStyle(
	    (props) => inputTheme.variants?.flushed(props).field ?? {}
	  ),
	  filled: defineStyle(
	    (props) => inputTheme.variants?.filled(props).field ?? {}
	  ),
	  unstyled: inputTheme.variants?.unstyled.field ?? {}
	};
	const sizes = {
	  xs: inputTheme.sizes?.xs.field ?? {},
	  sm: inputTheme.sizes?.sm.field ?? {},
	  md: inputTheme.sizes?.md.field ?? {},
	  lg: inputTheme.sizes?.lg.field ?? {}
	};
	const textareaTheme = defineStyleConfig({
	  baseStyle: baseStyle$1,
	  sizes,
	  variants: variants$3,
	  defaultProps: {
	    size: "md",
	    variant: "outline"
	  }
	});

	const $bg = cssVar("tooltip-bg");
	const $fg = cssVar("tooltip-fg");
	const $arrowBg = cssVar("popper-arrow-bg");
	const baseStyle = defineStyle({
	  bg: $bg.reference,
	  color: $fg.reference,
	  [$bg.variable]: "colors.gray.700",
	  [$fg.variable]: "colors.whiteAlpha.900",
	  _dark: {
	    [$bg.variable]: "colors.gray.300",
	    [$fg.variable]: "colors.gray.900"
	  },
	  [$arrowBg.variable]: $bg.reference,
	  px: "2",
	  py: "0.5",
	  borderRadius: "sm",
	  fontWeight: "medium",
	  fontSize: "sm",
	  boxShadow: "md",
	  maxW: "xs",
	  zIndex: "tooltip"
	});
	const tooltipTheme = defineStyleConfig({
	  baseStyle
	});

	const components = {
	  Accordion: accordionTheme,
	  Alert: alertTheme,
	  Avatar: avatarTheme,
	  Badge: badgeTheme,
	  Breadcrumb: breadcrumbTheme,
	  Button: buttonTheme,
	  Checkbox: checkboxTheme,
	  CloseButton: closeButtonTheme,
	  Code: codeTheme,
	  Container: containerTheme,
	  Divider: dividerTheme,
	  Drawer: drawerTheme,
	  Editable: editableTheme,
	  Form: formTheme,
	  FormError: formErrorTheme,
	  FormLabel: formLabelTheme,
	  Heading: headingTheme,
	  Input: inputTheme,
	  Kbd: kbdTheme,
	  Link: linkTheme,
	  List: listTheme,
	  Menu: menuTheme,
	  Modal: modalTheme,
	  NumberInput: numberInputTheme,
	  PinInput: pinInputTheme,
	  Popover: popoverTheme,
	  Progress: progressTheme,
	  Radio: radioTheme,
	  Select: selectTheme,
	  Skeleton: skeletonTheme,
	  SkipLink: skipLinkTheme,
	  Slider: sliderTheme,
	  Spinner: spinnerTheme,
	  Stat: statTheme,
	  Switch: switchTheme,
	  Table: tableTheme,
	  Tabs: tabsTheme,
	  Tag: tagTheme,
	  Textarea: textareaTheme,
	  Tooltip: tooltipTheme,
	  Card: cardTheme,
	  Stepper: stepperTheme
	};

	const borders$1 = {
	  none: 0,
	  "1px": "1px solid",
	  "2px": "2px solid",
	  "4px": "4px solid",
	  "8px": "8px solid"
	};

	const breakpoints = {
	  base: "0em",
	  sm: "30em",
	  md: "48em",
	  lg: "62em",
	  xl: "80em",
	  "2xl": "96em"
	};

	const colors = {
	  transparent: "transparent",
	  current: "currentColor",
	  black: "#000000",
	  white: "#FFFFFF",
	  whiteAlpha: {
	    50: "rgba(255, 255, 255, 0.04)",
	    100: "rgba(255, 255, 255, 0.06)",
	    200: "rgba(255, 255, 255, 0.08)",
	    300: "rgba(255, 255, 255, 0.16)",
	    400: "rgba(255, 255, 255, 0.24)",
	    500: "rgba(255, 255, 255, 0.36)",
	    600: "rgba(255, 255, 255, 0.48)",
	    700: "rgba(255, 255, 255, 0.64)",
	    800: "rgba(255, 255, 255, 0.80)",
	    900: "rgba(255, 255, 255, 0.92)"
	  },
	  blackAlpha: {
	    50: "rgba(0, 0, 0, 0.04)",
	    100: "rgba(0, 0, 0, 0.06)",
	    200: "rgba(0, 0, 0, 0.08)",
	    300: "rgba(0, 0, 0, 0.16)",
	    400: "rgba(0, 0, 0, 0.24)",
	    500: "rgba(0, 0, 0, 0.36)",
	    600: "rgba(0, 0, 0, 0.48)",
	    700: "rgba(0, 0, 0, 0.64)",
	    800: "rgba(0, 0, 0, 0.80)",
	    900: "rgba(0, 0, 0, 0.92)"
	  },
	  gray: {
	    50: "#F7FAFC",
	    100: "#EDF2F7",
	    200: "#E2E8F0",
	    300: "#CBD5E0",
	    400: "#A0AEC0",
	    500: "#718096",
	    600: "#4A5568",
	    700: "#2D3748",
	    800: "#1A202C",
	    900: "#171923"
	  },
	  red: {
	    50: "#FFF5F5",
	    100: "#FED7D7",
	    200: "#FEB2B2",
	    300: "#FC8181",
	    400: "#F56565",
	    500: "#E53E3E",
	    600: "#C53030",
	    700: "#9B2C2C",
	    800: "#822727",
	    900: "#63171B"
	  },
	  orange: {
	    50: "#FFFAF0",
	    100: "#FEEBC8",
	    200: "#FBD38D",
	    300: "#F6AD55",
	    400: "#ED8936",
	    500: "#DD6B20",
	    600: "#C05621",
	    700: "#9C4221",
	    800: "#7B341E",
	    900: "#652B19"
	  },
	  yellow: {
	    50: "#FFFFF0",
	    100: "#FEFCBF",
	    200: "#FAF089",
	    300: "#F6E05E",
	    400: "#ECC94B",
	    500: "#D69E2E",
	    600: "#B7791F",
	    700: "#975A16",
	    800: "#744210",
	    900: "#5F370E"
	  },
	  green: {
	    50: "#F0FFF4",
	    100: "#C6F6D5",
	    200: "#9AE6B4",
	    300: "#68D391",
	    400: "#48BB78",
	    500: "#38A169",
	    600: "#2F855A",
	    700: "#276749",
	    800: "#22543D",
	    900: "#1C4532"
	  },
	  teal: {
	    50: "#E6FFFA",
	    100: "#B2F5EA",
	    200: "#81E6D9",
	    300: "#4FD1C5",
	    400: "#38B2AC",
	    500: "#319795",
	    600: "#2C7A7B",
	    700: "#285E61",
	    800: "#234E52",
	    900: "#1D4044"
	  },
	  blue: {
	    50: "#ebf8ff",
	    100: "#bee3f8",
	    200: "#90cdf4",
	    300: "#63b3ed",
	    400: "#4299e1",
	    500: "#3182ce",
	    600: "#2b6cb0",
	    700: "#2c5282",
	    800: "#2a4365",
	    900: "#1A365D"
	  },
	  cyan: {
	    50: "#EDFDFD",
	    100: "#C4F1F9",
	    200: "#9DECF9",
	    300: "#76E4F7",
	    400: "#0BC5EA",
	    500: "#00B5D8",
	    600: "#00A3C4",
	    700: "#0987A0",
	    800: "#086F83",
	    900: "#065666"
	  },
	  purple: {
	    50: "#FAF5FF",
	    100: "#E9D8FD",
	    200: "#D6BCFA",
	    300: "#B794F4",
	    400: "#9F7AEA",
	    500: "#805AD5",
	    600: "#6B46C1",
	    700: "#553C9A",
	    800: "#44337A",
	    900: "#322659"
	  },
	  pink: {
	    50: "#FFF5F7",
	    100: "#FED7E2",
	    200: "#FBB6CE",
	    300: "#F687B3",
	    400: "#ED64A6",
	    500: "#D53F8C",
	    600: "#B83280",
	    700: "#97266D",
	    800: "#702459",
	    900: "#521B41"
	  }
	};

	const radii = {
	  none: "0",
	  sm: "0.125rem",
	  base: "0.25rem",
	  md: "0.375rem",
	  lg: "0.5rem",
	  xl: "0.75rem",
	  "2xl": "1rem",
	  "3xl": "1.5rem",
	  full: "9999px"
	};

	const shadows = {
	  xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
	  sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
	  base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
	  md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
	  lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
	  xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
	  "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
	  outline: "0 0 0 3px rgba(66, 153, 225, 0.6)",
	  inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
	  none: "none",
	  "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"
	};

	const transitionProperty = {
	  common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
	  colors: "background-color, border-color, color, fill, stroke",
	  dimensions: "width, height",
	  position: "left, right, top, bottom",
	  background: "background-color, background-image, background-position"
	};
	const transitionTimingFunction = {
	  "ease-in": "cubic-bezier(0.4, 0, 1, 1)",
	  "ease-out": "cubic-bezier(0, 0, 0.2, 1)",
	  "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
	};
	const transitionDuration = {
	  "ultra-fast": "50ms",
	  faster: "100ms",
	  fast: "150ms",
	  normal: "200ms",
	  slow: "300ms",
	  slower: "400ms",
	  "ultra-slow": "500ms"
	};
	const transition = {
	  property: transitionProperty,
	  easing: transitionTimingFunction,
	  duration: transitionDuration
	};

	const zIndices = {
	  hide: -1,
	  auto: "auto",
	  base: 0,
	  docked: 10,
	  dropdown: 1e3,
	  sticky: 1100,
	  banner: 1200,
	  overlay: 1300,
	  modal: 1400,
	  popover: 1500,
	  skipLink: 1600,
	  toast: 1700,
	  tooltip: 1800
	};

	const blur = {
	  none: 0,
	  sm: "4px",
	  base: "8px",
	  md: "12px",
	  lg: "16px",
	  xl: "24px",
	  "2xl": "40px",
	  "3xl": "64px"
	};

	const foundations = {
	  breakpoints,
	  zIndices,
	  radii,
	  blur,
	  colors,
	  ...typography,
	  sizes: sizes$m,
	  shadows,
	  space: spacing,
	  borders: borders$1,
	  transition
	};

	const semanticTokens = {
	  colors: {
	    "chakra-body-text": { _light: "gray.800", _dark: "whiteAlpha.900" },
	    "chakra-body-bg": { _light: "white", _dark: "gray.800" },
	    "chakra-border-color": { _light: "gray.200", _dark: "whiteAlpha.300" },
	    "chakra-inverse-text": { _light: "white", _dark: "gray.800" },
	    "chakra-subtle-bg": { _light: "gray.100", _dark: "gray.700" },
	    "chakra-subtle-text": { _light: "gray.600", _dark: "gray.400" },
	    "chakra-placeholder-color": { _light: "gray.500", _dark: "whiteAlpha.400" }
	  }
	};

	const styles = {
	  global: {
	    body: {
	      fontFamily: "body",
	      color: "chakra-body-text",
	      bg: "chakra-body-bg",
	      transitionProperty: "background-color",
	      transitionDuration: "normal",
	      lineHeight: "base"
	    },
	    "*::placeholder": {
	      color: "chakra-placeholder-color"
	    },
	    "*, *::before, &::after": {
	      borderColor: "chakra-border-color"
	    }
	  }
	};

	const requiredChakraThemeKeys = [
	  "borders",
	  "breakpoints",
	  "colors",
	  "components",
	  "config",
	  "direction",
	  "fonts",
	  "fontSizes",
	  "fontWeights",
	  "letterSpacings",
	  "lineHeights",
	  "radii",
	  "shadows",
	  "sizes",
	  "space",
	  "styles",
	  "transition",
	  "zIndices"
	];
	function isChakraTheme(unit) {
	  if (!isObject$1(unit)) {
	    return false;
	  }
	  return requiredChakraThemeKeys.every(
	    (propertyName) => Object.prototype.hasOwnProperty.call(unit, propertyName)
	  );
	}

	const direction = "ltr";
	const config = {
	  useSystemColorMode: false,
	  initialColorMode: "light",
	  cssVarPrefix: "chakra"
	};
	const theme$1 = {
	  semanticTokens,
	  direction,
	  ...foundations,
	  components,
	  styles,
	  config
	};

	/*

	Based off glamor's StyleSheet, thanks Sunil ❤️

	high performance StyleSheet for css-in-js systems

	- uses multiple style tags behind the scenes for millions of rules
	- uses `insertRule` for appending in production for *much* faster performance

	// usage

	import { StyleSheet } from '@emotion/sheet'

	let styleSheet = new StyleSheet({ key: '', container: document.head })

	styleSheet.insert('#box { border: 1px solid red; }')
	- appends a css rule into the stylesheet

	styleSheet.flush()
	- empties the stylesheet of all its contents

	*/

	function sheetForTag(tag) {
	  if (tag.sheet) {
	    return tag.sheet;
	  } // this weirdness brought to you by firefox

	  /* istanbul ignore next */


	  for (var i = 0; i < document.styleSheets.length; i++) {
	    if (document.styleSheets[i].ownerNode === tag) {
	      return document.styleSheets[i];
	    }
	  } // this function should always return with a value
	  // TS can't understand it though so we make it stop complaining here


	  return undefined;
	}

	function createStyleElement(options) {
	  var tag = document.createElement('style');
	  tag.setAttribute('data-emotion', options.key);

	  if (options.nonce !== undefined) {
	    tag.setAttribute('nonce', options.nonce);
	  }

	  tag.appendChild(document.createTextNode(''));
	  tag.setAttribute('data-s', '');
	  return tag;
	}

	var StyleSheet = /*#__PURE__*/function () {
	  // Using Node instead of HTMLElement since container may be a ShadowRoot
	  function StyleSheet(options) {
	    var _this = this;

	    this._insertTag = function (tag) {
	      var before;

	      if (_this.tags.length === 0) {
	        if (_this.insertionPoint) {
	          before = _this.insertionPoint.nextSibling;
	        } else if (_this.prepend) {
	          before = _this.container.firstChild;
	        } else {
	          before = _this.before;
	        }
	      } else {
	        before = _this.tags[_this.tags.length - 1].nextSibling;
	      }

	      _this.container.insertBefore(tag, before);

	      _this.tags.push(tag);
	    };

	    this.isSpeedy = options.speedy === undefined ? true : options.speedy;
	    this.tags = [];
	    this.ctr = 0;
	    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

	    this.key = options.key;
	    this.container = options.container;
	    this.prepend = options.prepend;
	    this.insertionPoint = options.insertionPoint;
	    this.before = null;
	  }

	  var _proto = StyleSheet.prototype;

	  _proto.hydrate = function hydrate(nodes) {
	    nodes.forEach(this._insertTag);
	  };

	  _proto.insert = function insert(rule) {
	    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
	    // it's 1 in dev because we insert source maps that map a single rule to a location
	    // and you can only have one source map per style tag
	    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
	      this._insertTag(createStyleElement(this));
	    }

	    var tag = this.tags[this.tags.length - 1];

	    if (this.isSpeedy) {
	      var sheet = sheetForTag(tag);

	      try {
	        // this is the ultrafast version, works across browsers
	        // the big drawback is that the css won't be editable in devtools
	        sheet.insertRule(rule, sheet.cssRules.length);
	      } catch (e) {
	      }
	    } else {
	      tag.appendChild(document.createTextNode(rule));
	    }

	    this.ctr++;
	  };

	  _proto.flush = function flush() {
	    this.tags.forEach(function (tag) {
	      var _tag$parentNode;

	      return (_tag$parentNode = tag.parentNode) == null ? void 0 : _tag$parentNode.removeChild(tag);
	    });
	    this.tags = [];
	    this.ctr = 0;
	  };

	  return StyleSheet;
	}();

	var stylis$1 = {exports: {}};

	var stylis = stylis$1.exports;

	var hasRequiredStylis;

	function requireStylis () {
		if (hasRequiredStylis) return stylis$1.exports;
		hasRequiredStylis = 1;
		(function (module, exports) {
			(function(e,r){r(exports);})(stylis,(function(e){var r="-ms-";var a="-moz-";var c="-webkit-";var n="comm";var t="rule";var s="decl";var i="@page";var u="@media";var o="@import";var f="@charset";var l="@viewport";var p="@supports";var h="@document";var v="@namespace";var d="@keyframes";var b="@font-face";var w="@counter-style";var m="@font-feature-values";var g="@layer";var k=Math.abs;var $=String.fromCharCode;var x=Object.assign;function E(e,r){return M(e,0)^45?(((r<<2^M(e,0))<<2^M(e,1))<<2^M(e,2))<<2^M(e,3):0}function y(e){return e.trim()}function T(e,r){return (e=r.exec(e))?e[0]:e}function A(e,r,a){return e.replace(r,a)}function O(e,r){return e.indexOf(r)}function M(e,r){return e.charCodeAt(r)|0}function C(e,r,a){return e.slice(r,a)}function R(e){return e.length}function S(e){return e.length}function z(e,r){return r.push(e),e}function N(e,r){return e.map(r).join("")}e.line=1;e.column=1;e.length=0;e.position=0;e.character=0;e.characters="";function P(r,a,c,n,t,s,i){return {value:r,root:a,parent:c,type:n,props:t,children:s,line:e.line,column:e.column,length:i,return:""}}function j(e,r){return x(P("",null,null,"",null,null,0),e,{length:-e.length},r)}function U(){return e.character}function _(){e.character=e.position>0?M(e.characters,--e.position):0;if(e.column--,e.character===10)e.column=1,e.line--;return e.character}function F(){e.character=e.position<e.length?M(e.characters,e.position++):0;if(e.column++,e.character===10)e.column=1,e.line++;return e.character}function I(){return M(e.characters,e.position)}function L(){return e.position}function D(r,a){return C(e.characters,r,a)}function Y(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function K(r){return e.line=e.column=1,e.length=R(e.characters=r),e.position=0,[]}function V(r){return e.characters="",r}function W(r){return y(D(e.position-1,q(r===91?r+2:r===40?r+1:r)))}function B(e){return V(H(K(e)))}function G(r){while(e.character=I())if(e.character<33)F();else break;return Y(r)>2||Y(e.character)>3?"":" "}function H(r){while(F())switch(Y(e.character)){case 0:z(Q(e.position-1),r);break;case 2:z(W(e.character),r);break;default:z($(e.character),r);}return r}function Z(r,a){while(--a&&F())if(e.character<48||e.character>102||e.character>57&&e.character<65||e.character>70&&e.character<97)break;return D(r,L()+(a<6&&I()==32&&F()==32))}function q(r){while(F())switch(e.character){case r:return e.position;case 34:case 39:if(r!==34&&r!==39)q(e.character);break;case 40:if(r===41)q(r);break;case 92:F();break}return e.position}function J(r,a){while(F())if(r+e.character===47+10)break;else if(r+e.character===42+42&&I()===47)break;return "/*"+D(a,e.position-1)+"*"+$(r===47?r:F())}function Q(r){while(!Y(I()))F();return D(r,e.position)}function X(e){return V(ee("",null,null,null,[""],e=K(e),0,[0],e))}function ee(e,r,a,c,n,t,s,i,u){var o=0;var f=0;var l=s;var p=0;var h=0;var v=0;var d=1;var b=1;var w=1;var m=0;var g="";var k=n;var x=t;var E=c;var y=g;while(b)switch(v=m,m=F()){case 40:if(v!=108&&M(y,l-1)==58){if(O(y+=A(W(m),"&","&\f"),"&\f")!=-1)w=-1;break}case 34:case 39:case 91:y+=W(m);break;case 9:case 10:case 13:case 32:y+=G(v);break;case 92:y+=Z(L()-1,7);continue;case 47:switch(I()){case 42:case 47:z(ae(J(F(),L()),r,a),u);break;default:y+="/";}break;case 123*d:i[o++]=R(y)*w;case 125*d:case 59:case 0:switch(m){case 0:case 125:b=0;case 59+f:if(w==-1)y=A(y,/\f/g,"");if(h>0&&R(y)-l)z(h>32?ce(y+";",c,a,l-1):ce(A(y," ","")+";",c,a,l-2),u);break;case 59:y+=";";default:z(E=re(y,r,a,o,f,n,i,g,k=[],x=[],l),t);if(m===123)if(f===0)ee(y,r,E,E,k,t,l,i,x);else switch(p===99&&M(y,3)===110?100:p){case 100:case 108:case 109:case 115:ee(e,E,E,c&&z(re(e,E,E,0,0,n,i,g,n,k=[],l),x),n,x,l,i,c?k:x);break;default:ee(y,E,E,E,[""],x,0,i,x);}}o=f=h=0,d=w=1,g=y="",l=s;break;case 58:l=1+R(y),h=v;default:if(d<1)if(m==123)--d;else if(m==125&&d++==0&&_()==125)continue;switch(y+=$(m),m*d){case 38:w=f>0?1:(y+="\f",-1);break;case 44:i[o++]=(R(y)-1)*w,w=1;break;case 64:if(I()===45)y+=W(F());p=I(),f=l=R(g=y+=Q(L())),m++;break;case 45:if(v===45&&R(y)==2)d=0;}}return t}function re(e,r,a,c,n,s,i,u,o,f,l){var p=n-1;var h=n===0?s:[""];var v=S(h);for(var d=0,b=0,w=0;d<c;++d)for(var m=0,g=C(e,p+1,p=k(b=i[d])),$=e;m<v;++m)if($=y(b>0?h[m]+" "+g:A(g,/&\f/g,h[m])))o[w++]=$;return P(e,r,a,n===0?t:u,o,f,l)}function ae(e,r,a){return P(e,r,a,n,$(U()),C(e,2,-2),0)}function ce(e,r,a,c){return P(e,r,a,s,C(e,0,c),C(e,c+1,-1),c)}function ne(e,n,t){switch(E(e,n)){case 5103:return c+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return c+e+e;case 4789:return a+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return c+e+a+e+r+e+e;case 5936:switch(M(e,n+11)){case 114:return c+e+r+A(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return c+e+r+A(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return c+e+r+A(e,/[svh]\w+-[tblr]{2}/,"lr")+e}case 6828:case 4268:case 2903:return c+e+r+e+e;case 6165:return c+e+r+"flex-"+e+e;case 5187:return c+e+A(e,/(\w+).+(:[^]+)/,c+"box-$1$2"+r+"flex-$1$2")+e;case 5443:return c+e+r+"flex-item-"+A(e,/flex-|-self/g,"")+(!T(e,/flex-|baseline/)?r+"grid-row-"+A(e,/flex-|-self/g,""):"")+e;case 4675:return c+e+r+"flex-line-pack"+A(e,/align-content|flex-|-self/g,"")+e;case 5548:return c+e+r+A(e,"shrink","negative")+e;case 5292:return c+e+r+A(e,"basis","preferred-size")+e;case 6060:return c+"box-"+A(e,"-grow","")+c+e+r+A(e,"grow","positive")+e;case 4554:return c+A(e,/([^-])(transform)/g,"$1"+c+"$2")+e;case 6187:return A(A(A(e,/(zoom-|grab)/,c+"$1"),/(image-set)/,c+"$1"),e,"")+e;case 5495:case 3959:return A(e,/(image-set\([^]*)/,c+"$1"+"$`$1");case 4968:return A(A(e,/(.+:)(flex-)?(.*)/,c+"box-pack:$3"+r+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+c+e+e;case 4200:if(!T(e,/flex-|baseline/))return r+"grid-column-align"+C(e,n)+e;break;case 2592:case 3360:return r+A(e,"template-","")+e;case 4384:case 3616:if(t&&t.some((function(e,r){return n=r,T(e.props,/grid-\w+-end/)}))){return ~O(e+(t=t[n].value),"span")?e:r+A(e,"-start","")+e+r+"grid-row-span:"+(~O(t,"span")?T(t,/\d+/):+T(t,/\d+/)-+T(e,/\d+/))+";"}return r+A(e,"-start","")+e;case 4896:case 4128:return t&&t.some((function(e){return T(e.props,/grid-\w+-start/)}))?e:r+A(A(e,"-end","-span"),"span ","")+e;case 4095:case 3583:case 4068:case 2532:return A(e,/(.+)-inline(.+)/,c+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(R(e)-1-n>6)switch(M(e,n+1)){case 109:if(M(e,n+4)!==45)break;case 102:return A(e,/(.+:)(.+)-([^]+)/,"$1"+c+"$2-$3"+"$1"+a+(M(e,n+3)==108?"$3":"$2-$3"))+e;case 115:return ~O(e,"stretch")?ne(A(e,"stretch","fill-available"),n,t)+e:e}break;case 5152:case 5920:return A(e,/(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/,(function(a,c,n,t,s,i,u){return r+c+":"+n+u+(t?r+c+"-span:"+(s?i:+i-+n)+u:"")+e}));case 4949:if(M(e,n+6)===121)return A(e,":",":"+c)+e;break;case 6444:switch(M(e,M(e,14)===45?18:11)){case 120:return A(e,/(.+:)([^;\s!]+)(;|(\s+)?!.+)?/,"$1"+c+(M(e,14)===45?"inline-":"")+"box$3"+"$1"+c+"$2$3"+"$1"+r+"$2box$3")+e;case 100:return A(e,":",":"+r)+e}break;case 5719:case 2647:case 2135:case 3927:case 2391:return A(e,"scroll-","scroll-snap-")+e}return e}function te(e,r){var a="";var c=S(e);for(var n=0;n<c;n++)a+=r(e[n],n,e,r)||"";return a}function se(e,r,a,c){switch(e.type){case g:if(e.children.length)break;case o:case s:return e.return=e.return||e.value;case n:return "";case d:return e.return=e.value+"{"+te(e.children,c)+"}";case t:e.value=e.props.join(",");}return R(a=te(e.children,c))?e.return=e.value+"{"+a+"}":""}function ie(e){var r=S(e);return function(a,c,n,t){var s="";for(var i=0;i<r;i++)s+=e[i](a,c,n,t)||"";return s}}function ue(e){return function(r){if(!r.root)if(r=r.return)e(r);}}function oe(e,n,i,u){if(e.length>-1)if(!e.return)switch(e.type){case s:e.return=ne(e.value,e.length,i);return;case d:return te([j(e,{value:A(e.value,"@","@"+c)})],u);case t:if(e.length)return N(e.props,(function(n){switch(T(n,/(::plac\w+|:read-\w+)/)){case ":read-only":case ":read-write":return te([j(e,{props:[A(n,/:(read-\w+)/,":"+a+"$1")]})],u);case "::placeholder":return te([j(e,{props:[A(n,/:(plac\w+)/,":"+c+"input-$1")]}),j(e,{props:[A(n,/:(plac\w+)/,":"+a+"$1")]}),j(e,{props:[A(n,/:(plac\w+)/,r+"input-$1")]})],u)}return ""}))}}function fe(e){switch(e.type){case t:e.props=e.props.map((function(r){return N(B(r),(function(r,a,c){switch(M(r,0)){case 12:return C(r,1,R(r));case 0:case 40:case 43:case 62:case 126:return r;case 58:if(c[++a]==="global")c[a]="",c[++a]="\f"+C(c[a],a=1,-1);case 32:return a===1?"":r;default:switch(a){case 0:e=r;return S(c)>1?"":r;case a=S(c)-1:case 2:return a===2?r+e+e:r+e;default:return r}}}))}));}}e.CHARSET=f;e.COMMENT=n;e.COUNTER_STYLE=w;e.DECLARATION=s;e.DOCUMENT=h;e.FONT_FACE=b;e.FONT_FEATURE_VALUES=m;e.IMPORT=o;e.KEYFRAMES=d;e.LAYER=g;e.MEDIA=u;e.MOZ=a;e.MS=r;e.NAMESPACE=v;e.PAGE=i;e.RULESET=t;e.SUPPORTS=p;e.VIEWPORT=l;e.WEBKIT=c;e.abs=k;e.alloc=K;e.append=z;e.assign=x;e.caret=L;e.char=U;e.charat=M;e.combine=N;e.comment=ae;e.commenter=J;e.compile=X;e.copy=j;e.dealloc=V;e.declaration=ce;e.delimit=W;e.delimiter=q;e.escaping=Z;e.from=$;e.hash=E;e.identifier=Q;e.indexof=O;e.match=T;e.middleware=ie;e.namespace=fe;e.next=F;e.node=P;e.parse=ee;e.peek=I;e.prefix=ne;e.prefixer=oe;e.prev=_;e.replace=A;e.ruleset=re;e.rulesheet=ue;e.serialize=te;e.sizeof=S;e.slice=D;e.stringify=se;e.strlen=R;e.substr=C;e.token=Y;e.tokenize=B;e.tokenizer=H;e.trim=y;e.whitespace=G;Object.defineProperty(e,"__esModule",{value:true});}));
			
		} (stylis$1, stylis$1.exports));
		return stylis$1.exports;
	}

	var stylisExports = requireStylis();

	var weakMemoize = function weakMemoize(func) {
	  var cache = new WeakMap();
	  return function (arg) {
	    if (cache.has(arg)) {
	      // Use non-null assertion because we just checked that the cache `has` it
	      // This allows us to remove `undefined` from the return value
	      return cache.get(arg);
	    }

	    var ret = func(arg);
	    cache.set(arg, ret);
	    return ret;
	  };
	};

	function memoize(fn) {
	  var cache = Object.create(null);
	  return function (arg) {
	    if (cache[arg] === undefined) cache[arg] = fn(arg);
	    return cache[arg];
	  };
	}

	var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
	  var previous = 0;
	  var character = 0;

	  while (true) {
	    previous = character;
	    character = stylisExports.peek(); // &\f

	    if (previous === 38 && character === 12) {
	      points[index] = 1;
	    }

	    if (stylisExports.token(character)) {
	      break;
	    }

	    stylisExports.next();
	  }

	  return stylisExports.slice(begin, stylisExports.position);
	};

	var toRules = function toRules(parsed, points) {
	  // pretend we've started with a comma
	  var index = -1;
	  var character = 44;

	  do {
	    switch (stylisExports.token(character)) {
	      case 0:
	        // &\f
	        if (character === 38 && stylisExports.peek() === 12) {
	          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
	          // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
	          // and when it should just concatenate the outer and inner selectors
	          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
	          points[index] = 1;
	        }

	        parsed[index] += identifierWithPointTracking(stylisExports.position - 1, points, index);
	        break;

	      case 2:
	        parsed[index] += stylisExports.delimit(character);
	        break;

	      case 4:
	        // comma
	        if (character === 44) {
	          // colon
	          parsed[++index] = stylisExports.peek() === 58 ? '&\f' : '';
	          points[index] = parsed[index].length;
	          break;
	        }

	      // fallthrough

	      default:
	        parsed[index] += stylisExports.from(character);
	    }
	  } while (character = stylisExports.next());

	  return parsed;
	};

	var getRules = function getRules(value, points) {
	  return stylisExports.dealloc(toRules(stylisExports.alloc(value), points));
	}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


	var fixedElements = /* #__PURE__ */new WeakMap();
	var compat = function compat(element) {
	  if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo
	  // negative .length indicates that this rule has been already prefixed
	  element.length < 1) {
	    return;
	  }

	  var value = element.value;
	  var parent = element.parent;
	  var isImplicitRule = element.column === parent.column && element.line === parent.line;

	  while (parent.type !== 'rule') {
	    parent = parent.parent;
	    if (!parent) return;
	  } // short-circuit for the simplest case


	  if (element.props.length === 1 && value.charCodeAt(0) !== 58
	  /* colon */
	  && !fixedElements.get(parent)) {
	    return;
	  } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
	  // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


	  if (isImplicitRule) {
	    return;
	  }

	  fixedElements.set(element, true);
	  var points = [];
	  var rules = getRules(value, points);
	  var parentRules = parent.props;

	  for (var i = 0, k = 0; i < rules.length; i++) {
	    for (var j = 0; j < parentRules.length; j++, k++) {
	      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
	    }
	  }
	};
	var removeLabel = function removeLabel(element) {
	  if (element.type === 'decl') {
	    var value = element.value;

	    if ( // charcode for l
	    value.charCodeAt(0) === 108 && // charcode for b
	    value.charCodeAt(2) === 98) {
	      // this ignores label
	      element["return"] = '';
	      element.value = '';
	    }
	  }
	};

	/* eslint-disable no-fallthrough */

	function prefix(value, length) {
	  switch (stylisExports.hash(value, length)) {
	    // color-adjust
	    case 5103:
	      return stylisExports.WEBKIT + 'print-' + value + value;
	    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)

	    case 5737:
	    case 4201:
	    case 3177:
	    case 3433:
	    case 1641:
	    case 4457:
	    case 2921: // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break

	    case 5572:
	    case 6356:
	    case 5844:
	    case 3191:
	    case 6645:
	    case 3005: // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,

	    case 6391:
	    case 5879:
	    case 5623:
	    case 6135:
	    case 4599:
	    case 4855: // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)

	    case 4215:
	    case 6389:
	    case 5109:
	    case 5365:
	    case 5621:
	    case 3829:
	      return stylisExports.WEBKIT + value + value;
	    // appearance, user-select, transform, hyphens, text-size-adjust

	    case 5349:
	    case 4246:
	    case 4810:
	    case 6968:
	    case 2756:
	      return stylisExports.WEBKIT + value + stylisExports.MOZ + value + stylisExports.MS + value + value;
	    // flex, flex-direction

	    case 6828:
	    case 4268:
	      return stylisExports.WEBKIT + value + stylisExports.MS + value + value;
	    // order

	    case 6165:
	      return stylisExports.WEBKIT + value + stylisExports.MS + 'flex-' + value + value;
	    // align-items

	    case 5187:
	      return stylisExports.WEBKIT + value + stylisExports.replace(value, /(\w+).+(:[^]+)/, stylisExports.WEBKIT + 'box-$1$2' + stylisExports.MS + 'flex-$1$2') + value;
	    // align-self

	    case 5443:
	      return stylisExports.WEBKIT + value + stylisExports.MS + 'flex-item-' + stylisExports.replace(value, /flex-|-self/, '') + value;
	    // align-content

	    case 4675:
	      return stylisExports.WEBKIT + value + stylisExports.MS + 'flex-line-pack' + stylisExports.replace(value, /align-content|flex-|-self/, '') + value;
	    // flex-shrink

	    case 5548:
	      return stylisExports.WEBKIT + value + stylisExports.MS + stylisExports.replace(value, 'shrink', 'negative') + value;
	    // flex-basis

	    case 5292:
	      return stylisExports.WEBKIT + value + stylisExports.MS + stylisExports.replace(value, 'basis', 'preferred-size') + value;
	    // flex-grow

	    case 6060:
	      return stylisExports.WEBKIT + 'box-' + stylisExports.replace(value, '-grow', '') + stylisExports.WEBKIT + value + stylisExports.MS + stylisExports.replace(value, 'grow', 'positive') + value;
	    // transition

	    case 4554:
	      return stylisExports.WEBKIT + stylisExports.replace(value, /([^-])(transform)/g, '$1' + stylisExports.WEBKIT + '$2') + value;
	    // cursor

	    case 6187:
	      return stylisExports.replace(stylisExports.replace(stylisExports.replace(value, /(zoom-|grab)/, stylisExports.WEBKIT + '$1'), /(image-set)/, stylisExports.WEBKIT + '$1'), value, '') + value;
	    // background, background-image

	    case 5495:
	    case 3959:
	      return stylisExports.replace(value, /(image-set\([^]*)/, stylisExports.WEBKIT + '$1' + '$`$1');
	    // justify-content

	    case 4968:
	      return stylisExports.replace(stylisExports.replace(value, /(.+:)(flex-)?(.*)/, stylisExports.WEBKIT + 'box-pack:$3' + stylisExports.MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + stylisExports.WEBKIT + value + value;
	    // (margin|padding)-inline-(start|end)

	    case 4095:
	    case 3583:
	    case 4068:
	    case 2532:
	      return stylisExports.replace(value, /(.+)-inline(.+)/, stylisExports.WEBKIT + '$1$2') + value;
	    // (min|max)?(width|height|inline-size|block-size)

	    case 8116:
	    case 7059:
	    case 5753:
	    case 5535:
	    case 5445:
	    case 5701:
	    case 4933:
	    case 4677:
	    case 5533:
	    case 5789:
	    case 5021:
	    case 4765:
	      // stretch, max-content, min-content, fill-available
	      if (stylisExports.strlen(value) - 1 - length > 6) switch (stylisExports.charat(value, length + 1)) {
	        // (m)ax-content, (m)in-content
	        case 109:
	          // -
	          if (stylisExports.charat(value, length + 4) !== 45) break;
	        // (f)ill-available, (f)it-content

	        case 102:
	          return stylisExports.replace(value, /(.+:)(.+)-([^]+)/, '$1' + stylisExports.WEBKIT + '$2-$3' + '$1' + stylisExports.MOZ + (stylisExports.charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
	        // (s)tretch

	        case 115:
	          return ~stylisExports.indexof(value, 'stretch') ? prefix(stylisExports.replace(value, 'stretch', 'fill-available'), length) + value : value;
	      }
	      break;
	    // position: sticky

	    case 4949:
	      // (s)ticky?
	      if (stylisExports.charat(value, length + 1) !== 115) break;
	    // display: (flex|inline-flex)

	    case 6444:
	      switch (stylisExports.charat(value, stylisExports.strlen(value) - 3 - (~stylisExports.indexof(value, '!important') && 10))) {
	        // stic(k)y
	        case 107:
	          return stylisExports.replace(value, ':', ':' + stylisExports.WEBKIT) + value;
	        // (inline-)?fl(e)x

	        case 101:
	          return stylisExports.replace(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + stylisExports.WEBKIT + (stylisExports.charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + stylisExports.WEBKIT + '$2$3' + '$1' + stylisExports.MS + '$2box$3') + value;
	      }

	      break;
	    // writing-mode

	    case 5936:
	      switch (stylisExports.charat(value, length + 11)) {
	        // vertical-l(r)
	        case 114:
	          return stylisExports.WEBKIT + value + stylisExports.MS + stylisExports.replace(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
	        // vertical-r(l)

	        case 108:
	          return stylisExports.WEBKIT + value + stylisExports.MS + stylisExports.replace(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
	        // horizontal(-)tb

	        case 45:
	          return stylisExports.WEBKIT + value + stylisExports.MS + stylisExports.replace(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
	      }

	      return stylisExports.WEBKIT + value + stylisExports.MS + value + value;
	  }

	  return value;
	}

	var prefixer = function prefixer(element, index, children, callback) {
	  if (element.length > -1) if (!element["return"]) switch (element.type) {
	    case stylisExports.DECLARATION:
	      element["return"] = prefix(element.value, element.length);
	      break;

	    case stylisExports.KEYFRAMES:
	      return stylisExports.serialize([stylisExports.copy(element, {
	        value: stylisExports.replace(element.value, '@', '@' + stylisExports.WEBKIT)
	      })], callback);

	    case stylisExports.RULESET:
	      if (element.length) return stylisExports.combine(element.props, function (value) {
	        switch (stylisExports.match(value, /(::plac\w+|:read-\w+)/)) {
	          // :read-(only|write)
	          case ':read-only':
	          case ':read-write':
	            return stylisExports.serialize([stylisExports.copy(element, {
	              props: [stylisExports.replace(value, /:(read-\w+)/, ':' + stylisExports.MOZ + '$1')]
	            })], callback);
	          // :placeholder

	          case '::placeholder':
	            return stylisExports.serialize([stylisExports.copy(element, {
	              props: [stylisExports.replace(value, /:(plac\w+)/, ':' + stylisExports.WEBKIT + 'input-$1')]
	            }), stylisExports.copy(element, {
	              props: [stylisExports.replace(value, /:(plac\w+)/, ':' + stylisExports.MOZ + '$1')]
	            }), stylisExports.copy(element, {
	              props: [stylisExports.replace(value, /:(plac\w+)/, stylisExports.MS + 'input-$1')]
	            })], callback);
	        }

	        return '';
	      });
	  }
	};

	var defaultStylisPlugins = [prefixer];

	var createCache = function createCache(options) {
	  var key = options.key;

	  if (key === 'css') {
	    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
	    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
	    // note this very very intentionally targets all style elements regardless of the key to ensure
	    // that creating a cache works inside of render of a React component

	    Array.prototype.forEach.call(ssrStyles, function (node) {
	      // we want to only move elements which have a space in the data-emotion attribute value
	      // because that indicates that it is an Emotion 11 server-side rendered style elements
	      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
	      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
	      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
	      // will not result in the Emotion 10 styles being destroyed
	      var dataEmotionAttribute = node.getAttribute('data-emotion');

	      if (dataEmotionAttribute.indexOf(' ') === -1) {
	        return;
	      }

	      document.head.appendChild(node);
	      node.setAttribute('data-s', '');
	    });
	  }

	  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

	  var inserted = {};
	  var container;
	  var nodesToHydrate = [];

	  {
	    container = options.container || document.head;
	    Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
	    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
	    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
	      var attrib = node.getAttribute("data-emotion").split(' ');

	      for (var i = 1; i < attrib.length; i++) {
	        inserted[attrib[i]] = true;
	      }

	      nodesToHydrate.push(node);
	    });
	  }

	  var _insert;

	  var omnipresentPlugins = [compat, removeLabel];

	  {
	    var currentSheet;
	    var finalizingPlugins = [stylisExports.stringify, stylisExports.rulesheet(function (rule) {
	      currentSheet.insert(rule);
	    })];
	    var serializer = stylisExports.middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

	    var stylis = function stylis(styles) {
	      return stylisExports.serialize(stylisExports.compile(styles), serializer);
	    };

	    _insert = function insert(selector, serialized, sheet, shouldCache) {
	      currentSheet = sheet;

	      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

	      if (shouldCache) {
	        cache.inserted[serialized.name] = true;
	      }
	    };
	  }

	  var cache = {
	    key: key,
	    sheet: new StyleSheet({
	      key: key,
	      container: container,
	      nonce: options.nonce,
	      speedy: options.speedy,
	      prepend: options.prepend,
	      insertionPoint: options.insertionPoint
	    }),
	    nonce: options.nonce,
	    inserted: inserted,
	    registered: {},
	    insert: _insert
	  };
	  cache.sheet.hydrate(nodesToHydrate);
	  return cache;
	};

	function _extends$1() {
	  return _extends$1 = Object.assign ? Object.assign.bind() : function (n) {
	    for (var e = 1; e < arguments.length; e++) {
	      var t = arguments[e];
	      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
	    }
	    return n;
	  }, _extends$1.apply(null, arguments);
	}

	var reactIs = {exports: {}};

	var reactIs_production_min = {};

	/** @license React v16.13.1
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_production_min;

	function requireReactIs_production_min () {
		if (hasRequiredReactIs_production_min) return reactIs_production_min;
		hasRequiredReactIs_production_min = 1;
	var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
		Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
		function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;
		reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};
		reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};
		reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;
		return reactIs_production_min;
	}

	var hasRequiredReactIs;

	function requireReactIs () {
		if (hasRequiredReactIs) return reactIs.exports;
		hasRequiredReactIs = 1;

		{
		  reactIs.exports = requireReactIs_production_min();
		}
		return reactIs.exports;
	}

	var hoistNonReactStatics_cjs;
	var hasRequiredHoistNonReactStatics_cjs;

	function requireHoistNonReactStatics_cjs () {
		if (hasRequiredHoistNonReactStatics_cjs) return hoistNonReactStatics_cjs;
		hasRequiredHoistNonReactStatics_cjs = 1;

		var reactIs = requireReactIs();

		/**
		 * Copyright 2015, Yahoo! Inc.
		 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
		 */
		var REACT_STATICS = {
		  childContextTypes: true,
		  contextType: true,
		  contextTypes: true,
		  defaultProps: true,
		  displayName: true,
		  getDefaultProps: true,
		  getDerivedStateFromError: true,
		  getDerivedStateFromProps: true,
		  mixins: true,
		  propTypes: true,
		  type: true
		};
		var KNOWN_STATICS = {
		  name: true,
		  length: true,
		  prototype: true,
		  caller: true,
		  callee: true,
		  arguments: true,
		  arity: true
		};
		var FORWARD_REF_STATICS = {
		  '$$typeof': true,
		  render: true,
		  defaultProps: true,
		  displayName: true,
		  propTypes: true
		};
		var MEMO_STATICS = {
		  '$$typeof': true,
		  compare: true,
		  defaultProps: true,
		  displayName: true,
		  propTypes: true,
		  type: true
		};
		var TYPE_STATICS = {};
		TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
		TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

		function getStatics(component) {
		  // React v16.11 and below
		  if (reactIs.isMemo(component)) {
		    return MEMO_STATICS;
		  } // React v16.12 and above


		  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
		}

		var defineProperty = Object.defineProperty;
		var getOwnPropertyNames = Object.getOwnPropertyNames;
		var getOwnPropertySymbols = Object.getOwnPropertySymbols;
		var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
		var getPrototypeOf = Object.getPrototypeOf;
		var objectPrototype = Object.prototype;
		function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
		  if (typeof sourceComponent !== 'string') {
		    // don't hoist over string (html) components
		    if (objectPrototype) {
		      var inheritedComponent = getPrototypeOf(sourceComponent);

		      if (inheritedComponent && inheritedComponent !== objectPrototype) {
		        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
		      }
		    }

		    var keys = getOwnPropertyNames(sourceComponent);

		    if (getOwnPropertySymbols) {
		      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
		    }

		    var targetStatics = getStatics(targetComponent);
		    var sourceStatics = getStatics(sourceComponent);

		    for (var i = 0; i < keys.length; ++i) {
		      var key = keys[i];

		      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
		        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

		        try {
		          // Avoid failures from read-only properties
		          defineProperty(targetComponent, key, descriptor);
		        } catch (e) {}
		      }
		    }
		  }

		  return targetComponent;
		}

		hoistNonReactStatics_cjs = hoistNonReactStatics;
		return hoistNonReactStatics_cjs;
	}

	requireHoistNonReactStatics_cjs();

	var isBrowser$1 = true;

	function getRegisteredStyles(registered, registeredStyles, classNames) {
	  var rawClassName = '';
	  classNames.split(' ').forEach(function (className) {
	    if (registered[className] !== undefined) {
	      registeredStyles.push(registered[className] + ";");
	    } else if (className) {
	      rawClassName += className + " ";
	    }
	  });
	  return rawClassName;
	}
	var registerStyles = function registerStyles(cache, serialized, isStringTag) {
	  var className = cache.key + "-" + serialized.name;

	  if ( // we only need to add the styles to the registered cache if the
	  // class name could be used further down
	  // the tree but if it's a string tag, we know it won't
	  // so we don't have to add it to registered cache.
	  // this improves memory usage since we can avoid storing the whole style string
	  (isStringTag === false || // we need to always store it if we're in compat mode and
	  // in node since emotion-server relies on whether a style is in
	  // the registered cache to know whether a style is global or not
	  // also, note that this check will be dead code eliminated in the browser
	  isBrowser$1 === false ) && cache.registered[className] === undefined) {
	    cache.registered[className] = serialized.styles;
	  }
	};
	var insertStyles = function insertStyles(cache, serialized, isStringTag) {
	  registerStyles(cache, serialized, isStringTag);
	  var className = cache.key + "-" + serialized.name;

	  if (cache.inserted[serialized.name] === undefined) {
	    var current = serialized;

	    do {
	      cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

	      current = current.next;
	    } while (current !== undefined);
	  }
	};

	/* eslint-disable */
	// Inspired by https://github.com/garycourt/murmurhash-js
	// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
	function murmur2(str) {
	  // 'm' and 'r' are mixing constants generated offline.
	  // They're not really 'magic', they just happen to work well.
	  // const m = 0x5bd1e995;
	  // const r = 24;
	  // Initialize the hash
	  var h = 0; // Mix 4 bytes at a time into the hash

	  var k,
	      i = 0,
	      len = str.length;

	  for (; len >= 4; ++i, len -= 4) {
	    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
	    k =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
	    k ^=
	    /* k >>> r: */
	    k >>> 24;
	    h =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
	    /* Math.imul(h, m): */
	    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Handle the last few bytes of the input array


	  switch (len) {
	    case 3:
	      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

	    case 2:
	      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

	    case 1:
	      h ^= str.charCodeAt(i) & 0xff;
	      h =
	      /* Math.imul(h, m): */
	      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Do a few final mixes of the hash to ensure the last few
	  // bytes are well-incorporated.


	  h ^= h >>> 13;
	  h =
	  /* Math.imul(h, m): */
	  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  return ((h ^ h >>> 15) >>> 0).toString(36);
	}

	var unitlessKeys = {
	  animationIterationCount: 1,
	  aspectRatio: 1,
	  borderImageOutset: 1,
	  borderImageSlice: 1,
	  borderImageWidth: 1,
	  boxFlex: 1,
	  boxFlexGroup: 1,
	  boxOrdinalGroup: 1,
	  columnCount: 1,
	  columns: 1,
	  flex: 1,
	  flexGrow: 1,
	  flexPositive: 1,
	  flexShrink: 1,
	  flexNegative: 1,
	  flexOrder: 1,
	  gridRow: 1,
	  gridRowEnd: 1,
	  gridRowSpan: 1,
	  gridRowStart: 1,
	  gridColumn: 1,
	  gridColumnEnd: 1,
	  gridColumnSpan: 1,
	  gridColumnStart: 1,
	  msGridRow: 1,
	  msGridRowSpan: 1,
	  msGridColumn: 1,
	  msGridColumnSpan: 1,
	  fontWeight: 1,
	  lineHeight: 1,
	  opacity: 1,
	  order: 1,
	  orphans: 1,
	  scale: 1,
	  tabSize: 1,
	  widows: 1,
	  zIndex: 1,
	  zoom: 1,
	  WebkitLineClamp: 1,
	  // SVG-related properties
	  fillOpacity: 1,
	  floodOpacity: 1,
	  stopOpacity: 1,
	  strokeDasharray: 1,
	  strokeDashoffset: 1,
	  strokeMiterlimit: 1,
	  strokeOpacity: 1,
	  strokeWidth: 1
	};

	var hyphenateRegex = /[A-Z]|^ms/g;
	var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

	var isCustomProperty = function isCustomProperty(property) {
	  return property.charCodeAt(1) === 45;
	};

	var isProcessableValue = function isProcessableValue(value) {
	  return value != null && typeof value !== 'boolean';
	};

	var processStyleName = /* #__PURE__ */memoize(function (styleName) {
	  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
	});

	var processStyleValue = function processStyleValue(key, value) {
	  switch (key) {
	    case 'animation':
	    case 'animationName':
	      {
	        if (typeof value === 'string') {
	          return value.replace(animationRegex, function (match, p1, p2) {
	            cursor = {
	              name: p1,
	              styles: p2,
	              next: cursor
	            };
	            return p1;
	          });
	        }
	      }
	  }

	  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
	    return value + 'px';
	  }

	  return value;
	};

	function handleInterpolation(mergedProps, registered, interpolation) {
	  if (interpolation == null) {
	    return '';
	  }

	  var componentSelector = interpolation;

	  if (componentSelector.__emotion_styles !== undefined) {

	    return componentSelector;
	  }

	  switch (typeof interpolation) {
	    case 'boolean':
	      {
	        return '';
	      }

	    case 'object':
	      {
	        var keyframes = interpolation;

	        if (keyframes.anim === 1) {
	          cursor = {
	            name: keyframes.name,
	            styles: keyframes.styles,
	            next: cursor
	          };
	          return keyframes.name;
	        }

	        var serializedStyles = interpolation;

	        if (serializedStyles.styles !== undefined) {
	          var next = serializedStyles.next;

	          if (next !== undefined) {
	            // not the most efficient thing ever but this is a pretty rare case
	            // and there will be very few iterations of this generally
	            while (next !== undefined) {
	              cursor = {
	                name: next.name,
	                styles: next.styles,
	                next: cursor
	              };
	              next = next.next;
	            }
	          }

	          var styles = serializedStyles.styles + ";";
	          return styles;
	        }

	        return createStringFromObject(mergedProps, registered, interpolation);
	      }

	    case 'function':
	      {
	        if (mergedProps !== undefined) {
	          var previousCursor = cursor;
	          var result = interpolation(mergedProps);
	          cursor = previousCursor;
	          return handleInterpolation(mergedProps, registered, result);
	        }

	        break;
	      }
	  } // finalize string values (regular strings and functions interpolated into css calls)


	  var asString = interpolation;

	  if (registered == null) {
	    return asString;
	  }

	  var cached = registered[asString];
	  return cached !== undefined ? cached : asString;
	}

	function createStringFromObject(mergedProps, registered, obj) {
	  var string = '';

	  if (Array.isArray(obj)) {
	    for (var i = 0; i < obj.length; i++) {
	      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
	    }
	  } else {
	    for (var key in obj) {
	      var value = obj[key];

	      if (typeof value !== 'object') {
	        var asString = value;

	        if (registered != null && registered[asString] !== undefined) {
	          string += key + "{" + registered[asString] + "}";
	        } else if (isProcessableValue(asString)) {
	          string += processStyleName(key) + ":" + processStyleValue(key, asString) + ";";
	        }
	      } else {

	        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
	          for (var _i = 0; _i < value.length; _i++) {
	            if (isProcessableValue(value[_i])) {
	              string += processStyleName(key) + ":" + processStyleValue(key, value[_i]) + ";";
	            }
	          }
	        } else {
	          var interpolated = handleInterpolation(mergedProps, registered, value);

	          switch (key) {
	            case 'animation':
	            case 'animationName':
	              {
	                string += processStyleName(key) + ":" + interpolated + ";";
	                break;
	              }

	            default:
	              {

	                string += key + "{" + interpolated + "}";
	              }
	          }
	        }
	      }
	    }
	  }

	  return string;
	}

	var labelPattern = /label:\s*([^\s;{]+)\s*(;|$)/g; // this is the cursor for keyframes
	// keyframes are stored on the SerializedStyles object as a linked list

	var cursor;
	function serializeStyles(args, registered, mergedProps) {
	  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
	    return args[0];
	  }

	  var stringMode = true;
	  var styles = '';
	  cursor = undefined;
	  var strings = args[0];

	  if (strings == null || strings.raw === undefined) {
	    stringMode = false;
	    styles += handleInterpolation(mergedProps, registered, strings);
	  } else {
	    var asTemplateStringsArr = strings;

	    styles += asTemplateStringsArr[0];
	  } // we start at 1 since we've already handled the first arg


	  for (var i = 1; i < args.length; i++) {
	    styles += handleInterpolation(mergedProps, registered, args[i]);

	    if (stringMode) {
	      var templateStringsArr = strings;

	      styles += templateStringsArr[i];
	    }
	  } // using a global regex with .exec is stateful so lastIndex has to be reset each time


	  labelPattern.lastIndex = 0;
	  var identifierName = '';
	  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

	  while ((match = labelPattern.exec(styles)) !== null) {
	    identifierName += '-' + match[1];
	  }

	  var name = murmur2(styles) + identifierName;

	  return {
	    name: name,
	    styles: styles,
	    next: cursor
	  };
	}

	var syncFallback = function syncFallback(create) {
	  return create();
	};

	var useInsertionEffect = React$1['useInsertion' + 'Effect'] ? React$1['useInsertion' + 'Effect'] : false;
	var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;
	var useInsertionEffectWithLayoutFallback = useInsertionEffect || reactExports.useLayoutEffect;

	var EmotionCacheContext = /* #__PURE__ */reactExports.createContext( // we're doing this to avoid preconstruct's dead code elimination in this one case
	// because this module is primarily intended for the browser and node
	// but it's also required in react native and similar environments sometimes
	// and we could have a special build just for that
	// but this is much easier and the native packages
	// might use a different theme context in the future anyway
	typeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache({
	  key: 'css'
	}) : null);

	EmotionCacheContext.Provider;
	var __unsafe_useEmotionCache = function useEmotionCache() {
	  return reactExports.useContext(EmotionCacheContext);
	};

	var withEmotionCache = function withEmotionCache(func) {
	  return /*#__PURE__*/reactExports.forwardRef(function (props, ref) {
	    // the cache will never be null in the browser
	    var cache = reactExports.useContext(EmotionCacheContext);
	    return func(props, cache, ref);
	  });
	};

	var ThemeContext = /* #__PURE__ */reactExports.createContext({});

	var getTheme$1 = function getTheme(outerTheme, theme) {
	  if (typeof theme === 'function') {
	    var mergedTheme = theme(outerTheme);

	    return mergedTheme;
	  }

	  return _extends$1({}, outerTheme, theme);
	};

	var createCacheWithTheme = /* #__PURE__ */weakMemoize(function (outerTheme) {
	  return weakMemoize(function (theme) {
	    return getTheme$1(outerTheme, theme);
	  });
	});
	var ThemeProvider$1 = function ThemeProvider(props) {
	  var theme = reactExports.useContext(ThemeContext);

	  if (props.theme !== theme) {
	    theme = createCacheWithTheme(theme)(props.theme);
	  }

	  return /*#__PURE__*/reactExports.createElement(ThemeContext.Provider, {
	    value: theme
	  }, props.children);
	};

	var hasOwn = {}.hasOwnProperty;

	var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
	var createEmotionProps = function createEmotionProps(type, props) {

	  var newProps = {};

	  for (var _key in props) {
	    if (hasOwn.call(props, _key)) {
	      newProps[_key] = props[_key];
	    }
	  }

	  newProps[typePropName] = type; // Runtime labeling is an opt-in feature because:

	  return newProps;
	};

	var Insertion$1 = function Insertion(_ref) {
	  var cache = _ref.cache,
	      serialized = _ref.serialized,
	      isStringTag = _ref.isStringTag;
	  registerStyles(cache, serialized, isStringTag);
	  useInsertionEffectAlwaysWithSyncFallback(function () {
	    return insertStyles(cache, serialized, isStringTag);
	  });

	  return null;
	};

	var Emotion = /* #__PURE__ */withEmotionCache(function (props, cache, ref) {
	  var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
	  // not passing the registered cache to serializeStyles because it would
	  // make certain babel optimisations not possible

	  if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) {
	    cssProp = cache.registered[cssProp];
	  }

	  var WrappedComponent = props[typePropName];
	  var registeredStyles = [cssProp];
	  var className = '';

	  if (typeof props.className === 'string') {
	    className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
	  } else if (props.className != null) {
	    className = props.className + " ";
	  }

	  var serialized = serializeStyles(registeredStyles, undefined, reactExports.useContext(ThemeContext));

	  className += cache.key + "-" + serialized.name;
	  var newProps = {};

	  for (var _key2 in props) {
	    if (hasOwn.call(props, _key2) && _key2 !== 'css' && _key2 !== typePropName && (true )) {
	      newProps[_key2] = props[_key2];
	    }
	  }

	  newProps.className = className;

	  if (ref) {
	    newProps.ref = ref;
	  }

	  return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(Insertion$1, {
	    cache: cache,
	    serialized: serialized,
	    isStringTag: typeof WrappedComponent === 'string'
	  }), /*#__PURE__*/reactExports.createElement(WrappedComponent, newProps));
	});

	var Emotion$1 = Emotion;

	var _extends = {exports: {}};

	var hasRequired_extends;

	function require_extends () {
		if (hasRequired_extends) return _extends.exports;
		hasRequired_extends = 1;
		(function (module) {
			function _extends() {
			  return module.exports = _extends = Object.assign ? Object.assign.bind() : function (n) {
			    for (var e = 1; e < arguments.length; e++) {
			      var t = arguments[e];
			      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
			    }
			    return n;
			  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _extends.apply(null, arguments);
			}
			module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports; 
		} (_extends));
		return _extends.exports;
	}

	require_extends();

	var jsx = function jsx(type, props) {
	  // eslint-disable-next-line prefer-rest-params
	  var args = arguments;

	  if (props == null || !hasOwn.call(props, 'css')) {
	    return reactExports.createElement.apply(undefined, args);
	  }

	  var argsLength = args.length;
	  var createElementArgArray = new Array(argsLength);
	  createElementArgArray[0] = Emotion$1;
	  createElementArgArray[1] = createEmotionProps(type, props);

	  for (var i = 2; i < argsLength; i++) {
	    createElementArgArray[i] = args[i];
	  }

	  return reactExports.createElement.apply(null, createElementArgArray);
	};

	(function (_jsx) {
	  var JSX;

	  (function (_JSX) {})(JSX || (JSX = _jsx.JSX || (_jsx.JSX = {})));
	})(jsx || (jsx = {}));

	// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
	// initial client-side render from SSR, use place of hydrating tag

	var Global = /* #__PURE__ */withEmotionCache(function (props, cache) {

	  var styles = props.styles;
	  var serialized = serializeStyles([styles], undefined, reactExports.useContext(ThemeContext));
	  // but it is based on a constant that will never change at runtime
	  // it's effectively like having two implementations and switching them out
	  // so it's not actually breaking anything


	  var sheetRef = reactExports.useRef();
	  useInsertionEffectWithLayoutFallback(function () {
	    var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675

	    var sheet = new cache.sheet.constructor({
	      key: key,
	      nonce: cache.sheet.nonce,
	      container: cache.sheet.container,
	      speedy: cache.sheet.isSpeedy
	    });
	    var rehydrating = false;
	    var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");

	    if (cache.sheet.tags.length) {
	      sheet.before = cache.sheet.tags[0];
	    }

	    if (node !== null) {
	      rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

	      node.setAttribute('data-emotion', key);
	      sheet.hydrate([node]);
	    }

	    sheetRef.current = [sheet, rehydrating];
	    return function () {
	      sheet.flush();
	    };
	  }, [cache]);
	  useInsertionEffectWithLayoutFallback(function () {
	    var sheetRefCurrent = sheetRef.current;
	    var sheet = sheetRefCurrent[0],
	        rehydrating = sheetRefCurrent[1];

	    if (rehydrating) {
	      sheetRefCurrent[1] = false;
	      return;
	    }

	    if (serialized.next !== undefined) {
	      // insert keyframes
	      insertStyles(cache, serialized.next, true);
	    }

	    if (sheet.tags.length) {
	      // if this doesn't exist then it will be null so the style element will be appended
	      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
	      sheet.before = element;
	      sheet.flush();
	    }

	    cache.insert("", serialized, sheet, false);
	  }, [cache, serialized.name]);
	  return null;
	});

	function css$1() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  return serializeStyles(args);
	}

	function keyframes$1() {
	  var insertable = css$1.apply(void 0, arguments);
	  var name = "animation-" + insertable.name;
	  return {
	    name: name,
	    styles: "@keyframes " + name + "{" + insertable.styles + "}",
	    anim: 1,
	    toString: function toString() {
	      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
	    }
	  };
	}

	const ColorModeContext = reactExports.createContext({});
	ColorModeContext.displayName = "ColorModeContext";
	function useColorMode() {
	  const context = reactExports.useContext(ColorModeContext);
	  if (context === void 0) {
	    throw new Error("useColorMode must be used within a ColorModeProvider");
	  }
	  return context;
	}

	const classNames = {
	  light: "chakra-ui-light",
	  dark: "chakra-ui-dark"
	};
	function getColorModeUtils(options = {}) {
	  const { preventTransition = true, nonce } = options;
	  const utils = {
	    setDataset: (value) => {
	      const cleanup = preventTransition ? utils.preventTransition() : void 0;
	      document.documentElement.dataset.theme = value;
	      document.documentElement.style.colorScheme = value;
	      cleanup?.();
	    },
	    setClassName(dark) {
	      document.body.classList.add(dark ? classNames.dark : classNames.light);
	      document.body.classList.remove(dark ? classNames.light : classNames.dark);
	    },
	    query() {
	      return window.matchMedia("(prefers-color-scheme: dark)");
	    },
	    getSystemTheme(fallback) {
	      const dark = utils.query().matches ?? fallback === "dark";
	      return dark ? "dark" : "light";
	    },
	    addListener(fn) {
	      const mql = utils.query();
	      const listener = (e) => {
	        fn(e.matches ? "dark" : "light");
	      };
	      if (typeof mql.addListener === "function")
	        mql.addListener(listener);
	      else
	        mql.addEventListener("change", listener);
	      return () => {
	        if (typeof mql.removeListener === "function")
	          mql.removeListener(listener);
	        else
	          mql.removeEventListener("change", listener);
	      };
	    },
	    preventTransition() {
	      const css = document.createElement("style");
	      css.appendChild(
	        document.createTextNode(
	          `*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}`
	        )
	      );
	      if (nonce !== void 0) {
	        css.nonce = nonce;
	      }
	      document.head.appendChild(css);
	      return () => {
	        (() => window.getComputedStyle(document.body))();
	        requestAnimationFrame(() => {
	          requestAnimationFrame(() => {
	            document.head.removeChild(css);
	          });
	        });
	      };
	    }
	  };
	  return utils;
	}

	const STORAGE_KEY = "chakra-ui-color-mode";
	function createLocalStorageManager(key) {
	  return {
	    ssr: false,
	    type: "localStorage",
	    get(init) {
	      if (!globalThis?.document)
	        return init;
	      let value;
	      try {
	        value = localStorage.getItem(key) || init;
	      } catch (e) {
	      }
	      return value || init;
	    },
	    set(value) {
	      try {
	        localStorage.setItem(key, value);
	      } catch (e) {
	      }
	    }
	  };
	}
	const localStorageManager = createLocalStorageManager(STORAGE_KEY);

	const noop$1 = () => {
	};
	const useSafeLayoutEffect = isBrowser$2() ? reactExports.useLayoutEffect : reactExports.useEffect;
	function getTheme(manager, fallback) {
	  return manager.type === "cookie" && manager.ssr ? manager.get(fallback) : fallback;
	}
	const ColorModeProvider = function ColorModeProvider2(props) {
	  const {
	    value,
	    children,
	    options: {
	      useSystemColorMode,
	      initialColorMode,
	      disableTransitionOnChange
	    } = {},
	    colorModeManager = localStorageManager
	  } = props;
	  const cache = __unsafe_useEmotionCache();
	  const defaultColorMode = initialColorMode === "dark" ? "dark" : "light";
	  const [colorMode, rawSetColorMode] = reactExports.useState(
	    () => getTheme(colorModeManager, defaultColorMode)
	  );
	  const [resolvedColorMode, setResolvedColorMode] = reactExports.useState(
	    () => getTheme(colorModeManager)
	  );
	  const { getSystemTheme, setClassName, setDataset, addListener } = reactExports.useMemo(
	    () => getColorModeUtils({
	      preventTransition: disableTransitionOnChange,
	      nonce: cache?.nonce
	    }),
	    [disableTransitionOnChange, cache?.nonce]
	  );
	  const resolvedValue = initialColorMode === "system" && !colorMode ? resolvedColorMode : colorMode;
	  const setColorMode = reactExports.useCallback(
	    (value2) => {
	      const resolved = value2 === "system" ? getSystemTheme() : value2;
	      rawSetColorMode(resolved);
	      setClassName(resolved === "dark");
	      setDataset(resolved);
	      colorModeManager.set(resolved);
	    },
	    [colorModeManager, getSystemTheme, setClassName, setDataset]
	  );
	  useSafeLayoutEffect(() => {
	    if (initialColorMode === "system") {
	      setResolvedColorMode(getSystemTheme());
	    }
	  }, []);
	  reactExports.useEffect(() => {
	    const managerValue = colorModeManager.get();
	    if (managerValue) {
	      setColorMode(managerValue);
	      return;
	    }
	    if (initialColorMode === "system") {
	      setColorMode("system");
	      return;
	    }
	    setColorMode(defaultColorMode);
	  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);
	  const toggleColorMode = reactExports.useCallback(() => {
	    setColorMode(resolvedValue === "dark" ? "light" : "dark");
	  }, [resolvedValue, setColorMode]);
	  reactExports.useEffect(() => {
	    if (!useSystemColorMode)
	      return;
	    return addListener(setColorMode);
	  }, [useSystemColorMode, addListener, setColorMode]);
	  const context = reactExports.useMemo(
	    () => ({
	      colorMode: value ?? resolvedValue,
	      toggleColorMode: value ? noop$1 : toggleColorMode,
	      setColorMode: value ? noop$1 : setColorMode,
	      forced: value !== void 0
	    }),
	    [resolvedValue, toggleColorMode, setColorMode, value]
	  );
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(ColorModeContext.Provider, { value: context, children });
	};
	ColorModeProvider.displayName = "ColorModeProvider";

	const css = String.raw;
	const vhPolyfill = css`
  :root,
  :host {
    --chakra-vh: 100vh;
  }

  @supports (height: -webkit-fill-available) {
    :root,
    :host {
      --chakra-vh: -webkit-fill-available;
    }
  }

  @supports (height: -moz-fill-available) {
    :root,
    :host {
      --chakra-vh: -moz-fill-available;
    }
  }

  @supports (height: 100dvh) {
    :root,
    :host {
      --chakra-vh: 100dvh;
    }
  }
`;
	const CSSPolyfill = () => /* @__PURE__ */ jsxRuntimeExports.jsx(Global, { styles: vhPolyfill });
	const CSSReset = ({ scope = "" }) => /* @__PURE__ */ jsxRuntimeExports.jsx(
	  Global,
	  {
	    styles: css`
      html {
        line-height: 1.5;
        -webkit-text-size-adjust: 100%;
        font-family: system-ui, sans-serif;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        -moz-osx-font-smoothing: grayscale;
        touch-action: manipulation;
      }

      body {
        position: relative;
        min-height: 100%;
        margin: 0;
        font-feature-settings: "kern";
      }

      ${scope} :where(*, *::before, *::after) {
        border-width: 0;
        border-style: solid;
        box-sizing: border-box;
        word-wrap: break-word;
      }

      main {
        display: block;
      }

      ${scope} hr {
        border-top-width: 1px;
        box-sizing: content-box;
        height: 0;
        overflow: visible;
      }

      ${scope} :where(pre, code, kbd,samp) {
        font-family: SFMono-Regular, Menlo, Monaco, Consolas, monospace;
        font-size: 1em;
      }

      ${scope} a {
        background-color: transparent;
        color: inherit;
        text-decoration: inherit;
      }

      ${scope} abbr[title] {
        border-bottom: none;
        text-decoration: underline;
        -webkit-text-decoration: underline dotted;
        text-decoration: underline dotted;
      }

      ${scope} :where(b, strong) {
        font-weight: bold;
      }

      ${scope} small {
        font-size: 80%;
      }

      ${scope} :where(sub,sup) {
        font-size: 75%;
        line-height: 0;
        position: relative;
        vertical-align: baseline;
      }

      ${scope} sub {
        bottom: -0.25em;
      }

      ${scope} sup {
        top: -0.5em;
      }

      ${scope} img {
        border-style: none;
      }

      ${scope} :where(button, input, optgroup, select, textarea) {
        font-family: inherit;
        font-size: 100%;
        line-height: 1.15;
        margin: 0;
      }

      ${scope} :where(button, input) {
        overflow: visible;
      }

      ${scope} :where(button, select) {
        text-transform: none;
      }

      ${scope} :where(
          button::-moz-focus-inner,
          [type="button"]::-moz-focus-inner,
          [type="reset"]::-moz-focus-inner,
          [type="submit"]::-moz-focus-inner
        ) {
        border-style: none;
        padding: 0;
      }

      ${scope} fieldset {
        padding: 0.35em 0.75em 0.625em;
      }

      ${scope} legend {
        box-sizing: border-box;
        color: inherit;
        display: table;
        max-width: 100%;
        padding: 0;
        white-space: normal;
      }

      ${scope} progress {
        vertical-align: baseline;
      }

      ${scope} textarea {
        overflow: auto;
      }

      ${scope} :where([type="checkbox"], [type="radio"]) {
        box-sizing: border-box;
        padding: 0;
      }

      ${scope} input[type="number"]::-webkit-inner-spin-button,
      ${scope} input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none !important;
      }

      ${scope} input[type="number"] {
        -moz-appearance: textfield;
      }

      ${scope} input[type="search"] {
        -webkit-appearance: textfield;
        outline-offset: -2px;
      }

      ${scope} input[type="search"]::-webkit-search-decoration {
        -webkit-appearance: none !important;
      }

      ${scope} ::-webkit-file-upload-button {
        -webkit-appearance: button;
        font: inherit;
      }

      ${scope} details {
        display: block;
      }

      ${scope} summary {
        display: list-item;
      }

      template {
        display: none;
      }

      [hidden] {
        display: none !important;
      }

      ${scope} :where(
          blockquote,
          dl,
          dd,
          h1,
          h2,
          h3,
          h4,
          h5,
          h6,
          hr,
          figure,
          p,
          pre
        ) {
        margin: 0;
      }

      ${scope} button {
        background: transparent;
        padding: 0;
      }

      ${scope} fieldset {
        margin: 0;
        padding: 0;
      }

      ${scope} :where(ol, ul) {
        margin: 0;
        padding: 0;
      }

      ${scope} textarea {
        resize: vertical;
      }

      ${scope} :where(button, [role="button"]) {
        cursor: pointer;
      }

      ${scope} button::-moz-focus-inner {
        border: 0 !important;
      }

      ${scope} table {
        border-collapse: collapse;
      }

      ${scope} :where(h1, h2, h3, h4, h5, h6) {
        font-size: inherit;
        font-weight: inherit;
      }

      ${scope} :where(button, input, optgroup, select, textarea) {
        padding: 0;
        line-height: inherit;
        color: inherit;
      }

      ${scope} :where(img, svg, video, canvas, audio, iframe, embed, object) {
        display: block;
      }

      ${scope} :where(img, video) {
        max-width: 100%;
        height: auto;
      }

      [data-js-focus-visible]
        :focus:not([data-focus-visible-added]):not(
          [data-focus-visible-disabled]
        ) {
        outline: none;
        box-shadow: none;
      }

      ${scope} select::-ms-expand {
        display: none;
      }

      ${vhPolyfill}
    `
	  }
	);

	function ThemeProvider(props) {
	  const { cssVarsRoot, theme, children } = props;
	  const computedTheme = reactExports.useMemo(() => toCSSVar(theme), [theme]);
	  return /* @__PURE__ */ jsxRuntimeExports.jsxs(ThemeProvider$1, { theme: computedTheme, children: [
	    /* @__PURE__ */ jsxRuntimeExports.jsx(CSSVars, { root: cssVarsRoot }),
	    children
	  ] });
	}
	function CSSVars({ root = ":host, :root" }) {
	  const selector = [root, `[data-theme]`].join(",");
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(Global, { styles: (theme) => ({ [selector]: theme.__cssVars }) });
	}
	createContext({
	  name: "StylesContext",
	  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
	});
	function GlobalStyle() {
	  const { colorMode } = useColorMode();
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(
	    Global,
	    {
	      styles: (theme) => {
	        const styleObjectOrFn = memoizedGet$1(theme, "styles.global");
	        const globalStyles = runIfFn$1(styleObjectOrFn, { theme, colorMode });
	        if (!globalStyles)
	          return void 0;
	        const styles = css$2(globalStyles)(theme);
	        return styles;
	      }
	    }
	  );
	}

	const [PortalManagerContextProvider, usePortalManager] = createContext({
	  strict: false,
	  name: "PortalManagerContext"
	});
	function PortalManager(props) {
	  const { children, zIndex } = props;
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(PortalManagerContextProvider, { value: { zIndex }, children });
	}
	PortalManager.displayName = "PortalManager";

	const EnvironmentContext = reactExports.createContext({
	  getDocument() {
	    return document;
	  },
	  getWindow() {
	    return window;
	  }
	});
	EnvironmentContext.displayName = "EnvironmentContext";
	function EnvironmentProvider(props) {
	  const { children, environment: environmentProp, disabled } = props;
	  const ref = reactExports.useRef(null);
	  const context = reactExports.useMemo(() => {
	    if (environmentProp)
	      return environmentProp;
	    return {
	      getDocument: () => ref.current?.ownerDocument ?? document,
	      getWindow: () => ref.current?.ownerDocument.defaultView ?? window
	    };
	  }, [environmentProp]);
	  const showSpan = !disabled || !environmentProp;
	  return /* @__PURE__ */ jsxRuntimeExports.jsxs(EnvironmentContext.Provider, { value: context, children: [
	    children,
	    showSpan && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { id: "__chakra_env", hidden: true, ref })
	  ] });
	}
	EnvironmentProvider.displayName = "EnvironmentProvider";

	const Provider = (props) => {
	  const {
	    children,
	    colorModeManager,
	    portalZIndex,
	    resetScope,
	    resetCSS = true,
	    theme = {},
	    environment,
	    cssVarsRoot,
	    disableEnvironment,
	    disableGlobalStyle
	  } = props;
	  const _children = /* @__PURE__ */ jsxRuntimeExports.jsx(
	    EnvironmentProvider,
	    {
	      environment,
	      disabled: disableEnvironment,
	      children
	    }
	  );
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(ThemeProvider, { theme, cssVarsRoot, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
	    ColorModeProvider,
	    {
	      colorModeManager,
	      options: theme.config,
	      children: [
	        resetCSS ? /* @__PURE__ */ jsxRuntimeExports.jsx(CSSReset, { scope: resetScope }) : /* @__PURE__ */ jsxRuntimeExports.jsx(CSSPolyfill, {}),
	        !disableGlobalStyle && /* @__PURE__ */ jsxRuntimeExports.jsx(GlobalStyle, {}),
	        portalZIndex ? /* @__PURE__ */ jsxRuntimeExports.jsx(PortalManager, { zIndex: portalZIndex, children: _children }) : _children
	      ]
	    }
	  ) });
	};

	const LayoutGroupContext = reactExports.createContext({});

	/**
	 * Creates a constant value over the lifecycle of a component.
	 *
	 * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer
	 * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`
	 * you can ensure that initialisers don't execute twice or more.
	 */
	function useConstant(init) {
	    const ref = reactExports.useRef(null);
	    if (ref.current === null) {
	        ref.current = init();
	    }
	    return ref.current;
	}

	const isBrowser = typeof window !== "undefined";

	const useIsomorphicLayoutEffect$1 = isBrowser ? reactExports.useLayoutEffect : reactExports.useEffect;

	/**
	 * @public
	 */
	const PresenceContext = 
	/* @__PURE__ */ reactExports.createContext(null);

	function addUniqueItem(arr, item) {
	    if (arr.indexOf(item) === -1)
	        arr.push(item);
	}
	function removeItem(arr, item) {
	    const index = arr.indexOf(item);
	    if (index > -1)
	        arr.splice(index, 1);
	}

	const clamp = (min, max, v) => {
	    if (v > max)
	        return max;
	    if (v < min)
	        return min;
	    return v;
	};

	let invariant = () => { };

	const MotionGlobalConfig = {};

	/**
	 * Check if value is a numerical string, ie a string that is purely a number eg "100" or "-100.1"
	 */
	const isNumericalString = (v) => /^-?(?:\d+(?:\.\d+)?|\.\d+)$/u.test(v);

	function isObject(value) {
	    return typeof value === "object" && value !== null;
	}

	/**
	 * Check if the value is a zero value string like "0px" or "0%"
	 */
	const isZeroValueString = (v) => /^0[^.\s]+$/u.test(v);

	/*#__NO_SIDE_EFFECTS__*/
	function memo(callback) {
	    let result;
	    return () => {
	        if (result === undefined)
	            result = callback();
	        return result;
	    };
	}

	/*#__NO_SIDE_EFFECTS__*/
	const noop = (any) => any;

	/**
	 * Pipe
	 * Compose other transformers to run linearily
	 * pipe(min(20), max(40))
	 * @param  {...functions} transformers
	 * @return {function}
	 */
	const combineFunctions = (a, b) => (v) => b(a(v));
	const pipe$1 = (...transformers) => transformers.reduce(combineFunctions);

	/*
	  Progress within given range

	  Given a lower limit and an upper limit, we return the progress
	  (expressed as a number 0-1) represented by the given value, and
	  limit that progress to within 0-1.

	  @param [number]: Lower limit
	  @param [number]: Upper limit
	  @param [number]: Value to find progress within given range
	  @return [number]: Progress of value within range as expressed 0-1
	*/
	/*#__NO_SIDE_EFFECTS__*/
	const progress = (from, to, value) => {
	    const toFromDifference = to - from;
	    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
	};

	class SubscriptionManager {
	    constructor() {
	        this.subscriptions = [];
	    }
	    add(handler) {
	        addUniqueItem(this.subscriptions, handler);
	        return () => removeItem(this.subscriptions, handler);
	    }
	    notify(a, b, c) {
	        const numSubscriptions = this.subscriptions.length;
	        if (!numSubscriptions)
	            return;
	        if (numSubscriptions === 1) {
	            /**
	             * If there's only a single handler we can just call it without invoking a loop.
	             */
	            this.subscriptions[0](a, b, c);
	        }
	        else {
	            for (let i = 0; i < numSubscriptions; i++) {
	                /**
	                 * Check whether the handler exists before firing as it's possible
	                 * the subscriptions were modified during this loop running.
	                 */
	                const handler = this.subscriptions[i];
	                handler && handler(a, b, c);
	            }
	        }
	    }
	    getSize() {
	        return this.subscriptions.length;
	    }
	    clear() {
	        this.subscriptions.length = 0;
	    }
	}

	/**
	 * Converts seconds to milliseconds
	 *
	 * @param seconds - Time in seconds.
	 * @return milliseconds - Converted time in milliseconds.
	 */
	/*#__NO_SIDE_EFFECTS__*/
	const secondsToMilliseconds = (seconds) => seconds * 1000;
	/*#__NO_SIDE_EFFECTS__*/
	const millisecondsToSeconds = (milliseconds) => milliseconds / 1000;

	/*
	  Convert velocity into velocity per second

	  @param [number]: Unit per frame
	  @param [number]: Frame duration in ms
	*/
	function velocityPerSecond(velocity, frameDuration) {
	    return frameDuration ? velocity * (1000 / frameDuration) : 0;
	}

	/*
	  Bezier function generator
	  This has been modified from Gaëtan Renaudeau's BezierEasing
	  https://github.com/gre/bezier-easing/blob/master/src/index.js
	  https://github.com/gre/bezier-easing/blob/master/LICENSE
	  
	  I've removed the newtonRaphsonIterate algo because in benchmarking it
	  wasn't noticiably faster than binarySubdivision, indeed removing it
	  usually improved times, depending on the curve.
	  I also removed the lookup table, as for the added bundle size and loop we're
	  only cutting ~4 or so subdivision iterations. I bumped the max iterations up
	  to 12 to compensate and this still tended to be faster for no perceivable
	  loss in accuracy.
	  Usage
	    const easeOut = cubicBezier(.17,.67,.83,.67);
	    const x = easeOut(0.5); // returns 0.627...
	*/
	// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.
	const calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *
	    t;
	const subdivisionPrecision = 0.0000001;
	const subdivisionMaxIterations = 12;
	function binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {
	    let currentX;
	    let currentT;
	    let i = 0;
	    do {
	        currentT = lowerBound + (upperBound - lowerBound) / 2.0;
	        currentX = calcBezier(currentT, mX1, mX2) - x;
	        if (currentX > 0.0) {
	            upperBound = currentT;
	        }
	        else {
	            lowerBound = currentT;
	        }
	    } while (Math.abs(currentX) > subdivisionPrecision &&
	        ++i < subdivisionMaxIterations);
	    return currentT;
	}
	function cubicBezier(mX1, mY1, mX2, mY2) {
	    // If this is a linear gradient, return linear easing
	    if (mX1 === mY1 && mX2 === mY2)
	        return noop;
	    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);
	    // If animation is at start/end, return t without easing
	    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);
	}

	// Accepts an easing function and returns a new one that outputs mirrored values for
	// the second half of the animation. Turns easeIn into easeInOut.
	const mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;

	// Accepts an easing function and returns a new one that outputs reversed values.
	// Turns easeIn into easeOut.
	const reverseEasing = (easing) => (p) => 1 - easing(1 - p);

	const backOut = /*@__PURE__*/ cubicBezier(0.33, 1.53, 0.69, 0.99);
	const backIn = /*@__PURE__*/ reverseEasing(backOut);
	const backInOut = /*@__PURE__*/ mirrorEasing(backIn);

	const anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));

	const circIn = (p) => 1 - Math.sin(Math.acos(p));
	const circOut = reverseEasing(circIn);
	const circInOut = mirrorEasing(circIn);

	const easeIn = /*@__PURE__*/ cubicBezier(0.42, 0, 1, 1);
	const easeOut = /*@__PURE__*/ cubicBezier(0, 0, 0.58, 1);
	const easeInOut = /*@__PURE__*/ cubicBezier(0.42, 0, 0.58, 1);

	const isEasingArray = (ease) => {
	    return Array.isArray(ease) && typeof ease[0] !== "number";
	};

	const isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === "number";

	const easingLookup = {
	    linear: noop,
	    easeIn,
	    easeInOut,
	    easeOut,
	    circIn,
	    circInOut,
	    circOut,
	    backIn,
	    backInOut,
	    backOut,
	    anticipate,
	};
	const isValidEasing = (easing) => {
	    return typeof easing === "string";
	};
	const easingDefinitionToFunction = (definition) => {
	    if (isBezierDefinition(definition)) {
	        // If cubic bezier definition, create bezier curve
	        invariant(definition.length === 4);
	        const [x1, y1, x2, y2] = definition;
	        return cubicBezier(x1, y1, x2, y2);
	    }
	    else if (isValidEasing(definition)) {
	        return easingLookup[definition];
	    }
	    return definition;
	};

	const stepsOrder = [
	    "setup", // Compute
	    "read", // Read
	    "resolveKeyframes", // Write/Read/Write/Read
	    "preUpdate", // Compute
	    "update", // Compute
	    "preRender", // Compute
	    "render", // Write
	    "postRender", // Compute
	];

	const statsBuffer = {
	    value: null};

	function createRenderStep(runNextFrame, stepName) {
	    /**
	     * We create and reuse two queues, one to queue jobs for the current frame
	     * and one for the next. We reuse to avoid triggering GC after x frames.
	     */
	    let thisFrame = new Set();
	    let nextFrame = new Set();
	    /**
	     * Track whether we're currently processing jobs in this step. This way
	     * we can decide whether to schedule new jobs for this frame or next.
	     */
	    let isProcessing = false;
	    let flushNextFrame = false;
	    /**
	     * A set of processes which were marked keepAlive when scheduled.
	     */
	    const toKeepAlive = new WeakSet();
	    let latestFrameData = {
	        delta: 0.0,
	        timestamp: 0.0,
	        isProcessing: false,
	    };
	    let numCalls = 0;
	    function triggerCallback(callback) {
	        if (toKeepAlive.has(callback)) {
	            step.schedule(callback);
	            runNextFrame();
	        }
	        numCalls++;
	        callback(latestFrameData);
	    }
	    const step = {
	        /**
	         * Schedule a process to run on the next frame.
	         */
	        schedule: (callback, keepAlive = false, immediate = false) => {
	            const addToCurrentFrame = immediate && isProcessing;
	            const queue = addToCurrentFrame ? thisFrame : nextFrame;
	            if (keepAlive)
	                toKeepAlive.add(callback);
	            if (!queue.has(callback))
	                queue.add(callback);
	            return callback;
	        },
	        /**
	         * Cancel the provided callback from running on the next frame.
	         */
	        cancel: (callback) => {
	            nextFrame.delete(callback);
	            toKeepAlive.delete(callback);
	        },
	        /**
	         * Execute all schedule callbacks.
	         */
	        process: (frameData) => {
	            latestFrameData = frameData;
	            /**
	             * If we're already processing we've probably been triggered by a flushSync
	             * inside an existing process. Instead of executing, mark flushNextFrame
	             * as true and ensure we flush the following frame at the end of this one.
	             */
	            if (isProcessing) {
	                flushNextFrame = true;
	                return;
	            }
	            isProcessing = true;
	            [thisFrame, nextFrame] = [nextFrame, thisFrame];
	            // Execute this frame
	            thisFrame.forEach(triggerCallback);
	            /**
	             * If we're recording stats then
	             */
	            if (stepName && statsBuffer.value) {
	                statsBuffer.value.frameloop[stepName].push(numCalls);
	            }
	            numCalls = 0;
	            // Clear the frame so no callbacks remain. This is to avoid
	            // memory leaks should this render step not run for a while.
	            thisFrame.clear();
	            isProcessing = false;
	            if (flushNextFrame) {
	                flushNextFrame = false;
	                step.process(frameData);
	            }
	        },
	    };
	    return step;
	}

	const maxElapsed = 40;
	function createRenderBatcher(scheduleNextBatch, allowKeepAlive) {
	    let runNextFrame = false;
	    let useDefaultElapsed = true;
	    const state = {
	        delta: 0.0,
	        timestamp: 0.0,
	        isProcessing: false,
	    };
	    const flagRunNextFrame = () => (runNextFrame = true);
	    const steps = stepsOrder.reduce((acc, key) => {
	        acc[key] = createRenderStep(flagRunNextFrame, allowKeepAlive ? key : undefined);
	        return acc;
	    }, {});
	    const { setup, read, resolveKeyframes, preUpdate, update, preRender, render, postRender, } = steps;
	    const processBatch = () => {
	        const timestamp = MotionGlobalConfig.useManualTiming
	            ? state.timestamp
	            : performance.now();
	        runNextFrame = false;
	        if (!MotionGlobalConfig.useManualTiming) {
	            state.delta = useDefaultElapsed
	                ? 1000 / 60
	                : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);
	        }
	        state.timestamp = timestamp;
	        state.isProcessing = true;
	        // Unrolled render loop for better per-frame performance
	        setup.process(state);
	        read.process(state);
	        resolveKeyframes.process(state);
	        preUpdate.process(state);
	        update.process(state);
	        preRender.process(state);
	        render.process(state);
	        postRender.process(state);
	        state.isProcessing = false;
	        if (runNextFrame && allowKeepAlive) {
	            useDefaultElapsed = false;
	            scheduleNextBatch(processBatch);
	        }
	    };
	    const wake = () => {
	        runNextFrame = true;
	        useDefaultElapsed = true;
	        if (!state.isProcessing) {
	            scheduleNextBatch(processBatch);
	        }
	    };
	    const schedule = stepsOrder.reduce((acc, key) => {
	        const step = steps[key];
	        acc[key] = (process, keepAlive = false, immediate = false) => {
	            if (!runNextFrame)
	                wake();
	            return step.schedule(process, keepAlive, immediate);
	        };
	        return acc;
	    }, {});
	    const cancel = (process) => {
	        for (let i = 0; i < stepsOrder.length; i++) {
	            steps[stepsOrder[i]].cancel(process);
	        }
	    };
	    return { schedule, cancel, state, steps };
	}

	const { schedule: frame, cancel: cancelFrame, state: frameData, steps: frameSteps, } = /* @__PURE__ */ createRenderBatcher(typeof requestAnimationFrame !== "undefined" ? requestAnimationFrame : noop, true);

	let now;
	function clearTime() {
	    now = undefined;
	}
	/**
	 * An eventloop-synchronous alternative to performance.now().
	 *
	 * Ensures that time measurements remain consistent within a synchronous context.
	 * Usually calling performance.now() twice within the same synchronous context
	 * will return different values which isn't useful for animations when we're usually
	 * trying to sync animations to the same frame.
	 */
	const time = {
	    now: () => {
	        if (now === undefined) {
	            time.set(frameData.isProcessing || MotionGlobalConfig.useManualTiming
	                ? frameData.timestamp
	                : performance.now());
	        }
	        return now;
	    },
	    set: (newTime) => {
	        now = newTime;
	        queueMicrotask(clearTime);
	    },
	};

	const checkStringStartsWith = (token) => (key) => typeof key === "string" && key.startsWith(token);
	const isCSSVariableName = 
	/*@__PURE__*/ checkStringStartsWith("--");
	const startsAsVariableToken = 
	/*@__PURE__*/ checkStringStartsWith("var(--");
	const isCSSVariableToken = (value) => {
	    const startsWithToken = startsAsVariableToken(value);
	    if (!startsWithToken)
	        return false;
	    // Ensure any comments are stripped from the value as this can harm performance of the regex.
	    return singleCssVariableRegex.test(value.split("/*")[0].trim());
	};
	const singleCssVariableRegex = /var\(--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)$/iu;

	const number = {
	    test: (v) => typeof v === "number",
	    parse: parseFloat,
	    transform: (v) => v,
	};
	const alpha = {
	    ...number,
	    transform: (v) => clamp(0, 1, v),
	};
	const scale = {
	    ...number,
	    default: 1,
	};

	// If this number is a decimal, make it just five decimal places
	// to avoid exponents
	const sanitize = (v) => Math.round(v * 100000) / 100000;

	const floatRegex = /-?(?:\d+(?:\.\d+)?|\.\d+)/gu;

	function isNullish(v) {
	    return v == null;
	}

	const singleColorRegex = /^(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))$/iu;

	/**
	 * Returns true if the provided string is a color, ie rgba(0,0,0,0) or #000,
	 * but false if a number or multiple colors
	 */
	const isColorString = (type, testProp) => (v) => {
	    return Boolean((typeof v === "string" &&
	        singleColorRegex.test(v) &&
	        v.startsWith(type)) ||
	        (testProp &&
	            !isNullish(v) &&
	            Object.prototype.hasOwnProperty.call(v, testProp)));
	};
	const splitColor = (aName, bName, cName) => (v) => {
	    if (typeof v !== "string")
	        return v;
	    const [a, b, c, alpha] = v.match(floatRegex);
	    return {
	        [aName]: parseFloat(a),
	        [bName]: parseFloat(b),
	        [cName]: parseFloat(c),
	        alpha: alpha !== undefined ? parseFloat(alpha) : 1,
	    };
	};

	const clampRgbUnit = (v) => clamp(0, 255, v);
	const rgbUnit = {
	    ...number,
	    transform: (v) => Math.round(clampRgbUnit(v)),
	};
	const rgba = {
	    test: /*@__PURE__*/ isColorString("rgb", "red"),
	    parse: /*@__PURE__*/ splitColor("red", "green", "blue"),
	    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => "rgba(" +
	        rgbUnit.transform(red) +
	        ", " +
	        rgbUnit.transform(green) +
	        ", " +
	        rgbUnit.transform(blue) +
	        ", " +
	        sanitize(alpha.transform(alpha$1)) +
	        ")",
	};

	function parseHex(v) {
	    let r = "";
	    let g = "";
	    let b = "";
	    let a = "";
	    // If we have 6 characters, ie #FF0000
	    if (v.length > 5) {
	        r = v.substring(1, 3);
	        g = v.substring(3, 5);
	        b = v.substring(5, 7);
	        a = v.substring(7, 9);
	        // Or we have 3 characters, ie #F00
	    }
	    else {
	        r = v.substring(1, 2);
	        g = v.substring(2, 3);
	        b = v.substring(3, 4);
	        a = v.substring(4, 5);
	        r += r;
	        g += g;
	        b += b;
	        a += a;
	    }
	    return {
	        red: parseInt(r, 16),
	        green: parseInt(g, 16),
	        blue: parseInt(b, 16),
	        alpha: a ? parseInt(a, 16) / 255 : 1,
	    };
	}
	const hex = {
	    test: /*@__PURE__*/ isColorString("#"),
	    parse: parseHex,
	    transform: rgba.transform,
	};

	/*#__NO_SIDE_EFFECTS__*/
	const createUnitType = (unit) => ({
	    test: (v) => typeof v === "string" && v.endsWith(unit) && v.split(" ").length === 1,
	    parse: parseFloat,
	    transform: (v) => `${v}${unit}`,
	});
	const degrees = /*@__PURE__*/ createUnitType("deg");
	const percent = /*@__PURE__*/ createUnitType("%");
	const px = /*@__PURE__*/ createUnitType("px");
	const vh = /*@__PURE__*/ createUnitType("vh");
	const vw = /*@__PURE__*/ createUnitType("vw");
	const progressPercentage = /*@__PURE__*/ (() => ({
	    ...percent,
	    parse: (v) => percent.parse(v) / 100,
	    transform: (v) => percent.transform(v * 100),
	}))();

	const hsla = {
	    test: /*@__PURE__*/ isColorString("hsl", "hue"),
	    parse: /*@__PURE__*/ splitColor("hue", "saturation", "lightness"),
	    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {
	        return ("hsla(" +
	            Math.round(hue) +
	            ", " +
	            percent.transform(sanitize(saturation)) +
	            ", " +
	            percent.transform(sanitize(lightness)) +
	            ", " +
	            sanitize(alpha.transform(alpha$1)) +
	            ")");
	    },
	};

	const color = {
	    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),
	    parse: (v) => {
	        if (rgba.test(v)) {
	            return rgba.parse(v);
	        }
	        else if (hsla.test(v)) {
	            return hsla.parse(v);
	        }
	        else {
	            return hex.parse(v);
	        }
	    },
	    transform: (v) => {
	        return typeof v === "string"
	            ? v
	            : v.hasOwnProperty("red")
	                ? rgba.transform(v)
	                : hsla.transform(v);
	    },
	    getAnimatableNone: (v) => {
	        const parsed = color.parse(v);
	        parsed.alpha = 0;
	        return color.transform(parsed);
	    },
	};

	const colorRegex = /(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))/giu;

	function test(v) {
	    return (isNaN(v) &&
	        typeof v === "string" &&
	        (v.match(floatRegex)?.length || 0) +
	            (v.match(colorRegex)?.length || 0) >
	            0);
	}
	const NUMBER_TOKEN = "number";
	const COLOR_TOKEN = "color";
	const VAR_TOKEN = "var";
	const VAR_FUNCTION_TOKEN = "var(";
	const SPLIT_TOKEN = "${}";
	// this regex consists of the `singleCssVariableRegex|rgbHSLValueRegex|digitRegex`
	const complexRegex = /var\s*\(\s*--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)|#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\)|-?(?:\d+(?:\.\d+)?|\.\d+)/giu;
	function analyseComplexValue(value) {
	    const originalValue = value.toString();
	    const values = [];
	    const indexes = {
	        color: [],
	        number: [],
	        var: [],
	    };
	    const types = [];
	    let i = 0;
	    const tokenised = originalValue.replace(complexRegex, (parsedValue) => {
	        if (color.test(parsedValue)) {
	            indexes.color.push(i);
	            types.push(COLOR_TOKEN);
	            values.push(color.parse(parsedValue));
	        }
	        else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {
	            indexes.var.push(i);
	            types.push(VAR_TOKEN);
	            values.push(parsedValue);
	        }
	        else {
	            indexes.number.push(i);
	            types.push(NUMBER_TOKEN);
	            values.push(parseFloat(parsedValue));
	        }
	        ++i;
	        return SPLIT_TOKEN;
	    });
	    const split = tokenised.split(SPLIT_TOKEN);
	    return { values, split, indexes, types };
	}
	function parseComplexValue(v) {
	    return analyseComplexValue(v).values;
	}
	function createTransformer(source) {
	    const { split, types } = analyseComplexValue(source);
	    const numSections = split.length;
	    return (v) => {
	        let output = "";
	        for (let i = 0; i < numSections; i++) {
	            output += split[i];
	            if (v[i] !== undefined) {
	                const type = types[i];
	                if (type === NUMBER_TOKEN) {
	                    output += sanitize(v[i]);
	                }
	                else if (type === COLOR_TOKEN) {
	                    output += color.transform(v[i]);
	                }
	                else {
	                    output += v[i];
	                }
	            }
	        }
	        return output;
	    };
	}
	const convertNumbersToZero = (v) => typeof v === "number" ? 0 : color.test(v) ? color.getAnimatableNone(v) : v;
	function getAnimatableNone$1(v) {
	    const parsed = parseComplexValue(v);
	    const transformer = createTransformer(v);
	    return transformer(parsed.map(convertNumbersToZero));
	}
	const complex = {
	    test,
	    parse: parseComplexValue,
	    createTransformer,
	    getAnimatableNone: getAnimatableNone$1,
	};

	// Adapted from https://gist.github.com/mjackson/5311256
	function hueToRgb(p, q, t) {
	    if (t < 0)
	        t += 1;
	    if (t > 1)
	        t -= 1;
	    if (t < 1 / 6)
	        return p + (q - p) * 6 * t;
	    if (t < 1 / 2)
	        return q;
	    if (t < 2 / 3)
	        return p + (q - p) * (2 / 3 - t) * 6;
	    return p;
	}
	function hslaToRgba({ hue, saturation, lightness, alpha }) {
	    hue /= 360;
	    saturation /= 100;
	    lightness /= 100;
	    let red = 0;
	    let green = 0;
	    let blue = 0;
	    if (!saturation) {
	        red = green = blue = lightness;
	    }
	    else {
	        const q = lightness < 0.5
	            ? lightness * (1 + saturation)
	            : lightness + saturation - lightness * saturation;
	        const p = 2 * lightness - q;
	        red = hueToRgb(p, q, hue + 1 / 3);
	        green = hueToRgb(p, q, hue);
	        blue = hueToRgb(p, q, hue - 1 / 3);
	    }
	    return {
	        red: Math.round(red * 255),
	        green: Math.round(green * 255),
	        blue: Math.round(blue * 255),
	        alpha,
	    };
	}

	function mixImmediate(a, b) {
	    return (p) => (p > 0 ? b : a);
	}

	/*
	  Value in range from progress

	  Given a lower limit and an upper limit, we return the value within
	  that range as expressed by progress (usually a number from 0 to 1)

	  So progress = 0.5 would change

	  from -------- to

	  to

	  from ---- to

	  E.g. from = 10, to = 20, progress = 0.5 => 15

	  @param [number]: Lower limit of range
	  @param [number]: Upper limit of range
	  @param [number]: The progress between lower and upper limits expressed 0-1
	  @return [number]: Value as calculated from progress within range (not limited within range)
	*/
	const mixNumber$1 = (from, to, progress) => {
	    return from + (to - from) * progress;
	};

	// Linear color space blending
	// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw
	// Demonstrated http://codepen.io/osublake/pen/xGVVaN
	const mixLinearColor = (from, to, v) => {
	    const fromExpo = from * from;
	    const expo = v * (to * to - fromExpo) + fromExpo;
	    return expo < 0 ? 0 : Math.sqrt(expo);
	};
	const colorTypes = [hex, rgba, hsla];
	const getColorType = (v) => colorTypes.find((type) => type.test(v));
	function asRGBA(color) {
	    const type = getColorType(color);
	    if (!Boolean(type))
	        return false;
	    let model = type.parse(color);
	    if (type === hsla) {
	        // TODO Remove this cast - needed since Motion's stricter typing
	        model = hslaToRgba(model);
	    }
	    return model;
	}
	const mixColor = (from, to) => {
	    const fromRGBA = asRGBA(from);
	    const toRGBA = asRGBA(to);
	    if (!fromRGBA || !toRGBA) {
	        return mixImmediate(from, to);
	    }
	    const blended = { ...fromRGBA };
	    return (v) => {
	        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);
	        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);
	        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);
	        blended.alpha = mixNumber$1(fromRGBA.alpha, toRGBA.alpha, v);
	        return rgba.transform(blended);
	    };
	};

	const invisibleValues = new Set(["none", "hidden"]);
	/**
	 * Returns a function that, when provided a progress value between 0 and 1,
	 * will return the "none" or "hidden" string only when the progress is that of
	 * the origin or target.
	 */
	function mixVisibility(origin, target) {
	    if (invisibleValues.has(origin)) {
	        return (p) => (p <= 0 ? origin : target);
	    }
	    else {
	        return (p) => (p >= 1 ? target : origin);
	    }
	}

	function mixNumber(a, b) {
	    return (p) => mixNumber$1(a, b, p);
	}
	function getMixer(a) {
	    if (typeof a === "number") {
	        return mixNumber;
	    }
	    else if (typeof a === "string") {
	        return isCSSVariableToken(a)
	            ? mixImmediate
	            : color.test(a)
	                ? mixColor
	                : mixComplex;
	    }
	    else if (Array.isArray(a)) {
	        return mixArray;
	    }
	    else if (typeof a === "object") {
	        return color.test(a) ? mixColor : mixObject;
	    }
	    return mixImmediate;
	}
	function mixArray(a, b) {
	    const output = [...a];
	    const numValues = output.length;
	    const blendValue = a.map((v, i) => getMixer(v)(v, b[i]));
	    return (p) => {
	        for (let i = 0; i < numValues; i++) {
	            output[i] = blendValue[i](p);
	        }
	        return output;
	    };
	}
	function mixObject(a, b) {
	    const output = { ...a, ...b };
	    const blendValue = {};
	    for (const key in output) {
	        if (a[key] !== undefined && b[key] !== undefined) {
	            blendValue[key] = getMixer(a[key])(a[key], b[key]);
	        }
	    }
	    return (v) => {
	        for (const key in blendValue) {
	            output[key] = blendValue[key](v);
	        }
	        return output;
	    };
	}
	function matchOrder(origin, target) {
	    const orderedOrigin = [];
	    const pointers = { color: 0, var: 0, number: 0 };
	    for (let i = 0; i < target.values.length; i++) {
	        const type = target.types[i];
	        const originIndex = origin.indexes[type][pointers[type]];
	        const originValue = origin.values[originIndex] ?? 0;
	        orderedOrigin[i] = originValue;
	        pointers[type]++;
	    }
	    return orderedOrigin;
	}
	const mixComplex = (origin, target) => {
	    const template = complex.createTransformer(target);
	    const originStats = analyseComplexValue(origin);
	    const targetStats = analyseComplexValue(target);
	    const canInterpolate = originStats.indexes.var.length === targetStats.indexes.var.length &&
	        originStats.indexes.color.length === targetStats.indexes.color.length &&
	        originStats.indexes.number.length >= targetStats.indexes.number.length;
	    if (canInterpolate) {
	        if ((invisibleValues.has(origin) &&
	            !targetStats.values.length) ||
	            (invisibleValues.has(target) &&
	                !originStats.values.length)) {
	            return mixVisibility(origin, target);
	        }
	        return pipe$1(mixArray(matchOrder(originStats, targetStats), targetStats.values), template);
	    }
	    else {
	        return mixImmediate(origin, target);
	    }
	};

	function mix(from, to, p) {
	    if (typeof from === "number" &&
	        typeof to === "number" &&
	        typeof p === "number") {
	        return mixNumber$1(from, to, p);
	    }
	    const mixer = getMixer(from);
	    return mixer(from, to);
	}

	const frameloopDriver = (update) => {
	    const passTimestamp = ({ timestamp }) => update(timestamp);
	    return {
	        start: (keepAlive = true) => frame.update(passTimestamp, keepAlive),
	        stop: () => cancelFrame(passTimestamp),
	        /**
	         * If we're processing this frame we can use the
	         * framelocked timestamp to keep things in sync.
	         */
	        now: () => (frameData.isProcessing ? frameData.timestamp : time.now()),
	    };
	};

	const generateLinearEasing = (easing, duration, // as milliseconds
	resolution = 10 // as milliseconds
	) => {
	    let points = "";
	    const numPoints = Math.max(Math.round(duration / resolution), 2);
	    for (let i = 0; i < numPoints; i++) {
	        points += Math.round(easing(i / (numPoints - 1)) * 10000) / 10000 + ", ";
	    }
	    return `linear(${points.substring(0, points.length - 2)})`;
	};

	/**
	 * Implement a practical max duration for keyframe generation
	 * to prevent infinite loops
	 */
	const maxGeneratorDuration = 20000;
	function calcGeneratorDuration(generator) {
	    let duration = 0;
	    const timeStep = 50;
	    let state = generator.next(duration);
	    while (!state.done && duration < maxGeneratorDuration) {
	        duration += timeStep;
	        state = generator.next(duration);
	    }
	    return duration >= maxGeneratorDuration ? Infinity : duration;
	}

	/**
	 * Create a progress => progress easing function from a generator.
	 */
	function createGeneratorEasing(options, scale = 100, createGenerator) {
	    const generator = createGenerator({ ...options, keyframes: [0, scale] });
	    const duration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);
	    return {
	        type: "keyframes",
	        ease: (progress) => {
	            return generator.next(duration * progress).value / scale;
	        },
	        duration: millisecondsToSeconds(duration),
	    };
	}

	const velocitySampleDuration = 5; // ms
	function calcGeneratorVelocity(resolveValue, t, current) {
	    const prevT = Math.max(t - velocitySampleDuration, 0);
	    return velocityPerSecond(current - resolveValue(prevT), t - prevT);
	}

	const springDefaults = {
	    // Default spring physics
	    stiffness: 100,
	    damping: 10,
	    mass: 1.0,
	    velocity: 0.0,
	    // Default duration/bounce-based options
	    duration: 800, // in ms
	    bounce: 0.3,
	    visualDuration: 0.3, // in seconds
	    // Rest thresholds
	    restSpeed: {
	        granular: 0.01,
	        default: 2,
	    },
	    restDelta: {
	        granular: 0.005,
	        default: 0.5,
	    },
	    // Limits
	    minDuration: 0.01, // in seconds
	    maxDuration: 10.0, // in seconds
	    minDamping: 0.05,
	    maxDamping: 1,
	};

	const safeMin = 0.001;
	function findSpring({ duration = springDefaults.duration, bounce = springDefaults.bounce, velocity = springDefaults.velocity, mass = springDefaults.mass, }) {
	    let envelope;
	    let derivative;
	    let dampingRatio = 1 - bounce;
	    /**
	     * Restrict dampingRatio and duration to within acceptable ranges.
	     */
	    dampingRatio = clamp(springDefaults.minDamping, springDefaults.maxDamping, dampingRatio);
	    duration = clamp(springDefaults.minDuration, springDefaults.maxDuration, millisecondsToSeconds(duration));
	    if (dampingRatio < 1) {
	        /**
	         * Underdamped spring
	         */
	        envelope = (undampedFreq) => {
	            const exponentialDecay = undampedFreq * dampingRatio;
	            const delta = exponentialDecay * duration;
	            const a = exponentialDecay - velocity;
	            const b = calcAngularFreq(undampedFreq, dampingRatio);
	            const c = Math.exp(-delta);
	            return safeMin - (a / b) * c;
	        };
	        derivative = (undampedFreq) => {
	            const exponentialDecay = undampedFreq * dampingRatio;
	            const delta = exponentialDecay * duration;
	            const d = delta * velocity + velocity;
	            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;
	            const f = Math.exp(-delta);
	            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);
	            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;
	            return (factor * ((d - e) * f)) / g;
	        };
	    }
	    else {
	        /**
	         * Critically-damped spring
	         */
	        envelope = (undampedFreq) => {
	            const a = Math.exp(-undampedFreq * duration);
	            const b = (undampedFreq - velocity) * duration + 1;
	            return -safeMin + a * b;
	        };
	        derivative = (undampedFreq) => {
	            const a = Math.exp(-undampedFreq * duration);
	            const b = (velocity - undampedFreq) * (duration * duration);
	            return a * b;
	        };
	    }
	    const initialGuess = 5 / duration;
	    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
	    duration = secondsToMilliseconds(duration);
	    if (isNaN(undampedFreq)) {
	        return {
	            stiffness: springDefaults.stiffness,
	            damping: springDefaults.damping,
	            duration,
	        };
	    }
	    else {
	        const stiffness = Math.pow(undampedFreq, 2) * mass;
	        return {
	            stiffness,
	            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
	            duration,
	        };
	    }
	}
	const rootIterations = 12;
	function approximateRoot(envelope, derivative, initialGuess) {
	    let result = initialGuess;
	    for (let i = 1; i < rootIterations; i++) {
	        result = result - envelope(result) / derivative(result);
	    }
	    return result;
	}
	function calcAngularFreq(undampedFreq, dampingRatio) {
	    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
	}

	const durationKeys = ["duration", "bounce"];
	const physicsKeys = ["stiffness", "damping", "mass"];
	function isSpringType(options, keys) {
	    return keys.some((key) => options[key] !== undefined);
	}
	function getSpringOptions(options) {
	    let springOptions = {
	        velocity: springDefaults.velocity,
	        stiffness: springDefaults.stiffness,
	        damping: springDefaults.damping,
	        mass: springDefaults.mass,
	        isResolvedFromDuration: false,
	        ...options,
	    };
	    // stiffness/damping/mass overrides duration/bounce
	    if (!isSpringType(options, physicsKeys) &&
	        isSpringType(options, durationKeys)) {
	        if (options.visualDuration) {
	            const visualDuration = options.visualDuration;
	            const root = (2 * Math.PI) / (visualDuration * 1.2);
	            const stiffness = root * root;
	            const damping = 2 *
	                clamp(0.05, 1, 1 - (options.bounce || 0)) *
	                Math.sqrt(stiffness);
	            springOptions = {
	                ...springOptions,
	                mass: springDefaults.mass,
	                stiffness,
	                damping,
	            };
	        }
	        else {
	            const derived = findSpring(options);
	            springOptions = {
	                ...springOptions,
	                ...derived,
	                mass: springDefaults.mass,
	            };
	            springOptions.isResolvedFromDuration = true;
	        }
	    }
	    return springOptions;
	}
	function spring(optionsOrVisualDuration = springDefaults.visualDuration, bounce = springDefaults.bounce) {
	    const options = typeof optionsOrVisualDuration !== "object"
	        ? {
	            visualDuration: optionsOrVisualDuration,
	            keyframes: [0, 1],
	            bounce,
	        }
	        : optionsOrVisualDuration;
	    let { restSpeed, restDelta } = options;
	    const origin = options.keyframes[0];
	    const target = options.keyframes[options.keyframes.length - 1];
	    /**
	     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator
	     * to reduce GC during animation.
	     */
	    const state = { done: false, value: origin };
	    const { stiffness, damping, mass, duration, velocity, isResolvedFromDuration, } = getSpringOptions({
	        ...options,
	        velocity: -millisecondsToSeconds(options.velocity || 0),
	    });
	    const initialVelocity = velocity || 0.0;
	    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
	    const initialDelta = target - origin;
	    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));
	    /**
	     * If we're working on a granular scale, use smaller defaults for determining
	     * when the spring is finished.
	     *
	     * These defaults have been selected emprically based on what strikes a good
	     * ratio between feeling good and finishing as soon as changes are imperceptible.
	     */
	    const isGranularScale = Math.abs(initialDelta) < 5;
	    restSpeed || (restSpeed = isGranularScale
	        ? springDefaults.restSpeed.granular
	        : springDefaults.restSpeed.default);
	    restDelta || (restDelta = isGranularScale
	        ? springDefaults.restDelta.granular
	        : springDefaults.restDelta.default);
	    let resolveSpring;
	    if (dampingRatio < 1) {
	        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
	        // Underdamped spring
	        resolveSpring = (t) => {
	            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
	            return (target -
	                envelope *
	                    (((initialVelocity +
	                        dampingRatio * undampedAngularFreq * initialDelta) /
	                        angularFreq) *
	                        Math.sin(angularFreq * t) +
	                        initialDelta * Math.cos(angularFreq * t)));
	        };
	    }
	    else if (dampingRatio === 1) {
	        // Critically damped spring
	        resolveSpring = (t) => target -
	            Math.exp(-undampedAngularFreq * t) *
	                (initialDelta +
	                    (initialVelocity + undampedAngularFreq * initialDelta) * t);
	    }
	    else {
	        // Overdamped spring
	        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
	        resolveSpring = (t) => {
	            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
	            // When performing sinh or cosh values can hit Infinity so we cap them here
	            const freqForT = Math.min(dampedAngularFreq * t, 300);
	            return (target -
	                (envelope *
	                    ((initialVelocity +
	                        dampingRatio * undampedAngularFreq * initialDelta) *
	                        Math.sinh(freqForT) +
	                        dampedAngularFreq *
	                            initialDelta *
	                            Math.cosh(freqForT))) /
	                    dampedAngularFreq);
	        };
	    }
	    const generator = {
	        calculatedDuration: isResolvedFromDuration ? duration || null : null,
	        next: (t) => {
	            const current = resolveSpring(t);
	            if (!isResolvedFromDuration) {
	                let currentVelocity = t === 0 ? initialVelocity : 0.0;
	                /**
	                 * We only need to calculate velocity for under-damped springs
	                 * as over- and critically-damped springs can't overshoot, so
	                 * checking only for displacement is enough.
	                 */
	                if (dampingRatio < 1) {
	                    currentVelocity =
	                        t === 0
	                            ? secondsToMilliseconds(initialVelocity)
	                            : calcGeneratorVelocity(resolveSpring, t, current);
	                }
	                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
	                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;
	                state.done =
	                    isBelowVelocityThreshold && isBelowDisplacementThreshold;
	            }
	            else {
	                state.done = t >= duration;
	            }
	            state.value = state.done ? target : current;
	            return state;
	        },
	        toString: () => {
	            const calculatedDuration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);
	            const easing = generateLinearEasing((progress) => generator.next(calculatedDuration * progress).value, calculatedDuration, 30);
	            return calculatedDuration + "ms " + easing;
	        },
	        toTransition: () => { },
	    };
	    return generator;
	}
	spring.applyToOptions = (options) => {
	    const generatorOptions = createGeneratorEasing(options, 100, spring);
	    options.ease = generatorOptions.ease;
	    options.duration = secondsToMilliseconds(generatorOptions.duration);
	    options.type = "keyframes";
	    return options;
	};

	function inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed, }) {
	    const origin = keyframes[0];
	    const state = {
	        done: false,
	        value: origin,
	    };
	    const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);
	    const nearestBoundary = (v) => {
	        if (min === undefined)
	            return max;
	        if (max === undefined)
	            return min;
	        return Math.abs(min - v) < Math.abs(max - v) ? min : max;
	    };
	    let amplitude = power * velocity;
	    const ideal = origin + amplitude;
	    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);
	    /**
	     * If the target has changed we need to re-calculate the amplitude, otherwise
	     * the animation will start from the wrong position.
	     */
	    if (target !== ideal)
	        amplitude = target - origin;
	    const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);
	    const calcLatest = (t) => target + calcDelta(t);
	    const applyFriction = (t) => {
	        const delta = calcDelta(t);
	        const latest = calcLatest(t);
	        state.done = Math.abs(delta) <= restDelta;
	        state.value = state.done ? target : latest;
	    };
	    /**
	     * Ideally this would resolve for t in a stateless way, we could
	     * do that by always precalculating the animation but as we know
	     * this will be done anyway we can assume that spring will
	     * be discovered during that.
	     */
	    let timeReachedBoundary;
	    let spring$1;
	    const checkCatchBoundary = (t) => {
	        if (!isOutOfBounds(state.value))
	            return;
	        timeReachedBoundary = t;
	        spring$1 = spring({
	            keyframes: [state.value, nearestBoundary(state.value)],
	            velocity: calcGeneratorVelocity(calcLatest, t, state.value), // TODO: This should be passing * 1000
	            damping: bounceDamping,
	            stiffness: bounceStiffness,
	            restDelta,
	            restSpeed,
	        });
	    };
	    checkCatchBoundary(0);
	    return {
	        calculatedDuration: null,
	        next: (t) => {
	            /**
	             * We need to resolve the friction to figure out if we need a
	             * spring but we don't want to do this twice per frame. So here
	             * we flag if we updated for this frame and later if we did
	             * we can skip doing it again.
	             */
	            let hasUpdatedFrame = false;
	            if (!spring$1 && timeReachedBoundary === undefined) {
	                hasUpdatedFrame = true;
	                applyFriction(t);
	                checkCatchBoundary(t);
	            }
	            /**
	             * If we have a spring and the provided t is beyond the moment the friction
	             * animation crossed the min/max boundary, use the spring.
	             */
	            if (timeReachedBoundary !== undefined && t >= timeReachedBoundary) {
	                return spring$1.next(t - timeReachedBoundary);
	            }
	            else {
	                !hasUpdatedFrame && applyFriction(t);
	                return state;
	            }
	        },
	    };
	}

	function createMixers(output, ease, customMixer) {
	    const mixers = [];
	    const mixerFactory = customMixer || MotionGlobalConfig.mix || mix;
	    const numMixers = output.length - 1;
	    for (let i = 0; i < numMixers; i++) {
	        let mixer = mixerFactory(output[i], output[i + 1]);
	        if (ease) {
	            const easingFunction = Array.isArray(ease) ? ease[i] || noop : ease;
	            mixer = pipe$1(easingFunction, mixer);
	        }
	        mixers.push(mixer);
	    }
	    return mixers;
	}
	/**
	 * Create a function that maps from a numerical input array to a generic output array.
	 *
	 * Accepts:
	 *   - Numbers
	 *   - Colors (hex, hsl, hsla, rgb, rgba)
	 *   - Complex (combinations of one or more numbers or strings)
	 *
	 * ```jsx
	 * const mixColor = interpolate([0, 1], ['#fff', '#000'])
	 *
	 * mixColor(0.5) // 'rgba(128, 128, 128, 1)'
	 * ```
	 *
	 * TODO Revisit this approach once we've moved to data models for values,
	 * probably not needed to pregenerate mixer functions.
	 *
	 * @public
	 */
	function interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {
	    const inputLength = input.length;
	    invariant(inputLength === output.length);
	    /**
	     * If we're only provided a single input, we can just make a function
	     * that returns the output.
	     */
	    if (inputLength === 1)
	        return () => output[0];
	    if (inputLength === 2 && output[0] === output[1])
	        return () => output[1];
	    const isZeroDeltaRange = input[0] === input[1];
	    // If input runs highest -> lowest, reverse both arrays
	    if (input[0] > input[inputLength - 1]) {
	        input = [...input].reverse();
	        output = [...output].reverse();
	    }
	    const mixers = createMixers(output, ease, mixer);
	    const numMixers = mixers.length;
	    const interpolator = (v) => {
	        if (isZeroDeltaRange && v < input[0])
	            return output[0];
	        let i = 0;
	        if (numMixers > 1) {
	            for (; i < input.length - 2; i++) {
	                if (v < input[i + 1])
	                    break;
	            }
	        }
	        const progressInRange = progress(input[i], input[i + 1], v);
	        return mixers[i](progressInRange);
	    };
	    return isClamp
	        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))
	        : interpolator;
	}

	function fillOffset(offset, remaining) {
	    const min = offset[offset.length - 1];
	    for (let i = 1; i <= remaining; i++) {
	        const offsetProgress = progress(0, remaining, i);
	        offset.push(mixNumber$1(min, 1, offsetProgress));
	    }
	}

	function defaultOffset(arr) {
	    const offset = [0];
	    fillOffset(offset, arr.length - 1);
	    return offset;
	}

	function convertOffsetToTimes(offset, duration) {
	    return offset.map((o) => o * duration);
	}

	function defaultEasing(values, easing) {
	    return values.map(() => easing || easeInOut).splice(0, values.length - 1);
	}
	function keyframes({ duration = 300, keyframes: keyframeValues, times, ease = "easeInOut", }) {
	    /**
	     * Easing functions can be externally defined as strings. Here we convert them
	     * into actual functions.
	     */
	    const easingFunctions = isEasingArray(ease)
	        ? ease.map(easingDefinitionToFunction)
	        : easingDefinitionToFunction(ease);
	    /**
	     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator
	     * to reduce GC during animation.
	     */
	    const state = {
	        done: false,
	        value: keyframeValues[0],
	    };
	    /**
	     * Create a times array based on the provided 0-1 offsets
	     */
	    const absoluteTimes = convertOffsetToTimes(
	    // Only use the provided offsets if they're the correct length
	    // TODO Maybe we should warn here if there's a length mismatch
	    times && times.length === keyframeValues.length
	        ? times
	        : defaultOffset(keyframeValues), duration);
	    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {
	        ease: Array.isArray(easingFunctions)
	            ? easingFunctions
	            : defaultEasing(keyframeValues, easingFunctions),
	    });
	    return {
	        calculatedDuration: duration,
	        next: (t) => {
	            state.value = mapTimeToKeyframe(t);
	            state.done = t >= duration;
	            return state;
	        },
	    };
	}

	const isNotNull$1 = (value) => value !== null;
	function getFinalKeyframe$1(keyframes, { repeat, repeatType = "loop" }, finalKeyframe, speed = 1) {
	    const resolvedKeyframes = keyframes.filter(isNotNull$1);
	    const useFirstKeyframe = speed < 0 || (repeat && repeatType !== "loop" && repeat % 2 === 1);
	    const index = useFirstKeyframe ? 0 : resolvedKeyframes.length - 1;
	    return !index || finalKeyframe === undefined
	        ? resolvedKeyframes[index]
	        : finalKeyframe;
	}

	const transitionTypeMap = {
	    decay: inertia,
	    inertia,
	    tween: keyframes,
	    keyframes: keyframes,
	    spring,
	};
	function replaceTransitionType(transition) {
	    if (typeof transition.type === "string") {
	        transition.type = transitionTypeMap[transition.type];
	    }
	}

	class WithPromise {
	    constructor() {
	        this.updateFinished();
	    }
	    get finished() {
	        return this._finished;
	    }
	    updateFinished() {
	        this._finished = new Promise((resolve) => {
	            this.resolve = resolve;
	        });
	    }
	    notifyFinished() {
	        this.resolve();
	    }
	    /**
	     * Allows the animation to be awaited.
	     *
	     * @deprecated Use `finished` instead.
	     */
	    then(onResolve, onReject) {
	        return this.finished.then(onResolve, onReject);
	    }
	}

	const percentToProgress = (percent) => percent / 100;
	class JSAnimation extends WithPromise {
	    constructor(options) {
	        super();
	        this.state = "idle";
	        this.startTime = null;
	        this.isStopped = false;
	        /**
	         * The current time of the animation.
	         */
	        this.currentTime = 0;
	        /**
	         * The time at which the animation was paused.
	         */
	        this.holdTime = null;
	        /**
	         * Playback speed as a factor. 0 would be stopped, -1 reverse and 2 double speed.
	         */
	        this.playbackSpeed = 1;
	        /**
	         * This method is bound to the instance to fix a pattern where
	         * animation.stop is returned as a reference from a useEffect.
	         */
	        this.stop = () => {
	            const { motionValue } = this.options;
	            if (motionValue && motionValue.updatedAt !== time.now()) {
	                this.tick(time.now());
	            }
	            this.isStopped = true;
	            if (this.state === "idle")
	                return;
	            this.teardown();
	            this.options.onStop?.();
	        };
	        this.options = options;
	        this.initAnimation();
	        this.play();
	        if (options.autoplay === false)
	            this.pause();
	    }
	    initAnimation() {
	        const { options } = this;
	        replaceTransitionType(options);
	        const { type = keyframes, repeat = 0, repeatDelay = 0, repeatType, velocity = 0, } = options;
	        let { keyframes: keyframes$1 } = options;
	        const generatorFactory = type || keyframes;
	        if (generatorFactory !== keyframes &&
	            typeof keyframes$1[0] !== "number") {
	            this.mixKeyframes = pipe$1(percentToProgress, mix(keyframes$1[0], keyframes$1[1]));
	            keyframes$1 = [0, 100];
	        }
	        const generator = generatorFactory({ ...options, keyframes: keyframes$1 });
	        /**
	         * If we have a mirror repeat type we need to create a second generator that outputs the
	         * mirrored (not reversed) animation and later ping pong between the two generators.
	         */
	        if (repeatType === "mirror") {
	            this.mirroredGenerator = generatorFactory({
	                ...options,
	                keyframes: [...keyframes$1].reverse(),
	                velocity: -velocity,
	            });
	        }
	        /**
	         * If duration is undefined and we have repeat options,
	         * we need to calculate a duration from the generator.
	         *
	         * We set it to the generator itself to cache the duration.
	         * Any timeline resolver will need to have already precalculated
	         * the duration by this step.
	         */
	        if (generator.calculatedDuration === null) {
	            generator.calculatedDuration = calcGeneratorDuration(generator);
	        }
	        const { calculatedDuration } = generator;
	        this.calculatedDuration = calculatedDuration;
	        this.resolvedDuration = calculatedDuration + repeatDelay;
	        this.totalDuration = this.resolvedDuration * (repeat + 1) - repeatDelay;
	        this.generator = generator;
	    }
	    updateTime(timestamp) {
	        const animationTime = Math.round(timestamp - this.startTime) * this.playbackSpeed;
	        // Update currentTime
	        if (this.holdTime !== null) {
	            this.currentTime = this.holdTime;
	        }
	        else {
	            // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =
	            // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for
	            // example.
	            this.currentTime = animationTime;
	        }
	    }
	    tick(timestamp, sample = false) {
	        const { generator, totalDuration, mixKeyframes, mirroredGenerator, resolvedDuration, calculatedDuration, } = this;
	        if (this.startTime === null)
	            return generator.next(0);
	        const { delay = 0, keyframes, repeat, repeatType, repeatDelay, type, onUpdate, finalKeyframe, } = this.options;
	        /**
	         * requestAnimationFrame timestamps can come through as lower than
	         * the startTime as set by performance.now(). Here we prevent this,
	         * though in the future it could be possible to make setting startTime
	         * a pending operation that gets resolved here.
	         */
	        if (this.speed > 0) {
	            this.startTime = Math.min(this.startTime, timestamp);
	        }
	        else if (this.speed < 0) {
	            this.startTime = Math.min(timestamp - totalDuration / this.speed, this.startTime);
	        }
	        if (sample) {
	            this.currentTime = timestamp;
	        }
	        else {
	            this.updateTime(timestamp);
	        }
	        // Rebase on delay
	        const timeWithoutDelay = this.currentTime - delay * (this.playbackSpeed >= 0 ? 1 : -1);
	        const isInDelayPhase = this.playbackSpeed >= 0
	            ? timeWithoutDelay < 0
	            : timeWithoutDelay > totalDuration;
	        this.currentTime = Math.max(timeWithoutDelay, 0);
	        // If this animation has finished, set the current time  to the total duration.
	        if (this.state === "finished" && this.holdTime === null) {
	            this.currentTime = totalDuration;
	        }
	        let elapsed = this.currentTime;
	        let frameGenerator = generator;
	        if (repeat) {
	            /**
	             * Get the current progress (0-1) of the animation. If t is >
	             * than duration we'll get values like 2.5 (midway through the
	             * third iteration)
	             */
	            const progress = Math.min(this.currentTime, totalDuration) / resolvedDuration;
	            /**
	             * Get the current iteration (0 indexed). For instance the floor of
	             * 2.5 is 2.
	             */
	            let currentIteration = Math.floor(progress);
	            /**
	             * Get the current progress of the iteration by taking the remainder
	             * so 2.5 is 0.5 through iteration 2
	             */
	            let iterationProgress = progress % 1.0;
	            /**
	             * If iteration progress is 1 we count that as the end
	             * of the previous iteration.
	             */
	            if (!iterationProgress && progress >= 1) {
	                iterationProgress = 1;
	            }
	            iterationProgress === 1 && currentIteration--;
	            currentIteration = Math.min(currentIteration, repeat + 1);
	            /**
	             * Reverse progress if we're not running in "normal" direction
	             */
	            const isOddIteration = Boolean(currentIteration % 2);
	            if (isOddIteration) {
	                if (repeatType === "reverse") {
	                    iterationProgress = 1 - iterationProgress;
	                    if (repeatDelay) {
	                        iterationProgress -= repeatDelay / resolvedDuration;
	                    }
	                }
	                else if (repeatType === "mirror") {
	                    frameGenerator = mirroredGenerator;
	                }
	            }
	            elapsed = clamp(0, 1, iterationProgress) * resolvedDuration;
	        }
	        /**
	         * If we're in negative time, set state as the initial keyframe.
	         * This prevents delay: x, duration: 0 animations from finishing
	         * instantly.
	         */
	        const state = isInDelayPhase
	            ? { done: false, value: keyframes[0] }
	            : frameGenerator.next(elapsed);
	        if (mixKeyframes) {
	            state.value = mixKeyframes(state.value);
	        }
	        let { done } = state;
	        if (!isInDelayPhase && calculatedDuration !== null) {
	            done =
	                this.playbackSpeed >= 0
	                    ? this.currentTime >= totalDuration
	                    : this.currentTime <= 0;
	        }
	        const isAnimationFinished = this.holdTime === null &&
	            (this.state === "finished" || (this.state === "running" && done));
	        // TODO: The exception for inertia could be cleaner here
	        if (isAnimationFinished && type !== inertia) {
	            state.value = getFinalKeyframe$1(keyframes, this.options, finalKeyframe, this.speed);
	        }
	        if (onUpdate) {
	            onUpdate(state.value);
	        }
	        if (isAnimationFinished) {
	            this.finish();
	        }
	        return state;
	    }
	    /**
	     * Allows the returned animation to be awaited or promise-chained. Currently
	     * resolves when the animation finishes at all but in a future update could/should
	     * reject if its cancels.
	     */
	    then(resolve, reject) {
	        return this.finished.then(resolve, reject);
	    }
	    get duration() {
	        return millisecondsToSeconds(this.calculatedDuration);
	    }
	    get time() {
	        return millisecondsToSeconds(this.currentTime);
	    }
	    set time(newTime) {
	        newTime = secondsToMilliseconds(newTime);
	        this.currentTime = newTime;
	        if (this.startTime === null ||
	            this.holdTime !== null ||
	            this.playbackSpeed === 0) {
	            this.holdTime = newTime;
	        }
	        else if (this.driver) {
	            this.startTime = this.driver.now() - newTime / this.playbackSpeed;
	        }
	        this.driver?.start(false);
	    }
	    get speed() {
	        return this.playbackSpeed;
	    }
	    set speed(newSpeed) {
	        this.updateTime(time.now());
	        const hasChanged = this.playbackSpeed !== newSpeed;
	        this.playbackSpeed = newSpeed;
	        if (hasChanged) {
	            this.time = millisecondsToSeconds(this.currentTime);
	        }
	    }
	    play() {
	        if (this.isStopped)
	            return;
	        const { driver = frameloopDriver, startTime } = this.options;
	        if (!this.driver) {
	            this.driver = driver((timestamp) => this.tick(timestamp));
	        }
	        this.options.onPlay?.();
	        const now = this.driver.now();
	        if (this.state === "finished") {
	            this.updateFinished();
	            this.startTime = now;
	        }
	        else if (this.holdTime !== null) {
	            this.startTime = now - this.holdTime;
	        }
	        else if (!this.startTime) {
	            this.startTime = startTime ?? now;
	        }
	        if (this.state === "finished" && this.speed < 0) {
	            this.startTime += this.calculatedDuration;
	        }
	        this.holdTime = null;
	        /**
	         * Set playState to running only after we've used it in
	         * the previous logic.
	         */
	        this.state = "running";
	        this.driver.start();
	    }
	    pause() {
	        this.state = "paused";
	        this.updateTime(time.now());
	        this.holdTime = this.currentTime;
	    }
	    complete() {
	        if (this.state !== "running") {
	            this.play();
	        }
	        this.state = "finished";
	        this.holdTime = null;
	    }
	    finish() {
	        this.notifyFinished();
	        this.teardown();
	        this.state = "finished";
	        this.options.onComplete?.();
	    }
	    cancel() {
	        this.holdTime = null;
	        this.startTime = 0;
	        this.tick(0);
	        this.teardown();
	        this.options.onCancel?.();
	    }
	    teardown() {
	        this.state = "idle";
	        this.stopDriver();
	        this.startTime = this.holdTime = null;
	    }
	    stopDriver() {
	        if (!this.driver)
	            return;
	        this.driver.stop();
	        this.driver = undefined;
	    }
	    sample(sampleTime) {
	        this.startTime = 0;
	        return this.tick(sampleTime, true);
	    }
	    attachTimeline(timeline) {
	        if (this.options.allowFlatten) {
	            this.options.type = "keyframes";
	            this.options.ease = "linear";
	            this.initAnimation();
	        }
	        this.driver?.stop();
	        return timeline.observe(this);
	    }
	}

	function fillWildcards(keyframes) {
	    for (let i = 1; i < keyframes.length; i++) {
	        keyframes[i] ?? (keyframes[i] = keyframes[i - 1]);
	    }
	}

	const radToDeg = (rad) => (rad * 180) / Math.PI;
	const rotate = (v) => {
	    const angle = radToDeg(Math.atan2(v[1], v[0]));
	    return rebaseAngle(angle);
	};
	const matrix2dParsers = {
	    x: 4,
	    y: 5,
	    translateX: 4,
	    translateY: 5,
	    scaleX: 0,
	    scaleY: 3,
	    scale: (v) => (Math.abs(v[0]) + Math.abs(v[3])) / 2,
	    rotate,
	    rotateZ: rotate,
	    skewX: (v) => radToDeg(Math.atan(v[1])),
	    skewY: (v) => radToDeg(Math.atan(v[2])),
	    skew: (v) => (Math.abs(v[1]) + Math.abs(v[2])) / 2,
	};
	const rebaseAngle = (angle) => {
	    angle = angle % 360;
	    if (angle < 0)
	        angle += 360;
	    return angle;
	};
	const rotateZ = rotate;
	const scaleX = (v) => Math.sqrt(v[0] * v[0] + v[1] * v[1]);
	const scaleY = (v) => Math.sqrt(v[4] * v[4] + v[5] * v[5]);
	const matrix3dParsers = {
	    x: 12,
	    y: 13,
	    z: 14,
	    translateX: 12,
	    translateY: 13,
	    translateZ: 14,
	    scaleX,
	    scaleY,
	    scale: (v) => (scaleX(v) + scaleY(v)) / 2,
	    rotateX: (v) => rebaseAngle(radToDeg(Math.atan2(v[6], v[5]))),
	    rotateY: (v) => rebaseAngle(radToDeg(Math.atan2(-v[2], v[0]))),
	    rotateZ,
	    rotate: rotateZ,
	    skewX: (v) => radToDeg(Math.atan(v[4])),
	    skewY: (v) => radToDeg(Math.atan(v[1])),
	    skew: (v) => (Math.abs(v[1]) + Math.abs(v[4])) / 2,
	};
	function defaultTransformValue(name) {
	    return name.includes("scale") ? 1 : 0;
	}
	function parseValueFromTransform(transform, name) {
	    if (!transform || transform === "none") {
	        return defaultTransformValue(name);
	    }
	    const matrix3dMatch = transform.match(/^matrix3d\(([-\d.e\s,]+)\)$/u);
	    let parsers;
	    let match;
	    if (matrix3dMatch) {
	        parsers = matrix3dParsers;
	        match = matrix3dMatch;
	    }
	    else {
	        const matrix2dMatch = transform.match(/^matrix\(([-\d.e\s,]+)\)$/u);
	        parsers = matrix2dParsers;
	        match = matrix2dMatch;
	    }
	    if (!match) {
	        return defaultTransformValue(name);
	    }
	    const valueParser = parsers[name];
	    const values = match[1].split(",").map(convertTransformToNumber);
	    return typeof valueParser === "function"
	        ? valueParser(values)
	        : values[valueParser];
	}
	const readTransformValue = (instance, name) => {
	    const { transform = "none" } = getComputedStyle(instance);
	    return parseValueFromTransform(transform, name);
	};
	function convertTransformToNumber(value) {
	    return parseFloat(value.trim());
	}

	/**
	 * Generate a list of every possible transform key.
	 */
	const transformPropOrder = [
	    "transformPerspective",
	    "x",
	    "y",
	    "z",
	    "translateX",
	    "translateY",
	    "translateZ",
	    "scale",
	    "scaleX",
	    "scaleY",
	    "rotate",
	    "rotateX",
	    "rotateY",
	    "rotateZ",
	    "skew",
	    "skewX",
	    "skewY",
	];
	/**
	 * A quick lookup for transform props.
	 */
	const transformProps = /*@__PURE__*/ (() => new Set(transformPropOrder))();

	const isNumOrPxType = (v) => v === number || v === px;
	const transformKeys = new Set(["x", "y", "z"]);
	const nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));
	function removeNonTranslationalTransform(visualElement) {
	    const removedTransforms = [];
	    nonTranslationalTransformKeys.forEach((key) => {
	        const value = visualElement.getValue(key);
	        if (value !== undefined) {
	            removedTransforms.push([key, value.get()]);
	            value.set(key.startsWith("scale") ? 1 : 0);
	        }
	    });
	    return removedTransforms;
	}
	const positionalValues = {
	    // Dimensions
	    width: ({ x }, { paddingLeft = "0", paddingRight = "0" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),
	    height: ({ y }, { paddingTop = "0", paddingBottom = "0" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),
	    top: (_bbox, { top }) => parseFloat(top),
	    left: (_bbox, { left }) => parseFloat(left),
	    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),
	    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),
	    // Transform
	    x: (_bbox, { transform }) => parseValueFromTransform(transform, "x"),
	    y: (_bbox, { transform }) => parseValueFromTransform(transform, "y"),
	};
	// Alias translate longform names
	positionalValues.translateX = positionalValues.x;
	positionalValues.translateY = positionalValues.y;

	const toResolve = new Set();
	let isScheduled = false;
	let anyNeedsMeasurement = false;
	let isForced = false;
	function measureAllKeyframes() {
	    if (anyNeedsMeasurement) {
	        const resolversToMeasure = Array.from(toResolve).filter((resolver) => resolver.needsMeasurement);
	        const elementsToMeasure = new Set(resolversToMeasure.map((resolver) => resolver.element));
	        const transformsToRestore = new Map();
	        /**
	         * Write pass
	         * If we're measuring elements we want to remove bounding box-changing transforms.
	         */
	        elementsToMeasure.forEach((element) => {
	            const removedTransforms = removeNonTranslationalTransform(element);
	            if (!removedTransforms.length)
	                return;
	            transformsToRestore.set(element, removedTransforms);
	            element.render();
	        });
	        // Read
	        resolversToMeasure.forEach((resolver) => resolver.measureInitialState());
	        // Write
	        elementsToMeasure.forEach((element) => {
	            element.render();
	            const restore = transformsToRestore.get(element);
	            if (restore) {
	                restore.forEach(([key, value]) => {
	                    element.getValue(key)?.set(value);
	                });
	            }
	        });
	        // Read
	        resolversToMeasure.forEach((resolver) => resolver.measureEndState());
	        // Write
	        resolversToMeasure.forEach((resolver) => {
	            if (resolver.suspendedScrollY !== undefined) {
	                window.scrollTo(0, resolver.suspendedScrollY);
	            }
	        });
	    }
	    anyNeedsMeasurement = false;
	    isScheduled = false;
	    toResolve.forEach((resolver) => resolver.complete(isForced));
	    toResolve.clear();
	}
	function readAllKeyframes() {
	    toResolve.forEach((resolver) => {
	        resolver.readKeyframes();
	        if (resolver.needsMeasurement) {
	            anyNeedsMeasurement = true;
	        }
	    });
	}
	function flushKeyframeResolvers() {
	    isForced = true;
	    readAllKeyframes();
	    measureAllKeyframes();
	    isForced = false;
	}
	class KeyframeResolver {
	    constructor(unresolvedKeyframes, onComplete, name, motionValue, element, isAsync = false) {
	        this.state = "pending";
	        /**
	         * Track whether this resolver is async. If it is, it'll be added to the
	         * resolver queue and flushed in the next frame. Resolvers that aren't going
	         * to trigger read/write thrashing don't need to be async.
	         */
	        this.isAsync = false;
	        /**
	         * Track whether this resolver needs to perform a measurement
	         * to resolve its keyframes.
	         */
	        this.needsMeasurement = false;
	        this.unresolvedKeyframes = [...unresolvedKeyframes];
	        this.onComplete = onComplete;
	        this.name = name;
	        this.motionValue = motionValue;
	        this.element = element;
	        this.isAsync = isAsync;
	    }
	    scheduleResolve() {
	        this.state = "scheduled";
	        if (this.isAsync) {
	            toResolve.add(this);
	            if (!isScheduled) {
	                isScheduled = true;
	                frame.read(readAllKeyframes);
	                frame.resolveKeyframes(measureAllKeyframes);
	            }
	        }
	        else {
	            this.readKeyframes();
	            this.complete();
	        }
	    }
	    readKeyframes() {
	        const { unresolvedKeyframes, name, element, motionValue } = this;
	        // If initial keyframe is null we need to read it from the DOM
	        if (unresolvedKeyframes[0] === null) {
	            const currentValue = motionValue?.get();
	            // TODO: This doesn't work if the final keyframe is a wildcard
	            const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];
	            if (currentValue !== undefined) {
	                unresolvedKeyframes[0] = currentValue;
	            }
	            else if (element && name) {
	                const valueAsRead = element.readValue(name, finalKeyframe);
	                if (valueAsRead !== undefined && valueAsRead !== null) {
	                    unresolvedKeyframes[0] = valueAsRead;
	                }
	            }
	            if (unresolvedKeyframes[0] === undefined) {
	                unresolvedKeyframes[0] = finalKeyframe;
	            }
	            if (motionValue && currentValue === undefined) {
	                motionValue.set(unresolvedKeyframes[0]);
	            }
	        }
	        fillWildcards(unresolvedKeyframes);
	    }
	    setFinalKeyframe() { }
	    measureInitialState() { }
	    renderEndStyles() { }
	    measureEndState() { }
	    complete(isForcedComplete = false) {
	        this.state = "complete";
	        this.onComplete(this.unresolvedKeyframes, this.finalKeyframe, isForcedComplete);
	        toResolve.delete(this);
	    }
	    cancel() {
	        if (this.state === "scheduled") {
	            toResolve.delete(this);
	            this.state = "pending";
	        }
	    }
	    resume() {
	        if (this.state === "pending")
	            this.scheduleResolve();
	    }
	}

	const isCSSVar = (name) => name.startsWith("--");

	function setStyle(element, name, value) {
	    isCSSVar(name)
	        ? element.style.setProperty(name, value)
	        : (element.style[name] = value);
	}

	const supportsScrollTimeline = /* @__PURE__ */ memo(() => window.ScrollTimeline !== undefined);

	/**
	 * Add the ability for test suites to manually set support flags
	 * to better test more environments.
	 */
	const supportsFlags = {};

	function memoSupports(callback, supportsFlag) {
	    const memoized = memo(callback);
	    return () => supportsFlags[supportsFlag] ?? memoized();
	}

	const supportsLinearEasing = /*@__PURE__*/ memoSupports(() => {
	    try {
	        document
	            .createElement("div")
	            .animate({ opacity: 0 }, { easing: "linear(0, 1)" });
	    }
	    catch (e) {
	        return false;
	    }
	    return true;
	}, "linearEasing");

	const cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;

	const supportedWaapiEasing = {
	    linear: "linear",
	    ease: "ease",
	    easeIn: "ease-in",
	    easeOut: "ease-out",
	    easeInOut: "ease-in-out",
	    circIn: /*@__PURE__*/ cubicBezierAsString([0, 0.65, 0.55, 1]),
	    circOut: /*@__PURE__*/ cubicBezierAsString([0.55, 0, 1, 0.45]),
	    backIn: /*@__PURE__*/ cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),
	    backOut: /*@__PURE__*/ cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),
	};

	function mapEasingToNativeEasing(easing, duration) {
	    if (!easing) {
	        return undefined;
	    }
	    else if (typeof easing === "function") {
	        return supportsLinearEasing()
	            ? generateLinearEasing(easing, duration)
	            : "ease-out";
	    }
	    else if (isBezierDefinition(easing)) {
	        return cubicBezierAsString(easing);
	    }
	    else if (Array.isArray(easing)) {
	        return easing.map((segmentEasing) => mapEasingToNativeEasing(segmentEasing, duration) ||
	            supportedWaapiEasing.easeOut);
	    }
	    else {
	        return supportedWaapiEasing[easing];
	    }
	}

	function startWaapiAnimation(element, valueName, keyframes, { delay = 0, duration = 300, repeat = 0, repeatType = "loop", ease = "easeOut", times, } = {}, pseudoElement = undefined) {
	    const keyframeOptions = {
	        [valueName]: keyframes,
	    };
	    if (times)
	        keyframeOptions.offset = times;
	    const easing = mapEasingToNativeEasing(ease, duration);
	    /**
	     * If this is an easing array, apply to keyframes, not animation as a whole
	     */
	    if (Array.isArray(easing))
	        keyframeOptions.easing = easing;
	    const options = {
	        delay,
	        duration,
	        easing: !Array.isArray(easing) ? easing : "linear",
	        fill: "both",
	        iterations: repeat + 1,
	        direction: repeatType === "reverse" ? "alternate" : "normal",
	    };
	    if (pseudoElement)
	        options.pseudoElement = pseudoElement;
	    const animation = element.animate(keyframeOptions, options);
	    return animation;
	}

	function isGenerator(type) {
	    return typeof type === "function" && "applyToOptions" in type;
	}

	function applyGeneratorOptions({ type, ...options }) {
	    if (isGenerator(type) && supportsLinearEasing()) {
	        return type.applyToOptions(options);
	    }
	    else {
	        options.duration ?? (options.duration = 300);
	        options.ease ?? (options.ease = "easeOut");
	    }
	    return options;
	}

	/**
	 * NativeAnimation implements AnimationPlaybackControls for the browser's Web Animations API.
	 */
	class NativeAnimation extends WithPromise {
	    constructor(options) {
	        super();
	        this.finishedTime = null;
	        this.isStopped = false;
	        if (!options)
	            return;
	        const { element, name, keyframes, pseudoElement, allowFlatten = false, finalKeyframe, onComplete, } = options;
	        this.isPseudoElement = Boolean(pseudoElement);
	        this.allowFlatten = allowFlatten;
	        this.options = options;
	        invariant(typeof options.type !== "string");
	        const transition = applyGeneratorOptions(options);
	        this.animation = startWaapiAnimation(element, name, keyframes, transition, pseudoElement);
	        if (transition.autoplay === false) {
	            this.animation.pause();
	        }
	        this.animation.onfinish = () => {
	            this.finishedTime = this.time;
	            if (!pseudoElement) {
	                const keyframe = getFinalKeyframe$1(keyframes, this.options, finalKeyframe, this.speed);
	                if (this.updateMotionValue) {
	                    this.updateMotionValue(keyframe);
	                }
	                else {
	                    /**
	                     * If we can, we want to commit the final style as set by the user,
	                     * rather than the computed keyframe value supplied by the animation.
	                     */
	                    setStyle(element, name, keyframe);
	                }
	                this.animation.cancel();
	            }
	            onComplete?.();
	            this.notifyFinished();
	        };
	    }
	    play() {
	        if (this.isStopped)
	            return;
	        this.animation.play();
	        if (this.state === "finished") {
	            this.updateFinished();
	        }
	    }
	    pause() {
	        this.animation.pause();
	    }
	    complete() {
	        this.animation.finish?.();
	    }
	    cancel() {
	        try {
	            this.animation.cancel();
	        }
	        catch (e) { }
	    }
	    stop() {
	        if (this.isStopped)
	            return;
	        this.isStopped = true;
	        const { state } = this;
	        if (state === "idle" || state === "finished") {
	            return;
	        }
	        if (this.updateMotionValue) {
	            this.updateMotionValue();
	        }
	        else {
	            this.commitStyles();
	        }
	        if (!this.isPseudoElement)
	            this.cancel();
	    }
	    /**
	     * WAAPI doesn't natively have any interruption capabilities.
	     *
	     * In this method, we commit styles back to the DOM before cancelling
	     * the animation.
	     *
	     * This is designed to be overridden by NativeAnimationExtended, which
	     * will create a renderless JS animation and sample it twice to calculate
	     * its current value, "previous" value, and therefore allow
	     * Motion to also correctly calculate velocity for any subsequent animation
	     * while deferring the commit until the next animation frame.
	     */
	    commitStyles() {
	        if (!this.isPseudoElement) {
	            this.animation.commitStyles?.();
	        }
	    }
	    get duration() {
	        const duration = this.animation.effect?.getComputedTiming?.().duration || 0;
	        return millisecondsToSeconds(Number(duration));
	    }
	    get time() {
	        return millisecondsToSeconds(Number(this.animation.currentTime) || 0);
	    }
	    set time(newTime) {
	        this.finishedTime = null;
	        this.animation.currentTime = secondsToMilliseconds(newTime);
	    }
	    /**
	     * The playback speed of the animation.
	     * 1 = normal speed, 2 = double speed, 0.5 = half speed.
	     */
	    get speed() {
	        return this.animation.playbackRate;
	    }
	    set speed(newSpeed) {
	        // Allow backwards playback after finishing
	        if (newSpeed < 0)
	            this.finishedTime = null;
	        this.animation.playbackRate = newSpeed;
	    }
	    get state() {
	        return this.finishedTime !== null
	            ? "finished"
	            : this.animation.playState;
	    }
	    get startTime() {
	        return Number(this.animation.startTime);
	    }
	    set startTime(newStartTime) {
	        this.animation.startTime = newStartTime;
	    }
	    /**
	     * Attaches a timeline to the animation, for instance the `ScrollTimeline`.
	     */
	    attachTimeline({ timeline, observe }) {
	        if (this.allowFlatten) {
	            this.animation.effect?.updateTiming({ easing: "linear" });
	        }
	        this.animation.onfinish = null;
	        if (timeline && supportsScrollTimeline()) {
	            this.animation.timeline = timeline;
	            return noop;
	        }
	        else {
	            return observe(this);
	        }
	    }
	}

	const unsupportedEasingFunctions = {
	    anticipate,
	    backInOut,
	    circInOut,
	};
	function isUnsupportedEase(key) {
	    return key in unsupportedEasingFunctions;
	}
	function replaceStringEasing(transition) {
	    if (typeof transition.ease === "string" &&
	        isUnsupportedEase(transition.ease)) {
	        transition.ease = unsupportedEasingFunctions[transition.ease];
	    }
	}

	/**
	 * 10ms is chosen here as it strikes a balance between smooth
	 * results (more than one keyframe per frame at 60fps) and
	 * keyframe quantity.
	 */
	const sampleDelta = 10; //ms
	class NativeAnimationExtended extends NativeAnimation {
	    constructor(options) {
	        /**
	         * The base NativeAnimation function only supports a subset
	         * of Motion easings, and WAAPI also only supports some
	         * easing functions via string/cubic-bezier definitions.
	         *
	         * This function replaces those unsupported easing functions
	         * with a JS easing function. This will later get compiled
	         * to a linear() easing function.
	         */
	        replaceStringEasing(options);
	        /**
	         * Ensure we replace the transition type with a generator function
	         * before passing to WAAPI.
	         *
	         * TODO: Does this have a better home? It could be shared with
	         * JSAnimation.
	         */
	        replaceTransitionType(options);
	        super(options);
	        if (options.startTime) {
	            this.startTime = options.startTime;
	        }
	        this.options = options;
	    }
	    /**
	     * WAAPI doesn't natively have any interruption capabilities.
	     *
	     * Rather than read commited styles back out of the DOM, we can
	     * create a renderless JS animation and sample it twice to calculate
	     * its current value, "previous" value, and therefore allow
	     * Motion to calculate velocity for any subsequent animation.
	     */
	    updateMotionValue(value) {
	        const { motionValue, onUpdate, onComplete, element, ...options } = this.options;
	        if (!motionValue)
	            return;
	        if (value !== undefined) {
	            motionValue.set(value);
	            return;
	        }
	        const sampleAnimation = new JSAnimation({
	            ...options,
	            autoplay: false,
	        });
	        const sampleTime = secondsToMilliseconds(this.finishedTime ?? this.time);
	        motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);
	        sampleAnimation.stop();
	    }
	}

	/**
	 * Check if a value is animatable. Examples:
	 *
	 * ✅: 100, "100px", "#fff"
	 * ❌: "block", "url(2.jpg)"
	 * @param value
	 *
	 * @internal
	 */
	const isAnimatable = (value, name) => {
	    // If the list of keys tat might be non-animatable grows, replace with Set
	    if (name === "zIndex")
	        return false;
	    // If it's a number or a keyframes array, we can animate it. We might at some point
	    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,
	    // but for now lets leave it like this for performance reasons
	    if (typeof value === "number" || Array.isArray(value))
	        return true;
	    if (typeof value === "string" && // It's animatable if we have a string
	        (complex.test(value) || value === "0") && // And it contains numbers and/or colors
	        !value.startsWith("url(") // Unless it starts with "url("
	    ) {
	        return true;
	    }
	    return false;
	};

	function hasKeyframesChanged(keyframes) {
	    const current = keyframes[0];
	    if (keyframes.length === 1)
	        return true;
	    for (let i = 0; i < keyframes.length; i++) {
	        if (keyframes[i] !== current)
	            return true;
	    }
	}
	function canAnimate(keyframes, name, type, velocity) {
	    /**
	     * Check if we're able to animate between the start and end keyframes,
	     * and throw a warning if we're attempting to animate between one that's
	     * animatable and another that isn't.
	     */
	    const originKeyframe = keyframes[0];
	    if (originKeyframe === null)
	        return false;
	    /**
	     * These aren't traditionally animatable but we do support them.
	     * In future we could look into making this more generic or replacing
	     * this function with mix() === mixImmediate
	     */
	    if (name === "display" || name === "visibility")
	        return true;
	    const targetKeyframe = keyframes[keyframes.length - 1];
	    const isOriginAnimatable = isAnimatable(originKeyframe, name);
	    const isTargetAnimatable = isAnimatable(targetKeyframe, name);
	    // Always skip if any of these are true
	    if (!isOriginAnimatable || !isTargetAnimatable) {
	        return false;
	    }
	    return (hasKeyframesChanged(keyframes) ||
	        ((type === "spring" || isGenerator(type)) && velocity));
	}

	/**
	 * Checks if an element is an HTML element in a way
	 * that works across iframes
	 */
	function isHTMLElement(element) {
	    return isObject(element) && "offsetHeight" in element;
	}

	/**
	 * A list of values that can be hardware-accelerated.
	 */
	const acceleratedValues = new Set([
	    "opacity",
	    "clipPath",
	    "filter",
	    "transform",
	    // TODO: Could be re-enabled now we have support for linear() easing
	    // "background-color"
	]);
	const supportsWaapi = /*@__PURE__*/ memo(() => Object.hasOwnProperty.call(Element.prototype, "animate"));
	function supportsBrowserAnimation(options) {
	    const { motionValue, name, repeatDelay, repeatType, damping, type } = options;
	    if (!isHTMLElement(motionValue?.owner?.current)) {
	        return false;
	    }
	    const { onUpdate, transformTemplate } = motionValue.owner.getProps();
	    return (supportsWaapi() &&
	        name &&
	        acceleratedValues.has(name) &&
	        (name !== "transform" || !transformTemplate) &&
	        /**
	         * If we're outputting values to onUpdate then we can't use WAAPI as there's
	         * no way to read the value from WAAPI every frame.
	         */
	        !onUpdate &&
	        !repeatDelay &&
	        repeatType !== "mirror" &&
	        damping !== 0 &&
	        type !== "inertia");
	}

	/**
	 * Maximum time allowed between an animation being created and it being
	 * resolved for us to use the latter as the start time.
	 *
	 * This is to ensure that while we prefer to "start" an animation as soon
	 * as it's triggered, we also want to avoid a visual jump if there's a big delay
	 * between these two moments.
	 */
	const MAX_RESOLVE_DELAY = 40;
	class AsyncMotionValueAnimation extends WithPromise {
	    constructor({ autoplay = true, delay = 0, type = "keyframes", repeat = 0, repeatDelay = 0, repeatType = "loop", keyframes, name, motionValue, element, ...options }) {
	        super();
	        /**
	         * Bound to support return animation.stop pattern
	         */
	        this.stop = () => {
	            if (this._animation) {
	                this._animation.stop();
	                this.stopTimeline?.();
	            }
	            this.keyframeResolver?.cancel();
	        };
	        this.createdAt = time.now();
	        const optionsWithDefaults = {
	            autoplay,
	            delay,
	            type,
	            repeat,
	            repeatDelay,
	            repeatType,
	            name,
	            motionValue,
	            element,
	            ...options,
	        };
	        const KeyframeResolver$1 = element?.KeyframeResolver || KeyframeResolver;
	        this.keyframeResolver = new KeyframeResolver$1(keyframes, (resolvedKeyframes, finalKeyframe, forced) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe, optionsWithDefaults, !forced), name, motionValue, element);
	        this.keyframeResolver?.scheduleResolve();
	    }
	    onKeyframesResolved(keyframes, finalKeyframe, options, sync) {
	        this.keyframeResolver = undefined;
	        const { name, type, velocity, delay, isHandoff, onUpdate } = options;
	        this.resolvedAt = time.now();
	        /**
	         * If we can't animate this value with the resolved keyframes
	         * then we should complete it immediately.
	         */
	        if (!canAnimate(keyframes, name, type, velocity)) {
	            if (MotionGlobalConfig.instantAnimations || !delay) {
	                onUpdate?.(getFinalKeyframe$1(keyframes, options, finalKeyframe));
	            }
	            keyframes[0] = keyframes[keyframes.length - 1];
	            options.duration = 0;
	            options.repeat = 0;
	        }
	        /**
	         * Resolve startTime for the animation.
	         *
	         * This method uses the createdAt and resolvedAt to calculate the
	         * animation startTime. *Ideally*, we would use the createdAt time as t=0
	         * as the following frame would then be the first frame of the animation in
	         * progress, which would feel snappier.
	         *
	         * However, if there's a delay (main thread work) between the creation of
	         * the animation and the first commited frame, we prefer to use resolvedAt
	         * to avoid a sudden jump into the animation.
	         */
	        const startTime = sync
	            ? !this.resolvedAt
	                ? this.createdAt
	                : this.resolvedAt - this.createdAt > MAX_RESOLVE_DELAY
	                    ? this.resolvedAt
	                    : this.createdAt
	            : undefined;
	        const resolvedOptions = {
	            startTime,
	            finalKeyframe,
	            ...options,
	            keyframes,
	        };
	        /**
	         * Animate via WAAPI if possible. If this is a handoff animation, the optimised animation will be running via
	         * WAAPI. Therefore, this animation must be JS to ensure it runs "under" the
	         * optimised animation.
	         */
	        const animation = !isHandoff && supportsBrowserAnimation(resolvedOptions)
	            ? new NativeAnimationExtended({
	                ...resolvedOptions,
	                element: resolvedOptions.motionValue.owner.current,
	            })
	            : new JSAnimation(resolvedOptions);
	        animation.finished.then(() => this.notifyFinished()).catch(noop);
	        if (this.pendingTimeline) {
	            this.stopTimeline = animation.attachTimeline(this.pendingTimeline);
	            this.pendingTimeline = undefined;
	        }
	        this._animation = animation;
	    }
	    get finished() {
	        if (!this._animation) {
	            return this._finished;
	        }
	        else {
	            return this.animation.finished;
	        }
	    }
	    then(onResolve, _onReject) {
	        return this.finished.finally(onResolve).then(() => { });
	    }
	    get animation() {
	        if (!this._animation) {
	            this.keyframeResolver?.resume();
	            flushKeyframeResolvers();
	        }
	        return this._animation;
	    }
	    get duration() {
	        return this.animation.duration;
	    }
	    get time() {
	        return this.animation.time;
	    }
	    set time(newTime) {
	        this.animation.time = newTime;
	    }
	    get speed() {
	        return this.animation.speed;
	    }
	    get state() {
	        return this.animation.state;
	    }
	    set speed(newSpeed) {
	        this.animation.speed = newSpeed;
	    }
	    get startTime() {
	        return this.animation.startTime;
	    }
	    attachTimeline(timeline) {
	        if (this._animation) {
	            this.stopTimeline = this.animation.attachTimeline(timeline);
	        }
	        else {
	            this.pendingTimeline = timeline;
	        }
	        return () => this.stop();
	    }
	    play() {
	        this.animation.play();
	    }
	    pause() {
	        this.animation.pause();
	    }
	    complete() {
	        this.animation.complete();
	    }
	    cancel() {
	        if (this._animation) {
	            this.animation.cancel();
	        }
	        this.keyframeResolver?.cancel();
	    }
	}

	/**
	 * Parse Framer's special CSS variable format into a CSS token and a fallback.
	 *
	 * ```
	 * `var(--foo, #fff)` => [`--foo`, '#fff']
	 * ```
	 *
	 * @param current
	 */
	const splitCSSVariableRegex = 
	// eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words
	/^var\(--(?:([\w-]+)|([\w-]+), ?([a-zA-Z\d ()%#.,-]+))\)/u;
	function parseCSSVariable(current) {
	    const match = splitCSSVariableRegex.exec(current);
	    if (!match)
	        return [,];
	    const [, token1, token2, fallback] = match;
	    return [`--${token1 ?? token2}`, fallback];
	}
	function getVariableValue(current, element, depth = 1) {
	    const [token, fallback] = parseCSSVariable(current);
	    // No CSS variable detected
	    if (!token)
	        return;
	    // Attempt to read this CSS variable off the element
	    const resolved = window.getComputedStyle(element).getPropertyValue(token);
	    if (resolved) {
	        const trimmed = resolved.trim();
	        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;
	    }
	    return isCSSVariableToken(fallback)
	        ? getVariableValue(fallback, element, depth + 1)
	        : fallback;
	}

	function getValueTransition(transition, key) {
	    return (transition?.[key] ??
	        transition?.["default"] ??
	        transition);
	}

	const positionalKeys = new Set([
	    "width",
	    "height",
	    "top",
	    "left",
	    "right",
	    "bottom",
	    ...transformPropOrder,
	]);

	/**
	 * ValueType for "auto"
	 */
	const auto = {
	    test: (v) => v === "auto",
	    parse: (v) => v,
	};

	/**
	 * Tests a provided value against a ValueType
	 */
	const testValueType = (v) => (type) => type.test(v);

	/**
	 * A list of value types commonly used for dimensions
	 */
	const dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];
	/**
	 * Tests a dimensional value against the list of dimension ValueTypes
	 */
	const findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));

	function isNone(value) {
	    if (typeof value === "number") {
	        return value === 0;
	    }
	    else if (value !== null) {
	        return value === "none" || value === "0" || isZeroValueString(value);
	    }
	    else {
	        return true;
	    }
	}

	/**
	 * Properties that should default to 1 or 100%
	 */
	const maxDefaults = new Set(["brightness", "contrast", "saturate", "opacity"]);
	function applyDefaultFilter(v) {
	    const [name, value] = v.slice(0, -1).split("(");
	    if (name === "drop-shadow")
	        return v;
	    const [number] = value.match(floatRegex) || [];
	    if (!number)
	        return v;
	    const unit = value.replace(number, "");
	    let defaultValue = maxDefaults.has(name) ? 1 : 0;
	    if (number !== value)
	        defaultValue *= 100;
	    return name + "(" + defaultValue + unit + ")";
	}
	const functionRegex = /\b([a-z-]*)\(.*?\)/gu;
	const filter = {
	    ...complex,
	    getAnimatableNone: (v) => {
	        const functions = v.match(functionRegex);
	        return functions ? functions.map(applyDefaultFilter).join(" ") : v;
	    },
	};

	const int = {
	    ...number,
	    transform: Math.round,
	};

	const transformValueTypes = {
	    rotate: degrees,
	    rotateX: degrees,
	    rotateY: degrees,
	    rotateZ: degrees,
	    scale,
	    scaleX: scale,
	    scaleY: scale,
	    scaleZ: scale,
	    skew: degrees,
	    skewX: degrees,
	    skewY: degrees,
	    distance: px,
	    translateX: px,
	    translateY: px,
	    translateZ: px,
	    x: px,
	    y: px,
	    z: px,
	    perspective: px,
	    transformPerspective: px,
	    opacity: alpha,
	    originX: progressPercentage,
	    originY: progressPercentage,
	    originZ: px,
	};

	const numberValueTypes = {
	    // Border props
	    borderWidth: px,
	    borderTopWidth: px,
	    borderRightWidth: px,
	    borderBottomWidth: px,
	    borderLeftWidth: px,
	    borderRadius: px,
	    radius: px,
	    borderTopLeftRadius: px,
	    borderTopRightRadius: px,
	    borderBottomRightRadius: px,
	    borderBottomLeftRadius: px,
	    // Positioning props
	    width: px,
	    maxWidth: px,
	    height: px,
	    maxHeight: px,
	    top: px,
	    right: px,
	    bottom: px,
	    left: px,
	    // Spacing props
	    padding: px,
	    paddingTop: px,
	    paddingRight: px,
	    paddingBottom: px,
	    paddingLeft: px,
	    margin: px,
	    marginTop: px,
	    marginRight: px,
	    marginBottom: px,
	    marginLeft: px,
	    // Misc
	    backgroundPositionX: px,
	    backgroundPositionY: px,
	    ...transformValueTypes,
	    zIndex: int,
	    // SVG
	    fillOpacity: alpha,
	    strokeOpacity: alpha,
	    numOctaves: int,
	};

	/**
	 * A map of default value types for common values
	 */
	const defaultValueTypes = {
	    ...numberValueTypes,
	    // Color props
	    color,
	    backgroundColor: color,
	    outlineColor: color,
	    fill: color,
	    stroke: color,
	    // Border props
	    borderColor: color,
	    borderTopColor: color,
	    borderRightColor: color,
	    borderBottomColor: color,
	    borderLeftColor: color,
	    filter,
	    WebkitFilter: filter,
	};
	/**
	 * Gets the default ValueType for the provided value key
	 */
	const getDefaultValueType = (key) => defaultValueTypes[key];

	function getAnimatableNone(key, value) {
	    let defaultValueType = getDefaultValueType(key);
	    if (defaultValueType !== filter)
	        defaultValueType = complex;
	    // If value is not recognised as animatable, ie "none", create an animatable version origin based on the target
	    return defaultValueType.getAnimatableNone
	        ? defaultValueType.getAnimatableNone(value)
	        : undefined;
	}

	/**
	 * If we encounter keyframes like "none" or "0" and we also have keyframes like
	 * "#fff" or "200px 200px" we want to find a keyframe to serve as a template for
	 * the "none" keyframes. In this case "#fff" or "200px 200px" - then these get turned into
	 * zero equivalents, i.e. "#fff0" or "0px 0px".
	 */
	const invalidTemplates = new Set(["auto", "none", "0"]);
	function makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name) {
	    let i = 0;
	    let animatableTemplate = undefined;
	    while (i < unresolvedKeyframes.length && !animatableTemplate) {
	        const keyframe = unresolvedKeyframes[i];
	        if (typeof keyframe === "string" &&
	            !invalidTemplates.has(keyframe) &&
	            analyseComplexValue(keyframe).values.length) {
	            animatableTemplate = unresolvedKeyframes[i];
	        }
	        i++;
	    }
	    if (animatableTemplate && name) {
	        for (const noneIndex of noneKeyframeIndexes) {
	            unresolvedKeyframes[noneIndex] = getAnimatableNone(name, animatableTemplate);
	        }
	    }
	}

	class DOMKeyframesResolver extends KeyframeResolver {
	    constructor(unresolvedKeyframes, onComplete, name, motionValue, element) {
	        super(unresolvedKeyframes, onComplete, name, motionValue, element, true);
	    }
	    readKeyframes() {
	        const { unresolvedKeyframes, element, name } = this;
	        if (!element || !element.current)
	            return;
	        super.readKeyframes();
	        /**
	         * If any keyframe is a CSS variable, we need to find its value by sampling the element
	         */
	        for (let i = 0; i < unresolvedKeyframes.length; i++) {
	            let keyframe = unresolvedKeyframes[i];
	            if (typeof keyframe === "string") {
	                keyframe = keyframe.trim();
	                if (isCSSVariableToken(keyframe)) {
	                    const resolved = getVariableValue(keyframe, element.current);
	                    if (resolved !== undefined) {
	                        unresolvedKeyframes[i] = resolved;
	                    }
	                    if (i === unresolvedKeyframes.length - 1) {
	                        this.finalKeyframe = keyframe;
	                    }
	                }
	            }
	        }
	        /**
	         * Resolve "none" values. We do this potentially twice - once before and once after measuring keyframes.
	         * This could be seen as inefficient but it's a trade-off to avoid measurements in more situations, which
	         * have a far bigger performance impact.
	         */
	        this.resolveNoneKeyframes();
	        /**
	         * Check to see if unit type has changed. If so schedule jobs that will
	         * temporarily set styles to the destination keyframes.
	         * Skip if we have more than two keyframes or this isn't a positional value.
	         * TODO: We can throw if there are multiple keyframes and the value type changes.
	         */
	        if (!positionalKeys.has(name) || unresolvedKeyframes.length !== 2) {
	            return;
	        }
	        const [origin, target] = unresolvedKeyframes;
	        const originType = findDimensionValueType(origin);
	        const targetType = findDimensionValueType(target);
	        /**
	         * Either we don't recognise these value types or we can animate between them.
	         */
	        if (originType === targetType)
	            return;
	        /**
	         * If both values are numbers or pixels, we can animate between them by
	         * converting them to numbers.
	         */
	        if (isNumOrPxType(originType) && isNumOrPxType(targetType)) {
	            for (let i = 0; i < unresolvedKeyframes.length; i++) {
	                const value = unresolvedKeyframes[i];
	                if (typeof value === "string") {
	                    unresolvedKeyframes[i] = parseFloat(value);
	                }
	            }
	        }
	        else if (positionalValues[name]) {
	            /**
	             * Else, the only way to resolve this is by measuring the element.
	             */
	            this.needsMeasurement = true;
	        }
	    }
	    resolveNoneKeyframes() {
	        const { unresolvedKeyframes, name } = this;
	        const noneKeyframeIndexes = [];
	        for (let i = 0; i < unresolvedKeyframes.length; i++) {
	            if (unresolvedKeyframes[i] === null ||
	                isNone(unresolvedKeyframes[i])) {
	                noneKeyframeIndexes.push(i);
	            }
	        }
	        if (noneKeyframeIndexes.length) {
	            makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name);
	        }
	    }
	    measureInitialState() {
	        const { element, unresolvedKeyframes, name } = this;
	        if (!element || !element.current)
	            return;
	        if (name === "height") {
	            this.suspendedScrollY = window.pageYOffset;
	        }
	        this.measuredOrigin = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));
	        unresolvedKeyframes[0] = this.measuredOrigin;
	        // Set final key frame to measure after next render
	        const measureKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];
	        if (measureKeyframe !== undefined) {
	            element.getValue(name, measureKeyframe).jump(measureKeyframe, false);
	        }
	    }
	    measureEndState() {
	        const { element, name, unresolvedKeyframes } = this;
	        if (!element || !element.current)
	            return;
	        const value = element.getValue(name);
	        value && value.jump(this.measuredOrigin, false);
	        const finalKeyframeIndex = unresolvedKeyframes.length - 1;
	        const finalKeyframe = unresolvedKeyframes[finalKeyframeIndex];
	        unresolvedKeyframes[finalKeyframeIndex] = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));
	        if (finalKeyframe !== null && this.finalKeyframe === undefined) {
	            this.finalKeyframe = finalKeyframe;
	        }
	        // If we removed transform values, reapply them before the next render
	        if (this.removedTransforms?.length) {
	            this.removedTransforms.forEach(([unsetTransformName, unsetTransformValue]) => {
	                element
	                    .getValue(unsetTransformName)
	                    .set(unsetTransformValue);
	            });
	        }
	        this.resolveNoneKeyframes();
	    }
	}

	function resolveElements(elementOrSelector, scope, selectorCache) {
	    if (elementOrSelector instanceof EventTarget) {
	        return [elementOrSelector];
	    }
	    else if (typeof elementOrSelector === "string") {
	        let root = document;
	        const elements = selectorCache?.[elementOrSelector] ??
	            root.querySelectorAll(elementOrSelector);
	        return elements ? Array.from(elements) : [];
	    }
	    return Array.from(elementOrSelector);
	}

	/**
	 * Provided a value and a ValueType, returns the value as that value type.
	 */
	const getValueAsType = (value, type) => {
	    return type && typeof value === "number"
	        ? type.transform(value)
	        : value;
	};

	/**
	 * Maximum time between the value of two frames, beyond which we
	 * assume the velocity has since been 0.
	 */
	const MAX_VELOCITY_DELTA = 30;
	const isFloat = (value) => {
	    return !isNaN(parseFloat(value));
	};
	/**
	 * `MotionValue` is used to track the state and velocity of motion values.
	 *
	 * @public
	 */
	class MotionValue {
	    /**
	     * @param init - The initiating value
	     * @param config - Optional configuration options
	     *
	     * -  `transformer`: A function to transform incoming values with.
	     */
	    constructor(init, options = {}) {
	        /**
	         * Tracks whether this value can output a velocity. Currently this is only true
	         * if the value is numerical, but we might be able to widen the scope here and support
	         * other value types.
	         *
	         * @internal
	         */
	        this.canTrackVelocity = null;
	        /**
	         * An object containing a SubscriptionManager for each active event.
	         */
	        this.events = {};
	        this.updateAndNotify = (v, render = true) => {
	            const currentTime = time.now();
	            /**
	             * If we're updating the value during another frame or eventloop
	             * than the previous frame, then the we set the previous frame value
	             * to current.
	             */
	            if (this.updatedAt !== currentTime) {
	                this.setPrevFrameValue();
	            }
	            this.prev = this.current;
	            this.setCurrent(v);
	            // Update update subscribers
	            if (this.current !== this.prev) {
	                this.events.change?.notify(this.current);
	                if (this.dependents) {
	                    for (const dependent of this.dependents) {
	                        dependent.dirty();
	                    }
	                }
	            }
	            // Update render subscribers
	            if (render) {
	                this.events.renderRequest?.notify(this.current);
	            }
	        };
	        this.hasAnimated = false;
	        this.setCurrent(init);
	        this.owner = options.owner;
	    }
	    setCurrent(current) {
	        this.current = current;
	        this.updatedAt = time.now();
	        if (this.canTrackVelocity === null && current !== undefined) {
	            this.canTrackVelocity = isFloat(this.current);
	        }
	    }
	    setPrevFrameValue(prevFrameValue = this.current) {
	        this.prevFrameValue = prevFrameValue;
	        this.prevUpdatedAt = this.updatedAt;
	    }
	    /**
	     * Adds a function that will be notified when the `MotionValue` is updated.
	     *
	     * It returns a function that, when called, will cancel the subscription.
	     *
	     * When calling `onChange` inside a React component, it should be wrapped with the
	     * `useEffect` hook. As it returns an unsubscribe function, this should be returned
	     * from the `useEffect` function to ensure you don't add duplicate subscribers..
	     *
	     * ```jsx
	     * export const MyComponent = () => {
	     *   const x = useMotionValue(0)
	     *   const y = useMotionValue(0)
	     *   const opacity = useMotionValue(1)
	     *
	     *   useEffect(() => {
	     *     function updateOpacity() {
	     *       const maxXY = Math.max(x.get(), y.get())
	     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
	     *       opacity.set(newOpacity)
	     *     }
	     *
	     *     const unsubscribeX = x.on("change", updateOpacity)
	     *     const unsubscribeY = y.on("change", updateOpacity)
	     *
	     *     return () => {
	     *       unsubscribeX()
	     *       unsubscribeY()
	     *     }
	     *   }, [])
	     *
	     *   return <motion.div style={{ x }} />
	     * }
	     * ```
	     *
	     * @param subscriber - A function that receives the latest value.
	     * @returns A function that, when called, will cancel this subscription.
	     *
	     * @deprecated
	     */
	    onChange(subscription) {
	        return this.on("change", subscription);
	    }
	    on(eventName, callback) {
	        if (!this.events[eventName]) {
	            this.events[eventName] = new SubscriptionManager();
	        }
	        const unsubscribe = this.events[eventName].add(callback);
	        if (eventName === "change") {
	            return () => {
	                unsubscribe();
	                /**
	                 * If we have no more change listeners by the start
	                 * of the next frame, stop active animations.
	                 */
	                frame.read(() => {
	                    if (!this.events.change.getSize()) {
	                        this.stop();
	                    }
	                });
	            };
	        }
	        return unsubscribe;
	    }
	    clearListeners() {
	        for (const eventManagers in this.events) {
	            this.events[eventManagers].clear();
	        }
	    }
	    /**
	     * Attaches a passive effect to the `MotionValue`.
	     */
	    attach(passiveEffect, stopPassiveEffect) {
	        this.passiveEffect = passiveEffect;
	        this.stopPassiveEffect = stopPassiveEffect;
	    }
	    /**
	     * Sets the state of the `MotionValue`.
	     *
	     * @remarks
	     *
	     * ```jsx
	     * const x = useMotionValue(0)
	     * x.set(10)
	     * ```
	     *
	     * @param latest - Latest value to set.
	     * @param render - Whether to notify render subscribers. Defaults to `true`
	     *
	     * @public
	     */
	    set(v, render = true) {
	        if (!render || !this.passiveEffect) {
	            this.updateAndNotify(v, render);
	        }
	        else {
	            this.passiveEffect(v, this.updateAndNotify);
	        }
	    }
	    setWithVelocity(prev, current, delta) {
	        this.set(current);
	        this.prev = undefined;
	        this.prevFrameValue = prev;
	        this.prevUpdatedAt = this.updatedAt - delta;
	    }
	    /**
	     * Set the state of the `MotionValue`, stopping any active animations,
	     * effects, and resets velocity to `0`.
	     */
	    jump(v, endAnimation = true) {
	        this.updateAndNotify(v);
	        this.prev = v;
	        this.prevUpdatedAt = this.prevFrameValue = undefined;
	        endAnimation && this.stop();
	        if (this.stopPassiveEffect)
	            this.stopPassiveEffect();
	    }
	    dirty() {
	        this.events.change?.notify(this.current);
	    }
	    addDependent(dependent) {
	        if (!this.dependents) {
	            this.dependents = new Set();
	        }
	        this.dependents.add(dependent);
	    }
	    removeDependent(dependent) {
	        if (this.dependents) {
	            this.dependents.delete(dependent);
	        }
	    }
	    /**
	     * Returns the latest state of `MotionValue`
	     *
	     * @returns - The latest state of `MotionValue`
	     *
	     * @public
	     */
	    get() {
	        return this.current;
	    }
	    /**
	     * @public
	     */
	    getPrevious() {
	        return this.prev;
	    }
	    /**
	     * Returns the latest velocity of `MotionValue`
	     *
	     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
	     *
	     * @public
	     */
	    getVelocity() {
	        const currentTime = time.now();
	        if (!this.canTrackVelocity ||
	            this.prevFrameValue === undefined ||
	            currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {
	            return 0;
	        }
	        const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);
	        // Casts because of parseFloat's poor typing
	        return velocityPerSecond(parseFloat(this.current) -
	            parseFloat(this.prevFrameValue), delta);
	    }
	    /**
	     * Registers a new animation to control this `MotionValue`. Only one
	     * animation can drive a `MotionValue` at one time.
	     *
	     * ```jsx
	     * value.start()
	     * ```
	     *
	     * @param animation - A function that starts the provided animation
	     */
	    start(startAnimation) {
	        this.stop();
	        return new Promise((resolve) => {
	            this.hasAnimated = true;
	            this.animation = startAnimation(resolve);
	            if (this.events.animationStart) {
	                this.events.animationStart.notify();
	            }
	        }).then(() => {
	            if (this.events.animationComplete) {
	                this.events.animationComplete.notify();
	            }
	            this.clearAnimation();
	        });
	    }
	    /**
	     * Stop the currently active animation.
	     *
	     * @public
	     */
	    stop() {
	        if (this.animation) {
	            this.animation.stop();
	            if (this.events.animationCancel) {
	                this.events.animationCancel.notify();
	            }
	        }
	        this.clearAnimation();
	    }
	    /**
	     * Returns `true` if this value is currently animating.
	     *
	     * @public
	     */
	    isAnimating() {
	        return !!this.animation;
	    }
	    clearAnimation() {
	        delete this.animation;
	    }
	    /**
	     * Destroy and clean up subscribers to this `MotionValue`.
	     *
	     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
	     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
	     * created a `MotionValue` via the `motionValue` function.
	     *
	     * @public
	     */
	    destroy() {
	        this.dependents?.clear();
	        this.events.destroy?.notify();
	        this.clearListeners();
	        this.stop();
	        if (this.stopPassiveEffect) {
	            this.stopPassiveEffect();
	        }
	    }
	}
	function motionValue(init, options) {
	    return new MotionValue(init, options);
	}

	const { schedule: microtask} = 
	/* @__PURE__ */ createRenderBatcher(queueMicrotask, false);

	const isDragging = {
	    x: false,
	    y: false,
	};
	function isDragActive() {
	    return isDragging.x || isDragging.y;
	}

	function setDragLock(axis) {
	    if (axis === "x" || axis === "y") {
	        if (isDragging[axis]) {
	            return null;
	        }
	        else {
	            isDragging[axis] = true;
	            return () => {
	                isDragging[axis] = false;
	            };
	        }
	    }
	    else {
	        if (isDragging.x || isDragging.y) {
	            return null;
	        }
	        else {
	            isDragging.x = isDragging.y = true;
	            return () => {
	                isDragging.x = isDragging.y = false;
	            };
	        }
	    }
	}

	function setupGesture(elementOrSelector, options) {
	    const elements = resolveElements(elementOrSelector);
	    const gestureAbortController = new AbortController();
	    const eventOptions = {
	        passive: true,
	        ...options,
	        signal: gestureAbortController.signal,
	    };
	    const cancel = () => gestureAbortController.abort();
	    return [elements, eventOptions, cancel];
	}

	function isValidHover(event) {
	    return !(event.pointerType === "touch" || isDragActive());
	}
	/**
	 * Create a hover gesture. hover() is different to .addEventListener("pointerenter")
	 * in that it has an easier syntax, filters out polyfilled touch events, interoperates
	 * with drag gestures, and automatically removes the "pointerennd" event listener when the hover ends.
	 *
	 * @public
	 */
	function hover(elementOrSelector, onHoverStart, options = {}) {
	    const [elements, eventOptions, cancel] = setupGesture(elementOrSelector, options);
	    const onPointerEnter = (enterEvent) => {
	        if (!isValidHover(enterEvent))
	            return;
	        const { target } = enterEvent;
	        const onHoverEnd = onHoverStart(target, enterEvent);
	        if (typeof onHoverEnd !== "function" || !target)
	            return;
	        const onPointerLeave = (leaveEvent) => {
	            if (!isValidHover(leaveEvent))
	                return;
	            onHoverEnd(leaveEvent);
	            target.removeEventListener("pointerleave", onPointerLeave);
	        };
	        target.addEventListener("pointerleave", onPointerLeave, eventOptions);
	    };
	    elements.forEach((element) => {
	        element.addEventListener("pointerenter", onPointerEnter, eventOptions);
	    });
	    return cancel;
	}

	/**
	 * Recursively traverse up the tree to check whether the provided child node
	 * is the parent or a descendant of it.
	 *
	 * @param parent - Element to find
	 * @param child - Element to test against parent
	 */
	const isNodeOrChild = (parent, child) => {
	    if (!child) {
	        return false;
	    }
	    else if (parent === child) {
	        return true;
	    }
	    else {
	        return isNodeOrChild(parent, child.parentElement);
	    }
	};

	const isPrimaryPointer = (event) => {
	    if (event.pointerType === "mouse") {
	        return typeof event.button !== "number" || event.button <= 0;
	    }
	    else {
	        /**
	         * isPrimary is true for all mice buttons, whereas every touch point
	         * is regarded as its own input. So subsequent concurrent touch points
	         * will be false.
	         *
	         * Specifically match against false here as incomplete versions of
	         * PointerEvents in very old browser might have it set as undefined.
	         */
	        return event.isPrimary !== false;
	    }
	};

	const focusableElements = new Set([
	    "BUTTON",
	    "INPUT",
	    "SELECT",
	    "TEXTAREA",
	    "A",
	]);
	function isElementKeyboardAccessible(element) {
	    return (focusableElements.has(element.tagName) ||
	        element.tabIndex !== -1);
	}

	const isPressing = new WeakSet();

	/**
	 * Filter out events that are not "Enter" keys.
	 */
	function filterEvents(callback) {
	    return (event) => {
	        if (event.key !== "Enter")
	            return;
	        callback(event);
	    };
	}
	function firePointerEvent(target, type) {
	    target.dispatchEvent(new PointerEvent("pointer" + type, { isPrimary: true, bubbles: true }));
	}
	const enableKeyboardPress = (focusEvent, eventOptions) => {
	    const element = focusEvent.currentTarget;
	    if (!element)
	        return;
	    const handleKeydown = filterEvents(() => {
	        if (isPressing.has(element))
	            return;
	        firePointerEvent(element, "down");
	        const handleKeyup = filterEvents(() => {
	            firePointerEvent(element, "up");
	        });
	        const handleBlur = () => firePointerEvent(element, "cancel");
	        element.addEventListener("keyup", handleKeyup, eventOptions);
	        element.addEventListener("blur", handleBlur, eventOptions);
	    });
	    element.addEventListener("keydown", handleKeydown, eventOptions);
	    /**
	     * Add an event listener that fires on blur to remove the keydown events.
	     */
	    element.addEventListener("blur", () => element.removeEventListener("keydown", handleKeydown), eventOptions);
	};

	/**
	 * Filter out events that are not primary pointer events, or are triggering
	 * while a Motion gesture is active.
	 */
	function isValidPressEvent(event) {
	    return isPrimaryPointer(event) && !isDragActive();
	}
	/**
	 * Create a press gesture.
	 *
	 * Press is different to `"pointerdown"`, `"pointerup"` in that it
	 * automatically filters out secondary pointer events like right
	 * click and multitouch.
	 *
	 * It also adds accessibility support for keyboards, where
	 * an element with a press gesture will receive focus and
	 *  trigger on Enter `"keydown"` and `"keyup"` events.
	 *
	 * This is different to a browser's `"click"` event, which does
	 * respond to keyboards but only for the `"click"` itself, rather
	 * than the press start and end/cancel. The element also needs
	 * to be focusable for this to work, whereas a press gesture will
	 * make an element focusable by default.
	 *
	 * @public
	 */
	function press(targetOrSelector, onPressStart, options = {}) {
	    const [targets, eventOptions, cancelEvents] = setupGesture(targetOrSelector, options);
	    const startPress = (startEvent) => {
	        const target = startEvent.currentTarget;
	        if (!isValidPressEvent(startEvent))
	            return;
	        isPressing.add(target);
	        const onPressEnd = onPressStart(target, startEvent);
	        const onPointerEnd = (endEvent, success) => {
	            window.removeEventListener("pointerup", onPointerUp);
	            window.removeEventListener("pointercancel", onPointerCancel);
	            if (isPressing.has(target)) {
	                isPressing.delete(target);
	            }
	            if (!isValidPressEvent(endEvent)) {
	                return;
	            }
	            if (typeof onPressEnd === "function") {
	                onPressEnd(endEvent, { success });
	            }
	        };
	        const onPointerUp = (upEvent) => {
	            onPointerEnd(upEvent, target === window ||
	                target === document ||
	                options.useGlobalTarget ||
	                isNodeOrChild(target, upEvent.target));
	        };
	        const onPointerCancel = (cancelEvent) => {
	            onPointerEnd(cancelEvent, false);
	        };
	        window.addEventListener("pointerup", onPointerUp, eventOptions);
	        window.addEventListener("pointercancel", onPointerCancel, eventOptions);
	    };
	    targets.forEach((target) => {
	        const pointerDownTarget = options.useGlobalTarget ? window : target;
	        pointerDownTarget.addEventListener("pointerdown", startPress, eventOptions);
	        if (isHTMLElement(target)) {
	            target.addEventListener("focus", (event) => enableKeyboardPress(event, eventOptions));
	            if (!isElementKeyboardAccessible(target) &&
	                !target.hasAttribute("tabindex")) {
	                target.tabIndex = 0;
	            }
	        }
	    });
	    return cancelEvents;
	}

	/**
	 * Checks if an element is an SVG element in a way
	 * that works across iframes
	 */
	function isSVGElement(element) {
	    return isObject(element) && "ownerSVGElement" in element;
	}

	/**
	 * Checks if an element is specifically an SVGSVGElement (the root SVG element)
	 * in a way that works across iframes
	 */
	function isSVGSVGElement(element) {
	    return isSVGElement(element) && element.tagName === "svg";
	}

	const isMotionValue = (value) => Boolean(value && value.getVelocity);

	/**
	 * A list of all ValueTypes
	 */
	const valueTypes = [...dimensionValueTypes, color, complex];
	/**
	 * Tests a value against the list of ValueTypes
	 */
	const findValueType = (v) => valueTypes.find(testValueType(v));

	/**
	 * @public
	 */
	const MotionConfigContext = reactExports.createContext({
	    transformPagePoint: (p) => p,
	    isStatic: false,
	    reducedMotion: "never",
	});

	/**
	 * Measurement functionality has to be within a separate component
	 * to leverage snapshot lifecycle.
	 */
	class PopChildMeasure extends reactExports.Component {
	    getSnapshotBeforeUpdate(prevProps) {
	        const element = this.props.childRef.current;
	        if (element && prevProps.isPresent && !this.props.isPresent) {
	            const parent = element.offsetParent;
	            const parentWidth = isHTMLElement(parent)
	                ? parent.offsetWidth || 0
	                : 0;
	            const size = this.props.sizeRef.current;
	            size.height = element.offsetHeight || 0;
	            size.width = element.offsetWidth || 0;
	            size.top = element.offsetTop;
	            size.left = element.offsetLeft;
	            size.right = parentWidth - size.width - size.left;
	        }
	        return null;
	    }
	    /**
	     * Required with getSnapshotBeforeUpdate to stop React complaining.
	     */
	    componentDidUpdate() { }
	    render() {
	        return this.props.children;
	    }
	}
	function PopChild({ children, isPresent, anchorX }) {
	    const id = reactExports.useId();
	    const ref = reactExports.useRef(null);
	    const size = reactExports.useRef({
	        width: 0,
	        height: 0,
	        top: 0,
	        left: 0,
	        right: 0,
	    });
	    const { nonce } = reactExports.useContext(MotionConfigContext);
	    /**
	     * We create and inject a style block so we can apply this explicit
	     * sizing in a non-destructive manner by just deleting the style block.
	     *
	     * We can't apply size via render as the measurement happens
	     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the
	     * styles directly on the DOM node, we might be overwriting
	     * styles set via the style prop.
	     */
	    reactExports.useInsertionEffect(() => {
	        const { width, height, top, left, right } = size.current;
	        if (isPresent || !ref.current || !width || !height)
	            return;
	        const x = anchorX === "left" ? `left: ${left}` : `right: ${right}`;
	        ref.current.dataset.motionPopId = id;
	        const style = document.createElement("style");
	        if (nonce)
	            style.nonce = nonce;
	        document.head.appendChild(style);
	        if (style.sheet) {
	            style.sheet.insertRule(`
          [data-motion-pop-id="${id}"] {
            position: absolute !important;
            width: ${width}px !important;
            height: ${height}px !important;
            ${x}px !important;
            top: ${top}px !important;
          }
        `);
	        }
	        return () => {
	            if (document.head.contains(style)) {
	                document.head.removeChild(style);
	            }
	        };
	    }, [isPresent]);
	    return (jsxRuntimeExports.jsx(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size, children: reactExports.cloneElement(children, { ref }) }));
	}

	const PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, anchorX, }) => {
	    const presenceChildren = useConstant(newChildrenMap);
	    const id = reactExports.useId();
	    let isReusedContext = true;
	    let context = reactExports.useMemo(() => {
	        isReusedContext = false;
	        return {
	            id,
	            initial,
	            isPresent,
	            custom,
	            onExitComplete: (childId) => {
	                presenceChildren.set(childId, true);
	                for (const isComplete of presenceChildren.values()) {
	                    if (!isComplete)
	                        return; // can stop searching when any is incomplete
	                }
	                onExitComplete && onExitComplete();
	            },
	            register: (childId) => {
	                presenceChildren.set(childId, false);
	                return () => presenceChildren.delete(childId);
	            },
	        };
	    }, [isPresent, presenceChildren, onExitComplete]);
	    /**
	     * If the presence of a child affects the layout of the components around it,
	     * we want to make a new context value to ensure they get re-rendered
	     * so they can detect that layout change.
	     */
	    if (presenceAffectsLayout && isReusedContext) {
	        context = { ...context };
	    }
	    reactExports.useMemo(() => {
	        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));
	    }, [isPresent]);
	    /**
	     * If there's no `motion` components to fire exit animations, we want to remove this
	     * component immediately.
	     */
	    reactExports.useEffect(() => {
	        !isPresent &&
	            !presenceChildren.size &&
	            onExitComplete &&
	            onExitComplete();
	    }, [isPresent]);
	    if (mode === "popLayout") {
	        children = (jsxRuntimeExports.jsx(PopChild, { isPresent: isPresent, anchorX: anchorX, children: children }));
	    }
	    return (jsxRuntimeExports.jsx(PresenceContext.Provider, { value: context, children: children }));
	};
	function newChildrenMap() {
	    return new Map();
	}

	/**
	 * When a component is the child of `AnimatePresence`, it can use `usePresence`
	 * to access information about whether it's still present in the React tree.
	 *
	 * ```jsx
	 * import { usePresence } from "framer-motion"
	 *
	 * export const Component = () => {
	 *   const [isPresent, safeToRemove] = usePresence()
	 *
	 *   useEffect(() => {
	 *     !isPresent && setTimeout(safeToRemove, 1000)
	 *   }, [isPresent])
	 *
	 *   return <div />
	 * }
	 * ```
	 *
	 * If `isPresent` is `false`, it means that a component has been removed the tree, but
	 * `AnimatePresence` won't really remove it until `safeToRemove` has been called.
	 *
	 * @public
	 */
	function usePresence(subscribe = true) {
	    const context = reactExports.useContext(PresenceContext);
	    if (context === null)
	        return [true, null];
	    const { isPresent, onExitComplete, register } = context;
	    // It's safe to call the following hooks conditionally (after an early return) because the context will always
	    // either be null or non-null for the lifespan of the component.
	    const id = reactExports.useId();
	    reactExports.useEffect(() => {
	        if (subscribe) {
	            return register(id);
	        }
	    }, [subscribe]);
	    const safeToRemove = reactExports.useCallback(() => subscribe && onExitComplete && onExitComplete(id), [id, onExitComplete, subscribe]);
	    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];
	}
	/**
	 * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.
	 * There is no `safeToRemove` function.
	 *
	 * ```jsx
	 * import { useIsPresent } from "framer-motion"
	 *
	 * export const Component = () => {
	 *   const isPresent = useIsPresent()
	 *
	 *   useEffect(() => {
	 *     !isPresent && console.log("I've been removed!")
	 *   }, [isPresent])
	 *
	 *   return <div />
	 * }
	 * ```
	 *
	 * @public
	 */
	function useIsPresent() {
	    return isPresent(reactExports.useContext(PresenceContext));
	}
	function isPresent(context) {
	    return context === null ? true : context.isPresent;
	}

	const getChildKey = (child) => child.key || "";
	function onlyElements(children) {
	    const filtered = [];
	    // We use forEach here instead of map as map mutates the component key by preprending `.$`
	    reactExports.Children.forEach(children, (child) => {
	        if (reactExports.isValidElement(child))
	            filtered.push(child);
	    });
	    return filtered;
	}

	/**
	 * `AnimatePresence` enables the animation of components that have been removed from the tree.
	 *
	 * When adding/removing more than a single child, every child **must** be given a unique `key` prop.
	 *
	 * Any `motion` components that have an `exit` property defined will animate out when removed from
	 * the tree.
	 *
	 * ```jsx
	 * import { motion, AnimatePresence } from 'framer-motion'
	 *
	 * export const Items = ({ items }) => (
	 *   <AnimatePresence>
	 *     {items.map(item => (
	 *       <motion.div
	 *         key={item.id}
	 *         initial={{ opacity: 0 }}
	 *         animate={{ opacity: 1 }}
	 *         exit={{ opacity: 0 }}
	 *       />
	 *     ))}
	 *   </AnimatePresence>
	 * )
	 * ```
	 *
	 * You can sequence exit animations throughout a tree using variants.
	 *
	 * If a child contains multiple `motion` components with `exit` props, it will only unmount the child
	 * once all `motion` components have finished animating out. Likewise, any components using
	 * `usePresence` all need to call `safeToRemove`.
	 *
	 * @public
	 */
	const AnimatePresence = ({ children, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = "sync", propagate = false, anchorX = "left", }) => {
	    const [isParentPresent, safeToRemove] = usePresence(propagate);
	    /**
	     * Filter any children that aren't ReactElements. We can only track components
	     * between renders with a props.key.
	     */
	    const presentChildren = reactExports.useMemo(() => onlyElements(children), [children]);
	    /**
	     * Track the keys of the currently rendered children. This is used to
	     * determine which children are exiting.
	     */
	    const presentKeys = propagate && !isParentPresent ? [] : presentChildren.map(getChildKey);
	    /**
	     * If `initial={false}` we only want to pass this to components in the first render.
	     */
	    const isInitialRender = reactExports.useRef(true);
	    /**
	     * A ref containing the currently present children. When all exit animations
	     * are complete, we use this to re-render the component with the latest children
	     * *committed* rather than the latest children *rendered*.
	     */
	    const pendingPresentChildren = reactExports.useRef(presentChildren);
	    /**
	     * Track which exiting children have finished animating out.
	     */
	    const exitComplete = useConstant(() => new Map());
	    /**
	     * Save children to render as React state. To ensure this component is concurrent-safe,
	     * we check for exiting children via an effect.
	     */
	    const [diffedChildren, setDiffedChildren] = reactExports.useState(presentChildren);
	    const [renderedChildren, setRenderedChildren] = reactExports.useState(presentChildren);
	    useIsomorphicLayoutEffect$1(() => {
	        isInitialRender.current = false;
	        pendingPresentChildren.current = presentChildren;
	        /**
	         * Update complete status of exiting children.
	         */
	        for (let i = 0; i < renderedChildren.length; i++) {
	            const key = getChildKey(renderedChildren[i]);
	            if (!presentKeys.includes(key)) {
	                if (exitComplete.get(key) !== true) {
	                    exitComplete.set(key, false);
	                }
	            }
	            else {
	                exitComplete.delete(key);
	            }
	        }
	    }, [renderedChildren, presentKeys.length, presentKeys.join("-")]);
	    const exitingChildren = [];
	    if (presentChildren !== diffedChildren) {
	        let nextChildren = [...presentChildren];
	        /**
	         * Loop through all the currently rendered components and decide which
	         * are exiting.
	         */
	        for (let i = 0; i < renderedChildren.length; i++) {
	            const child = renderedChildren[i];
	            const key = getChildKey(child);
	            if (!presentKeys.includes(key)) {
	                nextChildren.splice(i, 0, child);
	                exitingChildren.push(child);
	            }
	        }
	        /**
	         * If we're in "wait" mode, and we have exiting children, we want to
	         * only render these until they've all exited.
	         */
	        if (mode === "wait" && exitingChildren.length) {
	            nextChildren = exitingChildren;
	        }
	        setRenderedChildren(onlyElements(nextChildren));
	        setDiffedChildren(presentChildren);
	        /**
	         * Early return to ensure once we've set state with the latest diffed
	         * children, we can immediately re-render.
	         */
	        return null;
	    }
	    /**
	     * If we've been provided a forceRender function by the LayoutGroupContext,
	     * we can use it to force a re-render amongst all surrounding components once
	     * all components have finished animating out.
	     */
	    const { forceRender } = reactExports.useContext(LayoutGroupContext);
	    return (jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: renderedChildren.map((child) => {
	            const key = getChildKey(child);
	            const isPresent = propagate && !isParentPresent
	                ? false
	                : presentChildren === renderedChildren ||
	                    presentKeys.includes(key);
	            const onExit = () => {
	                if (exitComplete.has(key)) {
	                    exitComplete.set(key, true);
	                }
	                else {
	                    return;
	                }
	                let isEveryExitComplete = true;
	                exitComplete.forEach((isExitComplete) => {
	                    if (!isExitComplete)
	                        isEveryExitComplete = false;
	                });
	                if (isEveryExitComplete) {
	                    forceRender?.();
	                    setRenderedChildren(pendingPresentChildren.current);
	                    propagate && safeToRemove?.();
	                    onExitComplete && onExitComplete();
	                }
	            };
	            return (jsxRuntimeExports.jsx(PresenceChild, { isPresent: isPresent, initial: !isInitialRender.current || initial
	                    ? undefined
	                    : false, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode, onExitComplete: isPresent ? undefined : onExit, anchorX: anchorX, children: child }, key));
	        }) }));
	};

	const LazyContext = reactExports.createContext({ strict: false });

	const featureProps = {
	    animation: [
	        "animate",
	        "variants",
	        "whileHover",
	        "whileTap",
	        "exit",
	        "whileInView",
	        "whileFocus",
	        "whileDrag",
	    ],
	    exit: ["exit"],
	    drag: ["drag", "dragControls"],
	    focus: ["whileFocus"],
	    hover: ["whileHover", "onHoverStart", "onHoverEnd"],
	    tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
	    pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
	    inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
	    layout: ["layout", "layoutId"],
	};
	const featureDefinitions = {};
	for (const key in featureProps) {
	    featureDefinitions[key] = {
	        isEnabled: (props) => featureProps[key].some((name) => !!props[name]),
	    };
	}

	function loadFeatures(features) {
	    for (const key in features) {
	        featureDefinitions[key] = {
	            ...featureDefinitions[key],
	            ...features[key],
	        };
	    }
	}

	/**
	 * A list of all valid MotionProps.
	 *
	 * @privateRemarks
	 * This doesn't throw if a `MotionProp` name is missing - it should.
	 */
	const validMotionProps = new Set([
	    "animate",
	    "exit",
	    "variants",
	    "initial",
	    "style",
	    "values",
	    "variants",
	    "transition",
	    "transformTemplate",
	    "custom",
	    "inherit",
	    "onBeforeLayoutMeasure",
	    "onAnimationStart",
	    "onAnimationComplete",
	    "onUpdate",
	    "onDragStart",
	    "onDrag",
	    "onDragEnd",
	    "onMeasureDragConstraints",
	    "onDirectionLock",
	    "onDragTransitionEnd",
	    "_dragX",
	    "_dragY",
	    "onHoverStart",
	    "onHoverEnd",
	    "onViewportEnter",
	    "onViewportLeave",
	    "globalTapTarget",
	    "ignoreStrict",
	    "viewport",
	]);
	/**
	 * Check whether a prop name is a valid `MotionProp` key.
	 *
	 * @param key - Name of the property to check
	 * @returns `true` is key is a valid `MotionProp`.
	 *
	 * @public
	 */
	function isValidMotionProp(key) {
	    return (key.startsWith("while") ||
	        (key.startsWith("drag") && key !== "draggable") ||
	        key.startsWith("layout") ||
	        key.startsWith("onTap") ||
	        key.startsWith("onPan") ||
	        key.startsWith("onLayout") ||
	        validMotionProps.has(key));
	}

	let shouldForward = (key) => !isValidMotionProp(key);
	function loadExternalIsValidProp(isValidProp) {
	    if (typeof isValidProp !== "function")
	        return;
	    // Explicitly filter our events
	    shouldForward = (key) => key.startsWith("on") ? !isValidMotionProp(key) : isValidProp(key);
	}
	/**
	 * Emotion and Styled Components both allow users to pass through arbitrary props to their components
	 * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which
	 * of these should be passed to the underlying DOM node.
	 *
	 * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props
	 * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props
	 * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of
	 * `@emotion/is-prop-valid`, however to fix this problem we need to use it.
	 *
	 * By making it an optionalDependency we can offer this functionality only in the situations where it's
	 * actually required.
	 */
	try {
	    /**
	     * We attempt to import this package but require won't be defined in esm environments, in that case
	     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed
	     * in favour of explicit injection.
	     */
	    loadExternalIsValidProp(require("@emotion/is-prop-valid").default);
	}
	catch {
	    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.
	}
	function filterProps(props, isDom, forwardMotionProps) {
	    const filteredProps = {};
	    for (const key in props) {
	        /**
	         * values is considered a valid prop by Emotion, so if it's present
	         * this will be rendered out to the DOM unless explicitly filtered.
	         *
	         * We check the type as it could be used with the `feColorMatrix`
	         * element, which we support.
	         */
	        if (key === "values" && typeof props.values === "object")
	            continue;
	        if (shouldForward(key) ||
	            (forwardMotionProps === true && isValidMotionProp(key)) ||
	            (!isDom && !isValidMotionProp(key)) ||
	            // If trying to use native HTML drag events, forward drag listeners
	            (props["draggable"] &&
	                key.startsWith("onDrag"))) {
	            filteredProps[key] =
	                props[key];
	        }
	    }
	    return filteredProps;
	}

	function createDOMMotionComponentProxy(componentFactory) {
	    if (typeof Proxy === "undefined") {
	        return componentFactory;
	    }
	    /**
	     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.
	     * Rather than generating them anew every render.
	     */
	    const componentCache = new Map();
	    const deprecatedFactoryFunction = (...args) => {
	        return componentFactory(...args);
	    };
	    return new Proxy(deprecatedFactoryFunction, {
	        /**
	         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
	         * The prop name is passed through as `key` and we can use that to generate a `motion`
	         * DOM component with that name.
	         */
	        get: (_target, key) => {
	            if (key === "create")
	                return componentFactory;
	            /**
	             * If this element doesn't exist in the component cache, create it and cache.
	             */
	            if (!componentCache.has(key)) {
	                componentCache.set(key, componentFactory(key));
	            }
	            return componentCache.get(key);
	        },
	    });
	}

	const MotionContext = /* @__PURE__ */ reactExports.createContext({});

	function isAnimationControls(v) {
	    return (v !== null &&
	        typeof v === "object" &&
	        typeof v.start === "function");
	}

	/**
	 * Decides if the supplied variable is variant label
	 */
	function isVariantLabel(v) {
	    return typeof v === "string" || Array.isArray(v);
	}

	const variantPriorityOrder = [
	    "animate",
	    "whileInView",
	    "whileFocus",
	    "whileHover",
	    "whileTap",
	    "whileDrag",
	    "exit",
	];
	const variantProps = ["initial", ...variantPriorityOrder];

	function isControllingVariants(props) {
	    return (isAnimationControls(props.animate) ||
	        variantProps.some((name) => isVariantLabel(props[name])));
	}
	function isVariantNode(props) {
	    return Boolean(isControllingVariants(props) || props.variants);
	}

	function getCurrentTreeVariants(props, context) {
	    if (isControllingVariants(props)) {
	        const { initial, animate } = props;
	        return {
	            initial: initial === false || isVariantLabel(initial)
	                ? initial
	                : undefined,
	            animate: isVariantLabel(animate) ? animate : undefined,
	        };
	    }
	    return props.inherit !== false ? context : {};
	}

	function useCreateMotionContext(props) {
	    const { initial, animate } = getCurrentTreeVariants(props, reactExports.useContext(MotionContext));
	    return reactExports.useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);
	}
	function variantLabelsAsDependency(prop) {
	    return Array.isArray(prop) ? prop.join(" ") : prop;
	}

	const motionComponentSymbol = Symbol.for("motionComponentSymbol");

	function isRefObject(ref) {
	    return (ref &&
	        typeof ref === "object" &&
	        Object.prototype.hasOwnProperty.call(ref, "current"));
	}

	/**
	 * Creates a ref function that, when called, hydrates the provided
	 * external ref and VisualElement.
	 */
	function useMotionRef(visualState, visualElement, externalRef) {
	    return reactExports.useCallback((instance) => {
	        if (instance) {
	            visualState.onMount && visualState.onMount(instance);
	        }
	        if (visualElement) {
	            if (instance) {
	                visualElement.mount(instance);
	            }
	            else {
	                visualElement.unmount();
	            }
	        }
	        if (externalRef) {
	            if (typeof externalRef === "function") {
	                externalRef(instance);
	            }
	            else if (isRefObject(externalRef)) {
	                externalRef.current = instance;
	            }
	        }
	    }, 
	    /**
	     * Only pass a new ref callback to React if we've received a visual element
	     * factory. Otherwise we'll be mounting/remounting every time externalRef
	     * or other dependencies change.
	     */
	    [visualElement]);
	}

	/**
	 * Convert camelCase to dash-case properties.
	 */
	const camelToDash = (str) => str.replace(/([a-z])([A-Z])/gu, "$1-$2").toLowerCase();

	const optimizedAppearDataId = "framerAppearId";
	const optimizedAppearDataAttribute = "data-" + camelToDash(optimizedAppearDataId);

	/**
	 * Internal, exported only for usage in Framer
	 */
	const SwitchLayoutGroupContext = reactExports.createContext({});

	function useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {
	    const { visualElement: parent } = reactExports.useContext(MotionContext);
	    const lazyContext = reactExports.useContext(LazyContext);
	    const presenceContext = reactExports.useContext(PresenceContext);
	    const reducedMotionConfig = reactExports.useContext(MotionConfigContext).reducedMotion;
	    const visualElementRef = reactExports.useRef(null);
	    /**
	     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded
	     */
	    createVisualElement = createVisualElement || lazyContext.renderer;
	    if (!visualElementRef.current && createVisualElement) {
	        visualElementRef.current = createVisualElement(Component, {
	            visualState,
	            parent,
	            props,
	            presenceContext,
	            blockInitialAnimation: presenceContext
	                ? presenceContext.initial === false
	                : false,
	            reducedMotionConfig,
	        });
	    }
	    const visualElement = visualElementRef.current;
	    /**
	     * Load Motion gesture and animation features. These are rendered as renderless
	     * components so each feature can optionally make use of React lifecycle methods.
	     */
	    const initialLayoutGroupConfig = reactExports.useContext(SwitchLayoutGroupContext);
	    if (visualElement &&
	        !visualElement.projection &&
	        ProjectionNodeConstructor &&
	        (visualElement.type === "html" || visualElement.type === "svg")) {
	        createProjectionNode$1(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);
	    }
	    const isMounted = reactExports.useRef(false);
	    reactExports.useInsertionEffect(() => {
	        /**
	         * Check the component has already mounted before calling
	         * `update` unnecessarily. This ensures we skip the initial update.
	         */
	        if (visualElement && isMounted.current) {
	            visualElement.update(props, presenceContext);
	        }
	    });
	    /**
	     * Cache this value as we want to know whether HandoffAppearAnimations
	     * was present on initial render - it will be deleted after this.
	     */
	    const optimisedAppearId = props[optimizedAppearDataAttribute];
	    const wantsHandoff = reactExports.useRef(Boolean(optimisedAppearId) &&
	        !window.MotionHandoffIsComplete?.(optimisedAppearId) &&
	        window.MotionHasOptimisedAnimation?.(optimisedAppearId));
	    useIsomorphicLayoutEffect$1(() => {
	        if (!visualElement)
	            return;
	        isMounted.current = true;
	        window.MotionIsMounted = true;
	        visualElement.updateFeatures();
	        microtask.render(visualElement.render);
	        /**
	         * Ideally this function would always run in a useEffect.
	         *
	         * However, if we have optimised appear animations to handoff from,
	         * it needs to happen synchronously to ensure there's no flash of
	         * incorrect styles in the event of a hydration error.
	         *
	         * So if we detect a situtation where optimised appear animations
	         * are running, we use useLayoutEffect to trigger animations.
	         */
	        if (wantsHandoff.current && visualElement.animationState) {
	            visualElement.animationState.animateChanges();
	        }
	    });
	    reactExports.useEffect(() => {
	        if (!visualElement)
	            return;
	        if (!wantsHandoff.current && visualElement.animationState) {
	            visualElement.animationState.animateChanges();
	        }
	        if (wantsHandoff.current) {
	            // This ensures all future calls to animateChanges() in this component will run in useEffect
	            queueMicrotask(() => {
	                window.MotionHandoffMarkAsComplete?.(optimisedAppearId);
	            });
	            wantsHandoff.current = false;
	        }
	    });
	    return visualElement;
	}
	function createProjectionNode$1(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {
	    const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, layoutCrossfade, } = props;
	    visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props["data-framer-portal-id"]
	        ? undefined
	        : getClosestProjectingNode(visualElement.parent));
	    visualElement.projection.setOptions({
	        layoutId,
	        layout,
	        alwaysMeasureLayout: Boolean(drag) || (dragConstraints && isRefObject(dragConstraints)),
	        visualElement,
	        /**
	         * TODO: Update options in an effect. This could be tricky as it'll be too late
	         * to update by the time layout animations run.
	         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,
	         * ensuring it gets called if there's no potential layout animations.
	         *
	         */
	        animationType: typeof layout === "string" ? layout : "both",
	        initialPromotionConfig,
	        crossfade: layoutCrossfade,
	        layoutScroll,
	        layoutRoot,
	    });
	}
	function getClosestProjectingNode(visualElement) {
	    if (!visualElement)
	        return undefined;
	    return visualElement.options.allowProjection !== false
	        ? visualElement.projection
	        : getClosestProjectingNode(visualElement.parent);
	}

	/**
	 * Create a `motion` component.
	 *
	 * This function accepts a Component argument, which can be either a string (ie "div"
	 * for `motion.div`), or an actual React component.
	 *
	 * Alongside this is a config option which provides a way of rendering the provided
	 * component "offline", or outside the React render cycle.
	 */
	function createRendererMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {
	    preloadedFeatures && loadFeatures(preloadedFeatures);
	    function MotionComponent(props, externalRef) {
	        /**
	         * If we need to measure the element we load this functionality in a
	         * separate class component in order to gain access to getSnapshotBeforeUpdate.
	         */
	        let MeasureLayout;
	        const configAndProps = {
	            ...reactExports.useContext(MotionConfigContext),
	            ...props,
	            layoutId: useLayoutId(props),
	        };
	        const { isStatic } = configAndProps;
	        const context = useCreateMotionContext(props);
	        const visualState = useVisualState(props, isStatic);
	        if (!isStatic && isBrowser) {
	            useStrictMode();
	            const layoutProjection = getProjectionFunctionality(configAndProps);
	            MeasureLayout = layoutProjection.MeasureLayout;
	            /**
	             * Create a VisualElement for this component. A VisualElement provides a common
	             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as
	             * providing a way of rendering to these APIs outside of the React render loop
	             * for more performant animations and interactions
	             */
	            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement, layoutProjection.ProjectionNode);
	        }
	        /**
	         * The mount order and hierarchy is specific to ensure our element ref
	         * is hydrated by the time features fire their effects.
	         */
	        return (jsxRuntimeExports.jsxs(MotionContext.Provider, { value: context, children: [MeasureLayout && context.visualElement ? (jsxRuntimeExports.jsx(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null, useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)] }));
	    }
	    MotionComponent.displayName = `motion.${typeof Component === "string"
        ? Component
        : `create(${Component.displayName ?? Component.name ?? ""})`}`;
	    const ForwardRefMotionComponent = reactExports.forwardRef(MotionComponent);
	    ForwardRefMotionComponent[motionComponentSymbol] = Component;
	    return ForwardRefMotionComponent;
	}
	function useLayoutId({ layoutId }) {
	    const layoutGroupId = reactExports.useContext(LayoutGroupContext).id;
	    return layoutGroupId && layoutId !== undefined
	        ? layoutGroupId + "-" + layoutId
	        : layoutId;
	}
	function useStrictMode(configAndProps, preloadedFeatures) {
	    reactExports.useContext(LazyContext).strict;
	}
	function getProjectionFunctionality(props) {
	    const { drag, layout } = featureDefinitions;
	    if (!drag && !layout)
	        return {};
	    const combined = { ...drag, ...layout };
	    return {
	        MeasureLayout: drag?.isEnabled(props) || layout?.isEnabled(props)
	            ? combined.MeasureLayout
	            : undefined,
	        ProjectionNode: combined.ProjectionNode,
	    };
	}

	const scaleCorrectors = {};
	function addScaleCorrector(correctors) {
	    for (const key in correctors) {
	        scaleCorrectors[key] = correctors[key];
	        if (isCSSVariableName(key)) {
	            scaleCorrectors[key].isCSSVariable = true;
	        }
	    }
	}

	function isForcedMotionValue(key, { layout, layoutId }) {
	    return (transformProps.has(key) ||
	        key.startsWith("origin") ||
	        ((layout || layoutId !== undefined) &&
	            (!!scaleCorrectors[key] || key === "opacity")));
	}

	const translateAlias = {
	    x: "translateX",
	    y: "translateY",
	    z: "translateZ",
	    transformPerspective: "perspective",
	};
	const numTransforms = transformPropOrder.length;
	/**
	 * Build a CSS transform style from individual x/y/scale etc properties.
	 *
	 * This outputs with a default order of transforms/scales/rotations, this can be customised by
	 * providing a transformTemplate function.
	 */
	function buildTransform(latestValues, transform, transformTemplate) {
	    // The transform string we're going to build into.
	    let transformString = "";
	    let transformIsDefault = true;
	    /**
	     * Loop over all possible transforms in order, adding the ones that
	     * are present to the transform string.
	     */
	    for (let i = 0; i < numTransforms; i++) {
	        const key = transformPropOrder[i];
	        const value = latestValues[key];
	        if (value === undefined)
	            continue;
	        let valueIsDefault = true;
	        if (typeof value === "number") {
	            valueIsDefault = value === (key.startsWith("scale") ? 1 : 0);
	        }
	        else {
	            valueIsDefault = parseFloat(value) === 0;
	        }
	        if (!valueIsDefault || transformTemplate) {
	            const valueAsType = getValueAsType(value, numberValueTypes[key]);
	            if (!valueIsDefault) {
	                transformIsDefault = false;
	                const transformName = translateAlias[key] || key;
	                transformString += `${transformName}(${valueAsType}) `;
	            }
	            if (transformTemplate) {
	                transform[key] = valueAsType;
	            }
	        }
	    }
	    transformString = transformString.trim();
	    // If we have a custom `transform` template, pass our transform values and
	    // generated transformString to that before returning
	    if (transformTemplate) {
	        transformString = transformTemplate(transform, transformIsDefault ? "" : transformString);
	    }
	    else if (transformIsDefault) {
	        transformString = "none";
	    }
	    return transformString;
	}

	function buildHTMLStyles(state, latestValues, transformTemplate) {
	    const { style, vars, transformOrigin } = state;
	    // Track whether we encounter any transform or transformOrigin values.
	    let hasTransform = false;
	    let hasTransformOrigin = false;
	    /**
	     * Loop over all our latest animated values and decide whether to handle them
	     * as a style or CSS variable.
	     *
	     * Transforms and transform origins are kept separately for further processing.
	     */
	    for (const key in latestValues) {
	        const value = latestValues[key];
	        if (transformProps.has(key)) {
	            // If this is a transform, flag to enable further transform processing
	            hasTransform = true;
	            continue;
	        }
	        else if (isCSSVariableName(key)) {
	            vars[key] = value;
	            continue;
	        }
	        else {
	            // Convert the value to its default value type, ie 0 -> "0px"
	            const valueAsType = getValueAsType(value, numberValueTypes[key]);
	            if (key.startsWith("origin")) {
	                // If this is a transform origin, flag and enable further transform-origin processing
	                hasTransformOrigin = true;
	                transformOrigin[key] =
	                    valueAsType;
	            }
	            else {
	                style[key] = valueAsType;
	            }
	        }
	    }
	    if (!latestValues.transform) {
	        if (hasTransform || transformTemplate) {
	            style.transform = buildTransform(latestValues, state.transform, transformTemplate);
	        }
	        else if (style.transform) {
	            /**
	             * If we have previously created a transform but currently don't have any,
	             * reset transform style to none.
	             */
	            style.transform = "none";
	        }
	    }
	    /**
	     * Build a transformOrigin style. Uses the same defaults as the browser for
	     * undefined origins.
	     */
	    if (hasTransformOrigin) {
	        const { originX = "50%", originY = "50%", originZ = 0, } = transformOrigin;
	        style.transformOrigin = `${originX} ${originY} ${originZ}`;
	    }
	}

	const createHtmlRenderState = () => ({
	    style: {},
	    transform: {},
	    transformOrigin: {},
	    vars: {},
	});

	function copyRawValuesOnly(target, source, props) {
	    for (const key in source) {
	        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {
	            target[key] = source[key];
	        }
	    }
	}
	function useInitialMotionValues({ transformTemplate }, visualState) {
	    return reactExports.useMemo(() => {
	        const state = createHtmlRenderState();
	        buildHTMLStyles(state, visualState, transformTemplate);
	        return Object.assign({}, state.vars, state.style);
	    }, [visualState]);
	}
	function useStyle(props, visualState) {
	    const styleProp = props.style || {};
	    const style = {};
	    /**
	     * Copy non-Motion Values straight into style
	     */
	    copyRawValuesOnly(style, styleProp, props);
	    Object.assign(style, useInitialMotionValues(props, visualState));
	    return style;
	}
	function useHTMLProps(props, visualState) {
	    // The `any` isn't ideal but it is the type of createElement props argument
	    const htmlProps = {};
	    const style = useStyle(props, visualState);
	    if (props.drag && props.dragListener !== false) {
	        // Disable the ghost element when a user drags
	        htmlProps.draggable = false;
	        // Disable text selection
	        style.userSelect =
	            style.WebkitUserSelect =
	                style.WebkitTouchCallout =
	                    "none";
	        // Disable scrolling on the draggable direction
	        style.touchAction =
	            props.drag === true
	                ? "none"
	                : `pan-${props.drag === "x" ? "y" : "x"}`;
	    }
	    if (props.tabIndex === undefined &&
	        (props.onTap || props.onTapStart || props.whileTap)) {
	        htmlProps.tabIndex = 0;
	    }
	    htmlProps.style = style;
	    return htmlProps;
	}

	const dashKeys = {
	    offset: "stroke-dashoffset",
	    array: "stroke-dasharray",
	};
	const camelKeys = {
	    offset: "strokeDashoffset",
	    array: "strokeDasharray",
	};
	/**
	 * Build SVG path properties. Uses the path's measured length to convert
	 * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset
	 * and stroke-dasharray attributes.
	 *
	 * This function is mutative to reduce per-frame GC.
	 */
	function buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {
	    // Normalise path length by setting SVG attribute pathLength to 1
	    attrs.pathLength = 1;
	    // We use dash case when setting attributes directly to the DOM node and camel case
	    // when defining props on a React component.
	    const keys = useDashCase ? dashKeys : camelKeys;
	    // Build the dash offset
	    attrs[keys.offset] = px.transform(-offset);
	    // Build the dash array
	    const pathLength = px.transform(length);
	    const pathSpacing = px.transform(spacing);
	    attrs[keys.array] = `${pathLength} ${pathSpacing}`;
	}

	/**
	 * Build SVG visual attrbutes, like cx and style.transform
	 */
	function buildSVGAttrs(state, { attrX, attrY, attrScale, pathLength, pathSpacing = 1, pathOffset = 0, 
	// This is object creation, which we try to avoid per-frame.
	...latest }, isSVGTag, transformTemplate, styleProp) {
	    buildHTMLStyles(state, latest, transformTemplate);
	    /**
	     * For svg tags we just want to make sure viewBox is animatable and treat all the styles
	     * as normal HTML tags.
	     */
	    if (isSVGTag) {
	        if (state.style.viewBox) {
	            state.attrs.viewBox = state.style.viewBox;
	        }
	        return;
	    }
	    state.attrs = state.style;
	    state.style = {};
	    const { attrs, style } = state;
	    /**
	     * However, we apply transforms as CSS transforms.
	     * So if we detect a transform, transformOrigin we take it from attrs and copy it into style.
	     */
	    if (attrs.transform) {
	        style.transform = attrs.transform;
	        delete attrs.transform;
	    }
	    if (style.transform || attrs.transformOrigin) {
	        style.transformOrigin = attrs.transformOrigin ?? "50% 50%";
	        delete attrs.transformOrigin;
	    }
	    if (style.transform) {
	        /**
	         * SVG's element transform-origin uses its own median as a reference.
	         * Therefore, transformBox becomes a fill-box
	         */
	        style.transformBox = styleProp?.transformBox ?? "fill-box";
	        delete attrs.transformBox;
	    }
	    // Render attrX/attrY/attrScale as attributes
	    if (attrX !== undefined)
	        attrs.x = attrX;
	    if (attrY !== undefined)
	        attrs.y = attrY;
	    if (attrScale !== undefined)
	        attrs.scale = attrScale;
	    // Build SVG path if one has been defined
	    if (pathLength !== undefined) {
	        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
	    }
	}

	const createSvgRenderState = () => ({
	    ...createHtmlRenderState(),
	    attrs: {},
	});

	const isSVGTag = (tag) => typeof tag === "string" && tag.toLowerCase() === "svg";

	function useSVGProps(props, visualState, _isStatic, Component) {
	    const visualProps = reactExports.useMemo(() => {
	        const state = createSvgRenderState();
	        buildSVGAttrs(state, visualState, isSVGTag(Component), props.transformTemplate, props.style);
	        return {
	            ...state.attrs,
	            style: { ...state.style },
	        };
	    }, [visualState]);
	    if (props.style) {
	        const rawStyles = {};
	        copyRawValuesOnly(rawStyles, props.style, props);
	        visualProps.style = { ...rawStyles, ...visualProps.style };
	    }
	    return visualProps;
	}

	/**
	 * We keep these listed separately as we use the lowercase tag names as part
	 * of the runtime bundle to detect SVG components
	 */
	const lowercaseSVGElements = [
	    "animate",
	    "circle",
	    "defs",
	    "desc",
	    "ellipse",
	    "g",
	    "image",
	    "line",
	    "filter",
	    "marker",
	    "mask",
	    "metadata",
	    "path",
	    "pattern",
	    "polygon",
	    "polyline",
	    "rect",
	    "stop",
	    "switch",
	    "symbol",
	    "svg",
	    "text",
	    "tspan",
	    "use",
	    "view",
	];

	function isSVGComponent(Component) {
	    if (
	    /**
	     * If it's not a string, it's a custom React component. Currently we only support
	     * HTML custom React components.
	     */
	    typeof Component !== "string" ||
	        /**
	         * If it contains a dash, the element is a custom HTML webcomponent.
	         */
	        Component.includes("-")) {
	        return false;
	    }
	    else if (
	    /**
	     * If it's in our list of lowercase SVG tags, it's an SVG component
	     */
	    lowercaseSVGElements.indexOf(Component) > -1 ||
	        /**
	         * If it contains a capital letter, it's an SVG component
	         */
	        /[A-Z]/u.test(Component)) {
	        return true;
	    }
	    return false;
	}

	function createUseRender(forwardMotionProps = false) {
	    const useRender = (Component, props, ref, { latestValues }, isStatic) => {
	        const useVisualProps = isSVGComponent(Component)
	            ? useSVGProps
	            : useHTMLProps;
	        const visualProps = useVisualProps(props, latestValues, isStatic, Component);
	        const filteredProps = filterProps(props, typeof Component === "string", forwardMotionProps);
	        const elementProps = Component !== reactExports.Fragment
	            ? { ...filteredProps, ...visualProps, ref }
	            : {};
	        /**
	         * If component has been handed a motion value as its child,
	         * memoise its initial value and render that. Subsequent updates
	         * will be handled by the onChange handler
	         */
	        const { children } = props;
	        const renderedChildren = reactExports.useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);
	        return reactExports.createElement(Component, {
	            ...elementProps,
	            children: renderedChildren,
	        });
	    };
	    return useRender;
	}

	function getValueState(visualElement) {
	    const state = [{}, {}];
	    visualElement?.values.forEach((value, key) => {
	        state[0][key] = value.get();
	        state[1][key] = value.getVelocity();
	    });
	    return state;
	}
	function resolveVariantFromProps(props, definition, custom, visualElement) {
	    /**
	     * If the variant definition is a function, resolve.
	     */
	    if (typeof definition === "function") {
	        const [current, velocity] = getValueState(visualElement);
	        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);
	    }
	    /**
	     * If the variant definition is a variant label, or
	     * the function returned a variant label, resolve.
	     */
	    if (typeof definition === "string") {
	        definition = props.variants && props.variants[definition];
	    }
	    /**
	     * At this point we've resolved both functions and variant labels,
	     * but the resolved variant label might itself have been a function.
	     * If so, resolve. This can only have returned a valid target object.
	     */
	    if (typeof definition === "function") {
	        const [current, velocity] = getValueState(visualElement);
	        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);
	    }
	    return definition;
	}

	/**
	 * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself
	 *
	 * TODO: Remove and move to library
	 */
	function resolveMotionValue(value) {
	    return isMotionValue(value) ? value.get() : value;
	}

	function makeState({ scrapeMotionValuesFromProps, createRenderState, }, props, context, presenceContext) {
	    const state = {
	        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),
	        renderState: createRenderState(),
	    };
	    return state;
	}
	const makeUseVisualState = (config) => (props, isStatic) => {
	    const context = reactExports.useContext(MotionContext);
	    const presenceContext = reactExports.useContext(PresenceContext);
	    const make = () => makeState(config, props, context, presenceContext);
	    return isStatic ? make() : useConstant(make);
	};
	function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
	    const values = {};
	    const motionValues = scrapeMotionValues(props, {});
	    for (const key in motionValues) {
	        values[key] = resolveMotionValue(motionValues[key]);
	    }
	    let { initial, animate } = props;
	    const isControllingVariants$1 = isControllingVariants(props);
	    const isVariantNode$1 = isVariantNode(props);
	    if (context &&
	        isVariantNode$1 &&
	        !isControllingVariants$1 &&
	        props.inherit !== false) {
	        if (initial === undefined)
	            initial = context.initial;
	        if (animate === undefined)
	            animate = context.animate;
	    }
	    let isInitialAnimationBlocked = presenceContext
	        ? presenceContext.initial === false
	        : false;
	    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;
	    const variantToSet = isInitialAnimationBlocked ? animate : initial;
	    if (variantToSet &&
	        typeof variantToSet !== "boolean" &&
	        !isAnimationControls(variantToSet)) {
	        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
	        for (let i = 0; i < list.length; i++) {
	            const resolved = resolveVariantFromProps(props, list[i]);
	            if (resolved) {
	                const { transitionEnd, transition, ...target } = resolved;
	                for (const key in target) {
	                    let valueTarget = target[key];
	                    if (Array.isArray(valueTarget)) {
	                        /**
	                         * Take final keyframe if the initial animation is blocked because
	                         * we want to initialise at the end of that blocked animation.
	                         */
	                        const index = isInitialAnimationBlocked
	                            ? valueTarget.length - 1
	                            : 0;
	                        valueTarget = valueTarget[index];
	                    }
	                    if (valueTarget !== null) {
	                        values[key] = valueTarget;
	                    }
	                }
	                for (const key in transitionEnd) {
	                    values[key] = transitionEnd[key];
	                }
	            }
	        }
	    }
	    return values;
	}

	function scrapeMotionValuesFromProps$1(props, prevProps, visualElement) {
	    const { style } = props;
	    const newValues = {};
	    for (const key in style) {
	        if (isMotionValue(style[key]) ||
	            (prevProps.style &&
	                isMotionValue(prevProps.style[key])) ||
	            isForcedMotionValue(key, props) ||
	            visualElement?.getValue(key)?.liveStyle !== undefined) {
	            newValues[key] = style[key];
	        }
	    }
	    return newValues;
	}

	const htmlMotionConfig = {
	    useVisualState: makeUseVisualState({
	        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps$1,
	        createRenderState: createHtmlRenderState,
	    }),
	};

	function scrapeMotionValuesFromProps(props, prevProps, visualElement) {
	    const newValues = scrapeMotionValuesFromProps$1(props, prevProps, visualElement);
	    for (const key in props) {
	        if (isMotionValue(props[key]) ||
	            isMotionValue(prevProps[key])) {
	            const targetKey = transformPropOrder.indexOf(key) !== -1
	                ? "attr" + key.charAt(0).toUpperCase() + key.substring(1)
	                : key;
	            newValues[targetKey] = props[key];
	        }
	    }
	    return newValues;
	}

	const svgMotionConfig = {
	    useVisualState: makeUseVisualState({
	        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,
	        createRenderState: createSvgRenderState,
	    }),
	};

	function createMotionComponentFactory(preloadedFeatures, createVisualElement) {
	    return function createMotionComponent(Component, { forwardMotionProps } = { forwardMotionProps: false }) {
	        const baseConfig = isSVGComponent(Component)
	            ? svgMotionConfig
	            : htmlMotionConfig;
	        const config = {
	            ...baseConfig,
	            preloadedFeatures,
	            useRender: createUseRender(forwardMotionProps),
	            createVisualElement,
	            Component,
	        };
	        return createRendererMotionComponent(config);
	    };
	}

	function resolveVariant(visualElement, definition, custom) {
	    const props = visualElement.getProps();
	    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, visualElement);
	}

	const isKeyframesTarget = (v) => {
	    return Array.isArray(v);
	};

	/**
	 * Set VisualElement's MotionValue, creating a new MotionValue for it if
	 * it doesn't exist.
	 */
	function setMotionValue(visualElement, key, value) {
	    if (visualElement.hasValue(key)) {
	        visualElement.getValue(key).set(value);
	    }
	    else {
	        visualElement.addValue(key, motionValue(value));
	    }
	}
	function resolveFinalValueInKeyframes(v) {
	    // TODO maybe throw if v.length - 1 is placeholder token?
	    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
	}
	function setTarget(visualElement, definition) {
	    const resolved = resolveVariant(visualElement, definition);
	    let { transitionEnd = {}, transition = {}, ...target } = resolved || {};
	    target = { ...target, ...transitionEnd };
	    for (const key in target) {
	        const value = resolveFinalValueInKeyframes(target[key]);
	        setMotionValue(visualElement, key, value);
	    }
	}

	function isWillChangeMotionValue(value) {
	    return Boolean(isMotionValue(value) && value.add);
	}

	function addValueToWillChange(visualElement, key) {
	    const willChange = visualElement.getValue("willChange");
	    /**
	     * It could be that a user has set willChange to a regular MotionValue,
	     * in which case we can't add the value to it.
	     */
	    if (isWillChangeMotionValue(willChange)) {
	        return willChange.add(key);
	    }
	    else if (!willChange && MotionGlobalConfig.WillChange) {
	        const newWillChange = new MotionGlobalConfig.WillChange("auto");
	        visualElement.addValue("willChange", newWillChange);
	        newWillChange.add(key);
	    }
	}

	function getOptimisedAppearId(visualElement) {
	    return visualElement.props[optimizedAppearDataAttribute];
	}

	const isNotNull = (value) => value !== null;
	function getFinalKeyframe(keyframes, { repeat, repeatType = "loop" }, finalKeyframe) {
	    const resolvedKeyframes = keyframes.filter(isNotNull);
	    const index = repeat && repeatType !== "loop" && repeat % 2 === 1
	        ? 0
	        : resolvedKeyframes.length - 1;
	    return !index || finalKeyframe === undefined
	        ? resolvedKeyframes[index]
	        : finalKeyframe;
	}

	const underDampedSpring = {
	    type: "spring",
	    stiffness: 500,
	    damping: 25,
	    restSpeed: 10,
	};
	const criticallyDampedSpring = (target) => ({
	    type: "spring",
	    stiffness: 550,
	    damping: target === 0 ? 2 * Math.sqrt(550) : 30,
	    restSpeed: 10,
	});
	const keyframesTransition = {
	    type: "keyframes",
	    duration: 0.8,
	};
	/**
	 * Default easing curve is a slightly shallower version of
	 * the default browser easing curve.
	 */
	const ease = {
	    type: "keyframes",
	    ease: [0.25, 0.1, 0.35, 1],
	    duration: 0.3,
	};
	const getDefaultTransition = (valueKey, { keyframes }) => {
	    if (keyframes.length > 2) {
	        return keyframesTransition;
	    }
	    else if (transformProps.has(valueKey)) {
	        return valueKey.startsWith("scale")
	            ? criticallyDampedSpring(keyframes[1])
	            : underDampedSpring;
	    }
	    return ease;
	};

	/**
	 * Decide whether a transition is defined on a given Transition.
	 * This filters out orchestration options and returns true
	 * if any options are left.
	 */
	function isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {
	    return !!Object.keys(transition).length;
	}

	const animateMotionValue = (name, value, target, transition = {}, element, isHandoff) => (onComplete) => {
	    const valueTransition = getValueTransition(transition, name) || {};
	    /**
	     * Most transition values are currently completely overwritten by value-specific
	     * transitions. In the future it'd be nicer to blend these transitions. But for now
	     * delay actually does inherit from the root transition if not value-specific.
	     */
	    const delay = valueTransition.delay || transition.delay || 0;
	    /**
	     * Elapsed isn't a public transition option but can be passed through from
	     * optimized appear effects in milliseconds.
	     */
	    let { elapsed = 0 } = transition;
	    elapsed = elapsed - secondsToMilliseconds(delay);
	    const options = {
	        keyframes: Array.isArray(target) ? target : [null, target],
	        ease: "easeOut",
	        velocity: value.getVelocity(),
	        ...valueTransition,
	        delay: -elapsed,
	        onUpdate: (v) => {
	            value.set(v);
	            valueTransition.onUpdate && valueTransition.onUpdate(v);
	        },
	        onComplete: () => {
	            onComplete();
	            valueTransition.onComplete && valueTransition.onComplete();
	        },
	        name,
	        motionValue: value,
	        element: isHandoff ? undefined : element,
	    };
	    /**
	     * If there's no transition defined for this value, we can generate
	     * unique transition settings for this value.
	     */
	    if (!isTransitionDefined(valueTransition)) {
	        Object.assign(options, getDefaultTransition(name, options));
	    }
	    /**
	     * Both WAAPI and our internal animation functions use durations
	     * as defined by milliseconds, while our external API defines them
	     * as seconds.
	     */
	    options.duration && (options.duration = secondsToMilliseconds(options.duration));
	    options.repeatDelay && (options.repeatDelay = secondsToMilliseconds(options.repeatDelay));
	    /**
	     * Support deprecated way to set initial value. Prefer keyframe syntax.
	     */
	    if (options.from !== undefined) {
	        options.keyframes[0] = options.from;
	    }
	    let shouldSkip = false;
	    if (options.type === false ||
	        (options.duration === 0 && !options.repeatDelay)) {
	        options.duration = 0;
	        if (options.delay === 0) {
	            shouldSkip = true;
	        }
	    }
	    if (MotionGlobalConfig.instantAnimations ||
	        MotionGlobalConfig.skipAnimations) {
	        shouldSkip = true;
	        options.duration = 0;
	        options.delay = 0;
	    }
	    /**
	     * If the transition type or easing has been explicitly set by the user
	     * then we don't want to allow flattening the animation.
	     */
	    options.allowFlatten = !valueTransition.type && !valueTransition.ease;
	    /**
	     * If we can or must skip creating the animation, and apply only
	     * the final keyframe, do so. We also check once keyframes are resolved but
	     * this early check prevents the need to create an animation at all.
	     */
	    if (shouldSkip && !isHandoff && value.get() !== undefined) {
	        const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);
	        if (finalKeyframe !== undefined) {
	            frame.update(() => {
	                options.onUpdate(finalKeyframe);
	                options.onComplete();
	            });
	            return;
	        }
	    }
	    return valueTransition.isSync
	        ? new JSAnimation(options)
	        : new AsyncMotionValueAnimation(options);
	};

	/**
	 * Decide whether we should block this animation. Previously, we achieved this
	 * just by checking whether the key was listed in protectedKeys, but this
	 * posed problems if an animation was triggered by afterChildren and protectedKeys
	 * had been set to true in the meantime.
	 */
	function shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {
	    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
	    needsAnimating[key] = false;
	    return shouldBlock;
	}
	function animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {
	    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;
	    if (transitionOverride)
	        transition = transitionOverride;
	    const animations = [];
	    const animationTypeState = type &&
	        visualElement.animationState &&
	        visualElement.animationState.getState()[type];
	    for (const key in target) {
	        const value = visualElement.getValue(key, visualElement.latestValues[key] ?? null);
	        const valueTarget = target[key];
	        if (valueTarget === undefined ||
	            (animationTypeState &&
	                shouldBlockAnimation(animationTypeState, key))) {
	            continue;
	        }
	        const valueTransition = {
	            delay,
	            ...getValueTransition(transition || {}, key),
	        };
	        /**
	         * If the value is already at the defined target, skip the animation.
	         */
	        const currentValue = value.get();
	        if (currentValue !== undefined &&
	            !value.isAnimating &&
	            !Array.isArray(valueTarget) &&
	            valueTarget === currentValue &&
	            !valueTransition.velocity) {
	            continue;
	        }
	        /**
	         * If this is the first time a value is being animated, check
	         * to see if we're handling off from an existing animation.
	         */
	        let isHandoff = false;
	        if (window.MotionHandoffAnimation) {
	            const appearId = getOptimisedAppearId(visualElement);
	            if (appearId) {
	                const startTime = window.MotionHandoffAnimation(appearId, key, frame);
	                if (startTime !== null) {
	                    valueTransition.startTime = startTime;
	                    isHandoff = true;
	                }
	            }
	        }
	        addValueToWillChange(visualElement, key);
	        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && positionalKeys.has(key)
	            ? { type: false }
	            : valueTransition, visualElement, isHandoff));
	        const animation = value.animation;
	        if (animation) {
	            animations.push(animation);
	        }
	    }
	    if (transitionEnd) {
	        Promise.all(animations).then(() => {
	            frame.update(() => {
	                transitionEnd && setTarget(visualElement, transitionEnd);
	            });
	        });
	    }
	    return animations;
	}

	function animateVariant(visualElement, variant, options = {}) {
	    const resolved = resolveVariant(visualElement, variant, options.type === "exit"
	        ? visualElement.presenceContext?.custom
	        : undefined);
	    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};
	    if (options.transitionOverride) {
	        transition = options.transitionOverride;
	    }
	    /**
	     * If we have a variant, create a callback that runs it as an animation.
	     * Otherwise, we resolve a Promise immediately for a composable no-op.
	     */
	    const getAnimation = resolved
	        ? () => Promise.all(animateTarget(visualElement, resolved, options))
	        : () => Promise.resolve();
	    /**
	     * If we have children, create a callback that runs all their animations.
	     * Otherwise, we resolve a Promise immediately for a composable no-op.
	     */
	    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size
	        ? (forwardDelay = 0) => {
	            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;
	            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
	        }
	        : () => Promise.resolve();
	    /**
	     * If the transition explicitly defines a "when" option, we need to resolve either
	     * this animation or all children animations before playing the other.
	     */
	    const { when } = transition;
	    if (when) {
	        const [first, last] = when === "beforeChildren"
	            ? [getAnimation, getChildAnimations]
	            : [getChildAnimations, getAnimation];
	        return first().then(() => last());
	    }
	    else {
	        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);
	    }
	}
	function animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {
	    const animations = [];
	    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;
	    const generateStaggerDuration = staggerDirection === 1
	        ? (i = 0) => i * staggerChildren
	        : (i = 0) => maxStaggerDuration - i * staggerChildren;
	    Array.from(visualElement.variantChildren)
	        .sort(sortByTreeOrder)
	        .forEach((child, i) => {
	        child.notify("AnimationStart", variant);
	        animations.push(animateVariant(child, variant, {
	            ...options,
	            delay: delayChildren + generateStaggerDuration(i),
	        }).then(() => child.notify("AnimationComplete", variant)));
	    });
	    return Promise.all(animations);
	}
	function sortByTreeOrder(a, b) {
	    return a.sortNodePosition(b);
	}

	function animateVisualElement(visualElement, definition, options = {}) {
	    visualElement.notify("AnimationStart", definition);
	    let animation;
	    if (Array.isArray(definition)) {
	        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));
	        animation = Promise.all(animations);
	    }
	    else if (typeof definition === "string") {
	        animation = animateVariant(visualElement, definition, options);
	    }
	    else {
	        const resolvedDefinition = typeof definition === "function"
	            ? resolveVariant(visualElement, definition, options.custom)
	            : definition;
	        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));
	    }
	    return animation.then(() => {
	        visualElement.notify("AnimationComplete", definition);
	    });
	}

	function shallowCompare(next, prev) {
	    if (!Array.isArray(prev))
	        return false;
	    const prevLength = prev.length;
	    if (prevLength !== next.length)
	        return false;
	    for (let i = 0; i < prevLength; i++) {
	        if (prev[i] !== next[i])
	            return false;
	    }
	    return true;
	}

	const numVariantProps = variantProps.length;
	function getVariantContext(visualElement) {
	    if (!visualElement)
	        return undefined;
	    if (!visualElement.isControllingVariants) {
	        const context = visualElement.parent
	            ? getVariantContext(visualElement.parent) || {}
	            : {};
	        if (visualElement.props.initial !== undefined) {
	            context.initial = visualElement.props.initial;
	        }
	        return context;
	    }
	    const context = {};
	    for (let i = 0; i < numVariantProps; i++) {
	        const name = variantProps[i];
	        const prop = visualElement.props[name];
	        if (isVariantLabel(prop) || prop === false) {
	            context[name] = prop;
	        }
	    }
	    return context;
	}

	const reversePriorityOrder = [...variantPriorityOrder].reverse();
	const numAnimationTypes = variantPriorityOrder.length;
	function animateList(visualElement) {
	    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));
	}
	function createAnimationState(visualElement) {
	    let animate = animateList(visualElement);
	    let state = createState();
	    let isInitialRender = true;
	    /**
	     * This function will be used to reduce the animation definitions for
	     * each active animation type into an object of resolved values for it.
	     */
	    const buildResolvedTypeValues = (type) => (acc, definition) => {
	        const resolved = resolveVariant(visualElement, definition, type === "exit"
	            ? visualElement.presenceContext?.custom
	            : undefined);
	        if (resolved) {
	            const { transition, transitionEnd, ...target } = resolved;
	            acc = { ...acc, ...target, ...transitionEnd };
	        }
	        return acc;
	    };
	    /**
	     * This just allows us to inject mocked animation functions
	     * @internal
	     */
	    function setAnimateFunction(makeAnimator) {
	        animate = makeAnimator(visualElement);
	    }
	    /**
	     * When we receive new props, we need to:
	     * 1. Create a list of protected keys for each type. This is a directory of
	     *    value keys that are currently being "handled" by types of a higher priority
	     *    so that whenever an animation is played of a given type, these values are
	     *    protected from being animated.
	     * 2. Determine if an animation type needs animating.
	     * 3. Determine if any values have been removed from a type and figure out
	     *    what to animate those to.
	     */
	    function animateChanges(changedActiveType) {
	        const { props } = visualElement;
	        const context = getVariantContext(visualElement.parent) || {};
	        /**
	         * A list of animations that we'll build into as we iterate through the animation
	         * types. This will get executed at the end of the function.
	         */
	        const animations = [];
	        /**
	         * Keep track of which values have been removed. Then, as we hit lower priority
	         * animation types, we can check if they contain removed values and animate to that.
	         */
	        const removedKeys = new Set();
	        /**
	         * A dictionary of all encountered keys. This is an object to let us build into and
	         * copy it without iteration. Each time we hit an animation type we set its protected
	         * keys - the keys its not allowed to animate - to the latest version of this object.
	         */
	        let encounteredKeys = {};
	        /**
	         * If a variant has been removed at a given index, and this component is controlling
	         * variant animations, we want to ensure lower-priority variants are forced to animate.
	         */
	        let removedVariantIndex = Infinity;
	        /**
	         * Iterate through all animation types in reverse priority order. For each, we want to
	         * detect which values it's handling and whether or not they've changed (and therefore
	         * need to be animated). If any values have been removed, we want to detect those in
	         * lower priority props and flag for animation.
	         */
	        for (let i = 0; i < numAnimationTypes; i++) {
	            const type = reversePriorityOrder[i];
	            const typeState = state[type];
	            const prop = props[type] !== undefined
	                ? props[type]
	                : context[type];
	            const propIsVariant = isVariantLabel(prop);
	            /**
	             * If this type has *just* changed isActive status, set activeDelta
	             * to that status. Otherwise set to null.
	             */
	            const activeDelta = type === changedActiveType ? typeState.isActive : null;
	            if (activeDelta === false)
	                removedVariantIndex = i;
	            /**
	             * If this prop is an inherited variant, rather than been set directly on the
	             * component itself, we want to make sure we allow the parent to trigger animations.
	             *
	             * TODO: Can probably change this to a !isControllingVariants check
	             */
	            let isInherited = prop === context[type] &&
	                prop !== props[type] &&
	                propIsVariant;
	            /**
	             *
	             */
	            if (isInherited &&
	                isInitialRender &&
	                visualElement.manuallyAnimateOnMount) {
	                isInherited = false;
	            }
	            /**
	             * Set all encountered keys so far as the protected keys for this type. This will
	             * be any key that has been animated or otherwise handled by active, higher-priortiy types.
	             */
	            typeState.protectedKeys = { ...encounteredKeys };
	            // Check if we can skip analysing this prop early
	            if (
	            // If it isn't active and hasn't *just* been set as inactive
	            (!typeState.isActive && activeDelta === null) ||
	                // If we didn't and don't have any defined prop for this animation type
	                (!prop && !typeState.prevProp) ||
	                // Or if the prop doesn't define an animation
	                isAnimationControls(prop) ||
	                typeof prop === "boolean") {
	                continue;
	            }
	            /**
	             * As we go look through the values defined on this type, if we detect
	             * a changed value or a value that was removed in a higher priority, we set
	             * this to true and add this prop to the animation list.
	             */
	            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);
	            let shouldAnimateType = variantDidChange ||
	                // If we're making this variant active, we want to always make it active
	                (type === changedActiveType &&
	                    typeState.isActive &&
	                    !isInherited &&
	                    propIsVariant) ||
	                // If we removed a higher-priority variant (i is in reverse order)
	                (i > removedVariantIndex && propIsVariant);
	            let handledRemovedValues = false;
	            /**
	             * As animations can be set as variant lists, variants or target objects, we
	             * coerce everything to an array if it isn't one already
	             */
	            const definitionList = Array.isArray(prop) ? prop : [prop];
	            /**
	             * Build an object of all the resolved values. We'll use this in the subsequent
	             * animateChanges calls to determine whether a value has changed.
	             */
	            let resolvedValues = definitionList.reduce(buildResolvedTypeValues(type), {});
	            if (activeDelta === false)
	                resolvedValues = {};
	            /**
	             * Now we need to loop through all the keys in the prev prop and this prop,
	             * and decide:
	             * 1. If the value has changed, and needs animating
	             * 2. If it has been removed, and needs adding to the removedKeys set
	             * 3. If it has been removed in a higher priority type and needs animating
	             * 4. If it hasn't been removed in a higher priority but hasn't changed, and
	             *    needs adding to the type's protectedKeys list.
	             */
	            const { prevResolvedValues = {} } = typeState;
	            const allKeys = {
	                ...prevResolvedValues,
	                ...resolvedValues,
	            };
	            const markToAnimate = (key) => {
	                shouldAnimateType = true;
	                if (removedKeys.has(key)) {
	                    handledRemovedValues = true;
	                    removedKeys.delete(key);
	                }
	                typeState.needsAnimating[key] = true;
	                const motionValue = visualElement.getValue(key);
	                if (motionValue)
	                    motionValue.liveStyle = false;
	            };
	            for (const key in allKeys) {
	                const next = resolvedValues[key];
	                const prev = prevResolvedValues[key];
	                // If we've already handled this we can just skip ahead
	                if (encounteredKeys.hasOwnProperty(key))
	                    continue;
	                /**
	                 * If the value has changed, we probably want to animate it.
	                 */
	                let valueHasChanged = false;
	                if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {
	                    valueHasChanged = !shallowCompare(next, prev);
	                }
	                else {
	                    valueHasChanged = next !== prev;
	                }
	                if (valueHasChanged) {
	                    if (next !== undefined && next !== null) {
	                        // If next is defined and doesn't equal prev, it needs animating
	                        markToAnimate(key);
	                    }
	                    else {
	                        // If it's undefined, it's been removed.
	                        removedKeys.add(key);
	                    }
	                }
	                else if (next !== undefined && removedKeys.has(key)) {
	                    /**
	                     * If next hasn't changed and it isn't undefined, we want to check if it's
	                     * been removed by a higher priority
	                     */
	                    markToAnimate(key);
	                }
	                else {
	                    /**
	                     * If it hasn't changed, we add it to the list of protected values
	                     * to ensure it doesn't get animated.
	                     */
	                    typeState.protectedKeys[key] = true;
	                }
	            }
	            /**
	             * Update the typeState so next time animateChanges is called we can compare the
	             * latest prop and resolvedValues to these.
	             */
	            typeState.prevProp = prop;
	            typeState.prevResolvedValues = resolvedValues;
	            /**
	             *
	             */
	            if (typeState.isActive) {
	                encounteredKeys = { ...encounteredKeys, ...resolvedValues };
	            }
	            if (isInitialRender && visualElement.blockInitialAnimation) {
	                shouldAnimateType = false;
	            }
	            /**
	             * If this is an inherited prop we want to skip this animation
	             * unless the inherited variants haven't changed on this render.
	             */
	            const willAnimateViaParent = isInherited && variantDidChange;
	            const needsAnimating = !willAnimateViaParent || handledRemovedValues;
	            if (shouldAnimateType && needsAnimating) {
	                animations.push(...definitionList.map((animation) => ({
	                    animation: animation,
	                    options: { type },
	                })));
	            }
	        }
	        /**
	         * If there are some removed value that haven't been dealt with,
	         * we need to create a new animation that falls back either to the value
	         * defined in the style prop, or the last read value.
	         */
	        if (removedKeys.size) {
	            const fallbackAnimation = {};
	            /**
	             * If the initial prop contains a transition we can use that, otherwise
	             * allow the animation function to use the visual element's default.
	             */
	            if (typeof props.initial !== "boolean") {
	                const initialTransition = resolveVariant(visualElement, Array.isArray(props.initial)
	                    ? props.initial[0]
	                    : props.initial);
	                if (initialTransition && initialTransition.transition) {
	                    fallbackAnimation.transition = initialTransition.transition;
	                }
	            }
	            removedKeys.forEach((key) => {
	                const fallbackTarget = visualElement.getBaseTarget(key);
	                const motionValue = visualElement.getValue(key);
	                if (motionValue)
	                    motionValue.liveStyle = true;
	                // @ts-expect-error - @mattgperry to figure if we should do something here
	                fallbackAnimation[key] = fallbackTarget ?? null;
	            });
	            animations.push({ animation: fallbackAnimation });
	        }
	        let shouldAnimate = Boolean(animations.length);
	        if (isInitialRender &&
	            (props.initial === false || props.initial === props.animate) &&
	            !visualElement.manuallyAnimateOnMount) {
	            shouldAnimate = false;
	        }
	        isInitialRender = false;
	        return shouldAnimate ? animate(animations) : Promise.resolve();
	    }
	    /**
	     * Change whether a certain animation type is active.
	     */
	    function setActive(type, isActive) {
	        // If the active state hasn't changed, we can safely do nothing here
	        if (state[type].isActive === isActive)
	            return Promise.resolve();
	        // Propagate active change to children
	        visualElement.variantChildren?.forEach((child) => child.animationState?.setActive(type, isActive));
	        state[type].isActive = isActive;
	        const animations = animateChanges(type);
	        for (const key in state) {
	            state[key].protectedKeys = {};
	        }
	        return animations;
	    }
	    return {
	        animateChanges,
	        setActive,
	        setAnimateFunction,
	        getState: () => state,
	        reset: () => {
	            state = createState();
	            isInitialRender = true;
	        },
	    };
	}
	function checkVariantsDidChange(prev, next) {
	    if (typeof next === "string") {
	        return next !== prev;
	    }
	    else if (Array.isArray(next)) {
	        return !shallowCompare(next, prev);
	    }
	    return false;
	}
	function createTypeState(isActive = false) {
	    return {
	        isActive,
	        protectedKeys: {},
	        needsAnimating: {},
	        prevResolvedValues: {},
	    };
	}
	function createState() {
	    return {
	        animate: createTypeState(true),
	        whileInView: createTypeState(),
	        whileHover: createTypeState(),
	        whileTap: createTypeState(),
	        whileDrag: createTypeState(),
	        whileFocus: createTypeState(),
	        exit: createTypeState(),
	    };
	}

	class Feature {
	    constructor(node) {
	        this.isMounted = false;
	        this.node = node;
	    }
	    update() { }
	}

	class AnimationFeature extends Feature {
	    /**
	     * We dynamically generate the AnimationState manager as it contains a reference
	     * to the underlying animation library. We only want to load that if we load this,
	     * so people can optionally code split it out using the `m` component.
	     */
	    constructor(node) {
	        super(node);
	        node.animationState || (node.animationState = createAnimationState(node));
	    }
	    updateAnimationControlsSubscription() {
	        const { animate } = this.node.getProps();
	        if (isAnimationControls(animate)) {
	            this.unmountControls = animate.subscribe(this.node);
	        }
	    }
	    /**
	     * Subscribe any provided AnimationControls to the component's VisualElement
	     */
	    mount() {
	        this.updateAnimationControlsSubscription();
	    }
	    update() {
	        const { animate } = this.node.getProps();
	        const { animate: prevAnimate } = this.node.prevProps || {};
	        if (animate !== prevAnimate) {
	            this.updateAnimationControlsSubscription();
	        }
	    }
	    unmount() {
	        this.node.animationState.reset();
	        this.unmountControls?.();
	    }
	}

	let id$1 = 0;
	class ExitAnimationFeature extends Feature {
	    constructor() {
	        super(...arguments);
	        this.id = id$1++;
	    }
	    update() {
	        if (!this.node.presenceContext)
	            return;
	        const { isPresent, onExitComplete } = this.node.presenceContext;
	        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};
	        if (!this.node.animationState || isPresent === prevIsPresent) {
	            return;
	        }
	        const exitAnimation = this.node.animationState.setActive("exit", !isPresent);
	        if (onExitComplete && !isPresent) {
	            exitAnimation.then(() => {
	                onExitComplete(this.id);
	            });
	        }
	    }
	    mount() {
	        const { register, onExitComplete } = this.node.presenceContext || {};
	        if (onExitComplete) {
	            onExitComplete(this.id);
	        }
	        if (register) {
	            this.unmount = register(this.id);
	        }
	    }
	    unmount() { }
	}

	const animations = {
	    animation: {
	        Feature: AnimationFeature,
	    },
	    exit: {
	        Feature: ExitAnimationFeature,
	    },
	};

	function addDomEvent(target, eventName, handler, options = { passive: true }) {
	    target.addEventListener(eventName, handler, options);
	    return () => target.removeEventListener(eventName, handler);
	}

	function extractEventInfo(event) {
	    return {
	        point: {
	            x: event.pageX,
	            y: event.pageY,
	        },
	    };
	}
	const addPointerInfo = (handler) => {
	    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));
	};

	function addPointerEvent(target, eventName, handler, options) {
	    return addDomEvent(target, eventName, addPointerInfo(handler), options);
	}

	/**
	 * Bounding boxes tend to be defined as top, left, right, bottom. For various operations
	 * it's easier to consider each axis individually. This function returns a bounding box
	 * as a map of single-axis min/max values.
	 */
	function convertBoundingBoxToBox({ top, left, right, bottom, }) {
	    return {
	        x: { min: left, max: right },
	        y: { min: top, max: bottom },
	    };
	}
	function convertBoxToBoundingBox({ x, y }) {
	    return { top: y.min, right: x.max, bottom: y.max, left: x.min };
	}
	/**
	 * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function
	 * provided by Framer to allow measured points to be corrected for device scaling. This is used
	 * when measuring DOM elements and DOM event points.
	 */
	function transformBoxPoints(point, transformPoint) {
	    if (!transformPoint)
	        return point;
	    const topLeft = transformPoint({ x: point.left, y: point.top });
	    const bottomRight = transformPoint({ x: point.right, y: point.bottom });
	    return {
	        top: topLeft.y,
	        left: topLeft.x,
	        bottom: bottomRight.y,
	        right: bottomRight.x,
	    };
	}

	const SCALE_PRECISION = 0.0001;
	const SCALE_MIN = 1 - SCALE_PRECISION;
	const SCALE_MAX = 1 + SCALE_PRECISION;
	const TRANSLATE_PRECISION = 0.01;
	const TRANSLATE_MIN = 0 - TRANSLATE_PRECISION;
	const TRANSLATE_MAX = 0 + TRANSLATE_PRECISION;
	function calcLength(axis) {
	    return axis.max - axis.min;
	}
	function isNear(value, target, maxDistance) {
	    return Math.abs(value - target) <= maxDistance;
	}
	function calcAxisDelta(delta, source, target, origin = 0.5) {
	    delta.origin = origin;
	    delta.originPoint = mixNumber$1(source.min, source.max, delta.origin);
	    delta.scale = calcLength(target) / calcLength(source);
	    delta.translate =
	        mixNumber$1(target.min, target.max, delta.origin) - delta.originPoint;
	    if ((delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX) ||
	        isNaN(delta.scale)) {
	        delta.scale = 1.0;
	    }
	    if ((delta.translate >= TRANSLATE_MIN &&
	        delta.translate <= TRANSLATE_MAX) ||
	        isNaN(delta.translate)) {
	        delta.translate = 0.0;
	    }
	}
	function calcBoxDelta(delta, source, target, origin) {
	    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);
	    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);
	}
	function calcRelativeAxis(target, relative, parent) {
	    target.min = parent.min + relative.min;
	    target.max = target.min + calcLength(relative);
	}
	function calcRelativeBox(target, relative, parent) {
	    calcRelativeAxis(target.x, relative.x, parent.x);
	    calcRelativeAxis(target.y, relative.y, parent.y);
	}
	function calcRelativeAxisPosition(target, layout, parent) {
	    target.min = layout.min - parent.min;
	    target.max = target.min + calcLength(layout);
	}
	function calcRelativePosition(target, layout, parent) {
	    calcRelativeAxisPosition(target.x, layout.x, parent.x);
	    calcRelativeAxisPosition(target.y, layout.y, parent.y);
	}

	const createAxisDelta = () => ({
	    translate: 0,
	    scale: 1,
	    origin: 0,
	    originPoint: 0,
	});
	const createDelta = () => ({
	    x: createAxisDelta(),
	    y: createAxisDelta(),
	});
	const createAxis = () => ({ min: 0, max: 0 });
	const createBox = () => ({
	    x: createAxis(),
	    y: createAxis(),
	});

	function eachAxis(callback) {
	    return [callback("x"), callback("y")];
	}

	function isIdentityScale(scale) {
	    return scale === undefined || scale === 1;
	}
	function hasScale({ scale, scaleX, scaleY }) {
	    return (!isIdentityScale(scale) ||
	        !isIdentityScale(scaleX) ||
	        !isIdentityScale(scaleY));
	}
	function hasTransform(values) {
	    return (hasScale(values) ||
	        has2DTranslate(values) ||
	        values.z ||
	        values.rotate ||
	        values.rotateX ||
	        values.rotateY ||
	        values.skewX ||
	        values.skewY);
	}
	function has2DTranslate(values) {
	    return is2DTranslate(values.x) || is2DTranslate(values.y);
	}
	function is2DTranslate(value) {
	    return value && value !== "0%";
	}

	/**
	 * Scales a point based on a factor and an originPoint
	 */
	function scalePoint(point, scale, originPoint) {
	    const distanceFromOrigin = point - originPoint;
	    const scaled = scale * distanceFromOrigin;
	    return originPoint + scaled;
	}
	/**
	 * Applies a translate/scale delta to a point
	 */
	function applyPointDelta(point, translate, scale, originPoint, boxScale) {
	    if (boxScale !== undefined) {
	        point = scalePoint(point, boxScale, originPoint);
	    }
	    return scalePoint(point, scale, originPoint) + translate;
	}
	/**
	 * Applies a translate/scale delta to an axis
	 */
	function applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {
	    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);
	    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);
	}
	/**
	 * Applies a translate/scale delta to a box
	 */
	function applyBoxDelta(box, { x, y }) {
	    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);
	    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
	}
	const TREE_SCALE_SNAP_MIN = 0.999999999999;
	const TREE_SCALE_SNAP_MAX = 1.0000000000001;
	/**
	 * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms
	 * in a tree upon our box before then calculating how to project it into our desired viewport-relative box
	 *
	 * This is the final nested loop within updateLayoutDelta for future refactoring
	 */
	function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {
	    const treeLength = treePath.length;
	    if (!treeLength)
	        return;
	    // Reset the treeScale
	    treeScale.x = treeScale.y = 1;
	    let node;
	    let delta;
	    for (let i = 0; i < treeLength; i++) {
	        node = treePath[i];
	        delta = node.projectionDelta;
	        /**
	         * TODO: Prefer to remove this, but currently we have motion components with
	         * display: contents in Framer.
	         */
	        const { visualElement } = node.options;
	        if (visualElement &&
	            visualElement.props.style &&
	            visualElement.props.style.display === "contents") {
	            continue;
	        }
	        if (isSharedTransition &&
	            node.options.layoutScroll &&
	            node.scroll &&
	            node !== node.root) {
	            transformBox(box, {
	                x: -node.scroll.offset.x,
	                y: -node.scroll.offset.y,
	            });
	        }
	        if (delta) {
	            // Incoporate each ancestor's scale into a culmulative treeScale for this component
	            treeScale.x *= delta.x.scale;
	            treeScale.y *= delta.y.scale;
	            // Apply each ancestor's calculated delta into this component's recorded layout box
	            applyBoxDelta(box, delta);
	        }
	        if (isSharedTransition && hasTransform(node.latestValues)) {
	            transformBox(box, node.latestValues);
	        }
	    }
	    /**
	     * Snap tree scale back to 1 if it's within a non-perceivable threshold.
	     * This will help reduce useless scales getting rendered.
	     */
	    if (treeScale.x < TREE_SCALE_SNAP_MAX &&
	        treeScale.x > TREE_SCALE_SNAP_MIN) {
	        treeScale.x = 1.0;
	    }
	    if (treeScale.y < TREE_SCALE_SNAP_MAX &&
	        treeScale.y > TREE_SCALE_SNAP_MIN) {
	        treeScale.y = 1.0;
	    }
	}
	function translateAxis(axis, distance) {
	    axis.min = axis.min + distance;
	    axis.max = axis.max + distance;
	}
	/**
	 * Apply a transform to an axis from the latest resolved motion values.
	 * This function basically acts as a bridge between a flat motion value map
	 * and applyAxisDelta
	 */
	function transformAxis(axis, axisTranslate, axisScale, boxScale, axisOrigin = 0.5) {
	    const originPoint = mixNumber$1(axis.min, axis.max, axisOrigin);
	    // Apply the axis delta to the final axis
	    applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale);
	}
	/**
	 * Apply a transform to a box from the latest resolved motion values.
	 */
	function transformBox(box, transform) {
	    transformAxis(box.x, transform.x, transform.scaleX, transform.scale, transform.originX);
	    transformAxis(box.y, transform.y, transform.scaleY, transform.scale, transform.originY);
	}

	function measureViewportBox(instance, transformPoint) {
	    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));
	}
	function measurePageBox(element, rootProjectionNode, transformPagePoint) {
	    const viewportBox = measureViewportBox(element, transformPagePoint);
	    const { scroll } = rootProjectionNode;
	    if (scroll) {
	        translateAxis(viewportBox.x, scroll.offset.x);
	        translateAxis(viewportBox.y, scroll.offset.y);
	    }
	    return viewportBox;
	}

	// Fixes https://github.com/motiondivision/motion/issues/2270
	const getContextWindow = ({ current }) => {
	    return current ? current.ownerDocument.defaultView : null;
	};

	const distance = (a, b) => Math.abs(a - b);
	function distance2D(a, b) {
	    // Multi-dimensional
	    const xDelta = distance(a.x, b.x);
	    const yDelta = distance(a.y, b.y);
	    return Math.sqrt(xDelta ** 2 + yDelta ** 2);
	}

	/**
	 * @internal
	 */
	class PanSession {
	    constructor(event, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false, } = {}) {
	        /**
	         * @internal
	         */
	        this.startEvent = null;
	        /**
	         * @internal
	         */
	        this.lastMoveEvent = null;
	        /**
	         * @internal
	         */
	        this.lastMoveEventInfo = null;
	        /**
	         * @internal
	         */
	        this.handlers = {};
	        /**
	         * @internal
	         */
	        this.contextWindow = window;
	        this.updatePoint = () => {
	            if (!(this.lastMoveEvent && this.lastMoveEventInfo))
	                return;
	            const info = getPanInfo(this.lastMoveEventInfo, this.history);
	            const isPanStarted = this.startEvent !== null;
	            // Only start panning if the offset is larger than 3 pixels. If we make it
	            // any larger than this we'll want to reset the pointer history
	            // on the first update to avoid visual snapping to the cursoe.
	            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;
	            if (!isPanStarted && !isDistancePastThreshold)
	                return;
	            const { point } = info;
	            const { timestamp } = frameData;
	            this.history.push({ ...point, timestamp });
	            const { onStart, onMove } = this.handlers;
	            if (!isPanStarted) {
	                onStart && onStart(this.lastMoveEvent, info);
	                this.startEvent = this.lastMoveEvent;
	            }
	            onMove && onMove(this.lastMoveEvent, info);
	        };
	        this.handlePointerMove = (event, info) => {
	            this.lastMoveEvent = event;
	            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);
	            // Throttle mouse move event to once per frame
	            frame.update(this.updatePoint, true);
	        };
	        this.handlePointerUp = (event, info) => {
	            this.end();
	            const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;
	            if (this.dragSnapToOrigin)
	                resumeAnimation && resumeAnimation();
	            if (!(this.lastMoveEvent && this.lastMoveEventInfo))
	                return;
	            const panInfo = getPanInfo(event.type === "pointercancel"
	                ? this.lastMoveEventInfo
	                : transformPoint(info, this.transformPagePoint), this.history);
	            if (this.startEvent && onEnd) {
	                onEnd(event, panInfo);
	            }
	            onSessionEnd && onSessionEnd(event, panInfo);
	        };
	        // If we have more than one touch, don't start detecting this gesture
	        if (!isPrimaryPointer(event))
	            return;
	        this.dragSnapToOrigin = dragSnapToOrigin;
	        this.handlers = handlers;
	        this.transformPagePoint = transformPagePoint;
	        this.contextWindow = contextWindow || window;
	        const info = extractEventInfo(event);
	        const initialInfo = transformPoint(info, this.transformPagePoint);
	        const { point } = initialInfo;
	        const { timestamp } = frameData;
	        this.history = [{ ...point, timestamp }];
	        const { onSessionStart } = handlers;
	        onSessionStart &&
	            onSessionStart(event, getPanInfo(initialInfo, this.history));
	        this.removeListeners = pipe$1(addPointerEvent(this.contextWindow, "pointermove", this.handlePointerMove), addPointerEvent(this.contextWindow, "pointerup", this.handlePointerUp), addPointerEvent(this.contextWindow, "pointercancel", this.handlePointerUp));
	    }
	    updateHandlers(handlers) {
	        this.handlers = handlers;
	    }
	    end() {
	        this.removeListeners && this.removeListeners();
	        cancelFrame(this.updatePoint);
	    }
	}
	function transformPoint(info, transformPagePoint) {
	    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
	}
	function subtractPoint(a, b) {
	    return { x: a.x - b.x, y: a.y - b.y };
	}
	function getPanInfo({ point }, history) {
	    return {
	        point,
	        delta: subtractPoint(point, lastDevicePoint(history)),
	        offset: subtractPoint(point, startDevicePoint(history)),
	        velocity: getVelocity(history, 0.1),
	    };
	}
	function startDevicePoint(history) {
	    return history[0];
	}
	function lastDevicePoint(history) {
	    return history[history.length - 1];
	}
	function getVelocity(history, timeDelta) {
	    if (history.length < 2) {
	        return { x: 0, y: 0 };
	    }
	    let i = history.length - 1;
	    let timestampedPoint = null;
	    const lastPoint = lastDevicePoint(history);
	    while (i >= 0) {
	        timestampedPoint = history[i];
	        if (lastPoint.timestamp - timestampedPoint.timestamp >
	            secondsToMilliseconds(timeDelta)) {
	            break;
	        }
	        i--;
	    }
	    if (!timestampedPoint) {
	        return { x: 0, y: 0 };
	    }
	    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);
	    if (time === 0) {
	        return { x: 0, y: 0 };
	    }
	    const currentVelocity = {
	        x: (lastPoint.x - timestampedPoint.x) / time,
	        y: (lastPoint.y - timestampedPoint.y) / time,
	    };
	    if (currentVelocity.x === Infinity) {
	        currentVelocity.x = 0;
	    }
	    if (currentVelocity.y === Infinity) {
	        currentVelocity.y = 0;
	    }
	    return currentVelocity;
	}

	/**
	 * Apply constraints to a point. These constraints are both physical along an
	 * axis, and an elastic factor that determines how much to constrain the point
	 * by if it does lie outside the defined parameters.
	 */
	function applyConstraints(point, { min, max }, elastic) {
	    if (min !== undefined && point < min) {
	        // If we have a min point defined, and this is outside of that, constrain
	        point = elastic
	            ? mixNumber$1(min, point, elastic.min)
	            : Math.max(point, min);
	    }
	    else if (max !== undefined && point > max) {
	        // If we have a max point defined, and this is outside of that, constrain
	        point = elastic
	            ? mixNumber$1(max, point, elastic.max)
	            : Math.min(point, max);
	    }
	    return point;
	}
	/**
	 * Calculate constraints in terms of the viewport when defined relatively to the
	 * measured axis. This is measured from the nearest edge, so a max constraint of 200
	 * on an axis with a max value of 300 would return a constraint of 500 - axis length
	 */
	function calcRelativeAxisConstraints(axis, min, max) {
	    return {
	        min: min !== undefined ? axis.min + min : undefined,
	        max: max !== undefined
	            ? axis.max + max - (axis.max - axis.min)
	            : undefined,
	    };
	}
	/**
	 * Calculate constraints in terms of the viewport when
	 * defined relatively to the measured bounding box.
	 */
	function calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {
	    return {
	        x: calcRelativeAxisConstraints(layoutBox.x, left, right),
	        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),
	    };
	}
	/**
	 * Calculate viewport constraints when defined as another viewport-relative axis
	 */
	function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
	    let min = constraintsAxis.min - layoutAxis.min;
	    let max = constraintsAxis.max - layoutAxis.max;
	    // If the constraints axis is actually smaller than the layout axis then we can
	    // flip the constraints
	    if (constraintsAxis.max - constraintsAxis.min <
	        layoutAxis.max - layoutAxis.min) {
	        [min, max] = [max, min];
	    }
	    return { min, max };
	}
	/**
	 * Calculate viewport constraints when defined as another viewport-relative box
	 */
	function calcViewportConstraints(layoutBox, constraintsBox) {
	    return {
	        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
	        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),
	    };
	}
	/**
	 * Calculate a transform origin relative to the source axis, between 0-1, that results
	 * in an asthetically pleasing scale/transform needed to project from source to target.
	 */
	function calcOrigin(source, target) {
	    let origin = 0.5;
	    const sourceLength = calcLength(source);
	    const targetLength = calcLength(target);
	    if (targetLength > sourceLength) {
	        origin = progress(target.min, target.max - sourceLength, source.min);
	    }
	    else if (sourceLength > targetLength) {
	        origin = progress(source.min, source.max - targetLength, target.min);
	    }
	    return clamp(0, 1, origin);
	}
	/**
	 * Rebase the calculated viewport constraints relative to the layout.min point.
	 */
	function rebaseAxisConstraints(layout, constraints) {
	    const relativeConstraints = {};
	    if (constraints.min !== undefined) {
	        relativeConstraints.min = constraints.min - layout.min;
	    }
	    if (constraints.max !== undefined) {
	        relativeConstraints.max = constraints.max - layout.min;
	    }
	    return relativeConstraints;
	}
	const defaultElastic = 0.35;
	/**
	 * Accepts a dragElastic prop and returns resolved elastic values for each axis.
	 */
	function resolveDragElastic(dragElastic = defaultElastic) {
	    if (dragElastic === false) {
	        dragElastic = 0;
	    }
	    else if (dragElastic === true) {
	        dragElastic = defaultElastic;
	    }
	    return {
	        x: resolveAxisElastic(dragElastic, "left", "right"),
	        y: resolveAxisElastic(dragElastic, "top", "bottom"),
	    };
	}
	function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
	    return {
	        min: resolvePointElastic(dragElastic, minLabel),
	        max: resolvePointElastic(dragElastic, maxLabel),
	    };
	}
	function resolvePointElastic(dragElastic, label) {
	    return typeof dragElastic === "number"
	        ? dragElastic
	        : dragElastic[label] || 0;
	}

	const elementDragControls = new WeakMap();
	/**
	 *
	 */
	// let latestPointerEvent: PointerEvent
	class VisualElementDragControls {
	    constructor(visualElement) {
	        this.openDragLock = null;
	        this.isDragging = false;
	        this.currentDirection = null;
	        this.originPoint = { x: 0, y: 0 };
	        /**
	         * The permitted boundaries of travel, in pixels.
	         */
	        this.constraints = false;
	        this.hasMutatedConstraints = false;
	        /**
	         * The per-axis resolved elastic values.
	         */
	        this.elastic = createBox();
	        this.visualElement = visualElement;
	    }
	    start(originEvent, { snapToCursor = false } = {}) {
	        /**
	         * Don't start dragging if this component is exiting
	         */
	        const { presenceContext } = this.visualElement;
	        if (presenceContext && presenceContext.isPresent === false)
	            return;
	        const onSessionStart = (event) => {
	            const { dragSnapToOrigin } = this.getProps();
	            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch
	            // the component.
	            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();
	            if (snapToCursor) {
	                this.snapToCursor(extractEventInfo(event).point);
	            }
	        };
	        const onStart = (event, info) => {
	            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession
	            const { drag, dragPropagation, onDragStart } = this.getProps();
	            if (drag && !dragPropagation) {
	                if (this.openDragLock)
	                    this.openDragLock();
	                this.openDragLock = setDragLock(drag);
	                // If we don 't have the lock, don't start dragging
	                if (!this.openDragLock)
	                    return;
	            }
	            this.isDragging = true;
	            this.currentDirection = null;
	            this.resolveConstraints();
	            if (this.visualElement.projection) {
	                this.visualElement.projection.isAnimationBlocked = true;
	                this.visualElement.projection.target = undefined;
	            }
	            /**
	             * Record gesture origin
	             */
	            eachAxis((axis) => {
	                let current = this.getAxisMotionValue(axis).get() || 0;
	                /**
	                 * If the MotionValue is a percentage value convert to px
	                 */
	                if (percent.test(current)) {
	                    const { projection } = this.visualElement;
	                    if (projection && projection.layout) {
	                        const measuredAxis = projection.layout.layoutBox[axis];
	                        if (measuredAxis) {
	                            const length = calcLength(measuredAxis);
	                            current = length * (parseFloat(current) / 100);
	                        }
	                    }
	                }
	                this.originPoint[axis] = current;
	            });
	            // Fire onDragStart event
	            if (onDragStart) {
	                frame.postRender(() => onDragStart(event, info));
	            }
	            addValueToWillChange(this.visualElement, "transform");
	            const { animationState } = this.visualElement;
	            animationState && animationState.setActive("whileDrag", true);
	        };
	        const onMove = (event, info) => {
	            // latestPointerEvent = event
	            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();
	            // If we didn't successfully receive the gesture lock, early return.
	            if (!dragPropagation && !this.openDragLock)
	                return;
	            const { offset } = info;
	            // Attempt to detect drag direction if directionLock is true
	            if (dragDirectionLock && this.currentDirection === null) {
	                this.currentDirection = getCurrentDirection(offset);
	                // If we've successfully set a direction, notify listener
	                if (this.currentDirection !== null) {
	                    onDirectionLock && onDirectionLock(this.currentDirection);
	                }
	                return;
	            }
	            // Update each point with the latest position
	            this.updateAxis("x", info.point, offset);
	            this.updateAxis("y", info.point, offset);
	            /**
	             * Ideally we would leave the renderer to fire naturally at the end of
	             * this frame but if the element is about to change layout as the result
	             * of a re-render we want to ensure the browser can read the latest
	             * bounding box to ensure the pointer and element don't fall out of sync.
	             */
	            this.visualElement.render();
	            /**
	             * This must fire after the render call as it might trigger a state
	             * change which itself might trigger a layout update.
	             */
	            onDrag && onDrag(event, info);
	        };
	        const onSessionEnd = (event, info) => this.stop(event, info);
	        const resumeAnimation = () => eachAxis((axis) => this.getAnimationState(axis) === "paused" &&
	            this.getAxisMotionValue(axis).animation?.play());
	        const { dragSnapToOrigin } = this.getProps();
	        this.panSession = new PanSession(originEvent, {
	            onSessionStart,
	            onStart,
	            onMove,
	            onSessionEnd,
	            resumeAnimation,
	        }, {
	            transformPagePoint: this.visualElement.getTransformPagePoint(),
	            dragSnapToOrigin,
	            contextWindow: getContextWindow(this.visualElement),
	        });
	    }
	    stop(event, info) {
	        const isDragging = this.isDragging;
	        this.cancel();
	        if (!isDragging)
	            return;
	        const { velocity } = info;
	        this.startAnimation(velocity);
	        const { onDragEnd } = this.getProps();
	        if (onDragEnd) {
	            frame.postRender(() => onDragEnd(event, info));
	        }
	    }
	    cancel() {
	        this.isDragging = false;
	        const { projection, animationState } = this.visualElement;
	        if (projection) {
	            projection.isAnimationBlocked = false;
	        }
	        this.panSession && this.panSession.end();
	        this.panSession = undefined;
	        const { dragPropagation } = this.getProps();
	        if (!dragPropagation && this.openDragLock) {
	            this.openDragLock();
	            this.openDragLock = null;
	        }
	        animationState && animationState.setActive("whileDrag", false);
	    }
	    updateAxis(axis, _point, offset) {
	        const { drag } = this.getProps();
	        // If we're not dragging this axis, do an early return.
	        if (!offset || !shouldDrag(axis, drag, this.currentDirection))
	            return;
	        const axisValue = this.getAxisMotionValue(axis);
	        let next = this.originPoint[axis] + offset[axis];
	        // Apply constraints
	        if (this.constraints && this.constraints[axis]) {
	            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);
	        }
	        axisValue.set(next);
	    }
	    resolveConstraints() {
	        const { dragConstraints, dragElastic } = this.getProps();
	        const layout = this.visualElement.projection &&
	            !this.visualElement.projection.layout
	            ? this.visualElement.projection.measure(false)
	            : this.visualElement.projection?.layout;
	        const prevConstraints = this.constraints;
	        if (dragConstraints && isRefObject(dragConstraints)) {
	            if (!this.constraints) {
	                this.constraints = this.resolveRefConstraints();
	            }
	        }
	        else {
	            if (dragConstraints && layout) {
	                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);
	            }
	            else {
	                this.constraints = false;
	            }
	        }
	        this.elastic = resolveDragElastic(dragElastic);
	        /**
	         * If we're outputting to external MotionValues, we want to rebase the measured constraints
	         * from viewport-relative to component-relative.
	         */
	        if (prevConstraints !== this.constraints &&
	            layout &&
	            this.constraints &&
	            !this.hasMutatedConstraints) {
	            eachAxis((axis) => {
	                if (this.constraints !== false &&
	                    this.getAxisMotionValue(axis)) {
	                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);
	                }
	            });
	        }
	    }
	    resolveRefConstraints() {
	        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();
	        if (!constraints || !isRefObject(constraints))
	            return false;
	        const constraintsElement = constraints.current;
	        const { projection } = this.visualElement;
	        // TODO
	        if (!projection || !projection.layout)
	            return false;
	        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
	        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);
	        /**
	         * If there's an onMeasureDragConstraints listener we call it and
	         * if different constraints are returned, set constraints to that
	         */
	        if (onMeasureDragConstraints) {
	            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));
	            this.hasMutatedConstraints = !!userConstraints;
	            if (userConstraints) {
	                measuredConstraints = convertBoundingBoxToBox(userConstraints);
	            }
	        }
	        return measuredConstraints;
	    }
	    startAnimation(velocity) {
	        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();
	        const constraints = this.constraints || {};
	        const momentumAnimations = eachAxis((axis) => {
	            if (!shouldDrag(axis, drag, this.currentDirection)) {
	                return;
	            }
	            let transition = (constraints && constraints[axis]) || {};
	            if (dragSnapToOrigin)
	                transition = { min: 0, max: 0 };
	            /**
	             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame
	             * of spring animations so we should look into adding a disable spring option to `inertia`.
	             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`
	             * using the value of `dragElastic`.
	             */
	            const bounceStiffness = dragElastic ? 200 : 1000000;
	            const bounceDamping = dragElastic ? 40 : 10000000;
	            const inertia = {
	                type: "inertia",
	                velocity: dragMomentum ? velocity[axis] : 0,
	                bounceStiffness,
	                bounceDamping,
	                timeConstant: 750,
	                restDelta: 1,
	                restSpeed: 10,
	                ...dragTransition,
	                ...transition,
	            };
	            // If we're not animating on an externally-provided `MotionValue` we can use the
	            // component's animation controls which will handle interactions with whileHover (etc),
	            // otherwise we just have to animate the `MotionValue` itself.
	            return this.startAxisValueAnimation(axis, inertia);
	        });
	        // Run all animations and then resolve the new drag constraints.
	        return Promise.all(momentumAnimations).then(onDragTransitionEnd);
	    }
	    startAxisValueAnimation(axis, transition) {
	        const axisValue = this.getAxisMotionValue(axis);
	        addValueToWillChange(this.visualElement, axis);
	        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));
	    }
	    stopAnimation() {
	        eachAxis((axis) => this.getAxisMotionValue(axis).stop());
	    }
	    pauseAnimation() {
	        eachAxis((axis) => this.getAxisMotionValue(axis).animation?.pause());
	    }
	    getAnimationState(axis) {
	        return this.getAxisMotionValue(axis).animation?.state;
	    }
	    /**
	     * Drag works differently depending on which props are provided.
	     *
	     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.
	     * - Otherwise, we apply the delta to the x/y motion values.
	     */
	    getAxisMotionValue(axis) {
	        const dragKey = `_drag${axis.toUpperCase()}`;
	        const props = this.visualElement.getProps();
	        const externalMotionValue = props[dragKey];
	        return externalMotionValue
	            ? externalMotionValue
	            : this.visualElement.getValue(axis, (props.initial
	                ? props.initial[axis]
	                : undefined) || 0);
	    }
	    snapToCursor(point) {
	        eachAxis((axis) => {
	            const { drag } = this.getProps();
	            // If we're not dragging this axis, do an early return.
	            if (!shouldDrag(axis, drag, this.currentDirection))
	                return;
	            const { projection } = this.visualElement;
	            const axisValue = this.getAxisMotionValue(axis);
	            if (projection && projection.layout) {
	                const { min, max } = projection.layout.layoutBox[axis];
	                axisValue.set(point[axis] - mixNumber$1(min, max, 0.5));
	            }
	        });
	    }
	    /**
	     * When the viewport resizes we want to check if the measured constraints
	     * have changed and, if so, reposition the element within those new constraints
	     * relative to where it was before the resize.
	     */
	    scalePositionWithinConstraints() {
	        if (!this.visualElement.current)
	            return;
	        const { drag, dragConstraints } = this.getProps();
	        const { projection } = this.visualElement;
	        if (!isRefObject(dragConstraints) || !projection || !this.constraints)
	            return;
	        /**
	         * Stop current animations as there can be visual glitching if we try to do
	         * this mid-animation
	         */
	        this.stopAnimation();
	        /**
	         * Record the relative position of the dragged element relative to the
	         * constraints box and save as a progress value.
	         */
	        const boxProgress = { x: 0, y: 0 };
	        eachAxis((axis) => {
	            const axisValue = this.getAxisMotionValue(axis);
	            if (axisValue && this.constraints !== false) {
	                const latest = axisValue.get();
	                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);
	            }
	        });
	        /**
	         * Update the layout of this element and resolve the latest drag constraints
	         */
	        const { transformTemplate } = this.visualElement.getProps();
	        this.visualElement.current.style.transform = transformTemplate
	            ? transformTemplate({}, "")
	            : "none";
	        projection.root && projection.root.updateScroll();
	        projection.updateLayout();
	        this.resolveConstraints();
	        /**
	         * For each axis, calculate the current progress of the layout axis
	         * within the new constraints.
	         */
	        eachAxis((axis) => {
	            if (!shouldDrag(axis, drag, null))
	                return;
	            /**
	             * Calculate a new transform based on the previous box progress
	             */
	            const axisValue = this.getAxisMotionValue(axis);
	            const { min, max } = this.constraints[axis];
	            axisValue.set(mixNumber$1(min, max, boxProgress[axis]));
	        });
	    }
	    addListeners() {
	        if (!this.visualElement.current)
	            return;
	        elementDragControls.set(this.visualElement, this);
	        const element = this.visualElement.current;
	        /**
	         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.
	         */
	        const stopPointerListener = addPointerEvent(element, "pointerdown", (event) => {
	            const { drag, dragListener = true } = this.getProps();
	            drag && dragListener && this.start(event);
	        });
	        const measureDragConstraints = () => {
	            const { dragConstraints } = this.getProps();
	            if (isRefObject(dragConstraints) && dragConstraints.current) {
	                this.constraints = this.resolveRefConstraints();
	            }
	        };
	        const { projection } = this.visualElement;
	        const stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
	        if (projection && !projection.layout) {
	            projection.root && projection.root.updateScroll();
	            projection.updateLayout();
	        }
	        frame.read(measureDragConstraints);
	        /**
	         * Attach a window resize listener to scale the draggable target within its defined
	         * constraints as the window resizes.
	         */
	        const stopResizeListener = addDomEvent(window, "resize", () => this.scalePositionWithinConstraints());
	        /**
	         * If the element's layout changes, calculate the delta and apply that to
	         * the drag gesture's origin point.
	         */
	        const stopLayoutUpdateListener = projection.addEventListener("didUpdate", (({ delta, hasLayoutChanged }) => {
	            if (this.isDragging && hasLayoutChanged) {
	                eachAxis((axis) => {
	                    const motionValue = this.getAxisMotionValue(axis);
	                    if (!motionValue)
	                        return;
	                    this.originPoint[axis] += delta[axis].translate;
	                    motionValue.set(motionValue.get() + delta[axis].translate);
	                });
	                this.visualElement.render();
	            }
	        }));
	        return () => {
	            stopResizeListener();
	            stopPointerListener();
	            stopMeasureLayoutListener();
	            stopLayoutUpdateListener && stopLayoutUpdateListener();
	        };
	    }
	    getProps() {
	        const props = this.visualElement.getProps();
	        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;
	        return {
	            ...props,
	            drag,
	            dragDirectionLock,
	            dragPropagation,
	            dragConstraints,
	            dragElastic,
	            dragMomentum,
	        };
	    }
	}
	function shouldDrag(direction, drag, currentDirection) {
	    return ((drag === true || drag === direction) &&
	        (currentDirection === null || currentDirection === direction));
	}
	/**
	 * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower
	 * than the provided threshold, return `null`.
	 *
	 * @param offset - The x/y offset from origin.
	 * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.
	 */
	function getCurrentDirection(offset, lockThreshold = 10) {
	    let direction = null;
	    if (Math.abs(offset.y) > lockThreshold) {
	        direction = "y";
	    }
	    else if (Math.abs(offset.x) > lockThreshold) {
	        direction = "x";
	    }
	    return direction;
	}

	class DragGesture extends Feature {
	    constructor(node) {
	        super(node);
	        this.removeGroupControls = noop;
	        this.removeListeners = noop;
	        this.controls = new VisualElementDragControls(node);
	    }
	    mount() {
	        // If we've been provided a DragControls for manual control over the drag gesture,
	        // subscribe this component to it on mount.
	        const { dragControls } = this.node.getProps();
	        if (dragControls) {
	            this.removeGroupControls = dragControls.subscribe(this.controls);
	        }
	        this.removeListeners = this.controls.addListeners() || noop;
	    }
	    unmount() {
	        this.removeGroupControls();
	        this.removeListeners();
	    }
	}

	const asyncHandler = (handler) => (event, info) => {
	    if (handler) {
	        frame.postRender(() => handler(event, info));
	    }
	};
	class PanGesture extends Feature {
	    constructor() {
	        super(...arguments);
	        this.removePointerDownListener = noop;
	    }
	    onPointerDown(pointerDownEvent) {
	        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {
	            transformPagePoint: this.node.getTransformPagePoint(),
	            contextWindow: getContextWindow(this.node),
	        });
	    }
	    createPanHandlers() {
	        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();
	        return {
	            onSessionStart: asyncHandler(onPanSessionStart),
	            onStart: asyncHandler(onPanStart),
	            onMove: onPan,
	            onEnd: (event, info) => {
	                delete this.session;
	                if (onPanEnd) {
	                    frame.postRender(() => onPanEnd(event, info));
	                }
	            },
	        };
	    }
	    mount() {
	        this.removePointerDownListener = addPointerEvent(this.node.current, "pointerdown", (event) => this.onPointerDown(event));
	    }
	    update() {
	        this.session && this.session.updateHandlers(this.createPanHandlers());
	    }
	    unmount() {
	        this.removePointerDownListener();
	        this.session && this.session.end();
	    }
	}

	/**
	 * This should only ever be modified on the client otherwise it'll
	 * persist through server requests. If we need instanced states we
	 * could lazy-init via root.
	 */
	const globalProjectionState = {
	    /**
	     * Global flag as to whether the tree has animated since the last time
	     * we resized the window
	     */
	    hasAnimatedSinceResize: true,
	    /**
	     * We set this to true once, on the first update. Any nodes added to the tree beyond that
	     * update will be given a `data-projection-id` attribute.
	     */
	    hasEverUpdated: false,
	};

	function pixelsToPercent(pixels, axis) {
	    if (axis.max === axis.min)
	        return 0;
	    return (pixels / (axis.max - axis.min)) * 100;
	}
	/**
	 * We always correct borderRadius as a percentage rather than pixels to reduce paints.
	 * For example, if you are projecting a box that is 100px wide with a 10px borderRadius
	 * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%
	 * borderRadius in both states. If we animate between the two in pixels that will trigger
	 * a paint each time. If we animate between the two in percentage we'll avoid a paint.
	 */
	const correctBorderRadius = {
	    correct: (latest, node) => {
	        if (!node.target)
	            return latest;
	        /**
	         * If latest is a string, if it's a percentage we can return immediately as it's
	         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.
	         */
	        if (typeof latest === "string") {
	            if (px.test(latest)) {
	                latest = parseFloat(latest);
	            }
	            else {
	                return latest;
	            }
	        }
	        /**
	         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that
	         * pixel value as a percentage of each axis
	         */
	        const x = pixelsToPercent(latest, node.target.x);
	        const y = pixelsToPercent(latest, node.target.y);
	        return `${x}% ${y}%`;
	    },
	};

	const correctBoxShadow = {
	    correct: (latest, { treeScale, projectionDelta }) => {
	        const original = latest;
	        const shadow = complex.parse(latest);
	        // TODO: Doesn't support multiple shadows
	        if (shadow.length > 5)
	            return original;
	        const template = complex.createTransformer(latest);
	        const offset = typeof shadow[0] !== "number" ? 1 : 0;
	        // Calculate the overall context scale
	        const xScale = projectionDelta.x.scale * treeScale.x;
	        const yScale = projectionDelta.y.scale * treeScale.y;
	        shadow[0 + offset] /= xScale;
	        shadow[1 + offset] /= yScale;
	        /**
	         * Ideally we'd correct x and y scales individually, but because blur and
	         * spread apply to both we have to take a scale average and apply that instead.
	         * We could potentially improve the outcome of this by incorporating the ratio between
	         * the two scales.
	         */
	        const averageScale = mixNumber$1(xScale, yScale, 0.5);
	        // Blur
	        if (typeof shadow[2 + offset] === "number")
	            shadow[2 + offset] /= averageScale;
	        // Spread
	        if (typeof shadow[3 + offset] === "number")
	            shadow[3 + offset] /= averageScale;
	        return template(shadow);
	    },
	};

	class MeasureLayoutWithContext extends reactExports.Component {
	    /**
	     * This only mounts projection nodes for components that
	     * need measuring, we might want to do it for all components
	     * in order to incorporate transforms
	     */
	    componentDidMount() {
	        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;
	        const { projection } = visualElement;
	        addScaleCorrector(defaultScaleCorrectors);
	        if (projection) {
	            if (layoutGroup.group)
	                layoutGroup.group.add(projection);
	            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {
	                switchLayoutGroup.register(projection);
	            }
	            projection.root.didUpdate();
	            projection.addEventListener("animationComplete", () => {
	                this.safeToRemove();
	            });
	            projection.setOptions({
	                ...projection.options,
	                onExitComplete: () => this.safeToRemove(),
	            });
	        }
	        globalProjectionState.hasEverUpdated = true;
	    }
	    getSnapshotBeforeUpdate(prevProps) {
	        const { layoutDependency, visualElement, drag, isPresent } = this.props;
	        const { projection } = visualElement;
	        if (!projection)
	            return null;
	        /**
	         * TODO: We use this data in relegate to determine whether to
	         * promote a previous element. There's no guarantee its presence data
	         * will have updated by this point - if a bug like this arises it will
	         * have to be that we markForRelegation and then find a new lead some other way,
	         * perhaps in didUpdate
	         */
	        projection.isPresent = isPresent;
	        if (drag ||
	            prevProps.layoutDependency !== layoutDependency ||
	            layoutDependency === undefined ||
	            prevProps.isPresent !== isPresent) {
	            projection.willUpdate();
	        }
	        else {
	            this.safeToRemove();
	        }
	        if (prevProps.isPresent !== isPresent) {
	            if (isPresent) {
	                projection.promote();
	            }
	            else if (!projection.relegate()) {
	                /**
	                 * If there's another stack member taking over from this one,
	                 * it's in charge of the exit animation and therefore should
	                 * be in charge of the safe to remove. Otherwise we call it here.
	                 */
	                frame.postRender(() => {
	                    const stack = projection.getStack();
	                    if (!stack || !stack.members.length) {
	                        this.safeToRemove();
	                    }
	                });
	            }
	        }
	        return null;
	    }
	    componentDidUpdate() {
	        const { projection } = this.props.visualElement;
	        if (projection) {
	            projection.root.didUpdate();
	            microtask.postRender(() => {
	                if (!projection.currentAnimation && projection.isLead()) {
	                    this.safeToRemove();
	                }
	            });
	        }
	    }
	    componentWillUnmount() {
	        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;
	        const { projection } = visualElement;
	        if (projection) {
	            projection.scheduleCheckAfterUnmount();
	            if (layoutGroup && layoutGroup.group)
	                layoutGroup.group.remove(projection);
	            if (promoteContext && promoteContext.deregister)
	                promoteContext.deregister(projection);
	        }
	    }
	    safeToRemove() {
	        const { safeToRemove } = this.props;
	        safeToRemove && safeToRemove();
	    }
	    render() {
	        return null;
	    }
	}
	function MeasureLayout(props) {
	    const [isPresent, safeToRemove] = usePresence();
	    const layoutGroup = reactExports.useContext(LayoutGroupContext);
	    return (jsxRuntimeExports.jsx(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: reactExports.useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));
	}
	const defaultScaleCorrectors = {
	    borderRadius: {
	        ...correctBorderRadius,
	        applyTo: [
	            "borderTopLeftRadius",
	            "borderTopRightRadius",
	            "borderBottomLeftRadius",
	            "borderBottomRightRadius",
	        ],
	    },
	    borderTopLeftRadius: correctBorderRadius,
	    borderTopRightRadius: correctBorderRadius,
	    borderBottomLeftRadius: correctBorderRadius,
	    borderBottomRightRadius: correctBorderRadius,
	    boxShadow: correctBoxShadow,
	};

	function animateSingleValue(value, keyframes, options) {
	    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);
	    motionValue$1.start(animateMotionValue("", motionValue$1, keyframes, options));
	    return motionValue$1.animation;
	}

	const compareByDepth = (a, b) => a.depth - b.depth;

	class FlatTree {
	    constructor() {
	        this.children = [];
	        this.isDirty = false;
	    }
	    add(child) {
	        addUniqueItem(this.children, child);
	        this.isDirty = true;
	    }
	    remove(child) {
	        removeItem(this.children, child);
	        this.isDirty = true;
	    }
	    forEach(callback) {
	        this.isDirty && this.children.sort(compareByDepth);
	        this.isDirty = false;
	        this.children.forEach(callback);
	    }
	}

	/**
	 * Timeout defined in ms
	 */
	function delay(callback, timeout) {
	    const start = time.now();
	    const checkElapsed = ({ timestamp }) => {
	        const elapsed = timestamp - start;
	        if (elapsed >= timeout) {
	            cancelFrame(checkElapsed);
	            callback(elapsed - timeout);
	        }
	    };
	    frame.setup(checkElapsed, true);
	    return () => cancelFrame(checkElapsed);
	}

	const borders = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
	const numBorders = borders.length;
	const asNumber = (value) => typeof value === "string" ? parseFloat(value) : value;
	const isPx = (value) => typeof value === "number" || px.test(value);
	function mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {
	    if (shouldCrossfadeOpacity) {
	        target.opacity = mixNumber$1(0, lead.opacity ?? 1, easeCrossfadeIn(progress));
	        target.opacityExit = mixNumber$1(follow.opacity ?? 1, 0, easeCrossfadeOut(progress));
	    }
	    else if (isOnlyMember) {
	        target.opacity = mixNumber$1(follow.opacity ?? 1, lead.opacity ?? 1, progress);
	    }
	    /**
	     * Mix border radius
	     */
	    for (let i = 0; i < numBorders; i++) {
	        const borderLabel = `border${borders[i]}Radius`;
	        let followRadius = getRadius(follow, borderLabel);
	        let leadRadius = getRadius(lead, borderLabel);
	        if (followRadius === undefined && leadRadius === undefined)
	            continue;
	        followRadius || (followRadius = 0);
	        leadRadius || (leadRadius = 0);
	        const canMix = followRadius === 0 ||
	            leadRadius === 0 ||
	            isPx(followRadius) === isPx(leadRadius);
	        if (canMix) {
	            target[borderLabel] = Math.max(mixNumber$1(asNumber(followRadius), asNumber(leadRadius), progress), 0);
	            if (percent.test(leadRadius) || percent.test(followRadius)) {
	                target[borderLabel] += "%";
	            }
	        }
	        else {
	            target[borderLabel] = leadRadius;
	        }
	    }
	    /**
	     * Mix rotation
	     */
	    if (follow.rotate || lead.rotate) {
	        target.rotate = mixNumber$1(follow.rotate || 0, lead.rotate || 0, progress);
	    }
	}
	function getRadius(values, radiusName) {
	    return values[radiusName] !== undefined
	        ? values[radiusName]
	        : values.borderRadius;
	}
	// /**
	//  * We only want to mix the background color if there's a follow element
	//  * that we're not crossfading opacity between. For instance with switch
	//  * AnimateSharedLayout animations, this helps the illusion of a continuous
	//  * element being animated but also cuts down on the number of paints triggered
	//  * for elements where opacity is doing that work for us.
	//  */
	// if (
	//     !hasFollowElement &&
	//     latestLeadValues.backgroundColor &&
	//     latestFollowValues.backgroundColor
	// ) {
	//     /**
	//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.
	//      * We could probably create a mixer that runs at the start of the animation but
	//      * the idea behind the crossfader is that it runs dynamically between two potentially
	//      * changing targets (ie opacity or borderRadius may be animating independently via variants)
	//      */
	//     leadState.backgroundColor = followState.backgroundColor = mixColor(
	//         latestFollowValues.backgroundColor as string,
	//         latestLeadValues.backgroundColor as string
	//     )(p)
	// }
	const easeCrossfadeIn = /*@__PURE__*/ compress(0, 0.5, circOut);
	const easeCrossfadeOut = /*@__PURE__*/ compress(0.5, 0.95, noop);
	function compress(min, max, easing) {
	    return (p) => {
	        // Could replace ifs with clamp
	        if (p < min)
	            return 0;
	        if (p > max)
	            return 1;
	        return easing(progress(min, max, p));
	    };
	}

	/**
	 * Reset an axis to the provided origin box.
	 *
	 * This is a mutative operation.
	 */
	function copyAxisInto(axis, originAxis) {
	    axis.min = originAxis.min;
	    axis.max = originAxis.max;
	}
	/**
	 * Reset a box to the provided origin box.
	 *
	 * This is a mutative operation.
	 */
	function copyBoxInto(box, originBox) {
	    copyAxisInto(box.x, originBox.x);
	    copyAxisInto(box.y, originBox.y);
	}
	/**
	 * Reset a delta to the provided origin box.
	 *
	 * This is a mutative operation.
	 */
	function copyAxisDeltaInto(delta, originDelta) {
	    delta.translate = originDelta.translate;
	    delta.scale = originDelta.scale;
	    delta.originPoint = originDelta.originPoint;
	    delta.origin = originDelta.origin;
	}

	/**
	 * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse
	 */
	function removePointDelta(point, translate, scale, originPoint, boxScale) {
	    point -= translate;
	    point = scalePoint(point, 1 / scale, originPoint);
	    if (boxScale !== undefined) {
	        point = scalePoint(point, 1 / boxScale, originPoint);
	    }
	    return point;
	}
	/**
	 * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse
	 */
	function removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {
	    if (percent.test(translate)) {
	        translate = parseFloat(translate);
	        const relativeProgress = mixNumber$1(sourceAxis.min, sourceAxis.max, translate / 100);
	        translate = relativeProgress - sourceAxis.min;
	    }
	    if (typeof translate !== "number")
	        return;
	    let originPoint = mixNumber$1(originAxis.min, originAxis.max, origin);
	    if (axis === originAxis)
	        originPoint -= translate;
	    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);
	    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);
	}
	/**
	 * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse
	 * and acts as a bridge between motion values and removeAxisDelta
	 */
	function removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {
	    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);
	}
	/**
	 * The names of the motion values we want to apply as translation, scale and origin.
	 */
	const xKeys = ["x", "scaleX", "originX"];
	const yKeys = ["y", "scaleY", "originY"];
	/**
	 * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse
	 * and acts as a bridge between motion values and removeAxisDelta
	 */
	function removeBoxTransforms(box, transforms, originBox, sourceBox) {
	    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);
	    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);
	}

	function isAxisDeltaZero(delta) {
	    return delta.translate === 0 && delta.scale === 1;
	}
	function isDeltaZero(delta) {
	    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
	}
	function axisEquals(a, b) {
	    return a.min === b.min && a.max === b.max;
	}
	function boxEquals(a, b) {
	    return axisEquals(a.x, b.x) && axisEquals(a.y, b.y);
	}
	function axisEqualsRounded(a, b) {
	    return (Math.round(a.min) === Math.round(b.min) &&
	        Math.round(a.max) === Math.round(b.max));
	}
	function boxEqualsRounded(a, b) {
	    return axisEqualsRounded(a.x, b.x) && axisEqualsRounded(a.y, b.y);
	}
	function aspectRatio(box) {
	    return calcLength(box.x) / calcLength(box.y);
	}
	function axisDeltaEquals(a, b) {
	    return (a.translate === b.translate &&
	        a.scale === b.scale &&
	        a.originPoint === b.originPoint);
	}

	class NodeStack {
	    constructor() {
	        this.members = [];
	    }
	    add(node) {
	        addUniqueItem(this.members, node);
	        node.scheduleRender();
	    }
	    remove(node) {
	        removeItem(this.members, node);
	        if (node === this.prevLead) {
	            this.prevLead = undefined;
	        }
	        if (node === this.lead) {
	            const prevLead = this.members[this.members.length - 1];
	            if (prevLead) {
	                this.promote(prevLead);
	            }
	        }
	    }
	    relegate(node) {
	        const indexOfNode = this.members.findIndex((member) => node === member);
	        if (indexOfNode === 0)
	            return false;
	        /**
	         * Find the next projection node that is present
	         */
	        let prevLead;
	        for (let i = indexOfNode; i >= 0; i--) {
	            const member = this.members[i];
	            if (member.isPresent !== false) {
	                prevLead = member;
	                break;
	            }
	        }
	        if (prevLead) {
	            this.promote(prevLead);
	            return true;
	        }
	        else {
	            return false;
	        }
	    }
	    promote(node, preserveFollowOpacity) {
	        const prevLead = this.lead;
	        if (node === prevLead)
	            return;
	        this.prevLead = prevLead;
	        this.lead = node;
	        node.show();
	        if (prevLead) {
	            prevLead.instance && prevLead.scheduleRender();
	            node.scheduleRender();
	            node.resumeFrom = prevLead;
	            if (preserveFollowOpacity) {
	                node.resumeFrom.preserveOpacity = true;
	            }
	            if (prevLead.snapshot) {
	                node.snapshot = prevLead.snapshot;
	                node.snapshot.latestValues =
	                    prevLead.animationValues || prevLead.latestValues;
	            }
	            if (node.root && node.root.isUpdating) {
	                node.isLayoutDirty = true;
	            }
	            const { crossfade } = node.options;
	            if (crossfade === false) {
	                prevLead.hide();
	            }
	            /**
	             * TODO:
	             *   - Test border radius when previous node was deleted
	             *   - boxShadow mixing
	             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)
	             *   - Shared between element A in transformed container and element B (transform stays the same or changes)
	             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)
	             * ---
	             *   - Crossfade opacity of root nodes
	             *   - layoutId changes after animation
	             *   - layoutId changes mid animation
	             */
	        }
	    }
	    exitAnimationComplete() {
	        this.members.forEach((node) => {
	            const { options, resumingFrom } = node;
	            options.onExitComplete && options.onExitComplete();
	            if (resumingFrom) {
	                resumingFrom.options.onExitComplete &&
	                    resumingFrom.options.onExitComplete();
	            }
	        });
	    }
	    scheduleRender() {
	        this.members.forEach((node) => {
	            node.instance && node.scheduleRender(false);
	        });
	    }
	    /**
	     * Clear any leads that have been removed this render to prevent them from being
	     * used in future animations and to prevent memory leaks
	     */
	    removeLeadSnapshot() {
	        if (this.lead && this.lead.snapshot) {
	            this.lead.snapshot = undefined;
	        }
	    }
	}

	function buildProjectionTransform(delta, treeScale, latestTransform) {
	    let transform = "";
	    /**
	     * The translations we use to calculate are always relative to the viewport coordinate space.
	     * But when we apply scales, we also scale the coordinate space of an element and its children.
	     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need
	     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.
	     */
	    const xTranslate = delta.x.translate / treeScale.x;
	    const yTranslate = delta.y.translate / treeScale.y;
	    const zTranslate = latestTransform?.z || 0;
	    if (xTranslate || yTranslate || zTranslate) {
	        transform = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;
	    }
	    /**
	     * Apply scale correction for the tree transform.
	     * This will apply scale to the screen-orientated axes.
	     */
	    if (treeScale.x !== 1 || treeScale.y !== 1) {
	        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;
	    }
	    if (latestTransform) {
	        const { transformPerspective, rotate, rotateX, rotateY, skewX, skewY } = latestTransform;
	        if (transformPerspective)
	            transform = `perspective(${transformPerspective}px) ${transform}`;
	        if (rotate)
	            transform += `rotate(${rotate}deg) `;
	        if (rotateX)
	            transform += `rotateX(${rotateX}deg) `;
	        if (rotateY)
	            transform += `rotateY(${rotateY}deg) `;
	        if (skewX)
	            transform += `skewX(${skewX}deg) `;
	        if (skewY)
	            transform += `skewY(${skewY}deg) `;
	    }
	    /**
	     * Apply scale to match the size of the element to the size we want it.
	     * This will apply scale to the element-orientated axes.
	     */
	    const elementScaleX = delta.x.scale * treeScale.x;
	    const elementScaleY = delta.y.scale * treeScale.y;
	    if (elementScaleX !== 1 || elementScaleY !== 1) {
	        transform += `scale(${elementScaleX}, ${elementScaleY})`;
	    }
	    return transform || "none";
	}

	const transformAxes = ["", "X", "Y", "Z"];
	const hiddenVisibility = { visibility: "hidden" };
	/**
	 * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1
	 * which has a noticeable difference in spring animations
	 */
	const animationTarget = 1000;
	let id = 0;
	function resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {
	    const { latestValues } = visualElement;
	    // Record the distorting transform and then temporarily set it to 0
	    if (latestValues[key]) {
	        values[key] = latestValues[key];
	        visualElement.setStaticValue(key, 0);
	        if (sharedAnimationValues) {
	            sharedAnimationValues[key] = 0;
	        }
	    }
	}
	function cancelTreeOptimisedTransformAnimations(projectionNode) {
	    projectionNode.hasCheckedOptimisedAppear = true;
	    if (projectionNode.root === projectionNode)
	        return;
	    const { visualElement } = projectionNode.options;
	    if (!visualElement)
	        return;
	    const appearId = getOptimisedAppearId(visualElement);
	    if (window.MotionHasOptimisedAnimation(appearId, "transform")) {
	        const { layout, layoutId } = projectionNode.options;
	        window.MotionCancelOptimisedAnimation(appearId, "transform", frame, !(layout || layoutId));
	    }
	    const { parent } = projectionNode;
	    if (parent && !parent.hasCheckedOptimisedAppear) {
	        cancelTreeOptimisedTransformAnimations(parent);
	    }
	}
	function createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {
	    return class ProjectionNode {
	        constructor(latestValues = {}, parent = defaultParent?.()) {
	            /**
	             * A unique ID generated for every projection node.
	             */
	            this.id = id++;
	            /**
	             * An id that represents a unique session instigated by startUpdate.
	             */
	            this.animationId = 0;
	            /**
	             * A Set containing all this component's children. This is used to iterate
	             * through the children.
	             *
	             * TODO: This could be faster to iterate as a flat array stored on the root node.
	             */
	            this.children = new Set();
	            /**
	             * Options for the node. We use this to configure what kind of layout animations
	             * we should perform (if any).
	             */
	            this.options = {};
	            /**
	             * We use this to detect when its safe to shut down part of a projection tree.
	             * We have to keep projecting children for scale correction and relative projection
	             * until all their parents stop performing layout animations.
	             */
	            this.isTreeAnimating = false;
	            this.isAnimationBlocked = false;
	            /**
	             * Flag to true if we think this layout has been changed. We can't always know this,
	             * currently we set it to true every time a component renders, or if it has a layoutDependency
	             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup
	             * and if one node is dirtied, they all are.
	             */
	            this.isLayoutDirty = false;
	            /**
	             * Flag to true if we think the projection calculations for this node needs
	             * recalculating as a result of an updated transform or layout animation.
	             */
	            this.isProjectionDirty = false;
	            /**
	             * Flag to true if the layout *or* transform has changed. This then gets propagated
	             * throughout the projection tree, forcing any element below to recalculate on the next frame.
	             */
	            this.isSharedProjectionDirty = false;
	            /**
	             * Flag transform dirty. This gets propagated throughout the whole tree but is only
	             * respected by shared nodes.
	             */
	            this.isTransformDirty = false;
	            /**
	             * Block layout updates for instant layout transitions throughout the tree.
	             */
	            this.updateManuallyBlocked = false;
	            this.updateBlockedByResize = false;
	            /**
	             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`
	             * call.
	             */
	            this.isUpdating = false;
	            /**
	             * If this is an SVG element we currently disable projection transforms
	             */
	            this.isSVG = false;
	            /**
	             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset
	             * its projection styles.
	             */
	            this.needsReset = false;
	            /**
	             * Flags whether this node should have its transform reset prior to measuring.
	             */
	            this.shouldResetTransform = false;
	            /**
	             * Store whether this node has been checked for optimised appear animations. As
	             * effects fire bottom-up, and we want to look up the tree for appear animations,
	             * this makes sure we only check each path once, stopping at nodes that
	             * have already been checked.
	             */
	            this.hasCheckedOptimisedAppear = false;
	            /**
	             * An object representing the calculated contextual/accumulated/tree scale.
	             * This will be used to scale calculcated projection transforms, as these are
	             * calculated in screen-space but need to be scaled for elements to layoutly
	             * make it to their calculated destinations.
	             *
	             * TODO: Lazy-init
	             */
	            this.treeScale = { x: 1, y: 1 };
	            /**
	             *
	             */
	            this.eventHandlers = new Map();
	            this.hasTreeAnimated = false;
	            // Note: Currently only running on root node
	            this.updateScheduled = false;
	            this.scheduleUpdate = () => this.update();
	            this.projectionUpdateScheduled = false;
	            this.checkUpdateFailed = () => {
	                if (this.isUpdating) {
	                    this.isUpdating = false;
	                    this.clearAllSnapshots();
	                }
	            };
	            /**
	             * This is a multi-step process as shared nodes might be of different depths. Nodes
	             * are sorted by depth order, so we need to resolve the entire tree before moving to
	             * the next step.
	             */
	            this.updateProjection = () => {
	                this.projectionUpdateScheduled = false;
	                this.nodes.forEach(propagateDirtyNodes);
	                this.nodes.forEach(resolveTargetDelta);
	                this.nodes.forEach(calcProjection);
	                this.nodes.forEach(cleanDirtyNodes);
	            };
	            /**
	             * Frame calculations
	             */
	            this.resolvedRelativeTargetAt = 0.0;
	            this.hasProjected = false;
	            this.isVisible = true;
	            this.animationProgress = 0;
	            /**
	             * Shared layout
	             */
	            // TODO Only running on root node
	            this.sharedNodes = new Map();
	            this.latestValues = latestValues;
	            this.root = parent ? parent.root || parent : this;
	            this.path = parent ? [...parent.path, parent] : [];
	            this.parent = parent;
	            this.depth = parent ? parent.depth + 1 : 0;
	            for (let i = 0; i < this.path.length; i++) {
	                this.path[i].shouldResetTransform = true;
	            }
	            if (this.root === this)
	                this.nodes = new FlatTree();
	        }
	        addEventListener(name, handler) {
	            if (!this.eventHandlers.has(name)) {
	                this.eventHandlers.set(name, new SubscriptionManager());
	            }
	            return this.eventHandlers.get(name).add(handler);
	        }
	        notifyListeners(name, ...args) {
	            const subscriptionManager = this.eventHandlers.get(name);
	            subscriptionManager && subscriptionManager.notify(...args);
	        }
	        hasListeners(name) {
	            return this.eventHandlers.has(name);
	        }
	        /**
	         * Lifecycles
	         */
	        mount(instance) {
	            if (this.instance)
	                return;
	            this.isSVG = isSVGElement(instance) && !isSVGSVGElement(instance);
	            this.instance = instance;
	            const { layoutId, layout, visualElement } = this.options;
	            if (visualElement && !visualElement.current) {
	                visualElement.mount(instance);
	            }
	            this.root.nodes.add(this);
	            this.parent && this.parent.children.add(this);
	            if (this.root.hasTreeAnimated && (layout || layoutId)) {
	                this.isLayoutDirty = true;
	            }
	            if (attachResizeListener) {
	                let cancelDelay;
	                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);
	                attachResizeListener(instance, () => {
	                    this.root.updateBlockedByResize = true;
	                    cancelDelay && cancelDelay();
	                    cancelDelay = delay(resizeUnblockUpdate, 250);
	                    if (globalProjectionState.hasAnimatedSinceResize) {
	                        globalProjectionState.hasAnimatedSinceResize = false;
	                        this.nodes.forEach(finishAnimation);
	                    }
	                });
	            }
	            if (layoutId) {
	                this.root.registerSharedNode(layoutId, this);
	            }
	            // Only register the handler if it requires layout animation
	            if (this.options.animate !== false &&
	                visualElement &&
	                (layoutId || layout)) {
	                this.addEventListener("didUpdate", ({ delta, hasLayoutChanged, hasRelativeLayoutChanged, layout: newLayout, }) => {
	                    if (this.isTreeAnimationBlocked()) {
	                        this.target = undefined;
	                        this.relativeTarget = undefined;
	                        return;
	                    }
	                    // TODO: Check here if an animation exists
	                    const layoutTransition = this.options.transition ||
	                        visualElement.getDefaultTransition() ||
	                        defaultLayoutTransition;
	                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();
	                    /**
	                     * The target layout of the element might stay the same,
	                     * but its position relative to its parent has changed.
	                     */
	                    const hasTargetChanged = !this.targetLayout ||
	                        !boxEqualsRounded(this.targetLayout, newLayout);
	                    /*
	                     * Note: Disabled to fix relative animations always triggering new
	                     * layout animations. If this causes further issues, we can try
	                     * a different approach to detecting relative target changes.
	                     */
	                    // || hasRelativeLayoutChanged
	                    /**
	                     * If the layout hasn't seemed to have changed, it might be that the
	                     * element is visually in the same place in the document but its position
	                     * relative to its parent has indeed changed. So here we check for that.
	                     */
	                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeLayoutChanged;
	                    if (this.options.layoutRoot ||
	                        this.resumeFrom ||
	                        hasOnlyRelativeTargetChanged ||
	                        (hasLayoutChanged &&
	                            (hasTargetChanged || !this.currentAnimation))) {
	                        if (this.resumeFrom) {
	                            this.resumingFrom = this.resumeFrom;
	                            this.resumingFrom.resumingFrom = undefined;
	                        }
	                        const animationOptions = {
	                            ...getValueTransition(layoutTransition, "layout"),
	                            onPlay: onLayoutAnimationStart,
	                            onComplete: onLayoutAnimationComplete,
	                        };
	                        if (visualElement.shouldReduceMotion ||
	                            this.options.layoutRoot) {
	                            animationOptions.delay = 0;
	                            animationOptions.type = false;
	                        }
	                        this.startAnimation(animationOptions);
	                        /**
	                         * Set animation origin after starting animation to avoid layout jump
	                         * caused by stopping previous layout animation
	                         */
	                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
	                    }
	                    else {
	                        /**
	                         * If the layout hasn't changed and we have an animation that hasn't started yet,
	                         * finish it immediately. Otherwise it will be animating from a location
	                         * that was probably never commited to screen and look like a jumpy box.
	                         */
	                        if (!hasLayoutChanged) {
	                            finishAnimation(this);
	                        }
	                        if (this.isLead() && this.options.onExitComplete) {
	                            this.options.onExitComplete();
	                        }
	                    }
	                    this.targetLayout = newLayout;
	                });
	            }
	        }
	        unmount() {
	            this.options.layoutId && this.willUpdate();
	            this.root.nodes.remove(this);
	            const stack = this.getStack();
	            stack && stack.remove(this);
	            this.parent && this.parent.children.delete(this);
	            this.instance = undefined;
	            this.eventHandlers.clear();
	            cancelFrame(this.updateProjection);
	        }
	        // only on the root
	        blockUpdate() {
	            this.updateManuallyBlocked = true;
	        }
	        unblockUpdate() {
	            this.updateManuallyBlocked = false;
	        }
	        isUpdateBlocked() {
	            return this.updateManuallyBlocked || this.updateBlockedByResize;
	        }
	        isTreeAnimationBlocked() {
	            return (this.isAnimationBlocked ||
	                (this.parent && this.parent.isTreeAnimationBlocked()) ||
	                false);
	        }
	        // Note: currently only running on root node
	        startUpdate() {
	            if (this.isUpdateBlocked())
	                return;
	            this.isUpdating = true;
	            this.nodes && this.nodes.forEach(resetSkewAndRotation);
	            this.animationId++;
	        }
	        getTransformTemplate() {
	            const { visualElement } = this.options;
	            return visualElement && visualElement.getProps().transformTemplate;
	        }
	        willUpdate(shouldNotifyListeners = true) {
	            this.root.hasTreeAnimated = true;
	            if (this.root.isUpdateBlocked()) {
	                this.options.onExitComplete && this.options.onExitComplete();
	                return;
	            }
	            /**
	             * If we're running optimised appear animations then these must be
	             * cancelled before measuring the DOM. This is so we can measure
	             * the true layout of the element rather than the WAAPI animation
	             * which will be unaffected by the resetSkewAndRotate step.
	             *
	             * Note: This is a DOM write. Worst case scenario is this is sandwiched
	             * between other snapshot reads which will cause unnecessary style recalculations.
	             * This has to happen here though, as we don't yet know which nodes will need
	             * snapshots in startUpdate(), but we only want to cancel optimised animations
	             * if a layout animation measurement is actually going to be affected by them.
	             */
	            if (window.MotionCancelOptimisedAnimation &&
	                !this.hasCheckedOptimisedAppear) {
	                cancelTreeOptimisedTransformAnimations(this);
	            }
	            !this.root.isUpdating && this.root.startUpdate();
	            if (this.isLayoutDirty)
	                return;
	            this.isLayoutDirty = true;
	            for (let i = 0; i < this.path.length; i++) {
	                const node = this.path[i];
	                node.shouldResetTransform = true;
	                node.updateScroll("snapshot");
	                if (node.options.layoutRoot) {
	                    node.willUpdate(false);
	                }
	            }
	            const { layoutId, layout } = this.options;
	            if (layoutId === undefined && !layout)
	                return;
	            const transformTemplate = this.getTransformTemplate();
	            this.prevTransformTemplateValue = transformTemplate
	                ? transformTemplate(this.latestValues, "")
	                : undefined;
	            this.updateSnapshot();
	            shouldNotifyListeners && this.notifyListeners("willUpdate");
	        }
	        update() {
	            this.updateScheduled = false;
	            const updateWasBlocked = this.isUpdateBlocked();
	            // When doing an instant transition, we skip the layout update,
	            // but should still clean up the measurements so that the next
	            // snapshot could be taken correctly.
	            if (updateWasBlocked) {
	                this.unblockUpdate();
	                this.clearAllSnapshots();
	                this.nodes.forEach(clearMeasurements);
	                return;
	            }
	            if (!this.isUpdating) {
	                this.nodes.forEach(clearIsLayoutDirty);
	            }
	            this.isUpdating = false;
	            /**
	             * Write
	             */
	            this.nodes.forEach(resetTransformStyle);
	            /**
	             * Read ==================
	             */
	            // Update layout measurements of updated children
	            this.nodes.forEach(updateLayout);
	            /**
	             * Write
	             */
	            // Notify listeners that the layout is updated
	            this.nodes.forEach(notifyLayoutUpdate);
	            this.clearAllSnapshots();
	            /**
	             * Manually flush any pending updates. Ideally
	             * we could leave this to the following requestAnimationFrame but this seems
	             * to leave a flash of incorrectly styled content.
	             */
	            const now = time.now();
	            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);
	            frameData.timestamp = now;
	            frameData.isProcessing = true;
	            frameSteps.update.process(frameData);
	            frameSteps.preRender.process(frameData);
	            frameSteps.render.process(frameData);
	            frameData.isProcessing = false;
	        }
	        didUpdate() {
	            if (!this.updateScheduled) {
	                this.updateScheduled = true;
	                microtask.read(this.scheduleUpdate);
	            }
	        }
	        clearAllSnapshots() {
	            this.nodes.forEach(clearSnapshot);
	            this.sharedNodes.forEach(removeLeadSnapshots);
	        }
	        scheduleUpdateProjection() {
	            if (!this.projectionUpdateScheduled) {
	                this.projectionUpdateScheduled = true;
	                frame.preRender(this.updateProjection, false, true);
	            }
	        }
	        scheduleCheckAfterUnmount() {
	            /**
	             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,
	             * we manually call didUpdate to give a chance to the siblings to animate.
	             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.
	             */
	            frame.postRender(() => {
	                if (this.isLayoutDirty) {
	                    this.root.didUpdate();
	                }
	                else {
	                    this.root.checkUpdateFailed();
	                }
	            });
	        }
	        /**
	         * Update measurements
	         */
	        updateSnapshot() {
	            if (this.snapshot || !this.instance)
	                return;
	            this.snapshot = this.measure();
	            if (this.snapshot &&
	                !calcLength(this.snapshot.measuredBox.x) &&
	                !calcLength(this.snapshot.measuredBox.y)) {
	                this.snapshot = undefined;
	            }
	        }
	        updateLayout() {
	            if (!this.instance)
	                return;
	            // TODO: Incorporate into a forwarded scroll offset
	            this.updateScroll();
	            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&
	                !this.isLayoutDirty) {
	                return;
	            }
	            /**
	             * When a node is mounted, it simply resumes from the prevLead's
	             * snapshot instead of taking a new one, but the ancestors scroll
	             * might have updated while the prevLead is unmounted. We need to
	             * update the scroll again to make sure the layout we measure is
	             * up to date.
	             */
	            if (this.resumeFrom && !this.resumeFrom.instance) {
	                for (let i = 0; i < this.path.length; i++) {
	                    const node = this.path[i];
	                    node.updateScroll();
	                }
	            }
	            const prevLayout = this.layout;
	            this.layout = this.measure(false);
	            this.layoutCorrected = createBox();
	            this.isLayoutDirty = false;
	            this.projectionDelta = undefined;
	            this.notifyListeners("measure", this.layout.layoutBox);
	            const { visualElement } = this.options;
	            visualElement &&
	                visualElement.notify("LayoutMeasure", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);
	        }
	        updateScroll(phase = "measure") {
	            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);
	            if (this.scroll &&
	                this.scroll.animationId === this.root.animationId &&
	                this.scroll.phase === phase) {
	                needsMeasurement = false;
	            }
	            if (needsMeasurement && this.instance) {
	                const isRoot = checkIsScrollRoot(this.instance);
	                this.scroll = {
	                    animationId: this.root.animationId,
	                    phase,
	                    isRoot,
	                    offset: measureScroll(this.instance),
	                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot,
	                };
	            }
	        }
	        resetTransform() {
	            if (!resetTransform)
	                return;
	            const isResetRequested = this.isLayoutDirty ||
	                this.shouldResetTransform ||
	                this.options.alwaysMeasureLayout;
	            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);
	            const transformTemplate = this.getTransformTemplate();
	            const transformTemplateValue = transformTemplate
	                ? transformTemplate(this.latestValues, "")
	                : undefined;
	            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
	            if (isResetRequested &&
	                this.instance &&
	                (hasProjection ||
	                    hasTransform(this.latestValues) ||
	                    transformTemplateHasChanged)) {
	                resetTransform(this.instance, transformTemplateValue);
	                this.shouldResetTransform = false;
	                this.scheduleRender();
	            }
	        }
	        measure(removeTransform = true) {
	            const pageBox = this.measurePageBox();
	            let layoutBox = this.removeElementScroll(pageBox);
	            /**
	             * Measurements taken during the pre-render stage
	             * still have transforms applied so we remove them
	             * via calculation.
	             */
	            if (removeTransform) {
	                layoutBox = this.removeTransform(layoutBox);
	            }
	            roundBox(layoutBox);
	            return {
	                animationId: this.root.animationId,
	                measuredBox: pageBox,
	                layoutBox,
	                latestValues: {},
	                source: this.id,
	            };
	        }
	        measurePageBox() {
	            const { visualElement } = this.options;
	            if (!visualElement)
	                return createBox();
	            const box = visualElement.measureViewportBox();
	            const wasInScrollRoot = this.scroll?.wasRoot || this.path.some(checkNodeWasScrollRoot);
	            if (!wasInScrollRoot) {
	                // Remove viewport scroll to give page-relative coordinates
	                const { scroll } = this.root;
	                if (scroll) {
	                    translateAxis(box.x, scroll.offset.x);
	                    translateAxis(box.y, scroll.offset.y);
	                }
	            }
	            return box;
	        }
	        removeElementScroll(box) {
	            const boxWithoutScroll = createBox();
	            copyBoxInto(boxWithoutScroll, box);
	            if (this.scroll?.wasRoot) {
	                return boxWithoutScroll;
	            }
	            /**
	             * Performance TODO: Keep a cumulative scroll offset down the tree
	             * rather than loop back up the path.
	             */
	            for (let i = 0; i < this.path.length; i++) {
	                const node = this.path[i];
	                const { scroll, options } = node;
	                if (node !== this.root && scroll && options.layoutScroll) {
	                    /**
	                     * If this is a new scroll root, we want to remove all previous scrolls
	                     * from the viewport box.
	                     */
	                    if (scroll.wasRoot) {
	                        copyBoxInto(boxWithoutScroll, box);
	                    }
	                    translateAxis(boxWithoutScroll.x, scroll.offset.x);
	                    translateAxis(boxWithoutScroll.y, scroll.offset.y);
	                }
	            }
	            return boxWithoutScroll;
	        }
	        applyTransform(box, transformOnly = false) {
	            const withTransforms = createBox();
	            copyBoxInto(withTransforms, box);
	            for (let i = 0; i < this.path.length; i++) {
	                const node = this.path[i];
	                if (!transformOnly &&
	                    node.options.layoutScroll &&
	                    node.scroll &&
	                    node !== node.root) {
	                    transformBox(withTransforms, {
	                        x: -node.scroll.offset.x,
	                        y: -node.scroll.offset.y,
	                    });
	                }
	                if (!hasTransform(node.latestValues))
	                    continue;
	                transformBox(withTransforms, node.latestValues);
	            }
	            if (hasTransform(this.latestValues)) {
	                transformBox(withTransforms, this.latestValues);
	            }
	            return withTransforms;
	        }
	        removeTransform(box) {
	            const boxWithoutTransform = createBox();
	            copyBoxInto(boxWithoutTransform, box);
	            for (let i = 0; i < this.path.length; i++) {
	                const node = this.path[i];
	                if (!node.instance)
	                    continue;
	                if (!hasTransform(node.latestValues))
	                    continue;
	                hasScale(node.latestValues) && node.updateSnapshot();
	                const sourceBox = createBox();
	                const nodeBox = node.measurePageBox();
	                copyBoxInto(sourceBox, nodeBox);
	                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);
	            }
	            if (hasTransform(this.latestValues)) {
	                removeBoxTransforms(boxWithoutTransform, this.latestValues);
	            }
	            return boxWithoutTransform;
	        }
	        setTargetDelta(delta) {
	            this.targetDelta = delta;
	            this.root.scheduleUpdateProjection();
	            this.isProjectionDirty = true;
	        }
	        setOptions(options) {
	            this.options = {
	                ...this.options,
	                ...options,
	                crossfade: options.crossfade !== undefined ? options.crossfade : true,
	            };
	        }
	        clearMeasurements() {
	            this.scroll = undefined;
	            this.layout = undefined;
	            this.snapshot = undefined;
	            this.prevTransformTemplateValue = undefined;
	            this.targetDelta = undefined;
	            this.target = undefined;
	            this.isLayoutDirty = false;
	        }
	        forceRelativeParentToResolveTarget() {
	            if (!this.relativeParent)
	                return;
	            /**
	             * If the parent target isn't up-to-date, force it to update.
	             * This is an unfortunate de-optimisation as it means any updating relative
	             * projection will cause all the relative parents to recalculate back
	             * up the tree.
	             */
	            if (this.relativeParent.resolvedRelativeTargetAt !==
	                frameData.timestamp) {
	                this.relativeParent.resolveTargetDelta(true);
	            }
	        }
	        resolveTargetDelta(forceRecalculation = false) {
	            /**
	             * Once the dirty status of nodes has been spread through the tree, we also
	             * need to check if we have a shared node of a different depth that has itself
	             * been dirtied.
	             */
	            const lead = this.getLead();
	            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);
	            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);
	            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);
	            const isShared = Boolean(this.resumingFrom) || this !== lead;
	            /**
	             * We don't use transform for this step of processing so we don't
	             * need to check whether any nodes have changed transform.
	             */
	            const canSkip = !(forceRecalculation ||
	                (isShared && this.isSharedProjectionDirty) ||
	                this.isProjectionDirty ||
	                this.parent?.isProjectionDirty ||
	                this.attemptToResolveRelativeTarget ||
	                this.root.updateBlockedByResize);
	            if (canSkip)
	                return;
	            const { layout, layoutId } = this.options;
	            /**
	             * If we have no layout, we can't perform projection, so early return
	             */
	            if (!this.layout || !(layout || layoutId))
	                return;
	            this.resolvedRelativeTargetAt = frameData.timestamp;
	            /**
	             * If we don't have a targetDelta but do have a layout, we can attempt to resolve
	             * a relativeParent. This will allow a component to perform scale correction
	             * even if no animation has started.
	             */
	            if (!this.targetDelta && !this.relativeTarget) {
	                const relativeParent = this.getClosestProjectingParent();
	                if (relativeParent &&
	                    relativeParent.layout &&
	                    this.animationProgress !== 1) {
	                    this.relativeParent = relativeParent;
	                    this.forceRelativeParentToResolveTarget();
	                    this.relativeTarget = createBox();
	                    this.relativeTargetOrigin = createBox();
	                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);
	                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
	                }
	                else {
	                    this.relativeParent = this.relativeTarget = undefined;
	                }
	            }
	            /**
	             * If we have no relative target or no target delta our target isn't valid
	             * for this frame.
	             */
	            if (!this.relativeTarget && !this.targetDelta)
	                return;
	            /**
	             * Lazy-init target data structure
	             */
	            if (!this.target) {
	                this.target = createBox();
	                this.targetWithTransforms = createBox();
	            }
	            /**
	             * If we've got a relative box for this component, resolve it into a target relative to the parent.
	             */
	            if (this.relativeTarget &&
	                this.relativeTargetOrigin &&
	                this.relativeParent &&
	                this.relativeParent.target) {
	                this.forceRelativeParentToResolveTarget();
	                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);
	                /**
	                 * If we've only got a targetDelta, resolve it into a target
	                 */
	            }
	            else if (this.targetDelta) {
	                if (Boolean(this.resumingFrom)) {
	                    // TODO: This is creating a new object every frame
	                    this.target = this.applyTransform(this.layout.layoutBox);
	                }
	                else {
	                    copyBoxInto(this.target, this.layout.layoutBox);
	                }
	                applyBoxDelta(this.target, this.targetDelta);
	            }
	            else {
	                /**
	                 * If no target, use own layout as target
	                 */
	                copyBoxInto(this.target, this.layout.layoutBox);
	            }
	            /**
	             * If we've been told to attempt to resolve a relative target, do so.
	             */
	            if (this.attemptToResolveRelativeTarget) {
	                this.attemptToResolveRelativeTarget = false;
	                const relativeParent = this.getClosestProjectingParent();
	                if (relativeParent &&
	                    Boolean(relativeParent.resumingFrom) ===
	                        Boolean(this.resumingFrom) &&
	                    !relativeParent.options.layoutScroll &&
	                    relativeParent.target &&
	                    this.animationProgress !== 1) {
	                    this.relativeParent = relativeParent;
	                    this.forceRelativeParentToResolveTarget();
	                    this.relativeTarget = createBox();
	                    this.relativeTargetOrigin = createBox();
	                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);
	                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
	                }
	                else {
	                    this.relativeParent = this.relativeTarget = undefined;
	                }
	            }
	        }
	        getClosestProjectingParent() {
	            if (!this.parent ||
	                hasScale(this.parent.latestValues) ||
	                has2DTranslate(this.parent.latestValues)) {
	                return undefined;
	            }
	            if (this.parent.isProjecting()) {
	                return this.parent;
	            }
	            else {
	                return this.parent.getClosestProjectingParent();
	            }
	        }
	        isProjecting() {
	            return Boolean((this.relativeTarget ||
	                this.targetDelta ||
	                this.options.layoutRoot) &&
	                this.layout);
	        }
	        calcProjection() {
	            const lead = this.getLead();
	            const isShared = Boolean(this.resumingFrom) || this !== lead;
	            let canSkip = true;
	            /**
	             * If this is a normal layout animation and neither this node nor its nearest projecting
	             * is dirty then we can't skip.
	             */
	            if (this.isProjectionDirty || this.parent?.isProjectionDirty) {
	                canSkip = false;
	            }
	            /**
	             * If this is a shared layout animation and this node's shared projection is dirty then
	             * we can't skip.
	             */
	            if (isShared &&
	                (this.isSharedProjectionDirty || this.isTransformDirty)) {
	                canSkip = false;
	            }
	            /**
	             * If we have resolved the target this frame we must recalculate the
	             * projection to ensure it visually represents the internal calculations.
	             */
	            if (this.resolvedRelativeTargetAt === frameData.timestamp) {
	                canSkip = false;
	            }
	            if (canSkip)
	                return;
	            const { layout, layoutId } = this.options;
	            /**
	             * If this section of the tree isn't animating we can
	             * delete our target sources for the following frame.
	             */
	            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||
	                this.currentAnimation ||
	                this.pendingAnimation);
	            if (!this.isTreeAnimating) {
	                this.targetDelta = this.relativeTarget = undefined;
	            }
	            if (!this.layout || !(layout || layoutId))
	                return;
	            /**
	             * Reset the corrected box with the latest values from box, as we're then going
	             * to perform mutative operations on it.
	             */
	            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);
	            /**
	             * Record previous tree scales before updating.
	             */
	            const prevTreeScaleX = this.treeScale.x;
	            const prevTreeScaleY = this.treeScale.y;
	            /**
	             * Apply all the parent deltas to this box to produce the corrected box. This
	             * is the layout box, as it will appear on screen as a result of the transforms of its parents.
	             */
	            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);
	            /**
	             * If this layer needs to perform scale correction but doesn't have a target,
	             * use the layout as the target.
	             */
	            if (lead.layout &&
	                !lead.target &&
	                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {
	                lead.target = lead.layout.layoutBox;
	                lead.targetWithTransforms = createBox();
	            }
	            const { target } = lead;
	            if (!target) {
	                /**
	                 * If we don't have a target to project into, but we were previously
	                 * projecting, we want to remove the stored transform and schedule
	                 * a render to ensure the elements reflect the removed transform.
	                 */
	                if (this.prevProjectionDelta) {
	                    this.createProjectionDeltas();
	                    this.scheduleRender();
	                }
	                return;
	            }
	            if (!this.projectionDelta || !this.prevProjectionDelta) {
	                this.createProjectionDeltas();
	            }
	            else {
	                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);
	                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);
	            }
	            /**
	             * Update the delta between the corrected box and the target box before user-set transforms were applied.
	             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate
	             * for our layout reprojection, but still allow them to be scaled correctly by the user.
	             * It might be that to simplify this we may want to accept that user-set scale is also corrected
	             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting
	             * to allow people to choose whether these styles are corrected based on just the
	             * layout reprojection or the final bounding box.
	             */
	            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);
	            if (this.treeScale.x !== prevTreeScaleX ||
	                this.treeScale.y !== prevTreeScaleY ||
	                !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||
	                !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {
	                this.hasProjected = true;
	                this.scheduleRender();
	                this.notifyListeners("projectionUpdate", target);
	            }
	        }
	        hide() {
	            this.isVisible = false;
	            // TODO: Schedule render
	        }
	        show() {
	            this.isVisible = true;
	            // TODO: Schedule render
	        }
	        scheduleRender(notifyAll = true) {
	            this.options.visualElement?.scheduleRender();
	            if (notifyAll) {
	                const stack = this.getStack();
	                stack && stack.scheduleRender();
	            }
	            if (this.resumingFrom && !this.resumingFrom.instance) {
	                this.resumingFrom = undefined;
	            }
	        }
	        createProjectionDeltas() {
	            this.prevProjectionDelta = createDelta();
	            this.projectionDelta = createDelta();
	            this.projectionDeltaWithTransform = createDelta();
	        }
	        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {
	            const snapshot = this.snapshot;
	            const snapshotLatestValues = snapshot ? snapshot.latestValues : {};
	            const mixedValues = { ...this.latestValues };
	            const targetDelta = createDelta();
	            if (!this.relativeParent ||
	                !this.relativeParent.options.layoutRoot) {
	                this.relativeTarget = this.relativeTargetOrigin = undefined;
	            }
	            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
	            const relativeLayout = createBox();
	            const snapshotSource = snapshot ? snapshot.source : undefined;
	            const layoutSource = this.layout ? this.layout.source : undefined;
	            const isSharedLayoutAnimation = snapshotSource !== layoutSource;
	            const stack = this.getStack();
	            const isOnlyMember = !stack || stack.members.length <= 1;
	            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&
	                !isOnlyMember &&
	                this.options.crossfade === true &&
	                !this.path.some(hasOpacityCrossfade));
	            this.animationProgress = 0;
	            let prevRelativeTarget;
	            this.mixTargetDelta = (latest) => {
	                const progress = latest / 1000;
	                mixAxisDelta(targetDelta.x, delta.x, progress);
	                mixAxisDelta(targetDelta.y, delta.y, progress);
	                this.setTargetDelta(targetDelta);
	                if (this.relativeTarget &&
	                    this.relativeTargetOrigin &&
	                    this.layout &&
	                    this.relativeParent &&
	                    this.relativeParent.layout) {
	                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);
	                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);
	                    /**
	                     * If this is an unchanged relative target we can consider the
	                     * projection not dirty.
	                     */
	                    if (prevRelativeTarget &&
	                        boxEquals(this.relativeTarget, prevRelativeTarget)) {
	                        this.isProjectionDirty = false;
	                    }
	                    if (!prevRelativeTarget)
	                        prevRelativeTarget = createBox();
	                    copyBoxInto(prevRelativeTarget, this.relativeTarget);
	                }
	                if (isSharedLayoutAnimation) {
	                    this.animationValues = mixedValues;
	                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);
	                }
	                this.root.scheduleUpdateProjection();
	                this.scheduleRender();
	                this.animationProgress = progress;
	            };
	            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);
	        }
	        startAnimation(options) {
	            this.notifyListeners("animationStart");
	            this.currentAnimation?.stop();
	            this.resumingFrom?.currentAnimation?.stop();
	            if (this.pendingAnimation) {
	                cancelFrame(this.pendingAnimation);
	                this.pendingAnimation = undefined;
	            }
	            /**
	             * Start the animation in the next frame to have a frame with progress 0,
	             * where the target is the same as when the animation started, so we can
	             * calculate the relative positions correctly for instant transitions.
	             */
	            this.pendingAnimation = frame.update(() => {
	                globalProjectionState.hasAnimatedSinceResize = true;
	                this.motionValue || (this.motionValue = motionValue(0));
	                this.currentAnimation = animateSingleValue(this.motionValue, [0, 1000], {
	                    ...options,
	                    velocity: 0,
	                    isSync: true,
	                    onUpdate: (latest) => {
	                        this.mixTargetDelta(latest);
	                        options.onUpdate && options.onUpdate(latest);
	                    },
	                    onStop: () => {
	                    },
	                    onComplete: () => {
	                        options.onComplete && options.onComplete();
	                        this.completeAnimation();
	                    },
	                });
	                if (this.resumingFrom) {
	                    this.resumingFrom.currentAnimation = this.currentAnimation;
	                }
	                this.pendingAnimation = undefined;
	            });
	        }
	        completeAnimation() {
	            if (this.resumingFrom) {
	                this.resumingFrom.currentAnimation = undefined;
	                this.resumingFrom.preserveOpacity = undefined;
	            }
	            const stack = this.getStack();
	            stack && stack.exitAnimationComplete();
	            this.resumingFrom =
	                this.currentAnimation =
	                    this.animationValues =
	                        undefined;
	            this.notifyListeners("animationComplete");
	        }
	        finishAnimation() {
	            if (this.currentAnimation) {
	                this.mixTargetDelta && this.mixTargetDelta(animationTarget);
	                this.currentAnimation.stop();
	            }
	            this.completeAnimation();
	        }
	        applyTransformsToTarget() {
	            const lead = this.getLead();
	            let { targetWithTransforms, target, layout, latestValues } = lead;
	            if (!targetWithTransforms || !target || !layout)
	                return;
	            /**
	             * If we're only animating position, and this element isn't the lead element,
	             * then instead of projecting into the lead box we instead want to calculate
	             * a new target that aligns the two boxes but maintains the layout shape.
	             */
	            if (this !== lead &&
	                this.layout &&
	                layout &&
	                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {
	                target = this.target || createBox();
	                const xLength = calcLength(this.layout.layoutBox.x);
	                target.x.min = lead.target.x.min;
	                target.x.max = target.x.min + xLength;
	                const yLength = calcLength(this.layout.layoutBox.y);
	                target.y.min = lead.target.y.min;
	                target.y.max = target.y.min + yLength;
	            }
	            copyBoxInto(targetWithTransforms, target);
	            /**
	             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.
	             * This is the final box that we will then project into by calculating a transform delta and
	             * applying it to the corrected box.
	             */
	            transformBox(targetWithTransforms, latestValues);
	            /**
	             * Update the delta between the corrected box and the final target box, after
	             * user-set transforms are applied to it. This will be used by the renderer to
	             * create a transform style that will reproject the element from its layout layout
	             * into the desired bounding box.
	             */
	            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
	        }
	        registerSharedNode(layoutId, node) {
	            if (!this.sharedNodes.has(layoutId)) {
	                this.sharedNodes.set(layoutId, new NodeStack());
	            }
	            const stack = this.sharedNodes.get(layoutId);
	            stack.add(node);
	            const config = node.options.initialPromotionConfig;
	            node.promote({
	                transition: config ? config.transition : undefined,
	                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity
	                    ? config.shouldPreserveFollowOpacity(node)
	                    : undefined,
	            });
	        }
	        isLead() {
	            const stack = this.getStack();
	            return stack ? stack.lead === this : true;
	        }
	        getLead() {
	            const { layoutId } = this.options;
	            return layoutId ? this.getStack()?.lead || this : this;
	        }
	        getPrevLead() {
	            const { layoutId } = this.options;
	            return layoutId ? this.getStack()?.prevLead : undefined;
	        }
	        getStack() {
	            const { layoutId } = this.options;
	            if (layoutId)
	                return this.root.sharedNodes.get(layoutId);
	        }
	        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {
	            const stack = this.getStack();
	            if (stack)
	                stack.promote(this, preserveFollowOpacity);
	            if (needsReset) {
	                this.projectionDelta = undefined;
	                this.needsReset = true;
	            }
	            if (transition)
	                this.setOptions({ transition });
	        }
	        relegate() {
	            const stack = this.getStack();
	            if (stack) {
	                return stack.relegate(this);
	            }
	            else {
	                return false;
	            }
	        }
	        resetSkewAndRotation() {
	            const { visualElement } = this.options;
	            if (!visualElement)
	                return;
	            // If there's no detected skew or rotation values, we can early return without a forced render.
	            let hasDistortingTransform = false;
	            /**
	             * An unrolled check for rotation values. Most elements don't have any rotation and
	             * skipping the nested loop and new object creation is 50% faster.
	             */
	            const { latestValues } = visualElement;
	            if (latestValues.z ||
	                latestValues.rotate ||
	                latestValues.rotateX ||
	                latestValues.rotateY ||
	                latestValues.rotateZ ||
	                latestValues.skewX ||
	                latestValues.skewY) {
	                hasDistortingTransform = true;
	            }
	            // If there's no distorting values, we don't need to do any more.
	            if (!hasDistortingTransform)
	                return;
	            const resetValues = {};
	            if (latestValues.z) {
	                resetDistortingTransform("z", visualElement, resetValues, this.animationValues);
	            }
	            // Check the skew and rotate value of all axes and reset to 0
	            for (let i = 0; i < transformAxes.length; i++) {
	                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);
	                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);
	            }
	            // Force a render of this element to apply the transform with all skews and rotations
	            // set to 0.
	            visualElement.render();
	            // Put back all the values we reset
	            for (const key in resetValues) {
	                visualElement.setStaticValue(key, resetValues[key]);
	                if (this.animationValues) {
	                    this.animationValues[key] = resetValues[key];
	                }
	            }
	            // Schedule a render for the next frame. This ensures we won't visually
	            // see the element with the reset rotate value applied.
	            visualElement.scheduleRender();
	        }
	        getProjectionStyles(styleProp) {
	            if (!this.instance || this.isSVG)
	                return undefined;
	            if (!this.isVisible) {
	                return hiddenVisibility;
	            }
	            const styles = {
	                visibility: "",
	            };
	            const transformTemplate = this.getTransformTemplate();
	            if (this.needsReset) {
	                this.needsReset = false;
	                styles.opacity = "";
	                styles.pointerEvents =
	                    resolveMotionValue(styleProp?.pointerEvents) || "";
	                styles.transform = transformTemplate
	                    ? transformTemplate(this.latestValues, "")
	                    : "none";
	                return styles;
	            }
	            const lead = this.getLead();
	            if (!this.projectionDelta || !this.layout || !lead.target) {
	                const emptyStyles = {};
	                if (this.options.layoutId) {
	                    emptyStyles.opacity =
	                        this.latestValues.opacity !== undefined
	                            ? this.latestValues.opacity
	                            : 1;
	                    emptyStyles.pointerEvents =
	                        resolveMotionValue(styleProp?.pointerEvents) || "";
	                }
	                if (this.hasProjected && !hasTransform(this.latestValues)) {
	                    emptyStyles.transform = transformTemplate
	                        ? transformTemplate({}, "")
	                        : "none";
	                    this.hasProjected = false;
	                }
	                return emptyStyles;
	            }
	            const valuesToRender = lead.animationValues || lead.latestValues;
	            this.applyTransformsToTarget();
	            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
	            if (transformTemplate) {
	                styles.transform = transformTemplate(valuesToRender, styles.transform);
	            }
	            const { x, y } = this.projectionDelta;
	            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;
	            if (lead.animationValues) {
	                /**
	                 * If the lead component is animating, assign this either the entering/leaving
	                 * opacity
	                 */
	                styles.opacity =
	                    lead === this
	                        ? valuesToRender.opacity ??
	                            this.latestValues.opacity ??
	                            1
	                        : this.preserveOpacity
	                            ? this.latestValues.opacity
	                            : valuesToRender.opacityExit;
	            }
	            else {
	                /**
	                 * Or we're not animating at all, set the lead component to its layout
	                 * opacity and other components to hidden.
	                 */
	                styles.opacity =
	                    lead === this
	                        ? valuesToRender.opacity !== undefined
	                            ? valuesToRender.opacity
	                            : ""
	                        : valuesToRender.opacityExit !== undefined
	                            ? valuesToRender.opacityExit
	                            : 0;
	            }
	            /**
	             * Apply scale correction
	             */
	            for (const key in scaleCorrectors) {
	                if (valuesToRender[key] === undefined)
	                    continue;
	                const { correct, applyTo, isCSSVariable } = scaleCorrectors[key];
	                /**
	                 * Only apply scale correction to the value if we have an
	                 * active projection transform. Otherwise these values become
	                 * vulnerable to distortion if the element changes size without
	                 * a corresponding layout animation.
	                 */
	                const corrected = styles.transform === "none"
	                    ? valuesToRender[key]
	                    : correct(valuesToRender[key], lead);
	                if (applyTo) {
	                    const num = applyTo.length;
	                    for (let i = 0; i < num; i++) {
	                        styles[applyTo[i]] = corrected;
	                    }
	                }
	                else {
	                    // If this is a CSS variable, set it directly on the instance.
	                    // Replacing this function from creating styles to setting them
	                    // would be a good place to remove per frame object creation
	                    if (isCSSVariable) {
	                        this.options.visualElement.renderState.vars[key] = corrected;
	                    }
	                    else {
	                        styles[key] = corrected;
	                    }
	                }
	            }
	            /**
	             * Disable pointer events on follow components. This is to ensure
	             * that if a follow component covers a lead component it doesn't block
	             * pointer events on the lead.
	             */
	            if (this.options.layoutId) {
	                styles.pointerEvents =
	                    lead === this
	                        ? resolveMotionValue(styleProp?.pointerEvents) || ""
	                        : "none";
	            }
	            return styles;
	        }
	        clearSnapshot() {
	            this.resumeFrom = this.snapshot = undefined;
	        }
	        // Only run on root
	        resetTree() {
	            this.root.nodes.forEach((node) => node.currentAnimation?.stop());
	            this.root.nodes.forEach(clearMeasurements);
	            this.root.sharedNodes.clear();
	        }
	    };
	}
	function updateLayout(node) {
	    node.updateLayout();
	}
	function notifyLayoutUpdate(node) {
	    const snapshot = node.resumeFrom?.snapshot || node.snapshot;
	    if (node.isLead() &&
	        node.layout &&
	        snapshot &&
	        node.hasListeners("didUpdate")) {
	        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;
	        const { animationType } = node.options;
	        const isShared = snapshot.source !== node.layout.source;
	        // TODO Maybe we want to also resize the layout snapshot so we don't trigger
	        // animations for instance if layout="size" and an element has only changed position
	        if (animationType === "size") {
	            eachAxis((axis) => {
	                const axisSnapshot = isShared
	                    ? snapshot.measuredBox[axis]
	                    : snapshot.layoutBox[axis];
	                const length = calcLength(axisSnapshot);
	                axisSnapshot.min = layout[axis].min;
	                axisSnapshot.max = axisSnapshot.min + length;
	            });
	        }
	        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {
	            eachAxis((axis) => {
	                const axisSnapshot = isShared
	                    ? snapshot.measuredBox[axis]
	                    : snapshot.layoutBox[axis];
	                const length = calcLength(layout[axis]);
	                axisSnapshot.max = axisSnapshot.min + length;
	                /**
	                 * Ensure relative target gets resized and rerendererd
	                 */
	                if (node.relativeTarget && !node.currentAnimation) {
	                    node.isProjectionDirty = true;
	                    node.relativeTarget[axis].max =
	                        node.relativeTarget[axis].min + length;
	                }
	            });
	        }
	        const layoutDelta = createDelta();
	        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);
	        const visualDelta = createDelta();
	        if (isShared) {
	            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);
	        }
	        else {
	            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);
	        }
	        const hasLayoutChanged = !isDeltaZero(layoutDelta);
	        let hasRelativeLayoutChanged = false;
	        if (!node.resumeFrom) {
	            const relativeParent = node.getClosestProjectingParent();
	            /**
	             * If the relativeParent is itself resuming from a different element then
	             * the relative snapshot is not relavent
	             */
	            if (relativeParent && !relativeParent.resumeFrom) {
	                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;
	                if (parentSnapshot && parentLayout) {
	                    const relativeSnapshot = createBox();
	                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);
	                    const relativeLayout = createBox();
	                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);
	                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {
	                        hasRelativeLayoutChanged = true;
	                    }
	                    if (relativeParent.options.layoutRoot) {
	                        node.relativeTarget = relativeLayout;
	                        node.relativeTargetOrigin = relativeSnapshot;
	                        node.relativeParent = relativeParent;
	                    }
	                }
	            }
	        }
	        node.notifyListeners("didUpdate", {
	            layout,
	            snapshot,
	            delta: visualDelta,
	            layoutDelta,
	            hasLayoutChanged,
	            hasRelativeLayoutChanged,
	        });
	    }
	    else if (node.isLead()) {
	        const { onExitComplete } = node.options;
	        onExitComplete && onExitComplete();
	    }
	    /**
	     * Clearing transition
	     * TODO: Investigate why this transition is being passed in as {type: false } from Framer
	     * and why we need it at all
	     */
	    node.options.transition = undefined;
	}
	function propagateDirtyNodes(node) {
	    if (!node.parent)
	        return;
	    /**
	     * If this node isn't projecting, propagate isProjectionDirty. It will have
	     * no performance impact but it will allow the next child that *is* projecting
	     * but *isn't* dirty to just check its parent to see if *any* ancestor needs
	     * correcting.
	     */
	    if (!node.isProjecting()) {
	        node.isProjectionDirty = node.parent.isProjectionDirty;
	    }
	    /**
	     * Propagate isSharedProjectionDirty and isTransformDirty
	     * throughout the whole tree. A future revision can take another look at
	     * this but for safety we still recalcualte shared nodes.
	     */
	    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||
	        node.parent.isProjectionDirty ||
	        node.parent.isSharedProjectionDirty));
	    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);
	}
	function cleanDirtyNodes(node) {
	    node.isProjectionDirty =
	        node.isSharedProjectionDirty =
	            node.isTransformDirty =
	                false;
	}
	function clearSnapshot(node) {
	    node.clearSnapshot();
	}
	function clearMeasurements(node) {
	    node.clearMeasurements();
	}
	function clearIsLayoutDirty(node) {
	    node.isLayoutDirty = false;
	}
	function resetTransformStyle(node) {
	    const { visualElement } = node.options;
	    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {
	        visualElement.notify("BeforeLayoutMeasure");
	    }
	    node.resetTransform();
	}
	function finishAnimation(node) {
	    node.finishAnimation();
	    node.targetDelta = node.relativeTarget = node.target = undefined;
	    node.isProjectionDirty = true;
	}
	function resolveTargetDelta(node) {
	    node.resolveTargetDelta();
	}
	function calcProjection(node) {
	    node.calcProjection();
	}
	function resetSkewAndRotation(node) {
	    node.resetSkewAndRotation();
	}
	function removeLeadSnapshots(stack) {
	    stack.removeLeadSnapshot();
	}
	function mixAxisDelta(output, delta, p) {
	    output.translate = mixNumber$1(delta.translate, 0, p);
	    output.scale = mixNumber$1(delta.scale, 1, p);
	    output.origin = delta.origin;
	    output.originPoint = delta.originPoint;
	}
	function mixAxis(output, from, to, p) {
	    output.min = mixNumber$1(from.min, to.min, p);
	    output.max = mixNumber$1(from.max, to.max, p);
	}
	function mixBox(output, from, to, p) {
	    mixAxis(output.x, from.x, to.x, p);
	    mixAxis(output.y, from.y, to.y, p);
	}
	function hasOpacityCrossfade(node) {
	    return (node.animationValues && node.animationValues.opacityExit !== undefined);
	}
	const defaultLayoutTransition = {
	    duration: 0.45,
	    ease: [0.4, 0, 0.1, 1],
	};
	const userAgentContains = (string) => typeof navigator !== "undefined" &&
	    navigator.userAgent &&
	    navigator.userAgent.toLowerCase().includes(string);
	/**
	 * Measured bounding boxes must be rounded in Safari and
	 * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements
	 * can appear to jump.
	 */
	const roundPoint = userAgentContains("applewebkit/") && !userAgentContains("chrome/")
	    ? Math.round
	    : noop;
	function roundAxis(axis) {
	    // Round to the nearest .5 pixels to support subpixel layouts
	    axis.min = roundPoint(axis.min);
	    axis.max = roundPoint(axis.max);
	}
	function roundBox(box) {
	    roundAxis(box.x);
	    roundAxis(box.y);
	}
	function shouldAnimatePositionOnly(animationType, snapshot, layout) {
	    return (animationType === "position" ||
	        (animationType === "preserve-aspect" &&
	            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));
	}
	function checkNodeWasScrollRoot(node) {
	    return node !== node.root && node.scroll?.wasRoot;
	}

	const DocumentProjectionNode = createProjectionNode({
	    attachResizeListener: (ref, notify) => addDomEvent(ref, "resize", notify),
	    measureScroll: () => ({
	        x: document.documentElement.scrollLeft || document.body.scrollLeft,
	        y: document.documentElement.scrollTop || document.body.scrollTop,
	    }),
	    checkIsScrollRoot: () => true,
	});

	const rootProjectionNode = {
	    current: undefined,
	};
	const HTMLProjectionNode = createProjectionNode({
	    measureScroll: (instance) => ({
	        x: instance.scrollLeft,
	        y: instance.scrollTop,
	    }),
	    defaultParent: () => {
	        if (!rootProjectionNode.current) {
	            const documentNode = new DocumentProjectionNode({});
	            documentNode.mount(window);
	            documentNode.setOptions({ layoutScroll: true });
	            rootProjectionNode.current = documentNode;
	        }
	        return rootProjectionNode.current;
	    },
	    resetTransform: (instance, value) => {
	        instance.style.transform = value !== undefined ? value : "none";
	    },
	    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === "fixed"),
	});

	const drag = {
	    pan: {
	        Feature: PanGesture,
	    },
	    drag: {
	        Feature: DragGesture,
	        ProjectionNode: HTMLProjectionNode,
	        MeasureLayout,
	    },
	};

	function handleHoverEvent(node, event, lifecycle) {
	    const { props } = node;
	    if (node.animationState && props.whileHover) {
	        node.animationState.setActive("whileHover", lifecycle === "Start");
	    }
	    const eventName = ("onHover" + lifecycle);
	    const callback = props[eventName];
	    if (callback) {
	        frame.postRender(() => callback(event, extractEventInfo(event)));
	    }
	}
	class HoverGesture extends Feature {
	    mount() {
	        const { current } = this.node;
	        if (!current)
	            return;
	        this.unmount = hover(current, (_element, startEvent) => {
	            handleHoverEvent(this.node, startEvent, "Start");
	            return (endEvent) => handleHoverEvent(this.node, endEvent, "End");
	        });
	    }
	    unmount() { }
	}

	class FocusGesture extends Feature {
	    constructor() {
	        super(...arguments);
	        this.isActive = false;
	    }
	    onFocus() {
	        let isFocusVisible = false;
	        /**
	         * If this element doesn't match focus-visible then don't
	         * apply whileHover. But, if matches throws that focus-visible
	         * is not a valid selector then in that browser outline styles will be applied
	         * to the element by default and we want to match that behaviour with whileFocus.
	         */
	        try {
	            isFocusVisible = this.node.current.matches(":focus-visible");
	        }
	        catch (e) {
	            isFocusVisible = true;
	        }
	        if (!isFocusVisible || !this.node.animationState)
	            return;
	        this.node.animationState.setActive("whileFocus", true);
	        this.isActive = true;
	    }
	    onBlur() {
	        if (!this.isActive || !this.node.animationState)
	            return;
	        this.node.animationState.setActive("whileFocus", false);
	        this.isActive = false;
	    }
	    mount() {
	        this.unmount = pipe$1(addDomEvent(this.node.current, "focus", () => this.onFocus()), addDomEvent(this.node.current, "blur", () => this.onBlur()));
	    }
	    unmount() { }
	}

	function handlePressEvent(node, event, lifecycle) {
	    const { props } = node;
	    if (node.current instanceof HTMLButtonElement && node.current.disabled) {
	        return;
	    }
	    if (node.animationState && props.whileTap) {
	        node.animationState.setActive("whileTap", lifecycle === "Start");
	    }
	    const eventName = ("onTap" + (lifecycle === "End" ? "" : lifecycle));
	    const callback = props[eventName];
	    if (callback) {
	        frame.postRender(() => callback(event, extractEventInfo(event)));
	    }
	}
	class PressGesture extends Feature {
	    mount() {
	        const { current } = this.node;
	        if (!current)
	            return;
	        this.unmount = press(current, (_element, startEvent) => {
	            handlePressEvent(this.node, startEvent, "Start");
	            return (endEvent, { success }) => handlePressEvent(this.node, endEvent, success ? "End" : "Cancel");
	        }, { useGlobalTarget: this.node.props.globalTapTarget });
	    }
	    unmount() { }
	}

	/**
	 * Map an IntersectionHandler callback to an element. We only ever make one handler for one
	 * element, so even though these handlers might all be triggered by different
	 * observers, we can keep them in the same map.
	 */
	const observerCallbacks = new WeakMap();
	/**
	 * Multiple observers can be created for multiple element/document roots. Each with
	 * different settings. So here we store dictionaries of observers to each root,
	 * using serialised settings (threshold/margin) as lookup keys.
	 */
	const observers = new WeakMap();
	const fireObserverCallback = (entry) => {
	    const callback = observerCallbacks.get(entry.target);
	    callback && callback(entry);
	};
	const fireAllObserverCallbacks = (entries) => {
	    entries.forEach(fireObserverCallback);
	};
	function initIntersectionObserver({ root, ...options }) {
	    const lookupRoot = root || document;
	    /**
	     * If we don't have an observer lookup map for this root, create one.
	     */
	    if (!observers.has(lookupRoot)) {
	        observers.set(lookupRoot, {});
	    }
	    const rootObservers = observers.get(lookupRoot);
	    const key = JSON.stringify(options);
	    /**
	     * If we don't have an observer for this combination of root and settings,
	     * create one.
	     */
	    if (!rootObservers[key]) {
	        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });
	    }
	    return rootObservers[key];
	}
	function observeIntersection(element, options, callback) {
	    const rootInteresectionObserver = initIntersectionObserver(options);
	    observerCallbacks.set(element, callback);
	    rootInteresectionObserver.observe(element);
	    return () => {
	        observerCallbacks.delete(element);
	        rootInteresectionObserver.unobserve(element);
	    };
	}

	const thresholdNames = {
	    some: 0,
	    all: 1,
	};
	class InViewFeature extends Feature {
	    constructor() {
	        super(...arguments);
	        this.hasEnteredView = false;
	        this.isInView = false;
	    }
	    startObserver() {
	        this.unmount();
	        const { viewport = {} } = this.node.getProps();
	        const { root, margin: rootMargin, amount = "some", once } = viewport;
	        const options = {
	            root: root ? root.current : undefined,
	            rootMargin,
	            threshold: typeof amount === "number" ? amount : thresholdNames[amount],
	        };
	        const onIntersectionUpdate = (entry) => {
	            const { isIntersecting } = entry;
	            /**
	             * If there's been no change in the viewport state, early return.
	             */
	            if (this.isInView === isIntersecting)
	                return;
	            this.isInView = isIntersecting;
	            /**
	             * Handle hasEnteredView. If this is only meant to run once, and
	             * element isn't visible, early return. Otherwise set hasEnteredView to true.
	             */
	            if (once && !isIntersecting && this.hasEnteredView) {
	                return;
	            }
	            else if (isIntersecting) {
	                this.hasEnteredView = true;
	            }
	            if (this.node.animationState) {
	                this.node.animationState.setActive("whileInView", isIntersecting);
	            }
	            /**
	             * Use the latest committed props rather than the ones in scope
	             * when this observer is created
	             */
	            const { onViewportEnter, onViewportLeave } = this.node.getProps();
	            const callback = isIntersecting ? onViewportEnter : onViewportLeave;
	            callback && callback(entry);
	        };
	        return observeIntersection(this.node.current, options, onIntersectionUpdate);
	    }
	    mount() {
	        this.startObserver();
	    }
	    update() {
	        if (typeof IntersectionObserver === "undefined")
	            return;
	        const { props, prevProps } = this.node;
	        const hasOptionsChanged = ["amount", "margin", "root"].some(hasViewportOptionChanged(props, prevProps));
	        if (hasOptionsChanged) {
	            this.startObserver();
	        }
	    }
	    unmount() { }
	}
	function hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {
	    return (name) => viewport[name] !== prevViewport[name];
	}

	const gestureAnimations = {
	    inView: {
	        Feature: InViewFeature,
	    },
	    tap: {
	        Feature: PressGesture,
	    },
	    focus: {
	        Feature: FocusGesture,
	    },
	    hover: {
	        Feature: HoverGesture,
	    },
	};

	const layout = {
	    layout: {
	        ProjectionNode: HTMLProjectionNode,
	        MeasureLayout,
	    },
	};

	// Does this device prefer reduced motion? Returns `null` server-side.
	const prefersReducedMotion = { current: null };
	const hasReducedMotionListener = { current: false };

	function initPrefersReducedMotion() {
	    hasReducedMotionListener.current = true;
	    if (!isBrowser)
	        return;
	    if (window.matchMedia) {
	        const motionMediaQuery = window.matchMedia("(prefers-reduced-motion)");
	        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);
	        motionMediaQuery.addListener(setReducedMotionPreferences);
	        setReducedMotionPreferences();
	    }
	    else {
	        prefersReducedMotion.current = false;
	    }
	}

	const visualElementStore = new WeakMap();

	function updateMotionValuesFromProps(element, next, prev) {
	    for (const key in next) {
	        const nextValue = next[key];
	        const prevValue = prev[key];
	        if (isMotionValue(nextValue)) {
	            /**
	             * If this is a motion value found in props or style, we want to add it
	             * to our visual element's motion value map.
	             */
	            element.addValue(key, nextValue);
	        }
	        else if (isMotionValue(prevValue)) {
	            /**
	             * If we're swapping from a motion value to a static value,
	             * create a new motion value from that
	             */
	            element.addValue(key, motionValue(nextValue, { owner: element }));
	        }
	        else if (prevValue !== nextValue) {
	            /**
	             * If this is a flat value that has changed, update the motion value
	             * or create one if it doesn't exist. We only want to do this if we're
	             * not handling the value with our animation state.
	             */
	            if (element.hasValue(key)) {
	                const existingValue = element.getValue(key);
	                if (existingValue.liveStyle === true) {
	                    existingValue.jump(nextValue);
	                }
	                else if (!existingValue.hasAnimated) {
	                    existingValue.set(nextValue);
	                }
	            }
	            else {
	                const latestValue = element.getStaticValue(key);
	                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));
	            }
	        }
	    }
	    // Handle removed values
	    for (const key in prev) {
	        if (next[key] === undefined)
	            element.removeValue(key);
	    }
	    return next;
	}

	const propEventHandlers = [
	    "AnimationStart",
	    "AnimationComplete",
	    "Update",
	    "BeforeLayoutMeasure",
	    "LayoutMeasure",
	    "LayoutAnimationStart",
	    "LayoutAnimationComplete",
	];
	/**
	 * A VisualElement is an imperative abstraction around UI elements such as
	 * HTMLElement, SVGElement, Three.Object3D etc.
	 */
	class VisualElement {
	    /**
	     * This method takes React props and returns found MotionValues. For example, HTML
	     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.
	     *
	     * This isn't an abstract method as it needs calling in the constructor, but it is
	     * intended to be one.
	     */
	    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {
	        return {};
	    }
	    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {
	        /**
	         * A reference to the current underlying Instance, e.g. a HTMLElement
	         * or Three.Mesh etc.
	         */
	        this.current = null;
	        /**
	         * A set containing references to this VisualElement's children.
	         */
	        this.children = new Set();
	        /**
	         * Determine what role this visual element should take in the variant tree.
	         */
	        this.isVariantNode = false;
	        this.isControllingVariants = false;
	        /**
	         * Decides whether this VisualElement should animate in reduced motion
	         * mode.
	         *
	         * TODO: This is currently set on every individual VisualElement but feels
	         * like it could be set globally.
	         */
	        this.shouldReduceMotion = null;
	        /**
	         * A map of all motion values attached to this visual element. Motion
	         * values are source of truth for any given animated value. A motion
	         * value might be provided externally by the component via props.
	         */
	        this.values = new Map();
	        this.KeyframeResolver = KeyframeResolver;
	        /**
	         * Cleanup functions for active features (hover/tap/exit etc)
	         */
	        this.features = {};
	        /**
	         * A map of every subscription that binds the provided or generated
	         * motion values onChange listeners to this visual element.
	         */
	        this.valueSubscriptions = new Map();
	        /**
	         * A reference to the previously-provided motion values as returned
	         * from scrapeMotionValuesFromProps. We use the keys in here to determine
	         * if any motion values need to be removed after props are updated.
	         */
	        this.prevMotionValues = {};
	        /**
	         * An object containing a SubscriptionManager for each active event.
	         */
	        this.events = {};
	        /**
	         * An object containing an unsubscribe function for each prop event subscription.
	         * For example, every "Update" event can have multiple subscribers via
	         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.
	         */
	        this.propEventSubscriptions = {};
	        this.notifyUpdate = () => this.notify("Update", this.latestValues);
	        this.render = () => {
	            if (!this.current)
	                return;
	            this.triggerBuild();
	            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);
	        };
	        this.renderScheduledAt = 0.0;
	        this.scheduleRender = () => {
	            const now = time.now();
	            if (this.renderScheduledAt < now) {
	                this.renderScheduledAt = now;
	                frame.render(this.render, false, true);
	            }
	        };
	        const { latestValues, renderState } = visualState;
	        this.latestValues = latestValues;
	        this.baseTarget = { ...latestValues };
	        this.initialValues = props.initial ? { ...latestValues } : {};
	        this.renderState = renderState;
	        this.parent = parent;
	        this.props = props;
	        this.presenceContext = presenceContext;
	        this.depth = parent ? parent.depth + 1 : 0;
	        this.reducedMotionConfig = reducedMotionConfig;
	        this.options = options;
	        this.blockInitialAnimation = Boolean(blockInitialAnimation);
	        this.isControllingVariants = isControllingVariants(props);
	        this.isVariantNode = isVariantNode(props);
	        if (this.isVariantNode) {
	            this.variantChildren = new Set();
	        }
	        this.manuallyAnimateOnMount = Boolean(parent && parent.current);
	        /**
	         * Any motion values that are provided to the element when created
	         * aren't yet bound to the element, as this would technically be impure.
	         * However, we iterate through the motion values and set them to the
	         * initial values for this component.
	         *
	         * TODO: This is impure and we should look at changing this to run on mount.
	         * Doing so will break some tests but this isn't necessarily a breaking change,
	         * more a reflection of the test.
	         */
	        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);
	        for (const key in initialMotionValues) {
	            const value = initialMotionValues[key];
	            if (latestValues[key] !== undefined && isMotionValue(value)) {
	                value.set(latestValues[key], false);
	            }
	        }
	    }
	    mount(instance) {
	        this.current = instance;
	        visualElementStore.set(instance, this);
	        if (this.projection && !this.projection.instance) {
	            this.projection.mount(instance);
	        }
	        if (this.parent && this.isVariantNode && !this.isControllingVariants) {
	            this.removeFromVariantTree = this.parent.addVariantChild(this);
	        }
	        this.values.forEach((value, key) => this.bindToMotionValue(key, value));
	        if (!hasReducedMotionListener.current) {
	            initPrefersReducedMotion();
	        }
	        this.shouldReduceMotion =
	            this.reducedMotionConfig === "never"
	                ? false
	                : this.reducedMotionConfig === "always"
	                    ? true
	                    : prefersReducedMotion.current;
	        if (this.parent)
	            this.parent.children.add(this);
	        this.update(this.props, this.presenceContext);
	    }
	    unmount() {
	        this.projection && this.projection.unmount();
	        cancelFrame(this.notifyUpdate);
	        cancelFrame(this.render);
	        this.valueSubscriptions.forEach((remove) => remove());
	        this.valueSubscriptions.clear();
	        this.removeFromVariantTree && this.removeFromVariantTree();
	        this.parent && this.parent.children.delete(this);
	        for (const key in this.events) {
	            this.events[key].clear();
	        }
	        for (const key in this.features) {
	            const feature = this.features[key];
	            if (feature) {
	                feature.unmount();
	                feature.isMounted = false;
	            }
	        }
	        this.current = null;
	    }
	    bindToMotionValue(key, value) {
	        if (this.valueSubscriptions.has(key)) {
	            this.valueSubscriptions.get(key)();
	        }
	        const valueIsTransform = transformProps.has(key);
	        if (valueIsTransform && this.onBindTransform) {
	            this.onBindTransform();
	        }
	        const removeOnChange = value.on("change", (latestValue) => {
	            this.latestValues[key] = latestValue;
	            this.props.onUpdate && frame.preRender(this.notifyUpdate);
	            if (valueIsTransform && this.projection) {
	                this.projection.isTransformDirty = true;
	            }
	        });
	        const removeOnRenderRequest = value.on("renderRequest", this.scheduleRender);
	        let removeSyncCheck;
	        if (window.MotionCheckAppearSync) {
	            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);
	        }
	        this.valueSubscriptions.set(key, () => {
	            removeOnChange();
	            removeOnRenderRequest();
	            if (removeSyncCheck)
	                removeSyncCheck();
	            if (value.owner)
	                value.stop();
	        });
	    }
	    sortNodePosition(other) {
	        /**
	         * If these nodes aren't even of the same type we can't compare their depth.
	         */
	        if (!this.current ||
	            !this.sortInstanceNodePosition ||
	            this.type !== other.type) {
	            return 0;
	        }
	        return this.sortInstanceNodePosition(this.current, other.current);
	    }
	    updateFeatures() {
	        let key = "animation";
	        for (key in featureDefinitions) {
	            const featureDefinition = featureDefinitions[key];
	            if (!featureDefinition)
	                continue;
	            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;
	            /**
	             * If this feature is enabled but not active, make a new instance.
	             */
	            if (!this.features[key] &&
	                FeatureConstructor &&
	                isEnabled(this.props)) {
	                this.features[key] = new FeatureConstructor(this);
	            }
	            /**
	             * If we have a feature, mount or update it.
	             */
	            if (this.features[key]) {
	                const feature = this.features[key];
	                if (feature.isMounted) {
	                    feature.update();
	                }
	                else {
	                    feature.mount();
	                    feature.isMounted = true;
	                }
	            }
	        }
	    }
	    triggerBuild() {
	        this.build(this.renderState, this.latestValues, this.props);
	    }
	    /**
	     * Measure the current viewport box with or without transforms.
	     * Only measures axis-aligned boxes, rotate and skew must be manually
	     * removed with a re-render to work.
	     */
	    measureViewportBox() {
	        return this.current
	            ? this.measureInstanceViewportBox(this.current, this.props)
	            : createBox();
	    }
	    getStaticValue(key) {
	        return this.latestValues[key];
	    }
	    setStaticValue(key, value) {
	        this.latestValues[key] = value;
	    }
	    /**
	     * Update the provided props. Ensure any newly-added motion values are
	     * added to our map, old ones removed, and listeners updated.
	     */
	    update(props, presenceContext) {
	        if (props.transformTemplate || this.props.transformTemplate) {
	            this.scheduleRender();
	        }
	        this.prevProps = this.props;
	        this.props = props;
	        this.prevPresenceContext = this.presenceContext;
	        this.presenceContext = presenceContext;
	        /**
	         * Update prop event handlers ie onAnimationStart, onAnimationComplete
	         */
	        for (let i = 0; i < propEventHandlers.length; i++) {
	            const key = propEventHandlers[i];
	            if (this.propEventSubscriptions[key]) {
	                this.propEventSubscriptions[key]();
	                delete this.propEventSubscriptions[key];
	            }
	            const listenerName = ("on" + key);
	            const listener = props[listenerName];
	            if (listener) {
	                this.propEventSubscriptions[key] = this.on(key, listener);
	            }
	        }
	        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);
	        if (this.handleChildMotionValue) {
	            this.handleChildMotionValue();
	        }
	    }
	    getProps() {
	        return this.props;
	    }
	    /**
	     * Returns the variant definition with a given name.
	     */
	    getVariant(name) {
	        return this.props.variants ? this.props.variants[name] : undefined;
	    }
	    /**
	     * Returns the defined default transition on this component.
	     */
	    getDefaultTransition() {
	        return this.props.transition;
	    }
	    getTransformPagePoint() {
	        return this.props.transformPagePoint;
	    }
	    getClosestVariantNode() {
	        return this.isVariantNode
	            ? this
	            : this.parent
	                ? this.parent.getClosestVariantNode()
	                : undefined;
	    }
	    /**
	     * Add a child visual element to our set of children.
	     */
	    addVariantChild(child) {
	        const closestVariantNode = this.getClosestVariantNode();
	        if (closestVariantNode) {
	            closestVariantNode.variantChildren &&
	                closestVariantNode.variantChildren.add(child);
	            return () => closestVariantNode.variantChildren.delete(child);
	        }
	    }
	    /**
	     * Add a motion value and bind it to this visual element.
	     */
	    addValue(key, value) {
	        // Remove existing value if it exists
	        const existingValue = this.values.get(key);
	        if (value !== existingValue) {
	            if (existingValue)
	                this.removeValue(key);
	            this.bindToMotionValue(key, value);
	            this.values.set(key, value);
	            this.latestValues[key] = value.get();
	        }
	    }
	    /**
	     * Remove a motion value and unbind any active subscriptions.
	     */
	    removeValue(key) {
	        this.values.delete(key);
	        const unsubscribe = this.valueSubscriptions.get(key);
	        if (unsubscribe) {
	            unsubscribe();
	            this.valueSubscriptions.delete(key);
	        }
	        delete this.latestValues[key];
	        this.removeValueFromRenderState(key, this.renderState);
	    }
	    /**
	     * Check whether we have a motion value for this key
	     */
	    hasValue(key) {
	        return this.values.has(key);
	    }
	    getValue(key, defaultValue) {
	        if (this.props.values && this.props.values[key]) {
	            return this.props.values[key];
	        }
	        let value = this.values.get(key);
	        if (value === undefined && defaultValue !== undefined) {
	            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });
	            this.addValue(key, value);
	        }
	        return value;
	    }
	    /**
	     * If we're trying to animate to a previously unencountered value,
	     * we need to check for it in our state and as a last resort read it
	     * directly from the instance (which might have performance implications).
	     */
	    readValue(key, target) {
	        let value = this.latestValues[key] !== undefined || !this.current
	            ? this.latestValues[key]
	            : this.getBaseTargetFromProps(this.props, key) ??
	                this.readValueFromInstance(this.current, key, this.options);
	        if (value !== undefined && value !== null) {
	            if (typeof value === "string" &&
	                (isNumericalString(value) || isZeroValueString(value))) {
	                // If this is a number read as a string, ie "0" or "200", convert it to a number
	                value = parseFloat(value);
	            }
	            else if (!findValueType(value) && complex.test(target)) {
	                value = getAnimatableNone(key, target);
	            }
	            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);
	        }
	        return isMotionValue(value) ? value.get() : value;
	    }
	    /**
	     * Set the base target to later animate back to. This is currently
	     * only hydrated on creation and when we first read a value.
	     */
	    setBaseTarget(key, value) {
	        this.baseTarget[key] = value;
	    }
	    /**
	     * Find the base target for a value thats been removed from all animation
	     * props.
	     */
	    getBaseTarget(key) {
	        const { initial } = this.props;
	        let valueFromInitial;
	        if (typeof initial === "string" || typeof initial === "object") {
	            const variant = resolveVariantFromProps(this.props, initial, this.presenceContext?.custom);
	            if (variant) {
	                valueFromInitial = variant[key];
	            }
	        }
	        /**
	         * If this value still exists in the current initial variant, read that.
	         */
	        if (initial && valueFromInitial !== undefined) {
	            return valueFromInitial;
	        }
	        /**
	         * Alternatively, if this VisualElement config has defined a getBaseTarget
	         * so we can read the value from an alternative source, try that.
	         */
	        const target = this.getBaseTargetFromProps(this.props, key);
	        if (target !== undefined && !isMotionValue(target))
	            return target;
	        /**
	         * If the value was initially defined on initial, but it doesn't any more,
	         * return undefined. Otherwise return the value as initially read from the DOM.
	         */
	        return this.initialValues[key] !== undefined &&
	            valueFromInitial === undefined
	            ? undefined
	            : this.baseTarget[key];
	    }
	    on(eventName, callback) {
	        if (!this.events[eventName]) {
	            this.events[eventName] = new SubscriptionManager();
	        }
	        return this.events[eventName].add(callback);
	    }
	    notify(eventName, ...args) {
	        if (this.events[eventName]) {
	            this.events[eventName].notify(...args);
	        }
	    }
	}

	class DOMVisualElement extends VisualElement {
	    constructor() {
	        super(...arguments);
	        this.KeyframeResolver = DOMKeyframesResolver;
	    }
	    sortInstanceNodePosition(a, b) {
	        /**
	         * compareDocumentPosition returns a bitmask, by using the bitwise &
	         * we're returning true if 2 in that bitmask is set to true. 2 is set
	         * to true if b preceeds a.
	         */
	        return a.compareDocumentPosition(b) & 2 ? 1 : -1;
	    }
	    getBaseTargetFromProps(props, key) {
	        return props.style
	            ? props.style[key]
	            : undefined;
	    }
	    removeValueFromRenderState(key, { vars, style }) {
	        delete vars[key];
	        delete style[key];
	    }
	    handleChildMotionValue() {
	        if (this.childSubscription) {
	            this.childSubscription();
	            delete this.childSubscription;
	        }
	        const { children } = this.props;
	        if (isMotionValue(children)) {
	            this.childSubscription = children.on("change", (latest) => {
	                if (this.current) {
	                    this.current.textContent = `${latest}`;
	                }
	            });
	        }
	    }
	}

	function renderHTML(element, { style, vars }, styleProp, projection) {
	    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));
	    // Loop over any CSS variables and assign those.
	    for (const key in vars) {
	        element.style.setProperty(key, vars[key]);
	    }
	}

	function getComputedStyle$1(element) {
	    return window.getComputedStyle(element);
	}
	class HTMLVisualElement extends DOMVisualElement {
	    constructor() {
	        super(...arguments);
	        this.type = "html";
	        this.renderInstance = renderHTML;
	    }
	    readValueFromInstance(instance, key) {
	        if (transformProps.has(key)) {
	            return this.projection?.isProjecting
	                ? defaultTransformValue(key)
	                : readTransformValue(instance, key);
	        }
	        else {
	            const computedStyle = getComputedStyle$1(instance);
	            const value = (isCSSVariableName(key)
	                ? computedStyle.getPropertyValue(key)
	                : computedStyle[key]) || 0;
	            return typeof value === "string" ? value.trim() : value;
	        }
	    }
	    measureInstanceViewportBox(instance, { transformPagePoint }) {
	        return measureViewportBox(instance, transformPagePoint);
	    }
	    build(renderState, latestValues, props) {
	        buildHTMLStyles(renderState, latestValues, props.transformTemplate);
	    }
	    scrapeMotionValuesFromProps(props, prevProps, visualElement) {
	        return scrapeMotionValuesFromProps$1(props, prevProps, visualElement);
	    }
	}

	/**
	 * A set of attribute names that are always read/written as camel case.
	 */
	const camelCaseAttributes = new Set([
	    "baseFrequency",
	    "diffuseConstant",
	    "kernelMatrix",
	    "kernelUnitLength",
	    "keySplines",
	    "keyTimes",
	    "limitingConeAngle",
	    "markerHeight",
	    "markerWidth",
	    "numOctaves",
	    "targetX",
	    "targetY",
	    "surfaceScale",
	    "specularConstant",
	    "specularExponent",
	    "stdDeviation",
	    "tableValues",
	    "viewBox",
	    "gradientTransform",
	    "pathLength",
	    "startOffset",
	    "textLength",
	    "lengthAdjust",
	]);

	function renderSVG(element, renderState, _styleProp, projection) {
	    renderHTML(element, renderState, undefined, projection);
	    for (const key in renderState.attrs) {
	        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
	    }
	}

	class SVGVisualElement extends DOMVisualElement {
	    constructor() {
	        super(...arguments);
	        this.type = "svg";
	        this.isSVGTag = false;
	        this.measureInstanceViewportBox = createBox;
	    }
	    getBaseTargetFromProps(props, key) {
	        return props[key];
	    }
	    readValueFromInstance(instance, key) {
	        if (transformProps.has(key)) {
	            const defaultType = getDefaultValueType(key);
	            return defaultType ? defaultType.default || 0 : 0;
	        }
	        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
	        return instance.getAttribute(key);
	    }
	    scrapeMotionValuesFromProps(props, prevProps, visualElement) {
	        return scrapeMotionValuesFromProps(props, prevProps, visualElement);
	    }
	    build(renderState, latestValues, props) {
	        buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate, props.style);
	    }
	    renderInstance(instance, renderState, styleProp, projection) {
	        renderSVG(instance, renderState, styleProp, projection);
	    }
	    mount(instance) {
	        this.isSVGTag = isSVGTag(instance.tagName);
	        super.mount(instance);
	    }
	}

	const createDomVisualElement = (Component, options) => {
	    return isSVGComponent(Component)
	        ? new SVGVisualElement(options)
	        : new HTMLVisualElement(options, {
	            allowProjection: Component !== reactExports.Fragment,
	        });
	};

	const createMotionComponent = /*@__PURE__*/ createMotionComponentFactory({
	    ...animations,
	    ...gestureAnimations,
	    ...drag,
	    ...layout,
	}, createDomVisualElement);

	const motion = /*@__PURE__*/ createDOMMotionComponentProxy(createMotionComponent);

	const findById = (arr, id) => arr.find((toast) => toast.id === id);
	function findToast(toasts, id) {
	  const position = getToastPosition(toasts, id);
	  const index = position ? toasts[position].findIndex((toast) => toast.id === id) : -1;
	  return {
	    position,
	    index
	  };
	}
	function getToastPosition(toasts, id) {
	  for (const [position, values] of Object.entries(toasts)) {
	    if (findById(values, id)) {
	      return position;
	    }
	  }
	}
	function getToastStyle(position) {
	  const isRighty = position.includes("right");
	  const isLefty = position.includes("left");
	  let alignItems = "center";
	  if (isRighty)
	    alignItems = "flex-end";
	  if (isLefty)
	    alignItems = "flex-start";
	  return {
	    display: "flex",
	    flexDirection: "column",
	    alignItems
	  };
	}
	function getToastListStyle(position) {
	  const isTopOrBottom = position === "top" || position === "bottom";
	  const margin = isTopOrBottom ? "0 auto" : void 0;
	  const top = position.includes("top") ? "env(safe-area-inset-top, 0px)" : void 0;
	  const bottom = position.includes("bottom") ? "env(safe-area-inset-bottom, 0px)" : void 0;
	  const right = !position.includes("left") ? "env(safe-area-inset-right, 0px)" : void 0;
	  const left = !position.includes("right") ? "env(safe-area-inset-left, 0px)" : void 0;
	  return {
	    position: "fixed",
	    zIndex: "var(--toast-z-index, 5500)",
	    pointerEvents: "none",
	    display: "flex",
	    flexDirection: "column",
	    margin,
	    top,
	    bottom,
	    right,
	    left
	  };
	}

	// eslint-disable-next-line no-undef
	var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

	var isPropValid = /* #__PURE__ */memoize(function (prop) {
	  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
	  /* o */
	  && prop.charCodeAt(1) === 110
	  /* n */
	  && prop.charCodeAt(2) < 91;
	}
	/* Z+1 */
	);

	var testOmitPropsOnStringTag = isPropValid;

	var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
	  return key !== 'theme';
	};

	var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
	  return typeof tag === 'string' && // 96 is one less than the char code
	  // for "a" so this is checking that
	  // it's a lowercase character
	  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
	};
	var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
	  var shouldForwardProp;

	  if (options) {
	    var optionsShouldForwardProp = options.shouldForwardProp;
	    shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {
	      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
	    } : optionsShouldForwardProp;
	  }

	  if (typeof shouldForwardProp !== 'function' && isReal) {
	    shouldForwardProp = tag.__emotion_forwardProp;
	  }

	  return shouldForwardProp;
	};

	var Insertion = function Insertion(_ref) {
	  var cache = _ref.cache,
	      serialized = _ref.serialized,
	      isStringTag = _ref.isStringTag;
	  registerStyles(cache, serialized, isStringTag);
	  useInsertionEffectAlwaysWithSyncFallback(function () {
	    return insertStyles(cache, serialized, isStringTag);
	  });

	  return null;
	};

	var createStyled = function createStyled(tag, options) {

	  var isReal = tag.__emotion_real === tag;
	  var baseTag = isReal && tag.__emotion_base || tag;
	  var identifierName;
	  var targetClassName;

	  if (options !== undefined) {
	    identifierName = options.label;
	    targetClassName = options.target;
	  }

	  var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
	  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
	  var shouldUseAs = !defaultShouldForwardProp('as');
	  return function () {
	    // eslint-disable-next-line prefer-rest-params
	    var args = arguments;
	    var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];

	    if (identifierName !== undefined) {
	      styles.push("label:" + identifierName + ";");
	    }

	    if (args[0] == null || args[0].raw === undefined) {
	      // eslint-disable-next-line prefer-spread
	      styles.push.apply(styles, args);
	    } else {
	      var templateStringsArr = args[0];

	      styles.push(templateStringsArr[0]);
	      var len = args.length;
	      var i = 1;

	      for (; i < len; i++) {

	        styles.push(args[i], templateStringsArr[i]);
	      }
	    }

	    var Styled = withEmotionCache(function (props, cache, ref) {
	      var FinalTag = shouldUseAs && props.as || baseTag;
	      var className = '';
	      var classInterpolations = [];
	      var mergedProps = props;

	      if (props.theme == null) {
	        mergedProps = {};

	        for (var key in props) {
	          mergedProps[key] = props[key];
	        }

	        mergedProps.theme = reactExports.useContext(ThemeContext);
	      }

	      if (typeof props.className === 'string') {
	        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
	      } else if (props.className != null) {
	        className = props.className + " ";
	      }

	      var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
	      className += cache.key + "-" + serialized.name;

	      if (targetClassName !== undefined) {
	        className += " " + targetClassName;
	      }

	      var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
	      var newProps = {};

	      for (var _key in props) {
	        if (shouldUseAs && _key === 'as') continue;

	        if (finalShouldForwardProp(_key)) {
	          newProps[_key] = props[_key];
	        }
	      }

	      newProps.className = className;

	      if (ref) {
	        newProps.ref = ref;
	      }

	      return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(Insertion, {
	        cache: cache,
	        serialized: serialized,
	        isStringTag: typeof FinalTag === 'string'
	      }), /*#__PURE__*/reactExports.createElement(FinalTag, newProps));
	    });
	    Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
	    Styled.defaultProps = tag.defaultProps;
	    Styled.__emotion_real = Styled;
	    Styled.__emotion_base = baseTag;
	    Styled.__emotion_styles = styles;
	    Styled.__emotion_forwardProp = shouldForwardProp;
	    Object.defineProperty(Styled, 'toString', {
	      value: function value() {

	        return "." + targetClassName;
	      }
	    });

	    Styled.withComponent = function (nextTag, nextOptions) {
	      var newStyled = createStyled(nextTag, _extends$1({}, options, nextOptions, {
	        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
	      }));
	      return newStyled.apply(void 0, styles);
	    };

	    return Styled;
	  };
	};

	var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
	'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

	// bind it to avoid mutating the original function
	var newStyled = createStyled.bind(null);
	tags.forEach(function (tagName) {
	  newStyled[tagName] = newStyled(tagName);
	});

	const allPropNames = /* @__PURE__ */ new Set([
	  ...propNames,
	  "textStyle",
	  "layerStyle",
	  "apply",
	  "noOfLines",
	  "focusBorderColor",
	  "errorBorderColor",
	  "as",
	  "__css",
	  "css",
	  "sx"
	]);
	const validHTMLProps = /* @__PURE__ */ new Set([
	  "htmlWidth",
	  "htmlHeight",
	  "htmlSize",
	  "htmlTranslate"
	]);
	function shouldForwardProp(prop) {
	  return (validHTMLProps.has(prop) || !allPropNames.has(prop)) && prop[0] !== "_";
	}

	const emotion_styled = interopDefault(newStyled);
	const toCSSObject = ({ baseStyle }) => (props) => {
	  const { theme, css: cssProp, __css, sx, ...restProps } = props;
	  const [styleProps] = splitProps(restProps, isStyleProp);
	  const finalBaseStyle = runIfFn$1(baseStyle, props);
	  const finalStyles = assignAfter(
	    {},
	    __css,
	    finalBaseStyle,
	    compact(styleProps),
	    sx
	  );
	  const computedCSS = css$2(finalStyles)(props.theme);
	  return cssProp ? [computedCSS, cssProp] : computedCSS;
	};
	function styled(component, options) {
	  const { baseStyle, ...styledOptions } = options ?? {};
	  if (!styledOptions.shouldForwardProp) {
	    styledOptions.shouldForwardProp = shouldForwardProp;
	  }
	  const styleObject = toCSSObject({ baseStyle });
	  const Component = emotion_styled(
	    component,
	    styledOptions
	  )(styleObject);
	  const chakraComponent = reactExports.forwardRef(
	    function ChakraComponent2(props, ref) {
	      const { children, ...restProps } = props;
	      const { colorMode, forced } = useColorMode();
	      const dataTheme = forced ? colorMode : void 0;
	      return reactExports.createElement(
	        Component,
	        { ref, "data-theme": dataTheme, ...restProps },
	        children
	      );
	    }
	  );
	  return chakraComponent;
	}

	function factory() {
	  const cache = /* @__PURE__ */ new Map();
	  return new Proxy(styled, {
	    /**
	     * @example
	     * const Div = chakra("div")
	     * const WithChakra = chakra(AnotherComponent)
	     */
	    apply(target, thisArg, argArray) {
	      return styled(...argArray);
	    },
	    /**
	     * @example
	     * <chakra.div />
	     */
	    get(_, element) {
	      if (!cache.has(element)) {
	        cache.set(element, styled(element));
	      }
	      return cache.get(element);
	    }
	  });
	}
	const chakra = factory();

	const toastMotionVariants = {
	  initial: (props) => {
	    const { position } = props;
	    const dir = ["top", "bottom"].includes(position) ? "y" : "x";
	    let factor = ["top-right", "bottom-right"].includes(position) ? 1 : -1;
	    if (position === "bottom")
	      factor = 1;
	    return {
	      opacity: 0,
	      [dir]: factor * 24
	    };
	  },
	  animate: {
	    opacity: 1,
	    y: 0,
	    x: 0,
	    scale: 1,
	    transition: {
	      duration: 0.4,
	      ease: [0.4, 0, 0.2, 1]
	    }
	  },
	  exit: {
	    opacity: 0,
	    scale: 0.85,
	    transition: {
	      duration: 0.2,
	      ease: [0.4, 0, 1, 1]
	    }
	  }
	};
	const ToastComponent = reactExports.memo((props) => {
	  const {
	    id,
	    message,
	    onCloseComplete,
	    onRequestRemove,
	    requestClose = false,
	    position = "bottom",
	    duration = 5e3,
	    containerStyle,
	    motionVariants = toastMotionVariants,
	    toastSpacing = "0.5rem"
	  } = props;
	  const [delay, setDelay] = reactExports.useState(duration);
	  const isPresent = useIsPresent();
	  useUpdateEffect(() => {
	    if (!isPresent) {
	      onCloseComplete?.();
	    }
	  }, [isPresent]);
	  useUpdateEffect(() => {
	    setDelay(duration);
	  }, [duration]);
	  const onMouseEnter = () => setDelay(null);
	  const onMouseLeave = () => setDelay(duration);
	  const close = () => {
	    if (isPresent)
	      onRequestRemove();
	  };
	  reactExports.useEffect(() => {
	    if (isPresent && requestClose) {
	      onRequestRemove();
	    }
	  }, [isPresent, requestClose, onRequestRemove]);
	  useTimeout(close, delay);
	  const containerStyles = reactExports.useMemo(
	    () => ({
	      pointerEvents: "auto",
	      maxWidth: 560,
	      minWidth: 300,
	      margin: toastSpacing,
	      ...containerStyle
	    }),
	    [containerStyle, toastSpacing]
	  );
	  const toastStyle = reactExports.useMemo(() => getToastStyle(position), [position]);
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(
	    motion.div,
	    {
	      layout: true,
	      className: "chakra-toast",
	      variants: motionVariants,
	      initial: "initial",
	      animate: "animate",
	      exit: "exit",
	      onHoverStart: onMouseEnter,
	      onHoverEnd: onMouseLeave,
	      custom: { position },
	      style: toastStyle,
	      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
	        chakra.div,
	        {
	          role: "status",
	          "aria-atomic": "true",
	          className: "chakra-toast__inner",
	          __css: containerStyles,
	          children: runIfFn$1(message, { id, onClose: close })
	        }
	      )
	    }
	  );
	});
	ToastComponent.displayName = "ToastComponent";

	function forwardRef(component) {
	  return reactExports.forwardRef(component);
	}

	/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */

	var reactFastCompare;
	var hasRequiredReactFastCompare;

	function requireReactFastCompare () {
		if (hasRequiredReactFastCompare) return reactFastCompare;
		hasRequiredReactFastCompare = 1;
		var hasElementType = typeof Element !== 'undefined';
		var hasMap = typeof Map === 'function';
		var hasSet = typeof Set === 'function';
		var hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;

		// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js

		function equal(a, b) {
		  // START: fast-deep-equal es6/index.js 3.1.3
		  if (a === b) return true;

		  if (a && b && typeof a == 'object' && typeof b == 'object') {
		    if (a.constructor !== b.constructor) return false;

		    var length, i, keys;
		    if (Array.isArray(a)) {
		      length = a.length;
		      if (length != b.length) return false;
		      for (i = length; i-- !== 0;)
		        if (!equal(a[i], b[i])) return false;
		      return true;
		    }

		    // START: Modifications:
		    // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code
		    //    to co-exist with es5.
		    // 2. Replace `for of` with es5 compliant iteration using `for`.
		    //    Basically, take:
		    //
		    //    ```js
		    //    for (i of a.entries())
		    //      if (!b.has(i[0])) return false;
		    //    ```
		    //
		    //    ... and convert to:
		    //
		    //    ```js
		    //    it = a.entries();
		    //    while (!(i = it.next()).done)
		    //      if (!b.has(i.value[0])) return false;
		    //    ```
		    //
		    //    **Note**: `i` access switches to `i.value`.
		    var it;
		    if (hasMap && (a instanceof Map) && (b instanceof Map)) {
		      if (a.size !== b.size) return false;
		      it = a.entries();
		      while (!(i = it.next()).done)
		        if (!b.has(i.value[0])) return false;
		      it = a.entries();
		      while (!(i = it.next()).done)
		        if (!equal(i.value[1], b.get(i.value[0]))) return false;
		      return true;
		    }

		    if (hasSet && (a instanceof Set) && (b instanceof Set)) {
		      if (a.size !== b.size) return false;
		      it = a.entries();
		      while (!(i = it.next()).done)
		        if (!b.has(i.value[0])) return false;
		      return true;
		    }
		    // END: Modifications

		    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
		      length = a.length;
		      if (length != b.length) return false;
		      for (i = length; i-- !== 0;)
		        if (a[i] !== b[i]) return false;
		      return true;
		    }

		    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
		    // START: Modifications:
		    // Apply guards for `Object.create(null)` handling. See:
		    // - https://github.com/FormidableLabs/react-fast-compare/issues/64
		    // - https://github.com/epoberezkin/fast-deep-equal/issues/49
		    if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === 'function' && typeof b.valueOf === 'function') return a.valueOf() === b.valueOf();
		    if (a.toString !== Object.prototype.toString && typeof a.toString === 'function' && typeof b.toString === 'function') return a.toString() === b.toString();
		    // END: Modifications

		    keys = Object.keys(a);
		    length = keys.length;
		    if (length !== Object.keys(b).length) return false;

		    for (i = length; i-- !== 0;)
		      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
		    // END: fast-deep-equal

		    // START: react-fast-compare
		    // custom handling for DOM elements
		    if (hasElementType && a instanceof Element) return false;

		    // custom handling for React/Preact
		    for (i = length; i-- !== 0;) {
		      if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {
		        // React-specific: avoid traversing React elements' _owner
		        // Preact-specific: avoid traversing Preact elements' __v and __o
		        //    __v = $_original / $_vnode
		        //    __o = $_owner
		        // These properties contain circular references and are not needed when
		        // comparing the actual elements (and not their owners)
		        // .$$typeof and ._store on just reasonable markers of elements

		        continue;
		      }

		      // all other properties should be traversed as usual
		      if (!equal(a[keys[i]], b[keys[i]])) return false;
		    }
		    // END: react-fast-compare

		    // START: fast-deep-equal
		    return true;
		  }

		  return a !== a && b !== b;
		}
		// end fast-deep-equal

		reactFastCompare = function isEqual(a, b) {
		  try {
		    return equal(a, b);
		  } catch (error) {
		    if (((error.message || '').match(/stack|recursion/i))) {
		      // warn on circular references, don't crash
		      // browsers give this different errors name and messages:
		      // chrome/safari: "RangeError", "Maximum call stack size exceeded"
		      // firefox: "InternalError", too much recursion"
		      // edge: "Error", "Out of stack space"
		      console.warn('react-fast-compare cannot handle circular refs');
		      return false;
		    }
		    // some other error. we should definitely know about these
		    throw error;
		  }
		};
		return reactFastCompare;
	}

	var reactFastCompareExports = requireReactFastCompare();
	var isEqual = /*@__PURE__*/getDefaultExportFromCjs(reactFastCompareExports);

	function useTheme() {
	  const theme = reactExports.useContext(
	    ThemeContext
	  );
	  if (!theme) {
	    throw Error(
	      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
	    );
	  }
	  return theme;
	}

	function useChakra() {
	  const colorModeResult = useColorMode();
	  const theme = useTheme();
	  return { ...colorModeResult, theme };
	}

	function omitReactElements(props) {
	  return Object.fromEntries(
	    Object.entries(props).filter(([key, value]) => {
	      return value !== void 0 && key !== "children" && !reactExports.isValidElement(value);
	    })
	  );
	}
	function useStyleConfigImpl(themeKey, props = {}) {
	  const { styleConfig: styleConfigProp, ...rest } = props;
	  const { theme, colorMode } = useChakra();
	  const themeStyleConfig = themeKey ? memoizedGet$1(theme, `components.${themeKey}`) : void 0;
	  const styleConfig = styleConfigProp || themeStyleConfig;
	  const mergedProps = mergeWith(
	    { theme, colorMode },
	    styleConfig?.defaultProps ?? {},
	    omitReactElements(rest),
	    (obj, src) => !obj ? src : void 0
	  );
	  const stylesRef = reactExports.useRef({});
	  if (styleConfig) {
	    const getStyles = resolveStyleConfig(styleConfig);
	    const styles = getStyles(mergedProps);
	    const isStyleEqual = isEqual(stylesRef.current, styles);
	    if (!isStyleEqual) {
	      stylesRef.current = styles;
	    }
	  }
	  return stylesRef.current;
	}
	function useStyleConfig(themeKey, props = {}) {
	  return useStyleConfigImpl(themeKey, props);
	}
	function useMultiStyleConfig(themeKey, props = {}) {
	  return useStyleConfigImpl(themeKey, props);
	}

	const fallbackIcon = {
	  path: /* @__PURE__ */ jsxRuntimeExports.jsxs("g", { stroke: "currentColor", strokeWidth: "1.5", children: [
	    /* @__PURE__ */ jsxRuntimeExports.jsx(
	      "path",
	      {
	        strokeLinecap: "round",
	        fill: "none",
	        d: "M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25"
	      }
	    ),
	    /* @__PURE__ */ jsxRuntimeExports.jsx(
	      "path",
	      {
	        fill: "currentColor",
	        strokeLinecap: "round",
	        d: "M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0"
	      }
	    ),
	    /* @__PURE__ */ jsxRuntimeExports.jsx("circle", { fill: "none", strokeMiterlimit: "10", cx: "12", cy: "12", r: "11.25" })
	  ] }),
	  viewBox: "0 0 24 24"
	};
	const Icon = forwardRef((props, ref) => {
	  const {
	    as: element,
	    viewBox,
	    color = "currentColor",
	    focusable = false,
	    children,
	    className,
	    __css,
	    ...rest
	  } = props;
	  const _className = cx("chakra-icon", className);
	  const customStyles = useStyleConfig("Icon", props);
	  const styles = {
	    w: "1em",
	    h: "1em",
	    display: "inline-block",
	    lineHeight: "1em",
	    flexShrink: 0,
	    color,
	    ...__css,
	    ...customStyles
	  };
	  const shared = {
	    ref,
	    focusable,
	    className: _className,
	    __css: styles
	  };
	  const _viewBox = viewBox ?? fallbackIcon.viewBox;
	  if (element && typeof element !== "string") {
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.svg, { as: element, ...shared, ...rest });
	  }
	  const _path = children ?? fallbackIcon.path;
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.svg, { verticalAlign: "middle", viewBox: _viewBox, ...shared, ...rest, children: _path });
	});
	Icon.displayName = "Icon";

	function CheckIcon$1(props) {
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { viewBox: "0 0 24 24", ...props, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
	    "path",
	    {
	      fill: "currentColor",
	      d: "M12,0A12,12,0,1,0,24,12,12.014,12.014,0,0,0,12,0Zm6.927,8.2-6.845,9.289a1.011,1.011,0,0,1-1.43.188L5.764,13.769a1,1,0,1,1,1.25-1.562l4.076,3.261,6.227-8.451A1,1,0,1,1,18.927,8.2Z"
	    }
	  ) });
	}
	function InfoIcon(props) {
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { viewBox: "0 0 24 24", ...props, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
	    "path",
	    {
	      fill: "currentColor",
	      d: "M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z"
	    }
	  ) });
	}
	function WarningIcon(props) {
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { viewBox: "0 0 24 24", ...props, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
	    "path",
	    {
	      fill: "currentColor",
	      d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
	    }
	  ) });
	}

	const spin = keyframes$1({
	  "0%": {
	    transform: "rotate(0deg)"
	  },
	  "100%": {
	    transform: "rotate(360deg)"
	  }
	});
	const Spinner = forwardRef((props, ref) => {
	  const styles = useStyleConfig("Spinner", props);
	  const {
	    label = "Loading...",
	    thickness = "2px",
	    speed = "0.45s",
	    emptyColor = "transparent",
	    className,
	    ...rest
	  } = omitThemingProps(props);
	  const _className = cx("chakra-spinner", className);
	  const spinnerStyles = {
	    display: "inline-block",
	    borderColor: "currentColor",
	    borderStyle: "solid",
	    borderRadius: "99999px",
	    borderWidth: thickness,
	    borderBottomColor: emptyColor,
	    borderLeftColor: emptyColor,
	    animation: `${spin} ${speed} linear infinite`,
	    ...styles
	  };
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(
	    chakra.div,
	    {
	      ref,
	      __css: spinnerStyles,
	      className: _className,
	      ...rest,
	      children: label && /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.span, { srOnly: true, children: label })
	    }
	  );
	});
	Spinner.displayName = "Spinner";

	const [AlertProvider, useAlertContext] = createContext({
	  name: "AlertContext",
	  hookName: "useAlertContext",
	  providerName: "<Alert />"
	});
	const [AlertStylesProvider, useAlertStyles] = createContext({
	  name: `AlertStylesContext`,
	  hookName: `useAlertStyles`,
	  providerName: "<Alert />"
	});
	const STATUSES = {
	  info: { icon: InfoIcon, colorScheme: "blue" },
	  warning: { icon: WarningIcon, colorScheme: "orange" },
	  success: { icon: CheckIcon$1, colorScheme: "green" },
	  error: { icon: WarningIcon, colorScheme: "red" },
	  loading: { icon: Spinner, colorScheme: "blue" }
	};
	function getStatusColorScheme(status) {
	  return STATUSES[status].colorScheme;
	}
	function getStatusIcon(status) {
	  return STATUSES[status].icon;
	}

	const Alert = forwardRef(function Alert2(props, ref) {
	  const { status = "info", addRole = true, ...rest } = omitThemingProps(props);
	  const colorScheme = props.colorScheme ?? getStatusColorScheme(status);
	  const styles = useMultiStyleConfig("Alert", { ...props, colorScheme });
	  const alertStyles = defineStyle({
	    width: "100%",
	    display: "flex",
	    alignItems: "center",
	    position: "relative",
	    overflow: "hidden",
	    ...styles.container
	  });
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(AlertProvider, { value: { status }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(AlertStylesProvider, { value: styles, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
	    chakra.div,
	    {
	      "data-status": status,
	      role: addRole ? "alert" : void 0,
	      ref,
	      ...rest,
	      className: cx("chakra-alert", props.className),
	      __css: alertStyles
	    }
	  ) }) });
	});
	Alert.displayName = "Alert";

	function AlertIcon(props) {
	  const { status } = useAlertContext();
	  const BaseIcon = getStatusIcon(status);
	  const styles = useAlertStyles();
	  const css = status === "loading" ? styles.spinner : styles.icon;
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(
	    chakra.span,
	    {
	      display: "inherit",
	      "data-status": status,
	      ...props,
	      className: cx("chakra-alert__icon", props.className),
	      __css: css,
	      children: props.children || /* @__PURE__ */ jsxRuntimeExports.jsx(BaseIcon, { h: "100%", w: "100%" })
	    }
	  );
	}
	AlertIcon.displayName = "AlertIcon";

	const AlertTitle = forwardRef(
	  function AlertTitle2(props, ref) {
	    const styles = useAlertStyles();
	    const { status } = useAlertContext();
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(
	      chakra.div,
	      {
	        ref,
	        "data-status": status,
	        ...props,
	        className: cx("chakra-alert__title", props.className),
	        __css: styles.title
	      }
	    );
	  }
	);
	AlertTitle.displayName = "AlertTitle";

	const AlertDescription = forwardRef(
	  function AlertDescription2(props, ref) {
	    const { status } = useAlertContext();
	    const styles = useAlertStyles();
	    const descriptionStyles = defineStyle({
	      display: "inline",
	      ...styles.description
	    });
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(
	      chakra.div,
	      {
	        ref,
	        "data-status": status,
	        ...props,
	        className: cx("chakra-alert__desc", props.className),
	        __css: descriptionStyles
	      }
	    );
	  }
	);
	AlertDescription.displayName = "AlertDescription";

	function CloseIcon$1(props) {
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { focusable: "false", "aria-hidden": true, ...props, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
	    "path",
	    {
	      fill: "currentColor",
	      d: "M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
	    }
	  ) });
	}
	const CloseButton = forwardRef(
	  function CloseButton2(props, ref) {
	    const styles = useStyleConfig("CloseButton", props);
	    const { children, isDisabled, __css, ...rest } = omitThemingProps(props);
	    const baseStyle = {
	      outline: 0,
	      display: "flex",
	      alignItems: "center",
	      justifyContent: "center",
	      flexShrink: 0
	    };
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(
	      chakra.button,
	      {
	        type: "button",
	        "aria-label": "Close",
	        ref,
	        disabled: isDisabled,
	        __css: {
	          ...baseStyle,
	          ...styles,
	          ...__css
	        },
	        ...rest,
	        children: children || /* @__PURE__ */ jsxRuntimeExports.jsx(CloseIcon$1, { width: "1em", height: "1em" })
	      }
	    );
	  }
	);
	CloseButton.displayName = "CloseButton";

	const Toast = (props) => {
	  const {
	    status,
	    variant = "solid",
	    id,
	    title,
	    isClosable,
	    onClose,
	    description,
	    colorScheme,
	    icon
	  } = props;
	  const ids = id ? {
	    root: `toast-${id}`,
	    title: `toast-${id}-title`,
	    description: `toast-${id}-description`
	  } : void 0;
	  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
	    Alert,
	    {
	      addRole: false,
	      status,
	      variant,
	      id: ids?.root,
	      alignItems: "start",
	      borderRadius: "md",
	      boxShadow: "lg",
	      paddingEnd: 8,
	      textAlign: "start",
	      width: "auto",
	      colorScheme,
	      children: [
	        /* @__PURE__ */ jsxRuntimeExports.jsx(AlertIcon, { children: icon }),
	        /* @__PURE__ */ jsxRuntimeExports.jsxs(chakra.div, { flex: "1", maxWidth: "100%", children: [
	          title && /* @__PURE__ */ jsxRuntimeExports.jsx(AlertTitle, { id: ids?.title, children: title }),
	          description && /* @__PURE__ */ jsxRuntimeExports.jsx(AlertDescription, { id: ids?.description, display: "block", children: description })
	        ] }),
	        isClosable && /* @__PURE__ */ jsxRuntimeExports.jsx(
	          CloseButton,
	          {
	            size: "sm",
	            onClick: onClose,
	            position: "absolute",
	            insetEnd: 1,
	            top: 1
	          }
	        )
	      ]
	    }
	  );
	};
	function createRenderToast(options = {}) {
	  const { render, toastComponent: ToastComponent = Toast } = options;
	  const renderToast = (props) => {
	    if (typeof render === "function") {
	      return render({ ...props, ...options });
	    }
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(ToastComponent, { ...props, ...options });
	  };
	  return renderToast;
	}

	const initialState = {
	  top: [],
	  "top-left": [],
	  "top-right": [],
	  "bottom-left": [],
	  bottom: [],
	  "bottom-right": []
	};
	const toastStore = createStore(initialState);
	function createStore(initialState2) {
	  let state = initialState2;
	  const listeners = /* @__PURE__ */ new Set();
	  const setState = (setStateFn) => {
	    state = setStateFn(state);
	    listeners.forEach((l) => l());
	  };
	  return {
	    getState: () => state,
	    subscribe: (listener) => {
	      listeners.add(listener);
	      return () => {
	        setState(() => initialState2);
	        listeners.delete(listener);
	      };
	    },
	    /**
	     * Delete a toast record at its position
	     */
	    removeToast: (id, position) => {
	      setState((prevState) => ({
	        ...prevState,
	        // id may be string or number
	        // eslint-disable-next-line eqeqeq
	        [position]: prevState[position].filter((toast) => toast.id != id)
	      }));
	    },
	    notify: (message, options) => {
	      const toast = createToast(message, options);
	      const { position, id } = toast;
	      setState((prevToasts) => {
	        const isTop = position.includes("top");
	        const toasts = isTop ? [toast, ...prevToasts[position] ?? []] : [...prevToasts[position] ?? [], toast];
	        return {
	          ...prevToasts,
	          [position]: toasts
	        };
	      });
	      return id;
	    },
	    update: (id, options) => {
	      if (!id)
	        return;
	      setState((prevState) => {
	        const nextState = { ...prevState };
	        const { position, index } = findToast(nextState, id);
	        if (position && index !== -1) {
	          nextState[position][index] = {
	            ...nextState[position][index],
	            ...options,
	            message: createRenderToast(options)
	          };
	        }
	        return nextState;
	      });
	    },
	    closeAll: ({ positions } = {}) => {
	      setState((prev) => {
	        const allPositions = [
	          "bottom",
	          "bottom-right",
	          "bottom-left",
	          "top",
	          "top-left",
	          "top-right"
	        ];
	        const positionsToClose = positions ?? allPositions;
	        return positionsToClose.reduce(
	          (acc, position) => {
	            acc[position] = prev[position].map((toast) => ({
	              ...toast,
	              requestClose: true
	            }));
	            return acc;
	          },
	          { ...prev }
	        );
	      });
	    },
	    close: (id) => {
	      setState((prevState) => {
	        const position = getToastPosition(prevState, id);
	        if (!position)
	          return prevState;
	        return {
	          ...prevState,
	          [position]: prevState[position].map((toast) => {
	            if (toast.id == id) {
	              return {
	                ...toast,
	                requestClose: true
	              };
	            }
	            return toast;
	          })
	        };
	      });
	    },
	    isActive: (id) => Boolean(findToast(toastStore.getState(), id).position)
	  };
	}
	let counter = 0;
	function createToast(message, options = {}) {
	  counter += 1;
	  const id = options.id ?? counter;
	  const position = options.position ?? "bottom";
	  return {
	    id,
	    message,
	    position,
	    duration: options.duration,
	    onCloseComplete: options.onCloseComplete,
	    onRequestRemove: () => toastStore.removeToast(String(id), position),
	    status: options.status,
	    requestClose: false,
	    containerStyle: options.containerStyle
	  };
	}

	var reactDomExports = requireReactDom();

	const [PortalContextProvider, usePortalContext] = createContext({
	  strict: false,
	  name: "PortalContext"
	});
	const PORTAL_CLASSNAME = "chakra-portal";
	const PORTAL_SELECTOR = `.chakra-portal`;
	const Container = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(
	  "div",
	  {
	    className: "chakra-portal-zIndex",
	    style: {
	      position: "absolute",
	      zIndex: props.zIndex,
	      top: 0,
	      left: 0,
	      right: 0
	      // NB: Don't add `bottom: 0`, it makes the entire app unusable
	      // @see https://github.com/chakra-ui/chakra-ui/issues/3201
	    },
	    children: props.children
	  }
	);
	const DefaultPortal = (props) => {
	  const { appendToParentPortal, children } = props;
	  const [tempNode, setTempNode] = reactExports.useState(null);
	  const portal = reactExports.useRef(null);
	  const [, forceUpdate] = reactExports.useState({});
	  reactExports.useEffect(() => forceUpdate({}), []);
	  const parentPortal = usePortalContext();
	  const manager = usePortalManager();
	  useSafeLayoutEffect$1(() => {
	    if (!tempNode)
	      return;
	    const doc = tempNode.ownerDocument;
	    const host = appendToParentPortal ? parentPortal ?? doc.body : doc.body;
	    if (!host)
	      return;
	    portal.current = doc.createElement("div");
	    portal.current.className = PORTAL_CLASSNAME;
	    host.appendChild(portal.current);
	    forceUpdate({});
	    const portalNode = portal.current;
	    return () => {
	      if (host.contains(portalNode)) {
	        host.removeChild(portalNode);
	      }
	    };
	  }, [tempNode]);
	  const _children = manager?.zIndex ? /* @__PURE__ */ jsxRuntimeExports.jsx(Container, { zIndex: manager?.zIndex, children }) : children;
	  return portal.current ? reactDomExports.createPortal(
	    /* @__PURE__ */ jsxRuntimeExports.jsx(PortalContextProvider, { value: portal.current, children: _children }),
	    portal.current
	  ) : /* @__PURE__ */ jsxRuntimeExports.jsx(
	    "span",
	    {
	      ref: (el) => {
	        if (el)
	          setTempNode(el);
	      }
	    }
	  );
	};
	const ContainerPortal = (props) => {
	  const { children, containerRef, appendToParentPortal } = props;
	  const containerEl = containerRef.current;
	  const host = containerEl ?? (typeof window !== "undefined" ? document.body : void 0);
	  const portal = reactExports.useMemo(() => {
	    const node = containerEl?.ownerDocument.createElement("div");
	    if (node)
	      node.className = PORTAL_CLASSNAME;
	    return node;
	  }, [containerEl]);
	  const [, forceUpdate] = reactExports.useState({});
	  useSafeLayoutEffect$1(() => forceUpdate({}), []);
	  useSafeLayoutEffect$1(() => {
	    if (!portal || !host)
	      return;
	    host.appendChild(portal);
	    return () => {
	      host.removeChild(portal);
	    };
	  }, [portal, host]);
	  if (host && portal) {
	    return reactDomExports.createPortal(
	      /* @__PURE__ */ jsxRuntimeExports.jsx(PortalContextProvider, { value: appendToParentPortal ? portal : null, children }),
	      portal
	    );
	  }
	  return null;
	};
	function Portal(props) {
	  const portalProps = {
	    appendToParentPortal: true,
	    ...props
	  };
	  const { containerRef, ...rest } = portalProps;
	  return containerRef ? /* @__PURE__ */ jsxRuntimeExports.jsx(ContainerPortal, { containerRef, ...rest }) : /* @__PURE__ */ jsxRuntimeExports.jsx(DefaultPortal, { ...rest });
	}
	Portal.className = PORTAL_CLASSNAME;
	Portal.selector = PORTAL_SELECTOR;
	Portal.displayName = "Portal";

	const [ToastOptionProvider, useToastOptionContext] = createContext({
	  name: `ToastOptionsContext`,
	  strict: false
	});
	const ToastProvider = (props) => {
	  const state = reactExports.useSyncExternalStore(
	    toastStore.subscribe,
	    toastStore.getState,
	    toastStore.getState
	  );
	  const {
	    motionVariants,
	    component: Component = ToastComponent,
	    portalProps,
	    animatePresenceProps
	  } = props;
	  const stateKeys = Object.keys(state);
	  const toastList = stateKeys.map((position) => {
	    const toasts = state[position];
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(
	      "div",
	      {
	        role: "region",
	        "aria-live": "polite",
	        "aria-label": `Notifications-${position}`,
	        id: `chakra-toast-manager-${position}`,
	        style: getToastListStyle(position),
	        children: /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { ...animatePresenceProps, initial: false, children: toasts.map((toast) => /* @__PURE__ */ jsxRuntimeExports.jsx(
	          Component,
	          {
	            motionVariants,
	            ...toast
	          },
	          toast.id
	        )) })
	      },
	      position
	    );
	  });
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal, { ...portalProps, children: toastList });
	};

	const createProvider = (providerTheme) => {
	  return function ChakraProvider({
	    children,
	    theme = providerTheme,
	    toastOptions,
	    ...restProps
	  }) {
	    return /* @__PURE__ */ jsxRuntimeExports.jsxs(Provider, { theme, ...restProps, children: [
	      /* @__PURE__ */ jsxRuntimeExports.jsx(ToastOptionProvider, { value: toastOptions?.defaultOptions, children }),
	      /* @__PURE__ */ jsxRuntimeExports.jsx(ToastProvider, { ...toastOptions })
	    ] });
	  };
	};

	const ChakraProvider = createProvider(theme$1);

	const TRANSITION_EASINGS = {
	  easeIn: [0.4, 0, 1, 1],
	  easeOut: [0, 0, 0.2, 1]};
	const TRANSITION_DEFAULTS = {
	  enter: {
	    duration: 0.2,
	    ease: TRANSITION_EASINGS.easeOut
	  },
	  exit: {
	    duration: 0.1,
	    ease: TRANSITION_EASINGS.easeIn
	  }
	};
	const withDelay = {
	  enter: (transition, delay) => ({
	    ...transition,
	    delay: typeof delay === "number" ? delay : delay?.["enter"]
	  }),
	  exit: (transition, delay) => ({
	    ...transition,
	    delay: typeof delay === "number" ? delay : delay?.["exit"]
	  })
	};

	const Box = chakra("div");
	Box.displayName = "Box";

	const [ButtonGroupProvider, useButtonGroup] = createContext({
	  strict: false,
	  name: "ButtonGroupContext"
	});

	function ButtonIcon(props) {
	  const { children, className, ...rest } = props;
	  const _children = reactExports.isValidElement(children) ? reactExports.cloneElement(children, {
	    "aria-hidden": true,
	    focusable: false
	  }) : children;
	  const _className = cx("chakra-button__icon", className);
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(
	    chakra.span,
	    {
	      display: "inline-flex",
	      alignSelf: "center",
	      flexShrink: 0,
	      ...rest,
	      className: _className,
	      children: _children
	    }
	  );
	}
	ButtonIcon.displayName = "ButtonIcon";

	function ButtonSpinner(props) {
	  const {
	    label,
	    placement,
	    spacing = "0.5rem",
	    children = /* @__PURE__ */ jsxRuntimeExports.jsx(Spinner, { color: "currentColor", width: "1em", height: "1em" }),
	    className,
	    __css,
	    ...rest
	  } = props;
	  const _className = cx("chakra-button__spinner", className);
	  const marginProp = placement === "start" ? "marginEnd" : "marginStart";
	  const spinnerStyles = reactExports.useMemo(
	    () => defineStyle({
	      display: "flex",
	      alignItems: "center",
	      position: label ? "relative" : "absolute",
	      [marginProp]: label ? spacing : 0,
	      fontSize: "1em",
	      lineHeight: "normal",
	      ...__css
	    }),
	    [__css, label, marginProp, spacing]
	  );
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.div, { className: _className, ...rest, __css: spinnerStyles, children });
	}
	ButtonSpinner.displayName = "ButtonSpinner";

	function useButtonType(value) {
	  const [isButton, setIsButton] = reactExports.useState(!value);
	  const refCallback = reactExports.useCallback((node) => {
	    if (!node)
	      return;
	    setIsButton(node.tagName === "BUTTON");
	  }, []);
	  const type = isButton ? "button" : void 0;
	  return { ref: refCallback, type };
	}

	const Button = forwardRef((props, ref) => {
	  const group = useButtonGroup();
	  const styles = useStyleConfig("Button", { ...group, ...props });
	  const {
	    isDisabled = group?.isDisabled,
	    isLoading,
	    isActive,
	    children,
	    leftIcon,
	    rightIcon,
	    loadingText,
	    iconSpacing = "0.5rem",
	    type,
	    spinner,
	    spinnerPlacement = "start",
	    className,
	    as,
	    shouldWrapChildren,
	    ...rest
	  } = omitThemingProps(props);
	  const buttonStyles = reactExports.useMemo(() => {
	    const _focus = { ...styles?.["_focus"], zIndex: 1 };
	    return {
	      display: "inline-flex",
	      appearance: "none",
	      alignItems: "center",
	      justifyContent: "center",
	      userSelect: "none",
	      position: "relative",
	      whiteSpace: "nowrap",
	      verticalAlign: "middle",
	      outline: "none",
	      ...styles,
	      ...!!group && { _focus }
	    };
	  }, [styles, group]);
	  const { ref: _ref, type: defaultType } = useButtonType(as);
	  const contentProps = {
	    rightIcon,
	    leftIcon,
	    iconSpacing,
	    children,
	    shouldWrapChildren
	  };
	  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
	    chakra.button,
	    {
	      disabled: isDisabled || isLoading,
	      ref: useMergeRefs$1(ref, _ref),
	      as,
	      type: type ?? defaultType,
	      "data-active": dataAttr(isActive),
	      "data-loading": dataAttr(isLoading),
	      __css: buttonStyles,
	      className: cx("chakra-button", className),
	      ...rest,
	      children: [
	        isLoading && spinnerPlacement === "start" && /* @__PURE__ */ jsxRuntimeExports.jsx(
	          ButtonSpinner,
	          {
	            className: "chakra-button__spinner--start",
	            label: loadingText,
	            placement: "start",
	            spacing: iconSpacing,
	            children: spinner
	          }
	        ),
	        isLoading ? loadingText || /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.span, { opacity: 0, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonContent, { ...contentProps }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonContent, { ...contentProps }),
	        isLoading && spinnerPlacement === "end" && /* @__PURE__ */ jsxRuntimeExports.jsx(
	          ButtonSpinner,
	          {
	            className: "chakra-button__spinner--end",
	            label: loadingText,
	            placement: "end",
	            spacing: iconSpacing,
	            children: spinner
	          }
	        )
	      ]
	    }
	  );
	});
	Button.displayName = "Button";
	function ButtonContent(props) {
	  const { leftIcon, rightIcon, children, iconSpacing, shouldWrapChildren } = props;
	  if (!shouldWrapChildren) {
	    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
	      leftIcon && /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonIcon, { marginEnd: iconSpacing, children: leftIcon }),
	      children,
	      rightIcon && /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonIcon, { marginStart: iconSpacing, children: rightIcon })
	    ] });
	  }
	  return /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { style: { display: "contents" }, children: [
	    leftIcon && /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonIcon, { marginEnd: iconSpacing, children: leftIcon }),
	    children,
	    rightIcon && /* @__PURE__ */ jsxRuntimeExports.jsx(ButtonIcon, { marginStart: iconSpacing, children: rightIcon })
	  ] });
	}

	const IconButton = forwardRef(
	  (props, ref) => {
	    const { icon, children, isRound, "aria-label": ariaLabel, ...rest } = props;
	    const element = icon || children;
	    const _children = reactExports.isValidElement(element) ? reactExports.cloneElement(element, {
	      "aria-hidden": true,
	      focusable: false
	    }) : null;
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(
	      Button,
	      {
	        px: "0",
	        py: "0",
	        borderRadius: isRound ? "full" : void 0,
	        ref,
	        "aria-label": ariaLabel,
	        ...rest,
	        children: _children
	      }
	    );
	  }
	);
	IconButton.displayName = "IconButton";

	const [FormControlStylesProvider, useFormControlStyles] = createContext({
	  name: `FormControlStylesContext`,
	  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormControl />" `
	});
	const [FormControlProvider, useFormControlContext] = createContext({
	  strict: false,
	  name: "FormControlContext"
	});
	function useFormControlProvider(props) {
	  const {
	    id: idProp,
	    isRequired,
	    isInvalid,
	    isDisabled,
	    isReadOnly,
	    ...htmlProps
	  } = props;
	  const uuid = reactExports.useId();
	  const id = idProp || `field-${uuid}`;
	  const labelId = `${id}-label`;
	  const feedbackId = `${id}-feedback`;
	  const helpTextId = `${id}-helptext`;
	  const [hasFeedbackText, setHasFeedbackText] = reactExports.useState(false);
	  const [hasHelpText, setHasHelpText] = reactExports.useState(false);
	  const [isFocused, setFocus] = reactExports.useState(false);
	  const getHelpTextProps = reactExports.useCallback(
	    (props2 = {}, forwardedRef = null) => ({
	      id: helpTextId,
	      ...props2,
	      /**
	       * Notify the field context when the help text is rendered on screen,
	       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).
	       */
	      ref: mergeRefs(forwardedRef, (node) => {
	        if (!node)
	          return;
	        setHasHelpText(true);
	      })
	    }),
	    [helpTextId]
	  );
	  const getLabelProps = reactExports.useCallback(
	    (props2 = {}, forwardedRef = null) => ({
	      ...props2,
	      ref: forwardedRef,
	      "data-focus": dataAttr(isFocused),
	      "data-disabled": dataAttr(isDisabled),
	      "data-invalid": dataAttr(isInvalid),
	      "data-readonly": dataAttr(isReadOnly),
	      id: props2.id !== void 0 ? props2.id : labelId,
	      htmlFor: props2.htmlFor !== void 0 ? props2.htmlFor : id
	    }),
	    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId]
	  );
	  const getErrorMessageProps = reactExports.useCallback(
	    (props2 = {}, forwardedRef = null) => ({
	      id: feedbackId,
	      ...props2,
	      /**
	       * Notify the field context when the error message is rendered on screen,
	       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).
	       */
	      ref: mergeRefs(forwardedRef, (node) => {
	        if (!node)
	          return;
	        setHasFeedbackText(true);
	      }),
	      "aria-live": "polite"
	    }),
	    [feedbackId]
	  );
	  const getRootProps = reactExports.useCallback(
	    (props2 = {}, forwardedRef = null) => ({
	      ...props2,
	      ...htmlProps,
	      ref: forwardedRef,
	      role: "group",
	      "data-focus": dataAttr(isFocused),
	      "data-disabled": dataAttr(isDisabled),
	      "data-invalid": dataAttr(isInvalid),
	      "data-readonly": dataAttr(isReadOnly)
	    }),
	    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly]
	  );
	  const getRequiredIndicatorProps = reactExports.useCallback(
	    (props2 = {}, forwardedRef = null) => ({
	      ...props2,
	      ref: forwardedRef,
	      role: "presentation",
	      "aria-hidden": true,
	      children: props2.children || "*"
	    }),
	    []
	  );
	  return {
	    isRequired: !!isRequired,
	    isInvalid: !!isInvalid,
	    isReadOnly: !!isReadOnly,
	    isDisabled: !!isDisabled,
	    isFocused: !!isFocused,
	    onFocus: () => setFocus(true),
	    onBlur: () => setFocus(false),
	    hasFeedbackText,
	    setHasFeedbackText,
	    hasHelpText,
	    setHasHelpText,
	    id,
	    labelId,
	    feedbackId,
	    helpTextId,
	    htmlProps,
	    getHelpTextProps,
	    getErrorMessageProps,
	    getRootProps,
	    getLabelProps,
	    getRequiredIndicatorProps
	  };
	}
	const FormControl = forwardRef(
	  function FormControl2(props, ref) {
	    const styles = useMultiStyleConfig("Form", props);
	    const ownProps = omitThemingProps(props);
	    const {
	      getRootProps,
	      htmlProps: _,
	      ...context
	    } = useFormControlProvider(ownProps);
	    const className = cx("chakra-form-control", props.className);
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(FormControlProvider, { value: context, children: /* @__PURE__ */ jsxRuntimeExports.jsx(FormControlStylesProvider, { value: styles, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
	      chakra.div,
	      {
	        ...getRootProps({}, ref),
	        className,
	        __css: styles["container"]
	      }
	    ) }) });
	  }
	);
	FormControl.displayName = "FormControl";
	const FormHelperText = forwardRef(
	  function FormHelperText2(props, ref) {
	    const field = useFormControlContext();
	    const styles = useFormControlStyles();
	    const className = cx("chakra-form__helper-text", props.className);
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(
	      chakra.div,
	      {
	        ...field?.getHelpTextProps(props, ref),
	        __css: styles.helperText,
	        className
	      }
	    );
	  }
	);
	FormHelperText.displayName = "FormHelperText";

	function useFormControl(props) {
	  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } = useFormControlProps(props);
	  return {
	    ...rest,
	    disabled: isDisabled,
	    readOnly: isReadOnly,
	    required: isRequired,
	    "aria-invalid": ariaAttr(isInvalid),
	    "aria-required": ariaAttr(isRequired),
	    "aria-readonly": ariaAttr(isReadOnly)
	  };
	}
	function useFormControlProps(props) {
	  const field = useFormControlContext();
	  const {
	    id,
	    disabled,
	    readOnly,
	    required,
	    isRequired,
	    isInvalid,
	    isReadOnly,
	    isDisabled,
	    onFocus,
	    onBlur,
	    ...rest
	  } = props;
	  const labelIds = props["aria-describedby"] ? [props["aria-describedby"]] : [];
	  if (field?.hasFeedbackText && field?.isInvalid) {
	    labelIds.push(field.feedbackId);
	  }
	  if (field?.hasHelpText) {
	    labelIds.push(field.helpTextId);
	  }
	  return {
	    ...rest,
	    "aria-describedby": labelIds.join(" ") || void 0,
	    id: id ?? field?.id,
	    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,
	    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,
	    isRequired: required ?? isRequired ?? field?.isRequired,
	    isInvalid: isInvalid ?? field?.isInvalid,
	    onFocus: callAllHandlers(field?.onFocus, onFocus),
	    onBlur: callAllHandlers(field?.onBlur, onBlur)
	  };
	}

	function isFunction(value) {
	  return typeof value === "function";
	}
	function pipe(...fns) {
	  return (v) => fns.reduce((a, b) => b(a), v);
	}
	const createExtendTheme = (theme2) => {
	  return function extendTheme2(...extensions) {
	    let overrides = [...extensions];
	    let activeTheme = extensions[extensions.length - 1];
	    if (isChakraTheme(activeTheme) && // this ensures backward compatibility
	    // previously only `extendTheme(override, activeTheme?)` was allowed
	    overrides.length > 1) {
	      overrides = overrides.slice(0, overrides.length - 1);
	    } else {
	      activeTheme = theme2;
	    }
	    return pipe(
	      ...overrides.map(
	        (extension) => (prevTheme) => isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension)
	      )
	    )(activeTheme);
	  };
	};
	const extendTheme = createExtendTheme(theme$1);
	function mergeThemeOverride(...overrides) {
	  return mergeWith({}, ...overrides, mergeThemeCustomizer);
	}
	function mergeThemeCustomizer(source, override, key, object) {
	  if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object, key)) {
	    return (...args) => {
	      const sourceValue = isFunction(source) ? source(...args) : source;
	      const overrideValue = isFunction(override) ? override(...args) : override;
	      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer);
	    };
	  }
	  if (isObject$1(source) && isArray(override)) {
	    return override;
	  }
	  if (isArray(source) && isObject$1(override)) {
	    return override;
	  }
	  return void 0;
	}

	function _objectWithoutPropertiesLoose(r, e) {
	  if (null == r) return {};
	  var t = {};
	  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
	    if (-1 !== e.indexOf(n)) continue;
	    t[n] = r[n];
	  }
	  return t;
	}

	var propTypes = {exports: {}};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret_1;
	var hasRequiredReactPropTypesSecret;

	function requireReactPropTypesSecret () {
		if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
		hasRequiredReactPropTypesSecret = 1;

		var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

		ReactPropTypesSecret_1 = ReactPropTypesSecret;
		return ReactPropTypesSecret_1;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var factoryWithThrowingShims;
	var hasRequiredFactoryWithThrowingShims;

	function requireFactoryWithThrowingShims () {
		if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;
		hasRequiredFactoryWithThrowingShims = 1;

		var ReactPropTypesSecret = requireReactPropTypesSecret();

		function emptyFunction() {}
		function emptyFunctionWithReset() {}
		emptyFunctionWithReset.resetWarningCache = emptyFunction;

		factoryWithThrowingShims = function() {
		  function shim(props, propName, componentName, location, propFullName, secret) {
		    if (secret === ReactPropTypesSecret) {
		      // It is still safe when called from React.
		      return;
		    }
		    var err = new Error(
		      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
		      'Use PropTypes.checkPropTypes() to call them. ' +
		      'Read more at http://fb.me/use-check-prop-types'
		    );
		    err.name = 'Invariant Violation';
		    throw err;
		  }	  shim.isRequired = shim;
		  function getShim() {
		    return shim;
		  }	  // Important!
		  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
		  var ReactPropTypes = {
		    array: shim,
		    bigint: shim,
		    bool: shim,
		    func: shim,
		    number: shim,
		    object: shim,
		    string: shim,
		    symbol: shim,

		    any: shim,
		    arrayOf: getShim,
		    element: shim,
		    elementType: shim,
		    instanceOf: getShim,
		    node: shim,
		    objectOf: getShim,
		    oneOf: getShim,
		    oneOfType: getShim,
		    shape: getShim,
		    exact: getShim,

		    checkPropTypes: emptyFunctionWithReset,
		    resetWarningCache: emptyFunction
		  };

		  ReactPropTypes.PropTypes = ReactPropTypes;

		  return ReactPropTypes;
		};
		return factoryWithThrowingShims;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredPropTypes;

	function requirePropTypes () {
		if (hasRequiredPropTypes) return propTypes.exports;
		hasRequiredPropTypes = 1;
		{
		  // By explicitly using `prop-types` you are opting into new production behavior.
		  // http://fb.me/prop-types-in-prod
		  propTypes.exports = requireFactoryWithThrowingShims()();
		}
		return propTypes.exports;
	}

	requirePropTypes();

	/**
	 * defines a focus group
	 */
	var FOCUS_GROUP = 'data-focus-lock';
	/**
	 * disables element discovery inside a group marked by key
	 */
	var FOCUS_DISABLED = 'data-focus-lock-disabled';
	/**
	 * allows uncontrolled focus within the marked area, effectively disabling focus lock for it's content
	 */
	var FOCUS_ALLOW = 'data-no-focus-lock';
	/**
	 * instructs autofocus engine to pick default autofocus inside a given node
	 * can be set on the element or container
	 */
	var FOCUS_AUTO = 'data-autofocus-inside';
	/**
	 * instructs autofocus to ignore elements within a given node
	 * can be set on the element or container
	 */
	var FOCUS_NO_AUTOFOCUS = 'data-no-autofocus';

	/**
	 * Assigns a value for a given ref, no matter of the ref format
	 * @param {RefObject} ref - a callback function or ref object
	 * @param value - a new value
	 *
	 * @see https://github.com/theKashey/use-callback-ref#assignref
	 * @example
	 * const refObject = useRef();
	 * const refFn = (ref) => {....}
	 *
	 * assignRef(refObject, "refValue");
	 * assignRef(refFn, "refValue");
	 */
	function assignRef(ref, value) {
	    if (typeof ref === 'function') {
	        ref(value);
	    }
	    else if (ref) {
	        ref.current = value;
	    }
	    return ref;
	}

	/**
	 * creates a MutableRef with ref change callback
	 * @param initialValue - initial ref value
	 * @param {Function} callback - a callback to run when value changes
	 *
	 * @example
	 * const ref = useCallbackRef(0, (newValue, oldValue) => console.log(oldValue, '->', newValue);
	 * ref.current = 1;
	 * // prints 0 -> 1
	 *
	 * @see https://reactjs.org/docs/hooks-reference.html#useref
	 * @see https://github.com/theKashey/use-callback-ref#usecallbackref---to-replace-reactuseref
	 * @returns {MutableRefObject}
	 */
	function useCallbackRef(initialValue, callback) {
	    var ref = reactExports.useState(function () { return ({
	        // value
	        value: initialValue,
	        // last callback
	        callback: callback,
	        // "memoized" public interface
	        facade: {
	            get current() {
	                return ref.value;
	            },
	            set current(value) {
	                var last = ref.value;
	                if (last !== value) {
	                    ref.value = value;
	                    ref.callback(value, last);
	                }
	            },
	        },
	    }); })[0];
	    // update callback
	    ref.callback = callback;
	    return ref.facade;
	}

	var useIsomorphicLayoutEffect = typeof window !== 'undefined' ? reactExports.useLayoutEffect : reactExports.useEffect;
	var currentValues = new WeakMap();
	/**
	 * Merges two or more refs together providing a single interface to set their value
	 * @param {RefObject|Ref} refs
	 * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}
	 *
	 * @see {@link mergeRefs} a version without buit-in memoization
	 * @see https://github.com/theKashey/use-callback-ref#usemergerefs
	 * @example
	 * const Component = React.forwardRef((props, ref) => {
	 *   const ownRef = useRef();
	 *   const domRef = useMergeRefs([ref, ownRef]); // 👈 merge together
	 *   return <div ref={domRef}>...</div>
	 * }
	 */
	function useMergeRefs(refs, defaultValue) {
	    var callbackRef = useCallbackRef(null, function (newValue) {
	        return refs.forEach(function (ref) { return assignRef(ref, newValue); });
	    });
	    // handle refs changes - added or removed
	    useIsomorphicLayoutEffect(function () {
	        var oldValue = currentValues.get(callbackRef);
	        if (oldValue) {
	            var prevRefs_1 = new Set(oldValue);
	            var nextRefs_1 = new Set(refs);
	            var current_1 = callbackRef.current;
	            prevRefs_1.forEach(function (ref) {
	                if (!nextRefs_1.has(ref)) {
	                    assignRef(ref, null);
	                }
	            });
	            nextRefs_1.forEach(function (ref) {
	                if (!prevRefs_1.has(ref)) {
	                    assignRef(ref, current_1);
	                }
	            });
	        }
	        currentValues.set(callbackRef, refs);
	    }, [refs]);
	    return callbackRef;
	}

	var hiddenGuard = {
	  width: '1px',
	  height: '0px',
	  padding: 0,
	  overflow: 'hidden',
	  position: 'fixed',
	  top: '1px',
	  left: '1px'
	};

	/******************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	/* global Reflect, Promise, SuppressedError, Symbol, Iterator */


	var __assign = function() {
	    __assign = Object.assign || function __assign(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};

	function __rest(s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	}

	function __spreadArray(to, from, pack) {
	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	        if (ar || !(i in from)) {
	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	            ar[i] = from[i];
	        }
	    }
	    return to.concat(ar || Array.prototype.slice.call(from));
	}

	typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
	    var e = new Error(message);
	    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
	};

	function ItoI(a) {
	    return a;
	}
	function innerCreateMedium(defaults, middleware) {
	    if (middleware === void 0) { middleware = ItoI; }
	    var buffer = [];
	    var assigned = false;
	    var medium = {
	        read: function () {
	            if (assigned) {
	                throw new Error('Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.');
	            }
	            if (buffer.length) {
	                return buffer[buffer.length - 1];
	            }
	            return defaults;
	        },
	        useMedium: function (data) {
	            var item = middleware(data, assigned);
	            buffer.push(item);
	            return function () {
	                buffer = buffer.filter(function (x) { return x !== item; });
	            };
	        },
	        assignSyncMedium: function (cb) {
	            assigned = true;
	            while (buffer.length) {
	                var cbs = buffer;
	                buffer = [];
	                cbs.forEach(cb);
	            }
	            buffer = {
	                push: function (x) { return cb(x); },
	                filter: function () { return buffer; },
	            };
	        },
	        assignMedium: function (cb) {
	            assigned = true;
	            var pendingQueue = [];
	            if (buffer.length) {
	                var cbs = buffer;
	                buffer = [];
	                cbs.forEach(cb);
	                pendingQueue = buffer;
	            }
	            var executeQueue = function () {
	                var cbs = pendingQueue;
	                pendingQueue = [];
	                cbs.forEach(cb);
	            };
	            var cycle = function () { return Promise.resolve().then(executeQueue); };
	            cycle();
	            buffer = {
	                push: function (x) {
	                    pendingQueue.push(x);
	                    cycle();
	                },
	                filter: function (filter) {
	                    pendingQueue = pendingQueue.filter(filter);
	                    return buffer;
	                },
	            };
	        },
	    };
	    return medium;
	}
	function createMedium(defaults, middleware) {
	    if (middleware === void 0) { middleware = ItoI; }
	    return innerCreateMedium(defaults, middleware);
	}
	// eslint-disable-next-line @typescript-eslint/ban-types
	function createSidecarMedium(options) {
	    if (options === void 0) { options = {}; }
	    var medium = innerCreateMedium(null);
	    medium.options = __assign({ async: true, ssr: false }, options);
	    return medium;
	}

	var SideCar$1 = function (_a) {
	    var sideCar = _a.sideCar, rest = __rest(_a, ["sideCar"]);
	    if (!sideCar) {
	        throw new Error('Sidecar: please provide `sideCar` property to import the right car');
	    }
	    var Target = sideCar.read();
	    if (!Target) {
	        throw new Error('Sidecar medium not found');
	    }
	    return reactExports.createElement(Target, __assign({}, rest));
	};
	SideCar$1.isSideCarExport = true;
	function exportSidecar(medium, exported) {
	    medium.useMedium(exported);
	    return SideCar$1;
	}

	var mediumFocus = createMedium({}, function (_ref) {
	  var target = _ref.target,
	    currentTarget = _ref.currentTarget;
	  return {
	    target: target,
	    currentTarget: currentTarget
	  };
	});
	var mediumBlur = createMedium();
	var mediumEffect = createMedium();
	var mediumSidecar = createSidecarMedium({
	  async: true,
	  ssr: typeof document !== 'undefined'
	});

	var focusScope = /*#__PURE__*/reactExports.createContext(undefined);

	var emptyArray = [];
	var FocusLock$1 = /*#__PURE__*/reactExports.forwardRef(function FocusLockUI(props, parentRef) {
	  var _extends2;
	  var _useState = reactExports.useState(),
	    realObserved = _useState[0],
	    setObserved = _useState[1];
	  var observed = reactExports.useRef();
	  var isActive = reactExports.useRef(false);
	  var originalFocusedElement = reactExports.useRef(null);
	  var _useState2 = reactExports.useState({}),
	    update = _useState2[1];
	  var children = props.children,
	    _props$disabled = props.disabled,
	    disabled = _props$disabled === void 0 ? false : _props$disabled,
	    _props$noFocusGuards = props.noFocusGuards,
	    noFocusGuards = _props$noFocusGuards === void 0 ? false : _props$noFocusGuards,
	    _props$persistentFocu = props.persistentFocus,
	    persistentFocus = _props$persistentFocu === void 0 ? false : _props$persistentFocu,
	    _props$crossFrame = props.crossFrame,
	    crossFrame = _props$crossFrame === void 0 ? true : _props$crossFrame,
	    _props$autoFocus = props.autoFocus,
	    autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus;
	    props.allowTextSelection;
	    var group = props.group,
	    className = props.className,
	    whiteList = props.whiteList,
	    hasPositiveIndices = props.hasPositiveIndices,
	    _props$shards = props.shards,
	    shards = _props$shards === void 0 ? emptyArray : _props$shards,
	    _props$as = props.as,
	    Container = _props$as === void 0 ? 'div' : _props$as,
	    _props$lockProps = props.lockProps,
	    containerProps = _props$lockProps === void 0 ? {} : _props$lockProps,
	    SideCar = props.sideCar,
	    _props$returnFocus = props.returnFocus,
	    shouldReturnFocus = _props$returnFocus === void 0 ? false : _props$returnFocus,
	    focusOptions = props.focusOptions,
	    onActivationCallback = props.onActivation,
	    onDeactivationCallback = props.onDeactivation;
	  var _useState3 = reactExports.useState({}),
	    id = _useState3[0];
	  var onActivation = reactExports.useCallback(function (_ref) {
	    var captureFocusRestore = _ref.captureFocusRestore;
	    if (!originalFocusedElement.current) {
	      var _document;
	      var activeElement = (_document = document) == null ? void 0 : _document.activeElement;
	      originalFocusedElement.current = activeElement;
	      if (activeElement !== document.body) {
	        originalFocusedElement.current = captureFocusRestore(activeElement);
	      }
	    }
	    if (observed.current && onActivationCallback) {
	      onActivationCallback(observed.current);
	    }
	    isActive.current = true;
	    update();
	  }, [onActivationCallback]);
	  var onDeactivation = reactExports.useCallback(function () {
	    isActive.current = false;
	    if (onDeactivationCallback) {
	      onDeactivationCallback(observed.current);
	    }
	    update();
	  }, [onDeactivationCallback]);
	  var returnFocus = reactExports.useCallback(function (allowDefer) {
	    var focusRestore = originalFocusedElement.current;
	    if (focusRestore) {
	      var returnFocusTo = (typeof focusRestore === 'function' ? focusRestore() : focusRestore) || document.body;
	      var howToReturnFocus = typeof shouldReturnFocus === 'function' ? shouldReturnFocus(returnFocusTo) : shouldReturnFocus;
	      if (howToReturnFocus) {
	        var returnFocusOptions = typeof howToReturnFocus === 'object' ? howToReturnFocus : undefined;
	        originalFocusedElement.current = null;
	        if (allowDefer) {
	          Promise.resolve().then(function () {
	            return returnFocusTo.focus(returnFocusOptions);
	          });
	        } else {
	          returnFocusTo.focus(returnFocusOptions);
	        }
	      }
	    }
	  }, [shouldReturnFocus]);
	  var onFocus = reactExports.useCallback(function (event) {
	    if (isActive.current) {
	      mediumFocus.useMedium(event);
	    }
	  }, []);
	  var onBlur = mediumBlur.useMedium;
	  var setObserveNode = reactExports.useCallback(function (newObserved) {
	    if (observed.current !== newObserved) {
	      observed.current = newObserved;
	      setObserved(newObserved);
	    }
	  }, []);
	  var lockProps = _extends$1((_extends2 = {}, _extends2[FOCUS_DISABLED] = disabled && 'disabled', _extends2[FOCUS_GROUP] = group, _extends2), containerProps);
	  var hasLeadingGuards = noFocusGuards !== true;
	  var hasTailingGuards = hasLeadingGuards && noFocusGuards !== 'tail';
	  var mergedRef = useMergeRefs([parentRef, setObserveNode]);
	  var focusScopeValue = reactExports.useMemo(function () {
	    return {
	      observed: observed,
	      shards: shards,
	      enabled: !disabled,
	      active: isActive.current
	    };
	  }, [disabled, isActive.current, shards, realObserved]);
	  return /*#__PURE__*/React.createElement(reactExports.Fragment, null, hasLeadingGuards && [
	  /*#__PURE__*/
	  React.createElement("div", {
	    key: "guard-first",
	    "data-focus-guard": true,
	    tabIndex: disabled ? -1 : 0,
	    style: hiddenGuard
	  }), hasPositiveIndices ? /*#__PURE__*/React.createElement("div", {
	    key: "guard-nearest",
	    "data-focus-guard": true,
	    tabIndex: disabled ? -1 : 1,
	    style: hiddenGuard
	  }) : null], !disabled && /*#__PURE__*/React.createElement(SideCar, {
	    id: id,
	    sideCar: mediumSidecar,
	    observed: realObserved,
	    disabled: disabled,
	    persistentFocus: persistentFocus,
	    crossFrame: crossFrame,
	    autoFocus: autoFocus,
	    whiteList: whiteList,
	    shards: shards,
	    onActivation: onActivation,
	    onDeactivation: onDeactivation,
	    returnFocus: returnFocus,
	    focusOptions: focusOptions,
	    noFocusGuards: noFocusGuards
	  }), /*#__PURE__*/React.createElement(Container, _extends$1({
	    ref: mergedRef
	  }, lockProps, {
	    className: className,
	    onBlur: onBlur,
	    onFocus: onFocus
	  }), /*#__PURE__*/React.createElement(focusScope.Provider, {
	    value: focusScopeValue
	  }, children)), hasTailingGuards && /*#__PURE__*/React.createElement("div", {
	    "data-focus-guard": true,
	    tabIndex: disabled ? -1 : 0,
	    style: hiddenGuard
	  }));
	});
	FocusLock$1.propTypes = {};

	var inheritsLoose = {exports: {}};

	var setPrototypeOf = {exports: {}};

	var hasRequiredSetPrototypeOf;

	function requireSetPrototypeOf () {
		if (hasRequiredSetPrototypeOf) return setPrototypeOf.exports;
		hasRequiredSetPrototypeOf = 1;
		(function (module) {
			function _setPrototypeOf(t, e) {
			  return module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
			    return t.__proto__ = e, t;
			  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _setPrototypeOf(t, e);
			}
			module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports; 
		} (setPrototypeOf));
		return setPrototypeOf.exports;
	}

	var hasRequiredInheritsLoose;

	function requireInheritsLoose () {
		if (hasRequiredInheritsLoose) return inheritsLoose.exports;
		hasRequiredInheritsLoose = 1;
		(function (module) {
			var setPrototypeOf = requireSetPrototypeOf();
			function _inheritsLoose(t, o) {
			  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, setPrototypeOf(t, o);
			}
			module.exports = _inheritsLoose, module.exports.__esModule = true, module.exports["default"] = module.exports; 
		} (inheritsLoose));
		return inheritsLoose.exports;
	}

	var defineProperty = {exports: {}};

	var toPropertyKey = {exports: {}};

	var _typeof = {exports: {}};

	var hasRequired_typeof;

	function require_typeof () {
		if (hasRequired_typeof) return _typeof.exports;
		hasRequired_typeof = 1;
		(function (module) {
			function _typeof(o) {
			  "@babel/helpers - typeof";

			  return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
			    return typeof o;
			  } : function (o) {
			    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
			  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
			}
			module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports; 
		} (_typeof));
		return _typeof.exports;
	}

	var toPrimitive = {exports: {}};

	var hasRequiredToPrimitive;

	function requireToPrimitive () {
		if (hasRequiredToPrimitive) return toPrimitive.exports;
		hasRequiredToPrimitive = 1;
		(function (module) {
			var _typeof = require_typeof()["default"];
			function toPrimitive(t, r) {
			  if ("object" != _typeof(t) || !t) return t;
			  var e = t[Symbol.toPrimitive];
			  if (void 0 !== e) {
			    var i = e.call(t, r || "default");
			    if ("object" != _typeof(i)) return i;
			    throw new TypeError("@@toPrimitive must return a primitive value.");
			  }
			  return ("string" === r ? String : Number)(t);
			}
			module.exports = toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports; 
		} (toPrimitive));
		return toPrimitive.exports;
	}

	var hasRequiredToPropertyKey;

	function requireToPropertyKey () {
		if (hasRequiredToPropertyKey) return toPropertyKey.exports;
		hasRequiredToPropertyKey = 1;
		(function (module) {
			var _typeof = require_typeof()["default"];
			var toPrimitive = requireToPrimitive();
			function toPropertyKey(t) {
			  var i = toPrimitive(t, "string");
			  return "symbol" == _typeof(i) ? i : i + "";
			}
			module.exports = toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports; 
		} (toPropertyKey));
		return toPropertyKey.exports;
	}

	var hasRequiredDefineProperty;

	function requireDefineProperty () {
		if (hasRequiredDefineProperty) return defineProperty.exports;
		hasRequiredDefineProperty = 1;
		(function (module) {
			var toPropertyKey = requireToPropertyKey();
			function _defineProperty(e, r, t) {
			  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
			    value: t,
			    enumerable: true,
			    configurable: true,
			    writable: true
			  }) : e[r] = t, e;
			}
			module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports; 
		} (defineProperty));
		return defineProperty.exports;
	}

	var lib;
	var hasRequiredLib;

	function requireLib () {
		if (hasRequiredLib) return lib;
		hasRequiredLib = 1;

		function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

		var _inheritsLoose = _interopDefault(requireInheritsLoose());
		var _defineProperty = _interopDefault(requireDefineProperty());
		var React = requireReact();
		var React__default = _interopDefault(React);

		function withSideEffect(reducePropsToState, handleStateChangeOnClient) {

		  function getDisplayName(WrappedComponent) {
		    return WrappedComponent.displayName || WrappedComponent.name || 'Component';
		  }

		  return function wrap(WrappedComponent) {

		    var mountedInstances = [];
		    var state;

		    function emitChange() {
		      state = reducePropsToState(mountedInstances.map(function (instance) {
		        return instance.props;
		      }));
		      handleStateChangeOnClient(state);
		    }

		    var SideEffect = /*#__PURE__*/function (_PureComponent) {
		      _inheritsLoose(SideEffect, _PureComponent);

		      function SideEffect() {
		        return _PureComponent.apply(this, arguments) || this;
		      }

		      // Try to use displayName of wrapped component
		      SideEffect.peek = function peek() {
		        return state;
		      };

		      var _proto = SideEffect.prototype;

		      _proto.componentDidMount = function componentDidMount() {
		        mountedInstances.push(this);
		        emitChange();
		      };

		      _proto.componentDidUpdate = function componentDidUpdate() {
		        emitChange();
		      };

		      _proto.componentWillUnmount = function componentWillUnmount() {
		        var index = mountedInstances.indexOf(this);
		        mountedInstances.splice(index, 1);
		        emitChange();
		      };

		      _proto.render = function render() {
		        return /*#__PURE__*/React__default.createElement(WrappedComponent, this.props);
		      };

		      return SideEffect;
		    }(React.PureComponent);

		    _defineProperty(SideEffect, "displayName", "SideEffect(" + getDisplayName(WrappedComponent) + ")");

		    return SideEffect;
		  };
		}

		lib = withSideEffect;
		return lib;
	}

	var libExports = requireLib();
	var withSideEffect = /*@__PURE__*/getDefaultExportFromCjs(libExports);

	/*
	IE11 support
	 */
	var toArray = function (a) {
	    var ret = Array(a.length);
	    for (var i = 0; i < a.length; ++i) {
	        ret[i] = a[i];
	    }
	    return ret;
	};
	var asArray = function (a) { return (Array.isArray(a) ? a : [a]); };
	var getFirst = function (a) { return (Array.isArray(a) ? a[0] : a); };

	var isElementHidden = function (node) {
	    // we can measure only "elements"
	    // consider others as "visible"
	    if (node.nodeType !== Node.ELEMENT_NODE) {
	        return false;
	    }
	    var computedStyle = window.getComputedStyle(node, null);
	    if (!computedStyle || !computedStyle.getPropertyValue) {
	        return false;
	    }
	    return (computedStyle.getPropertyValue('display') === 'none' || computedStyle.getPropertyValue('visibility') === 'hidden');
	};
	var getParentNode = function (node) {
	    // DOCUMENT_FRAGMENT_NODE can also point on ShadowRoot. In this case .host will point on the next node
	    return node.parentNode && node.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE
	        ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            node.parentNode.host
	        : node.parentNode;
	};
	var isTopNode = function (node) {
	    // @ts-ignore
	    return node === document || (node && node.nodeType === Node.DOCUMENT_NODE);
	};
	var isInert = function (node) { return node.hasAttribute('inert'); };
	/**
	 * @see https://github.com/testing-library/jest-dom/blob/main/src/to-be-visible.js
	 */
	var isVisibleUncached = function (node, checkParent) {
	    return !node || isTopNode(node) || (!isElementHidden(node) && !isInert(node) && checkParent(getParentNode(node)));
	};
	var isVisibleCached = function (visibilityCache, node) {
	    var cached = visibilityCache.get(node);
	    if (cached !== undefined) {
	        return cached;
	    }
	    var result = isVisibleUncached(node, isVisibleCached.bind(undefined, visibilityCache));
	    visibilityCache.set(node, result);
	    return result;
	};
	var isAutoFocusAllowedUncached = function (node, checkParent) {
	    return node && !isTopNode(node) ? (isAutoFocusAllowed(node) ? checkParent(getParentNode(node)) : false) : true;
	};
	var isAutoFocusAllowedCached = function (cache, node) {
	    var cached = cache.get(node);
	    if (cached !== undefined) {
	        return cached;
	    }
	    var result = isAutoFocusAllowedUncached(node, isAutoFocusAllowedCached.bind(undefined, cache));
	    cache.set(node, result);
	    return result;
	};
	var getDataset = function (node) {
	    // @ts-ignore
	    return node.dataset;
	};
	var isHTMLButtonElement = function (node) { return node.tagName === 'BUTTON'; };
	var isHTMLInputElement = function (node) { return node.tagName === 'INPUT'; };
	var isRadioElement = function (node) {
	    return isHTMLInputElement(node) && node.type === 'radio';
	};
	var notHiddenInput = function (node) {
	    return !((isHTMLInputElement(node) || isHTMLButtonElement(node)) && (node.type === 'hidden' || node.disabled));
	};
	var isAutoFocusAllowed = function (node) {
	    var attribute = node.getAttribute(FOCUS_NO_AUTOFOCUS);
	    return ![true, 'true', ''].includes(attribute);
	};
	var isGuard = function (node) { var _a; return Boolean(node && ((_a = getDataset(node)) === null || _a === void 0 ? void 0 : _a.focusGuard)); };
	var isNotAGuard = function (node) { return !isGuard(node); };
	var isDefined = function (x) { return Boolean(x); };

	var tabSort = function (a, b) {
	    var aTab = Math.max(0, a.tabIndex);
	    var bTab = Math.max(0, b.tabIndex);
	    var tabDiff = aTab - bTab;
	    var indexDiff = a.index - b.index;
	    if (tabDiff) {
	        if (!aTab) {
	            return 1;
	        }
	        if (!bTab) {
	            return -1;
	        }
	    }
	    return tabDiff || indexDiff;
	};
	var getTabIndex = function (node) {
	    if (node.tabIndex < 0) {
	        // all "focusable" elements are already preselected
	        // but some might have implicit negative tabIndex
	        // return 0 for <audio without tabIndex attribute - it is "tabbable"
	        if (!node.hasAttribute('tabindex')) {
	            return 0;
	        }
	    }
	    return node.tabIndex;
	};
	var orderByTabIndex = function (nodes, filterNegative, keepGuards) {
	    return toArray(nodes)
	        .map(function (node, index) {
	        var tabIndex = getTabIndex(node);
	        return {
	            node: node,
	            index: index,
	            tabIndex: keepGuards && tabIndex === -1 ? ((node.dataset || {}).focusGuard ? 0 : -1) : tabIndex,
	        };
	    })
	        .filter(function (data) { return !filterNegative || data.tabIndex >= 0; })
	        .sort(tabSort);
	};

	/**
	 * list of the object to be considered as focusable
	 */
	var tabbables = [
	    'button:enabled',
	    'select:enabled',
	    'textarea:enabled',
	    'input:enabled',
	    // elements with explicit roles will also use explicit tabindex
	    // '[role="button"]',
	    'a[href]',
	    'area[href]',
	    'summary',
	    'iframe',
	    'object',
	    'embed',
	    'audio[controls]',
	    'video[controls]',
	    '[tabindex]',
	    '[contenteditable]',
	    '[autofocus]',
	];

	var queryTabbables = tabbables.join(',');
	var queryGuardTabbables = "".concat(queryTabbables, ", [data-focus-guard]");
	var getFocusablesWithShadowDom = function (parent, withGuards) {
	    return toArray((parent.shadowRoot || parent).children).reduce(function (acc, child) {
	        return acc.concat(child.matches(withGuards ? queryGuardTabbables : queryTabbables) ? [child] : [], getFocusablesWithShadowDom(child));
	    }, []);
	};
	var getFocusablesWithIFrame = function (parent, withGuards) {
	    var _a;
	    // contentDocument of iframe will be null if current origin cannot access it
	    if (parent instanceof HTMLIFrameElement && ((_a = parent.contentDocument) === null || _a === void 0 ? void 0 : _a.body)) {
	        return getFocusables([parent.contentDocument.body], withGuards);
	    }
	    return [parent];
	};
	var getFocusables = function (parents, withGuards) {
	    return parents.reduce(function (acc, parent) {
	        var _a;
	        var focusableWithShadowDom = getFocusablesWithShadowDom(parent, withGuards);
	        var focusableWithIframes = (_a = []).concat.apply(_a, focusableWithShadowDom.map(function (node) { return getFocusablesWithIFrame(node, withGuards); }));
	        return acc.concat(
	        // add all tabbables inside and within shadow DOMs in DOM order
	        focusableWithIframes, 
	        // add if node is tabbable itself
	        parent.parentNode
	            ? toArray(parent.parentNode.querySelectorAll(queryTabbables)).filter(function (node) { return node === parent; })
	            : []);
	    }, []);
	};
	/**
	 * return a list of focusable nodes within an area marked as "auto-focusable"
	 * @param parent
	 */
	var getParentAutofocusables = function (parent) {
	    var parentFocus = parent.querySelectorAll("[".concat(FOCUS_AUTO, "]"));
	    return toArray(parentFocus)
	        .map(function (node) { return getFocusables([node]); })
	        .reduce(function (acc, nodes) { return acc.concat(nodes); }, []);
	};

	/**
	 * given list of focusable elements keeps the ones user can interact with
	 * @param nodes
	 * @param visibilityCache
	 */
	var filterFocusable = function (nodes, visibilityCache) {
	    return toArray(nodes)
	        .filter(function (node) { return isVisibleCached(visibilityCache, node); })
	        .filter(function (node) { return notHiddenInput(node); });
	};
	var filterAutoFocusable = function (nodes, cache) {
	    if (cache === void 0) { cache = new Map(); }
	    return toArray(nodes).filter(function (node) { return isAutoFocusAllowedCached(cache, node); });
	};
	/**
	 * !__WARNING__! Low level API.
	 * @returns all tabbable nodes
	 *
	 * @see {@link getFocusableNodes} to get any focusable element
	 *
	 * @param topNodes - array of top level HTMLElements to search inside
	 * @param visibilityCache - an cache to store intermediate measurements. Expected to be a fresh `new Map` on every call
	 */
	var getTabbableNodes = function (topNodes, visibilityCache, withGuards) {
	    return orderByTabIndex(filterFocusable(getFocusables(topNodes, withGuards), visibilityCache), true, withGuards);
	};
	/**
	 * !__WARNING__! Low level API.
	 *
	 * @returns anything "focusable", not only tabbable. The difference is in `tabIndex=-1`
	 * (without guards, as long as they are not expected to be ever focused)
	 *
	 * @see {@link getTabbableNodes} to get only tabble nodes element
	 *
	 * @param topNodes - array of top level HTMLElements to search inside
	 * @param visibilityCache - an cache to store intermediate measurements. Expected to be a fresh `new Map` on every call
	 */
	var getFocusableNodes = function (topNodes, visibilityCache) {
	    return orderByTabIndex(filterFocusable(getFocusables(topNodes), visibilityCache), false);
	};
	/**
	 * return list of nodes which are expected to be auto-focused
	 * @param topNode
	 * @param visibilityCache
	 */
	var parentAutofocusables = function (topNode, visibilityCache) {
	    return filterFocusable(getParentAutofocusables(topNode), visibilityCache);
	};
	/*
	 * Determines if element is contained in scope, including nested shadow DOMs
	 */
	var contains = function (scope, element) {
	    if (scope.shadowRoot) {
	        return contains(scope.shadowRoot, element);
	    }
	    else {
	        if (Object.getPrototypeOf(scope).contains !== undefined &&
	            Object.getPrototypeOf(scope).contains.call(scope, element)) {
	            return true;
	        }
	        return toArray(scope.children).some(function (child) {
	            var _a;
	            if (child instanceof HTMLIFrameElement) {
	                var iframeBody = (_a = child.contentDocument) === null || _a === void 0 ? void 0 : _a.body;
	                if (iframeBody) {
	                    return contains(iframeBody, element);
	                }
	                return false;
	            }
	            return contains(child, element);
	        });
	    }
	};

	/**
	 * in case of multiple nodes nested inside each other
	 * keeps only top ones
	 * this is O(nlogn)
	 * @param nodes
	 * @returns {*}
	 */
	var filterNested = function (nodes) {
	    var contained = new Set();
	    var l = nodes.length;
	    for (var i = 0; i < l; i += 1) {
	        for (var j = i + 1; j < l; j += 1) {
	            var position = nodes[i].compareDocumentPosition(nodes[j]);
	            /* eslint-disable no-bitwise */
	            if ((position & Node.DOCUMENT_POSITION_CONTAINED_BY) > 0) {
	                contained.add(j);
	            }
	            if ((position & Node.DOCUMENT_POSITION_CONTAINS) > 0) {
	                contained.add(i);
	            }
	            /* eslint-enable */
	        }
	    }
	    return nodes.filter(function (_, index) { return !contained.has(index); });
	};
	/**
	 * finds top most parent for a node
	 * @param node
	 * @returns {*}
	 */
	var getTopParent = function (node) {
	    return node.parentNode ? getTopParent(node.parentNode) : node;
	};
	/**
	 * returns all "focus containers" inside a given node
	 * @param node - node or nodes to look inside
	 * @returns Element[]
	 */
	var getAllAffectedNodes = function (node) {
	    var nodes = asArray(node);
	    return nodes.filter(Boolean).reduce(function (acc, currentNode) {
	        var group = currentNode.getAttribute(FOCUS_GROUP);
	        acc.push.apply(acc, (group
	            ? filterNested(toArray(getTopParent(currentNode).querySelectorAll("[".concat(FOCUS_GROUP, "=\"").concat(group, "\"]:not([").concat(FOCUS_DISABLED, "=\"disabled\"])"))))
	            : [currentNode]));
	        return acc;
	    }, []);
	};

	var safeProbe = function (cb) {
	    try {
	        return cb();
	    }
	    catch (e) {
	        return undefined;
	    }
	};

	/**
	 * returns active element from document or from nested shadowdoms
	 */
	/**
	 * returns current active element. If the active element is a "container" itself(shadowRoot or iframe) returns active element inside it
	 * @param [inDocument]
	 */
	var getActiveElement = function (inDocument) {
	    if (inDocument === void 0) { inDocument = document; }
	    if (!inDocument || !inDocument.activeElement) {
	        return undefined;
	    }
	    var activeElement = inDocument.activeElement;
	    return (activeElement.shadowRoot
	        ? getActiveElement(activeElement.shadowRoot)
	        : activeElement instanceof HTMLIFrameElement && safeProbe(function () { return activeElement.contentWindow.document; })
	            ? getActiveElement(activeElement.contentWindow.document)
	            : activeElement);
	};

	var focusInFrame = function (frame, activeElement) { return frame === activeElement; };
	var focusInsideIframe = function (topNode, activeElement) {
	    return Boolean(toArray(topNode.querySelectorAll('iframe')).some(function (node) { return focusInFrame(node, activeElement); }));
	};
	/**
	 * @returns {Boolean} true, if the current focus is inside given node or nodes.
	 * Supports nodes hidden inside shadowDom
	 */
	var focusInside = function (topNode, activeElement) {
	    // const activeElement = document && getActiveElement();
	    if (activeElement === void 0) { activeElement = getActiveElement(getFirst(topNode).ownerDocument); }
	    if (!activeElement || (activeElement.dataset && activeElement.dataset.focusGuard)) {
	        return false;
	    }
	    return getAllAffectedNodes(topNode).some(function (node) {
	        return contains(node, activeElement) || focusInsideIframe(node, activeElement);
	    });
	};

	/**
	 * checks if focus is hidden FROM the focus-lock
	 * ie contained inside a node focus-lock shall ignore
	 *
	 * This is a utility function coupled with {@link FOCUS_ALLOW} constant
	 *
	 * @returns {boolean} focus is currently is in "allow" area
	 */
	var focusIsHidden = function (inDocument) {
	    if (inDocument === void 0) { inDocument = document; }
	    var activeElement = getActiveElement(inDocument);
	    if (!activeElement) {
	        return false;
	    }
	    // this does not support setting FOCUS_ALLOW within shadow dom
	    return toArray(inDocument.querySelectorAll("[".concat(FOCUS_ALLOW, "]"))).some(function (node) { return contains(node, activeElement); });
	};

	var findSelectedRadio = function (node, nodes) {
	    return nodes
	        .filter(isRadioElement)
	        .filter(function (el) { return el.name === node.name; })
	        .filter(function (el) { return el.checked; })[0] || node;
	};
	var correctNode = function (node, nodes) {
	    if (isRadioElement(node) && node.name) {
	        return findSelectedRadio(node, nodes);
	    }
	    return node;
	};
	/**
	 * giving a set of radio inputs keeps only selected (tabbable) ones
	 * @param nodes
	 */
	var correctNodes = function (nodes) {
	    // IE11 has no Set(array) constructor
	    var resultSet = new Set();
	    nodes.forEach(function (node) { return resultSet.add(correctNode(node, nodes)); });
	    // using filter to support IE11
	    return nodes.filter(function (node) { return resultSet.has(node); });
	};

	var pickFirstFocus = function (nodes) {
	    if (nodes[0] && nodes.length > 1) {
	        return correctNode(nodes[0], nodes);
	    }
	    return nodes[0];
	};
	var pickFocusable = function (nodes, node) {
	    return nodes.indexOf(correctNode(node, nodes));
	};

	var NEW_FOCUS = 'NEW_FOCUS';
	/**
	 * Main solver for the "find next focus" question
	 * @param innerNodes - used to control "return focus"
	 * @param innerTabbables - used to control "autofocus"
	 * @param outerNodes
	 * @param activeElement
	 * @param lastNode
	 * @returns {number|string|undefined|*}
	 */
	var newFocus = function (innerNodes, innerTabbables, outerNodes, activeElement, lastNode) {
	    var cnt = innerNodes.length;
	    var firstFocus = innerNodes[0];
	    var lastFocus = innerNodes[cnt - 1];
	    var isOnGuard = isGuard(activeElement);
	    // focus is inside
	    if (activeElement && innerNodes.indexOf(activeElement) >= 0) {
	        return undefined;
	    }
	    var activeIndex = activeElement !== undefined ? outerNodes.indexOf(activeElement) : -1;
	    var lastIndex = lastNode ? outerNodes.indexOf(lastNode) : activeIndex;
	    var lastNodeInside = lastNode ? innerNodes.indexOf(lastNode) : -1;
	    // no active focus (or focus is on the body)
	    if (activeIndex === -1) {
	        // known fallback
	        if (lastNodeInside !== -1) {
	            return lastNodeInside;
	        }
	        return NEW_FOCUS;
	    }
	    // new focus, nothing to calculate
	    if (lastNodeInside === -1) {
	        return NEW_FOCUS;
	    }
	    var indexDiff = activeIndex - lastIndex;
	    var firstNodeIndex = outerNodes.indexOf(firstFocus);
	    var lastNodeIndex = outerNodes.indexOf(lastFocus);
	    var correctedNodes = correctNodes(outerNodes);
	    var currentFocusableIndex = activeElement !== undefined ? correctedNodes.indexOf(activeElement) : -1;
	    var previousFocusableIndex = lastNode ? correctedNodes.indexOf(lastNode) : currentFocusableIndex;
	    var tabbableNodes = correctedNodes.filter(function (node) { return node.tabIndex >= 0; });
	    var currentTabbableIndex = activeElement !== undefined ? tabbableNodes.indexOf(activeElement) : -1;
	    var previousTabbableIndex = lastNode ? tabbableNodes.indexOf(lastNode) : currentTabbableIndex;
	    var focusIndexDiff = currentTabbableIndex >= 0 && previousTabbableIndex >= 0
	        ? // old/new are tabbables, measure distance in tabbable space
	            previousTabbableIndex - currentTabbableIndex
	        : // or else measure in focusable space
	            previousFocusableIndex - currentFocusableIndex;
	    // old focus
	    if (!indexDiff && lastNodeInside >= 0) {
	        return lastNodeInside;
	    }
	    // no tabbable elements, autofocus is not possible
	    if (innerTabbables.length === 0) {
	        // an edge case with no tabbable elements
	        // return the last focusable one
	        // with some probability this will prevent focus from cycling across the lock, but there is no tabbale elements to cycle to
	        return lastNodeInside;
	    }
	    var returnFirstNode = pickFocusable(innerNodes, innerTabbables[0]);
	    var returnLastNode = pickFocusable(innerNodes, innerTabbables[innerTabbables.length - 1]);
	    // first element
	    if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
	        return returnLastNode;
	    }
	    // last element
	    if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
	        return returnFirstNode;
	    }
	    // jump out, but not on the guard
	    if (indexDiff && Math.abs(focusIndexDiff) > 1) {
	        return lastNodeInside;
	    }
	    // focus above lock
	    if (activeIndex <= firstNodeIndex) {
	        return returnLastNode;
	    }
	    // focus below lock
	    if (activeIndex > lastNodeIndex) {
	        return returnFirstNode;
	    }
	    // index is inside tab order, but outside Lock
	    if (indexDiff) {
	        if (Math.abs(indexDiff) > 1) {
	            return lastNodeInside;
	        }
	        return (cnt + lastNodeInside + indexDiff) % cnt;
	    }
	    // do nothing
	    return undefined;
	};

	var findAutoFocused = function (autoFocusables) {
	    return function (node) {
	        var _a;
	        var autofocus = (_a = getDataset(node)) === null || _a === void 0 ? void 0 : _a.autofocus;
	        return (
	        // @ts-expect-error
	        node.autofocus ||
	            //
	            (autofocus !== undefined && autofocus !== 'false') ||
	            //
	            autoFocusables.indexOf(node) >= 0);
	    };
	};
	var pickAutofocus = function (nodesIndexes, orderedNodes, groups) {
	    var nodes = nodesIndexes.map(function (_a) {
	        var node = _a.node;
	        return node;
	    });
	    var autoFocusable = filterAutoFocusable(nodes.filter(findAutoFocused(groups)));
	    if (autoFocusable && autoFocusable.length) {
	        return pickFirstFocus(autoFocusable);
	    }
	    return pickFirstFocus(filterAutoFocusable(orderedNodes));
	};

	var getParents = function (node, parents) {
	    if (parents === void 0) { parents = []; }
	    parents.push(node);
	    if (node.parentNode) {
	        getParents(node.parentNode.host || node.parentNode, parents);
	    }
	    return parents;
	};
	/**
	 * finds a parent for both nodeA and nodeB
	 * @param nodeA
	 * @param nodeB
	 * @returns {boolean|*}
	 */
	var getCommonParent = function (nodeA, nodeB) {
	    var parentsA = getParents(nodeA);
	    var parentsB = getParents(nodeB);
	    // tslint:disable-next-line:prefer-for-of
	    for (var i = 0; i < parentsA.length; i += 1) {
	        var currentParent = parentsA[i];
	        if (parentsB.indexOf(currentParent) >= 0) {
	            return currentParent;
	        }
	    }
	    return false;
	};
	var getTopCommonParent = function (baseActiveElement, leftEntry, rightEntries) {
	    var activeElements = asArray(baseActiveElement);
	    var leftEntries = asArray(leftEntry);
	    var activeElement = activeElements[0];
	    var topCommon = false;
	    leftEntries.filter(Boolean).forEach(function (entry) {
	        topCommon = getCommonParent(topCommon || entry, entry) || topCommon;
	        rightEntries.filter(Boolean).forEach(function (subEntry) {
	            var common = getCommonParent(activeElement, subEntry);
	            if (common) {
	                if (!topCommon || contains(common, topCommon)) {
	                    topCommon = common;
	                }
	                else {
	                    topCommon = getCommonParent(common, topCommon);
	                }
	            }
	        });
	    });
	    // TODO: add assert here?
	    return topCommon;
	};
	/**
	 * return list of nodes which are expected to be autofocused inside a given top nodes
	 * @param entries
	 * @param visibilityCache
	 */
	var allParentAutofocusables = function (entries, visibilityCache) {
	    return entries.reduce(function (acc, node) { return acc.concat(parentAutofocusables(node, visibilityCache)); }, []);
	};

	var reorderNodes = function (srcNodes, dstNodes) {
	    var remap = new Map();
	    // no Set(dstNodes) for IE11 :(
	    dstNodes.forEach(function (entity) { return remap.set(entity.node, entity); });
	    // remap to dstNodes
	    return srcNodes.map(function (node) { return remap.get(node); }).filter(isDefined);
	};
	/**
	 * contains the main logic of the `focus-lock` package.
	 *
	 * ! you probably dont need this function !
	 *
	 * given top node(s) and the last active element returns the element to be focused next
	 * @returns element which should be focused to move focus inside
	 * @param topNode
	 * @param lastNode
	 */
	var focusSolver = function (topNode, lastNode) {
	    var activeElement = getActiveElement(asArray(topNode).length > 0 ? document : getFirst(topNode).ownerDocument);
	    var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
	    var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);
	    var visibilityCache = new Map();
	    var anyFocusable = getFocusableNodes(entries, visibilityCache);
	    var innerElements = anyFocusable.filter(function (_a) {
	        var node = _a.node;
	        return isNotAGuard(node);
	    });
	    if (!innerElements[0]) {
	        return undefined;
	    }
	    var outerNodes = getFocusableNodes([commonParent], visibilityCache).map(function (_a) {
	        var node = _a.node;
	        return node;
	    });
	    var orderedInnerElements = reorderNodes(outerNodes, innerElements);
	    // collect inner focusable and separately tabbables
	    var innerFocusables = orderedInnerElements.map(function (_a) {
	        var node = _a.node;
	        return node;
	    });
	    var innerTabbable = orderedInnerElements.filter(function (_a) {
	        var tabIndex = _a.tabIndex;
	        return tabIndex >= 0;
	    }).map(function (_a) {
	        var node = _a.node;
	        return node;
	    });
	    var newId = newFocus(innerFocusables, innerTabbable, outerNodes, activeElement, lastNode);
	    if (newId === NEW_FOCUS) {
	        var focusNode = 
	        // first try only tabbable, and the fallback to all focusable, as long as at least one element should be picked for focus
	        pickAutofocus(anyFocusable, innerTabbable, allParentAutofocusables(entries, visibilityCache)) ||
	            pickAutofocus(anyFocusable, innerFocusables, allParentAutofocusables(entries, visibilityCache));
	        if (focusNode) {
	            return { node: focusNode };
	        }
	        else {
	            console.warn('focus-lock: cannot find any node to move focus into');
	            return undefined;
	        }
	    }
	    if (newId === undefined) {
	        return newId;
	    }
	    return orderedInnerElements[newId];
	};

	/**
	 * traverses all related nodes (including groups) returning a list of all nodes(outer and internal) with meta information
	 * This is low-level API!
	 * @returns list of focusable elements inside a given top(!) node.
	 * @see {@link getFocusableNodes} providing a simpler API
	 */
	var expandFocusableNodes = function (topNode) {
	    var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
	    var commonParent = getTopCommonParent(topNode, topNode, entries);
	    var outerNodes = orderByTabIndex(getFocusables([commonParent], true), true, true);
	    var innerElements = getFocusables(entries, false);
	    return outerNodes.map(function (_a) {
	        var node = _a.node, index = _a.index;
	        return ({
	            node: node,
	            index: index,
	            lockItem: innerElements.indexOf(node) >= 0,
	            guard: isGuard(node),
	        });
	    });
	};

	var focusOn = function (target, focusOptions) {
	    if (!target) {
	        // not clear how, but is possible https://github.com/theKashey/focus-lock/issues/53
	        return;
	    }
	    if ('focus' in target) {
	        target.focus(focusOptions);
	    }
	    if ('contentWindow' in target && target.contentWindow) {
	        target.contentWindow.focus();
	    }
	};

	var guardCount = 0;
	var lockDisabled = false;
	/**
	 * The main functionality of the focus-lock package
	 *
	 * Contains focus at a given node.
	 * The last focused element will help to determine which element(first or last) should be focused.
	 * The found element will be focused.
	 *
	 * This is one time action (move), not a persistent focus-lock
	 *
	 * HTML markers (see {@link import('./constants').FOCUS_AUTO} constants) can control autofocus
	 * @see {@link focusSolver} for the same functionality without autofocus
	 */
	var moveFocusInside = function (topNode, lastNode, options) {
	    if (options === void 0) { options = {}; }
	    var focusable = focusSolver(topNode, lastNode);
	    // global local side effect to countain recursive lock activation and resolve focus-fighting
	    if (lockDisabled) {
	        return;
	    }
	    if (focusable) {
	        /** +FOCUS-FIGHTING prevention **/
	        if (guardCount > 2) {
	            // we have recursive entered back the lock activation
	            console.error('FocusLock: focus-fighting detected. Only one focus management system could be active. ' +
	                'See https://github.com/theKashey/focus-lock/#focus-fighting');
	            lockDisabled = true;
	            setTimeout(function () {
	                lockDisabled = false;
	            }, 1);
	            return;
	        }
	        guardCount++;
	        focusOn(focusable.node, options.focusOptions);
	        guardCount--;
	    }
	};

	function weakRef(value) {
	    if (!value)
	        return null;
	    // #68 Safari 14.1 dont have it yet
	    // FIXME: remove in 2025
	    if (typeof WeakRef === 'undefined') {
	        return function () { return value || null; };
	    }
	    var w = value ? new WeakRef(value) : null;
	    return function () { return (w === null || w === void 0 ? void 0 : w.deref()) || null; };
	}
	var recordElementLocation = function (element) {
	    if (!element) {
	        return null;
	    }
	    var stack = [];
	    var currentElement = element;
	    while (currentElement && currentElement !== document.body) {
	        stack.push({
	            current: weakRef(currentElement),
	            parent: weakRef(currentElement.parentElement),
	            left: weakRef(currentElement.previousElementSibling),
	            right: weakRef(currentElement.nextElementSibling),
	        });
	        currentElement = currentElement.parentElement;
	    }
	    return {
	        element: weakRef(element),
	        stack: stack,
	        ownerDocument: element.ownerDocument,
	    };
	};
	var restoreFocusTo = function (location) {
	    var _a, _b, _c, _d, _e;
	    if (!location) {
	        return undefined;
	    }
	    var stack = location.stack, ownerDocument = location.ownerDocument;
	    var visibilityCache = new Map();
	    for (var _i = 0, stack_1 = stack; _i < stack_1.length; _i++) {
	        var line = stack_1[_i];
	        var parent_1 = (_a = line.parent) === null || _a === void 0 ? void 0 : _a.call(line);
	        // is it still here?
	        if (parent_1 && ownerDocument.contains(parent_1)) {
	            var left = (_b = line.left) === null || _b === void 0 ? void 0 : _b.call(line);
	            var savedCurrent = line.current();
	            var current = parent_1.contains(savedCurrent) ? savedCurrent : undefined;
	            var right = (_c = line.right) === null || _c === void 0 ? void 0 : _c.call(line);
	            var focusables = getTabbableNodes([parent_1], visibilityCache);
	            var aim = 
	            // that is element itself
	            (_e = (_d = current !== null && current !== void 0 ? current : 
	            // or something in it's place
	            left === null || left === void 0 ? void 0 : left.nextElementSibling) !== null && _d !== void 0 ? _d : 
	            // or somebody to the right, still close enough
	            right) !== null && _e !== void 0 ? _e : 
	            // or somebody to the left, something?
	            left;
	            while (aim) {
	                for (var _f = 0, focusables_1 = focusables; _f < focusables_1.length; _f++) {
	                    var focusable = focusables_1[_f];
	                    if (aim === null || aim === void 0 ? void 0 : aim.contains(focusable.node)) {
	                        return focusable.node;
	                    }
	                }
	                aim = aim.nextElementSibling;
	            }
	            if (focusables.length) {
	                // if parent contains a focusable - move there
	                return focusables[0].node;
	            }
	        }
	    }
	    // nothing matched
	    return undefined;
	};
	/**
	 * Captures the current focused element to restore focus as close as possible in the future
	 * Handles situations where the focused element is removed from the DOM or no longer focusable
	 * moving focus to the closest focusable element
	 * @param targetElement - element where focus should be restored
	 * @returns a function returning a new element to focus
	 */
	var captureFocusRestore = function (targetElement) {
	    var location = recordElementLocation(targetElement);
	    return function () {
	        return restoreFocusTo(location);
	    };
	};

	/**
	 * for a given `element` in a given `scope` returns focusable siblings
	 * @param element - base element
	 * @param scope - common parent. Can be document, but better to narrow it down for performance reasons
	 * @returns {prev,next} - references to a focusable element before and after
	 * @returns undefined - if operation is not applicable
	 */
	var getRelativeFocusable = function (element, scope, useTabbables) {
	    if (!element || !scope) {
	        console.error('no element or scope given');
	        return {};
	    }
	    var shards = asArray(scope);
	    if (shards.every(function (shard) { return !contains(shard, element); })) {
	        console.error('Active element is not contained in the scope');
	        return {};
	    }
	    var focusables = useTabbables
	        ? getTabbableNodes(shards, new Map())
	        : getFocusableNodes(shards, new Map());
	    var current = focusables.findIndex(function (_a) {
	        var node = _a.node;
	        return node === element;
	    });
	    if (current === -1) {
	        // an edge case, when anchor element is not found
	        return undefined;
	    }
	    return {
	        prev: focusables[current - 1],
	        next: focusables[current + 1],
	        first: focusables[0],
	        last: focusables[focusables.length - 1],
	    };
	};
	var getBoundary = function (shards, useTabbables) {
	    var set = useTabbables
	        ? getTabbableNodes(asArray(shards), new Map())
	        : getFocusableNodes(asArray(shards), new Map());
	    return {
	        first: set[0],
	        last: set[set.length - 1],
	    };
	};
	var defaultOptions = function (options) {
	    return Object.assign({
	        scope: document.body,
	        cycle: true,
	        onlyTabbable: true,
	    }, options);
	};
	var moveFocus = function (fromElement, options, cb) {
	    if (options === void 0) { options = {}; }
	    var newOptions = defaultOptions(options);
	    var solution = getRelativeFocusable(fromElement, newOptions.scope, newOptions.onlyTabbable);
	    if (!solution) {
	        return;
	    }
	    var target = cb(solution, newOptions.cycle);
	    if (target) {
	        focusOn(target.node, newOptions.focusOptions);
	    }
	};
	/**
	 * focuses next element in the tab-order
	 * @param fromElement - common parent to scope active element search or tab cycle order
	 * @param {FocusNextOptions} [options] - focus options
	 */
	var focusNextElement = function (fromElement, options) {
	    if (options === void 0) { options = {}; }
	    moveFocus(fromElement, options, function (_a, cycle) {
	        var next = _a.next, first = _a.first;
	        return next || (cycle && first);
	    });
	};
	/**
	 * focuses prev element in the tab order
	 * @param fromElement - common parent to scope active element search or tab cycle order
	 * @param {FocusNextOptions} [options] - focus options
	 */
	var focusPrevElement = function (fromElement, options) {
	    if (options === void 0) { options = {}; }
	    moveFocus(fromElement, options, function (_a, cycle) {
	        var prev = _a.prev, last = _a.last;
	        return prev || (cycle && last);
	    });
	};
	var pickBoundary = function (scope, options, what) {
	    var _a;
	    var boundary = getBoundary(scope, (_a = options.onlyTabbable) !== null && _a !== void 0 ? _a : true);
	    var node = boundary[what];
	    if (node) {
	        focusOn(node.node, options.focusOptions);
	    }
	};
	/**
	 * focuses first element in the tab-order
	 * @param {FocusNextOptions} options - focus options
	 */
	var focusFirstElement = function (scope, options) {
	    if (options === void 0) { options = {}; }
	    pickBoundary(scope, options, 'first');
	};
	/**
	 * focuses last element in the tab order
	 * @param {FocusNextOptions} options - focus options
	 */
	var focusLastElement = function (scope, options) {
	    if (options === void 0) { options = {}; }
	    pickBoundary(scope, options, 'last');
	};

	function deferAction(action) {
	  setTimeout(action, 1);
	}
	var extractRef$1 = function extractRef(ref) {
	  return ref && 'current' in ref ? ref.current : ref;
	};

	var focusOnBody = function focusOnBody() {
	  return document && document.activeElement === document.body;
	};
	var isFreeFocus = function isFreeFocus() {
	  return focusOnBody() || focusIsHidden();
	};
	var lastActiveTrap = null;
	var lastActiveFocus = null;
	var tryRestoreFocus = function tryRestoreFocus() {
	  return null;
	};
	var lastPortaledElement = null;
	var focusWasOutsideWindow = false;
	var windowFocused = false;
	var defaultWhitelist = function defaultWhitelist() {
	  return true;
	};
	var focusWhitelisted = function focusWhitelisted(activeElement) {
	  return (lastActiveTrap.whiteList || defaultWhitelist)(activeElement);
	};
	var recordPortal = function recordPortal(observerNode, portaledElement) {
	  lastPortaledElement = {
	    observerNode: observerNode,
	    portaledElement: portaledElement
	  };
	};
	var focusIsPortaledPair = function focusIsPortaledPair(element) {
	  return lastPortaledElement && lastPortaledElement.portaledElement === element;
	};
	function autoGuard(startIndex, end, step, allNodes) {
	  var lastGuard = null;
	  var i = startIndex;
	  do {
	    var item = allNodes[i];
	    if (item.guard) {
	      if (item.node.dataset.focusAutoGuard) {
	        lastGuard = item;
	      }
	    } else if (item.lockItem) {
	      if (i !== startIndex) {
	        return;
	      }
	      lastGuard = null;
	    } else {
	      break;
	    }
	  } while ((i += step) !== end);
	  if (lastGuard) {
	    lastGuard.node.tabIndex = 0;
	  }
	}
	var focusWasOutside = function focusWasOutside(crossFrameOption) {
	  if (crossFrameOption) {
	    return Boolean(focusWasOutsideWindow);
	  }
	  return focusWasOutsideWindow === 'meanwhile';
	};
	var checkInHost = function checkInHost(check, el, boundary) {
	  return el && (el.host === check && (!el.activeElement || boundary.contains(el.activeElement)) || el.parentNode && checkInHost(check, el.parentNode, boundary));
	};
	var withinHost = function withinHost(activeElement, workingArea) {
	  return workingArea.some(function (area) {
	    return checkInHost(activeElement, area, area);
	  });
	};
	var getNodeFocusables = function getNodeFocusables(nodes) {
	  return getFocusableNodes(nodes, new Map());
	};
	var isNotFocusable = function isNotFocusable(node) {
	  return !getNodeFocusables([node.parentNode]).some(function (el) {
	    return el.node === node;
	  });
	};
	var activateTrap = function activateTrap() {
	  var result = false;
	  if (lastActiveTrap) {
	    var _lastActiveTrap = lastActiveTrap,
	      observed = _lastActiveTrap.observed,
	      persistentFocus = _lastActiveTrap.persistentFocus,
	      autoFocus = _lastActiveTrap.autoFocus,
	      shards = _lastActiveTrap.shards,
	      crossFrame = _lastActiveTrap.crossFrame,
	      focusOptions = _lastActiveTrap.focusOptions,
	      noFocusGuards = _lastActiveTrap.noFocusGuards;
	    var workingNode = observed || lastPortaledElement && lastPortaledElement.portaledElement;
	    if (focusOnBody() && lastActiveFocus && lastActiveFocus !== document.body) {
	      if (!document.body.contains(lastActiveFocus) || isNotFocusable(lastActiveFocus)) {
	        var newTarget = tryRestoreFocus();
	        if (newTarget) {
	          newTarget.focus();
	        }
	      }
	    }
	    var activeElement = document && document.activeElement;
	    if (workingNode) {
	      var workingArea = [workingNode].concat(shards.map(extractRef$1).filter(Boolean));
	      var shouldForceRestoreFocus = function shouldForceRestoreFocus() {
	        if (!focusWasOutside(crossFrame) || !noFocusGuards || !lastActiveFocus || windowFocused) {
	          return false;
	        }
	        var nodes = getNodeFocusables(workingArea);
	        var lastIndex = nodes.findIndex(function (_ref) {
	          var node = _ref.node;
	          return node === lastActiveFocus;
	        });
	        return lastIndex === 0 || lastIndex === nodes.length - 1;
	      };
	      if (!activeElement || focusWhitelisted(activeElement)) {
	        if (persistentFocus || shouldForceRestoreFocus() || !isFreeFocus() || !lastActiveFocus && autoFocus) {
	          if (workingNode && !(focusInside(workingArea) || activeElement && withinHost(activeElement, workingArea) || focusIsPortaledPair(activeElement))) {
	            if (document && !lastActiveFocus && activeElement && !autoFocus) {
	              if (activeElement.blur) {
	                activeElement.blur();
	              }
	              document.body.focus();
	            } else {
	              result = moveFocusInside(workingArea, lastActiveFocus, {
	                focusOptions: focusOptions
	              });
	              lastPortaledElement = {};
	            }
	          }
	          lastActiveFocus = document && document.activeElement;
	          if (lastActiveFocus !== document.body) {
	            tryRestoreFocus = captureFocusRestore(lastActiveFocus);
	          }
	          focusWasOutsideWindow = false;
	        }
	      }
	      if (document && activeElement !== document.activeElement && document.querySelector('[data-focus-auto-guard]')) {
	        var newActiveElement = document && document.activeElement;
	        var allNodes = expandFocusableNodes(workingArea);
	        var focusedIndex = allNodes.map(function (_ref2) {
	          var node = _ref2.node;
	          return node;
	        }).indexOf(newActiveElement);
	        if (focusedIndex > -1) {
	          allNodes.filter(function (_ref3) {
	            var guard = _ref3.guard,
	              node = _ref3.node;
	            return guard && node.dataset.focusAutoGuard;
	          }).forEach(function (_ref4) {
	            var node = _ref4.node;
	            return node.removeAttribute('tabIndex');
	          });
	          autoGuard(focusedIndex, allNodes.length, 1, allNodes);
	          autoGuard(focusedIndex, -1, -1, allNodes);
	        }
	      }
	    }
	  }
	  return result;
	};
	var onTrap = function onTrap(event) {
	  if (activateTrap() && event) {
	    event.stopPropagation();
	    event.preventDefault();
	  }
	};
	var onBlur = function onBlur() {
	  return deferAction(activateTrap);
	};
	var onFocus = function onFocus(event) {
	  var source = event.target;
	  var currentNode = event.currentTarget;
	  if (!currentNode.contains(source)) {
	    recordPortal(currentNode, source);
	  }
	};
	var FocusWatcher = function FocusWatcher() {
	  return null;
	};
	var onWindowFocus = function onWindowFocus() {
	  windowFocused = true;
	};
	var onWindowBlur = function onWindowBlur() {
	  windowFocused = false;
	  focusWasOutsideWindow = 'just';
	  deferAction(function () {
	    focusWasOutsideWindow = 'meanwhile';
	  });
	};
	var attachHandler = function attachHandler() {
	  document.addEventListener('focusin', onTrap);
	  document.addEventListener('focusout', onBlur);
	  window.addEventListener('focus', onWindowFocus);
	  window.addEventListener('blur', onWindowBlur);
	};
	var detachHandler = function detachHandler() {
	  document.removeEventListener('focusin', onTrap);
	  document.removeEventListener('focusout', onBlur);
	  window.removeEventListener('focus', onWindowFocus);
	  window.removeEventListener('blur', onWindowBlur);
	};
	function reducePropsToState(propsList) {
	  return propsList.filter(function (_ref6) {
	    var disabled = _ref6.disabled;
	    return !disabled;
	  });
	}
	var focusLockAPI = {
	  moveFocusInside: moveFocusInside,
	  focusInside: focusInside,
	  focusNextElement: focusNextElement,
	  focusPrevElement: focusPrevElement,
	  focusFirstElement: focusFirstElement,
	  focusLastElement: focusLastElement,
	  captureFocusRestore: captureFocusRestore
	};
	function handleStateChangeOnClient(traps) {
	  var trap = traps.slice(-1)[0];
	  if (trap && !lastActiveTrap) {
	    attachHandler();
	  }
	  var lastTrap = lastActiveTrap;
	  var sameTrap = lastTrap && trap && trap.id === lastTrap.id;
	  lastActiveTrap = trap;
	  if (lastTrap && !sameTrap) {
	    lastTrap.onDeactivation();
	    if (!traps.filter(function (_ref7) {
	      var id = _ref7.id;
	      return id === lastTrap.id;
	    }).length) {
	      lastTrap.returnFocus(!trap);
	    }
	  }
	  if (trap) {
	    lastActiveFocus = null;
	    if (!sameTrap || lastTrap.observed !== trap.observed) {
	      trap.onActivation(focusLockAPI);
	    }
	    activateTrap();
	    deferAction(activateTrap);
	  } else {
	    detachHandler();
	    lastActiveFocus = null;
	  }
	}
	mediumFocus.assignSyncMedium(onFocus);
	mediumBlur.assignMedium(onBlur);
	mediumEffect.assignMedium(function (cb) {
	  return cb(focusLockAPI);
	});
	var FocusTrap$1 = withSideEffect(reducePropsToState, handleStateChangeOnClient)(FocusWatcher);

	var FocusLockCombination = /*#__PURE__*/reactExports.forwardRef(function FocusLockUICombination(props, ref) {
	  return /*#__PURE__*/React.createElement(FocusLock$1, _extends$1({
	    sideCar: FocusTrap$1,
	    ref: ref
	  }, props));
	});
	var _ref = FocusLock$1.propTypes || {};
	  _ref.sideCar;
	  _objectWithoutPropertiesLoose(_ref, ["sideCar"]);
	FocusLockCombination.propTypes = {};

	const FocusTrap = FocusLockCombination.default ?? FocusLockCombination;
	const FocusLock = (props) => {
	  const {
	    initialFocusRef,
	    finalFocusRef,
	    contentRef,
	    restoreFocus,
	    children,
	    isDisabled,
	    autoFocus,
	    persistentFocus,
	    lockFocusAcrossFrames
	  } = props;
	  const onActivation = reactExports.useCallback(() => {
	    if (initialFocusRef?.current) {
	      initialFocusRef.current.focus();
	    } else if (contentRef?.current) {
	      const focusables = getAllFocusable(contentRef.current);
	      if (focusables.length === 0) {
	        requestAnimationFrame(() => {
	          contentRef.current?.focus();
	        });
	      }
	    }
	  }, [initialFocusRef, contentRef]);
	  const onDeactivation = reactExports.useCallback(() => {
	    finalFocusRef?.current?.focus();
	  }, [finalFocusRef]);
	  const returnFocus = restoreFocus && !finalFocusRef;
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(
	    FocusTrap,
	    {
	      crossFrame: lockFocusAcrossFrames,
	      persistentFocus,
	      autoFocus,
	      disabled: isDisabled,
	      onActivation,
	      onDeactivation,
	      returnFocus,
	      children
	    }
	  );
	};
	FocusLock.displayName = "FocusLock";

	const FormLabel = forwardRef(
	  function FormLabel2(passedProps, ref) {
	    const styles = useStyleConfig("FormLabel", passedProps);
	    const props = omitThemingProps(passedProps);
	    const {
	      className,
	      children,
	      requiredIndicator = /* @__PURE__ */ jsxRuntimeExports.jsx(RequiredIndicator, {}),
	      optionalIndicator = null,
	      ...rest
	    } = props;
	    const field = useFormControlContext();
	    const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest };
	    return /* @__PURE__ */ jsxRuntimeExports.jsxs(
	      chakra.label,
	      {
	        ...ownProps,
	        className: cx("chakra-form__label", props.className),
	        __css: {
	          display: "block",
	          textAlign: "start",
	          ...styles
	        },
	        children: [
	          children,
	          field?.isRequired ? requiredIndicator : optionalIndicator
	        ]
	      }
	    );
	  }
	);
	FormLabel.displayName = "FormLabel";
	const RequiredIndicator = forwardRef(
	  function RequiredIndicator2(props, ref) {
	    const field = useFormControlContext();
	    const styles = useFormControlStyles();
	    if (!field?.isRequired)
	      return null;
	    const className = cx("chakra-form__required-indicator", props.className);
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(
	      chakra.span,
	      {
	        ...field?.getRequiredIndicatorProps(props, ref),
	        __css: styles.requiredIndicator,
	        className
	      }
	    );
	  }
	);
	RequiredIndicator.displayName = "RequiredIndicator";

	function createIcon(options) {
	  const {
	    viewBox = "0 0 24 24",
	    d: pathDefinition,
	    displayName,
	    defaultProps = {}
	  } = options;
	  const path = reactExports.Children.toArray(options.path);
	  const Comp = forwardRef((props, ref) => /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { ref, viewBox, ...defaultProps, ...props, children: path.length ? path : /* @__PURE__ */ jsxRuntimeExports.jsx("path", { fill: "currentColor", d: pathDefinition }) }));
	  Comp.displayName = displayName;
	  return Comp;
	}

	const Input = forwardRef(
	  function Input2(props, ref) {
	    const { htmlSize, ...rest } = props;
	    const styles = useMultiStyleConfig("Input", rest);
	    const ownProps = omitThemingProps(rest);
	    const input = useFormControl(ownProps);
	    const _className = cx("chakra-input", props.className);
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(
	      chakra.input,
	      {
	        size: htmlSize,
	        ...input,
	        __css: styles.field,
	        ref,
	        className: _className
	      }
	    );
	  }
	);
	Input.displayName = "Input";
	Input.id = "Input";

	var getDefaultParent = function (originalTarget) {
	    if (typeof document === 'undefined') {
	        return null;
	    }
	    var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
	    return sampleTarget.ownerDocument.body;
	};
	var counterMap = new WeakMap();
	var uncontrolledNodes = new WeakMap();
	var markerMap = {};
	var lockCount = 0;
	var unwrapHost = function (node) {
	    return node && (node.host || unwrapHost(node.parentNode));
	};
	var correctTargets = function (parent, targets) {
	    return targets
	        .map(function (target) {
	        if (parent.contains(target)) {
	            return target;
	        }
	        var correctedTarget = unwrapHost(target);
	        if (correctedTarget && parent.contains(correctedTarget)) {
	            return correctedTarget;
	        }
	        console.error('aria-hidden', target, 'in not contained inside', parent, '. Doing nothing');
	        return null;
	    })
	        .filter(function (x) { return Boolean(x); });
	};
	/**
	 * Marks everything except given node(or nodes) as aria-hidden
	 * @param {Element | Element[]} originalTarget - elements to keep on the page
	 * @param [parentNode] - top element, defaults to document.body
	 * @param {String} [markerName] - a special attribute to mark every node
	 * @param {String} [controlAttribute] - html Attribute to control
	 * @return {Undo} undo command
	 */
	var applyAttributeToOthers = function (originalTarget, parentNode, markerName, controlAttribute) {
	    var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
	    if (!markerMap[markerName]) {
	        markerMap[markerName] = new WeakMap();
	    }
	    var markerCounter = markerMap[markerName];
	    var hiddenNodes = [];
	    var elementsToKeep = new Set();
	    var elementsToStop = new Set(targets);
	    var keep = function (el) {
	        if (!el || elementsToKeep.has(el)) {
	            return;
	        }
	        elementsToKeep.add(el);
	        keep(el.parentNode);
	    };
	    targets.forEach(keep);
	    var deep = function (parent) {
	        if (!parent || elementsToStop.has(parent)) {
	            return;
	        }
	        Array.prototype.forEach.call(parent.children, function (node) {
	            if (elementsToKeep.has(node)) {
	                deep(node);
	            }
	            else {
	                try {
	                    var attr = node.getAttribute(controlAttribute);
	                    var alreadyHidden = attr !== null && attr !== 'false';
	                    var counterValue = (counterMap.get(node) || 0) + 1;
	                    var markerValue = (markerCounter.get(node) || 0) + 1;
	                    counterMap.set(node, counterValue);
	                    markerCounter.set(node, markerValue);
	                    hiddenNodes.push(node);
	                    if (counterValue === 1 && alreadyHidden) {
	                        uncontrolledNodes.set(node, true);
	                    }
	                    if (markerValue === 1) {
	                        node.setAttribute(markerName, 'true');
	                    }
	                    if (!alreadyHidden) {
	                        node.setAttribute(controlAttribute, 'true');
	                    }
	                }
	                catch (e) {
	                    console.error('aria-hidden: cannot operate on ', node, e);
	                }
	            }
	        });
	    };
	    deep(parentNode);
	    elementsToKeep.clear();
	    lockCount++;
	    return function () {
	        hiddenNodes.forEach(function (node) {
	            var counterValue = counterMap.get(node) - 1;
	            var markerValue = markerCounter.get(node) - 1;
	            counterMap.set(node, counterValue);
	            markerCounter.set(node, markerValue);
	            if (!counterValue) {
	                if (!uncontrolledNodes.has(node)) {
	                    node.removeAttribute(controlAttribute);
	                }
	                uncontrolledNodes.delete(node);
	            }
	            if (!markerValue) {
	                node.removeAttribute(markerName);
	            }
	        });
	        lockCount--;
	        if (!lockCount) {
	            // clear
	            counterMap = new WeakMap();
	            counterMap = new WeakMap();
	            uncontrolledNodes = new WeakMap();
	            markerMap = {};
	        }
	    };
	};
	/**
	 * Marks everything except given node(or nodes) as aria-hidden
	 * @param {Element | Element[]} originalTarget - elements to keep on the page
	 * @param [parentNode] - top element, defaults to document.body
	 * @param {String} [markerName] - a special attribute to mark every node
	 * @return {Undo} undo command
	 */
	var hideOthers = function (originalTarget, parentNode, markerName) {
	    if (markerName === void 0) { markerName = 'data-aria-hidden'; }
	    var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
	    var activeParentNode = getDefaultParent(originalTarget);
	    if (!activeParentNode) {
	        return function () { return null; };
	    }
	    // we should not hide aria-live elements - https://github.com/theKashey/aria-hidden/issues/10
	    // and script elements, as they have no impact on accessibility.
	    targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll('[aria-live], script')));
	    return applyAttributeToOthers(targets, activeParentNode, markerName, 'aria-hidden');
	};

	var __defProp = Object.defineProperty;
	var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
	var __publicField = (obj, key, value) => {
	  __defNormalProp(obj, key + "" , value);
	  return value;
	};
	class ModalManager {
	  constructor() {
	    __publicField(this, "modals");
	    this.modals = /* @__PURE__ */ new Set();
	  }
	  add(modal) {
	    this.modals.add(modal);
	    return this.modals.size;
	  }
	  remove(modal) {
	    this.modals.delete(modal);
	  }
	  isTopModal(modal) {
	    if (!modal)
	      return false;
	    const topModal = Array.from(this.modals)[this.modals.size - 1];
	    return modal === topModal;
	  }
	}
	const modalManager = new ModalManager();
	function useModalManager(ref, isOpen) {
	  const [index, setIndex] = reactExports.useState(0);
	  reactExports.useEffect(() => {
	    const node = ref.current;
	    if (!node)
	      return;
	    if (isOpen) {
	      const index2 = modalManager.add(node);
	      setIndex(index2);
	    }
	    return () => {
	      modalManager.remove(node);
	      setIndex(0);
	    };
	  }, [isOpen, ref]);
	  return index;
	}

	function useModal(props) {
	  const {
	    isOpen,
	    onClose,
	    id,
	    closeOnOverlayClick = true,
	    closeOnEsc = true,
	    useInert = true,
	    onOverlayClick: onOverlayClickProp,
	    onEsc
	  } = props;
	  const dialogRef = reactExports.useRef(null);
	  const overlayRef = reactExports.useRef(null);
	  const [dialogId, headerId, bodyId] = useIds(
	    id,
	    `chakra-modal`,
	    `chakra-modal--header`,
	    `chakra-modal--body`
	  );
	  useAriaHidden(dialogRef, isOpen && useInert);
	  const index = useModalManager(dialogRef, isOpen);
	  const mouseDownTarget = reactExports.useRef(null);
	  const onMouseDown = reactExports.useCallback((event) => {
	    mouseDownTarget.current = event.target;
	  }, []);
	  const onKeyDown = reactExports.useCallback(
	    (event) => {
	      if (event.key === "Escape") {
	        event.stopPropagation();
	        if (closeOnEsc) {
	          onClose?.();
	        }
	        onEsc?.();
	      }
	    },
	    [closeOnEsc, onClose, onEsc]
	  );
	  const [headerMounted, setHeaderMounted] = reactExports.useState(false);
	  const [bodyMounted, setBodyMounted] = reactExports.useState(false);
	  const getDialogProps = reactExports.useCallback(
	    (props2 = {}, ref = null) => ({
	      role: "dialog",
	      ...props2,
	      ref: mergeRefs(ref, dialogRef),
	      id: dialogId,
	      tabIndex: -1,
	      "aria-modal": true,
	      "aria-labelledby": headerMounted ? headerId : void 0,
	      "aria-describedby": bodyMounted ? bodyId : void 0,
	      onClick: callAllHandlers(
	        props2.onClick,
	        (event) => event.stopPropagation()
	      )
	    }),
	    [bodyId, bodyMounted, dialogId, headerId, headerMounted]
	  );
	  const onOverlayClick = reactExports.useCallback(
	    (event) => {
	      event.stopPropagation();
	      if (mouseDownTarget.current !== event.target)
	        return;
	      if (!modalManager.isTopModal(dialogRef.current))
	        return;
	      if (closeOnOverlayClick) {
	        onClose?.();
	      }
	      onOverlayClickProp?.();
	    },
	    [onClose, closeOnOverlayClick, onOverlayClickProp]
	  );
	  const getDialogContainerProps = reactExports.useCallback(
	    (props2 = {}, ref = null) => ({
	      ...props2,
	      ref: mergeRefs(ref, overlayRef),
	      onClick: callAllHandlers(props2.onClick, onOverlayClick),
	      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
	      onMouseDown: callAllHandlers(props2.onMouseDown, onMouseDown)
	    }),
	    [onKeyDown, onMouseDown, onOverlayClick]
	  );
	  return {
	    isOpen,
	    onClose,
	    headerId,
	    bodyId,
	    setBodyMounted,
	    setHeaderMounted,
	    dialogRef,
	    overlayRef,
	    getDialogProps,
	    getDialogContainerProps,
	    index
	  };
	}
	function useAriaHidden(ref, shouldHide) {
	  const currentElement = ref.current;
	  reactExports.useEffect(() => {
	    if (!ref.current || !shouldHide)
	      return void 0;
	    return hideOthers(ref.current);
	  }, [shouldHide, ref, currentElement]);
	}
	function useIds(idProp, ...prefixes) {
	  const reactId = reactExports.useId();
	  const id = idProp || reactId;
	  return reactExports.useMemo(() => {
	    return prefixes.map((prefix) => `${prefix}-${id}`);
	  }, [id, prefixes]);
	}

	const [ModalStylesProvider, useModalStyles] = createContext({
	  name: `ModalStylesContext`,
	  errorMessage: `useModalStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Modal />" `
	});
	const [ModalContextProvider, useModalContext] = createContext({
	  strict: true,
	  name: "ModalContext",
	  errorMessage: "useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`"
	});
	const Modal = (props) => {
	  const modalProps = {
	    scrollBehavior: "outside",
	    autoFocus: true,
	    trapFocus: true,
	    returnFocusOnClose: true,
	    blockScrollOnMount: true,
	    allowPinchZoom: false,
	    preserveScrollBarGap: true,
	    motionPreset: "scale",
	    ...props,
	    lockFocusAcrossFrames: props.lockFocusAcrossFrames ?? true
	  };
	  const {
	    portalProps,
	    children,
	    autoFocus,
	    trapFocus,
	    initialFocusRef,
	    finalFocusRef,
	    returnFocusOnClose,
	    blockScrollOnMount,
	    allowPinchZoom,
	    preserveScrollBarGap,
	    motionPreset,
	    lockFocusAcrossFrames,
	    animatePresenceProps,
	    onCloseComplete
	  } = modalProps;
	  const styles = useMultiStyleConfig("Modal", modalProps);
	  const modal = useModal(modalProps);
	  const context = {
	    ...modal,
	    autoFocus,
	    trapFocus,
	    initialFocusRef,
	    finalFocusRef,
	    returnFocusOnClose,
	    blockScrollOnMount,
	    allowPinchZoom,
	    preserveScrollBarGap,
	    motionPreset,
	    lockFocusAcrossFrames
	  };
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(ModalContextProvider, { value: context, children: /* @__PURE__ */ jsxRuntimeExports.jsx(ModalStylesProvider, { value: styles, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
	    AnimatePresence,
	    {
	      ...animatePresenceProps,
	      onExitComplete: onCloseComplete,
	      children: context.isOpen && /* @__PURE__ */ jsxRuntimeExports.jsx(Portal, { ...portalProps, children })
	    }
	  ) }) });
	};
	Modal.displayName = "Modal";

	var zeroRightClassName = 'right-scroll-bar-position';
	var fullWidthClassName = 'width-before-scroll-bar';
	var noScrollbarsClassName = 'with-scroll-bars-hidden';
	/**
	 * Name of a CSS variable containing the amount of "hidden" scrollbar
	 * ! might be undefined ! use will fallback!
	 */
	var removedBarSizeVariable = '--removed-body-scroll-bar-size';

	var effectCar = createSidecarMedium();

	var nothing = function () {
	    return;
	};
	/**
	 * Removes scrollbar from the page and contain the scroll within the Lock
	 */
	var RemoveScroll = reactExports.forwardRef(function (props, parentRef) {
	    var ref = reactExports.useRef(null);
	    var _a = reactExports.useState({
	        onScrollCapture: nothing,
	        onWheelCapture: nothing,
	        onTouchMoveCapture: nothing,
	    }), callbacks = _a[0], setCallbacks = _a[1];
	    var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noRelative = props.noRelative, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container = _b === void 0 ? 'div' : _b, gapMode = props.gapMode, rest = __rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noRelative", "noIsolation", "inert", "allowPinchZoom", "as", "gapMode"]);
	    var SideCar = sideCar;
	    var containerRef = useMergeRefs([ref, parentRef]);
	    var containerProps = __assign(__assign({}, rest), callbacks);
	    return (reactExports.createElement(reactExports.Fragment, null,
	        enabled && (reactExports.createElement(SideCar, { sideCar: effectCar, removeScrollBar: removeScrollBar, shards: shards, noRelative: noRelative, noIsolation: noIsolation, inert: inert, setCallbacks: setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref, gapMode: gapMode })),
	        forwardProps ? (reactExports.cloneElement(reactExports.Children.only(children), __assign(__assign({}, containerProps), { ref: containerRef }))) : (reactExports.createElement(Container, __assign({}, containerProps, { className: className, ref: containerRef }), children))));
	});
	RemoveScroll.defaultProps = {
	    enabled: true,
	    removeScrollBar: true,
	    inert: false,
	};
	RemoveScroll.classNames = {
	    fullWidth: fullWidthClassName,
	    zeroRight: zeroRightClassName,
	};

	var getNonce = function () {
	    if (typeof __webpack_nonce__ !== 'undefined') {
	        return __webpack_nonce__;
	    }
	    return undefined;
	};

	function makeStyleTag() {
	    if (!document)
	        return null;
	    var tag = document.createElement('style');
	    tag.type = 'text/css';
	    var nonce = getNonce();
	    if (nonce) {
	        tag.setAttribute('nonce', nonce);
	    }
	    return tag;
	}
	function injectStyles(tag, css) {
	    // @ts-ignore
	    if (tag.styleSheet) {
	        // @ts-ignore
	        tag.styleSheet.cssText = css;
	    }
	    else {
	        tag.appendChild(document.createTextNode(css));
	    }
	}
	function insertStyleTag(tag) {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    head.appendChild(tag);
	}
	var stylesheetSingleton = function () {
	    var counter = 0;
	    var stylesheet = null;
	    return {
	        add: function (style) {
	            if (counter == 0) {
	                if ((stylesheet = makeStyleTag())) {
	                    injectStyles(stylesheet, style);
	                    insertStyleTag(stylesheet);
	                }
	            }
	            counter++;
	        },
	        remove: function () {
	            counter--;
	            if (!counter && stylesheet) {
	                stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
	                stylesheet = null;
	            }
	        },
	    };
	};

	/**
	 * creates a hook to control style singleton
	 * @see {@link styleSingleton} for a safer component version
	 * @example
	 * ```tsx
	 * const useStyle = styleHookSingleton();
	 * ///
	 * useStyle('body { overflow: hidden}');
	 */
	var styleHookSingleton = function () {
	    var sheet = stylesheetSingleton();
	    return function (styles, isDynamic) {
	        reactExports.useEffect(function () {
	            sheet.add(styles);
	            return function () {
	                sheet.remove();
	            };
	        }, [styles && isDynamic]);
	    };
	};

	/**
	 * create a Component to add styles on demand
	 * - styles are added when first instance is mounted
	 * - styles are removed when the last instance is unmounted
	 * - changing styles in runtime does nothing unless dynamic is set. But with multiple components that can lead to the undefined behavior
	 */
	var styleSingleton = function () {
	    var useStyle = styleHookSingleton();
	    var Sheet = function (_a) {
	        var styles = _a.styles, dynamic = _a.dynamic;
	        useStyle(styles, dynamic);
	        return null;
	    };
	    return Sheet;
	};

	var zeroGap = {
	    left: 0,
	    top: 0,
	    right: 0,
	    gap: 0,
	};
	var parse = function (x) { return parseInt(x || '', 10) || 0; };
	var getOffset = function (gapMode) {
	    var cs = window.getComputedStyle(document.body);
	    var left = cs[gapMode === 'padding' ? 'paddingLeft' : 'marginLeft'];
	    var top = cs[gapMode === 'padding' ? 'paddingTop' : 'marginTop'];
	    var right = cs[gapMode === 'padding' ? 'paddingRight' : 'marginRight'];
	    return [parse(left), parse(top), parse(right)];
	};
	var getGapWidth = function (gapMode) {
	    if (gapMode === void 0) { gapMode = 'margin'; }
	    if (typeof window === 'undefined') {
	        return zeroGap;
	    }
	    var offsets = getOffset(gapMode);
	    var documentWidth = document.documentElement.clientWidth;
	    var windowWidth = window.innerWidth;
	    return {
	        left: offsets[0],
	        top: offsets[1],
	        right: offsets[2],
	        gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0]),
	    };
	};

	var Style = styleSingleton();
	var lockAttribute = 'data-scroll-locked';
	// important tip - once we measure scrollBar width and remove them
	// we could not repeat this operation
	// thus we are using style-singleton - only the first "yet correct" style will be applied.
	var getStyles = function (_a, allowRelative, gapMode, important) {
	    var left = _a.left, top = _a.top, right = _a.right, gap = _a.gap;
	    if (gapMode === void 0) { gapMode = 'margin'; }
	    return "\n  .".concat(noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body[").concat(lockAttribute, "] {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
	        allowRelative && "position: relative ".concat(important, ";"),
	        gapMode === 'margin' &&
	            "\n    padding-left: ".concat(left, "px;\n    padding-top: ").concat(top, "px;\n    padding-right: ").concat(right, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
	        gapMode === 'padding' && "padding-right: ".concat(gap, "px ").concat(important, ";"),
	    ]
	        .filter(Boolean)
	        .join(''), "\n  }\n  \n  .").concat(zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(zeroRightClassName, " .").concat(zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " .").concat(fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body[").concat(lockAttribute, "] {\n    ").concat(removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
	};
	var getCurrentUseCounter = function () {
	    var counter = parseInt(document.body.getAttribute(lockAttribute) || '0', 10);
	    return isFinite(counter) ? counter : 0;
	};
	var useLockAttribute = function () {
	    reactExports.useEffect(function () {
	        document.body.setAttribute(lockAttribute, (getCurrentUseCounter() + 1).toString());
	        return function () {
	            var newCounter = getCurrentUseCounter() - 1;
	            if (newCounter <= 0) {
	                document.body.removeAttribute(lockAttribute);
	            }
	            else {
	                document.body.setAttribute(lockAttribute, newCounter.toString());
	            }
	        };
	    }, []);
	};
	/**
	 * Removes page scrollbar and blocks page scroll when mounted
	 */
	var RemoveScrollBar = function (_a) {
	    var noRelative = _a.noRelative, noImportant = _a.noImportant, _b = _a.gapMode, gapMode = _b === void 0 ? 'margin' : _b;
	    useLockAttribute();
	    /*
	     gap will be measured on every component mount
	     however it will be used only by the "first" invocation
	     due to singleton nature of <Style
	     */
	    var gap = reactExports.useMemo(function () { return getGapWidth(gapMode); }, [gapMode]);
	    return reactExports.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? '!important' : '') });
	};

	var passiveSupported = false;
	if (typeof window !== 'undefined') {
	    try {
	        var options = Object.defineProperty({}, 'passive', {
	            get: function () {
	                passiveSupported = true;
	                return true;
	            },
	        });
	        // @ts-ignore
	        window.addEventListener('test', options, options);
	        // @ts-ignore
	        window.removeEventListener('test', options, options);
	    }
	    catch (err) {
	        passiveSupported = false;
	    }
	}
	var nonPassive = passiveSupported ? { passive: false } : false;

	var alwaysContainsScroll = function (node) {
	    // textarea will always _contain_ scroll inside self. It only can be hidden
	    return node.tagName === 'TEXTAREA';
	};
	var elementCanBeScrolled = function (node, overflow) {
	    if (!(node instanceof Element)) {
	        return false;
	    }
	    var styles = window.getComputedStyle(node);
	    return (
	    // not-not-scrollable
	    styles[overflow] !== 'hidden' &&
	        // contains scroll inside self
	        !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === 'visible'));
	};
	var elementCouldBeVScrolled = function (node) { return elementCanBeScrolled(node, 'overflowY'); };
	var elementCouldBeHScrolled = function (node) { return elementCanBeScrolled(node, 'overflowX'); };
	var locationCouldBeScrolled = function (axis, node) {
	    var ownerDocument = node.ownerDocument;
	    var current = node;
	    do {
	        // Skip over shadow root
	        if (typeof ShadowRoot !== 'undefined' && current instanceof ShadowRoot) {
	            current = current.host;
	        }
	        var isScrollable = elementCouldBeScrolled(axis, current);
	        if (isScrollable) {
	            var _a = getScrollVariables(axis, current), scrollHeight = _a[1], clientHeight = _a[2];
	            if (scrollHeight > clientHeight) {
	                return true;
	            }
	        }
	        current = current.parentNode;
	    } while (current && current !== ownerDocument.body);
	    return false;
	};
	var getVScrollVariables = function (_a) {
	    var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
	    return [
	        scrollTop,
	        scrollHeight,
	        clientHeight,
	    ];
	};
	var getHScrollVariables = function (_a) {
	    var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
	    return [
	        scrollLeft,
	        scrollWidth,
	        clientWidth,
	    ];
	};
	var elementCouldBeScrolled = function (axis, node) {
	    return axis === 'v' ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
	};
	var getScrollVariables = function (axis, node) {
	    return axis === 'v' ? getVScrollVariables(node) : getHScrollVariables(node);
	};
	var getDirectionFactor = function (axis, direction) {
	    /**
	     * If the element's direction is rtl (right-to-left), then scrollLeft is 0 when the scrollbar is at its rightmost position,
	     * and then increasingly negative as you scroll towards the end of the content.
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft
	     */
	    return axis === 'h' && direction === 'rtl' ? -1 : 1;
	};
	var handleScroll = function (axis, endTarget, event, sourceDelta, noOverscroll) {
	    var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
	    var delta = directionFactor * sourceDelta;
	    // find scrollable target
	    var target = event.target;
	    var targetInLock = endTarget.contains(target);
	    var shouldCancelScroll = false;
	    var isDeltaPositive = delta > 0;
	    var availableScroll = 0;
	    var availableScrollTop = 0;
	    do {
	        if (!target) {
	            break;
	        }
	        var _a = getScrollVariables(axis, target), position = _a[0], scroll_1 = _a[1], capacity = _a[2];
	        var elementScroll = scroll_1 - capacity - directionFactor * position;
	        if (position || elementScroll) {
	            if (elementCouldBeScrolled(axis, target)) {
	                availableScroll += elementScroll;
	                availableScrollTop += position;
	            }
	        }
	        var parent_1 = target.parentNode;
	        // we will "bubble" from ShadowDom in case we are, or just to the parent in normal case
	        // this is the same logic used in focus-lock
	        target = (parent_1 && parent_1.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? parent_1.host : parent_1);
	    } while (
	    // portaled content
	    (!targetInLock && target !== document.body) ||
	        // self content
	        (targetInLock && (endTarget.contains(target) || endTarget === target)));
	    // handle epsilon around 0 (non standard zoom levels)
	    if (isDeltaPositive &&
	        ((Math.abs(availableScroll) < 1) || (false))) {
	        shouldCancelScroll = true;
	    }
	    else if (!isDeltaPositive &&
	        ((Math.abs(availableScrollTop) < 1) || (false))) {
	        shouldCancelScroll = true;
	    }
	    return shouldCancelScroll;
	};

	var getTouchXY = function (event) {
	    return 'changedTouches' in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
	};
	var getDeltaXY = function (event) { return [event.deltaX, event.deltaY]; };
	var extractRef = function (ref) {
	    return ref && 'current' in ref ? ref.current : ref;
	};
	var deltaCompare = function (x, y) { return x[0] === y[0] && x[1] === y[1]; };
	var generateStyle = function (id) { return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n"); };
	var idCounter = 0;
	var lockStack = [];
	function RemoveScrollSideCar(props) {
	    var shouldPreventQueue = reactExports.useRef([]);
	    var touchStartRef = reactExports.useRef([0, 0]);
	    var activeAxis = reactExports.useRef();
	    var id = reactExports.useState(idCounter++)[0];
	    var Style = reactExports.useState(styleSingleton)[0];
	    var lastProps = reactExports.useRef(props);
	    reactExports.useEffect(function () {
	        lastProps.current = props;
	    }, [props]);
	    reactExports.useEffect(function () {
	        if (props.inert) {
	            document.body.classList.add("block-interactivity-".concat(id));
	            var allow_1 = __spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
	            allow_1.forEach(function (el) { return el.classList.add("allow-interactivity-".concat(id)); });
	            return function () {
	                document.body.classList.remove("block-interactivity-".concat(id));
	                allow_1.forEach(function (el) { return el.classList.remove("allow-interactivity-".concat(id)); });
	            };
	        }
	        return;
	    }, [props.inert, props.lockRef.current, props.shards]);
	    var shouldCancelEvent = reactExports.useCallback(function (event, parent) {
	        if (('touches' in event && event.touches.length === 2) || (event.type === 'wheel' && event.ctrlKey)) {
	            return !lastProps.current.allowPinchZoom;
	        }
	        var touch = getTouchXY(event);
	        var touchStart = touchStartRef.current;
	        var deltaX = 'deltaX' in event ? event.deltaX : touchStart[0] - touch[0];
	        var deltaY = 'deltaY' in event ? event.deltaY : touchStart[1] - touch[1];
	        var currentAxis;
	        var target = event.target;
	        var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? 'h' : 'v';
	        // allow horizontal touch move on Range inputs. They will not cause any scroll
	        if ('touches' in event && moveDirection === 'h' && target.type === 'range') {
	            return false;
	        }
	        var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
	        if (!canBeScrolledInMainDirection) {
	            return true;
	        }
	        if (canBeScrolledInMainDirection) {
	            currentAxis = moveDirection;
	        }
	        else {
	            currentAxis = moveDirection === 'v' ? 'h' : 'v';
	            canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
	            // other axis might be not scrollable
	        }
	        if (!canBeScrolledInMainDirection) {
	            return false;
	        }
	        if (!activeAxis.current && 'changedTouches' in event && (deltaX || deltaY)) {
	            activeAxis.current = currentAxis;
	        }
	        if (!currentAxis) {
	            return true;
	        }
	        var cancelingAxis = activeAxis.current || currentAxis;
	        return handleScroll(cancelingAxis, parent, event, cancelingAxis === 'h' ? deltaX : deltaY);
	    }, []);
	    var shouldPrevent = reactExports.useCallback(function (_event) {
	        var event = _event;
	        if (!lockStack.length || lockStack[lockStack.length - 1] !== Style) {
	            // not the last active
	            return;
	        }
	        var delta = 'deltaY' in event ? getDeltaXY(event) : getTouchXY(event);
	        var sourceEvent = shouldPreventQueue.current.filter(function (e) { return e.name === event.type && (e.target === event.target || event.target === e.shadowParent) && deltaCompare(e.delta, delta); })[0];
	        // self event, and should be canceled
	        if (sourceEvent && sourceEvent.should) {
	            if (event.cancelable) {
	                event.preventDefault();
	            }
	            return;
	        }
	        // outside or shard event
	        if (!sourceEvent) {
	            var shardNodes = (lastProps.current.shards || [])
	                .map(extractRef)
	                .filter(Boolean)
	                .filter(function (node) { return node.contains(event.target); });
	            var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
	            if (shouldStop) {
	                if (event.cancelable) {
	                    event.preventDefault();
	                }
	            }
	        }
	    }, []);
	    var shouldCancel = reactExports.useCallback(function (name, delta, target, should) {
	        var event = { name: name, delta: delta, target: target, should: should, shadowParent: getOutermostShadowParent(target) };
	        shouldPreventQueue.current.push(event);
	        setTimeout(function () {
	            shouldPreventQueue.current = shouldPreventQueue.current.filter(function (e) { return e !== event; });
	        }, 1);
	    }, []);
	    var scrollTouchStart = reactExports.useCallback(function (event) {
	        touchStartRef.current = getTouchXY(event);
	        activeAxis.current = undefined;
	    }, []);
	    var scrollWheel = reactExports.useCallback(function (event) {
	        shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
	    }, []);
	    var scrollTouchMove = reactExports.useCallback(function (event) {
	        shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
	    }, []);
	    reactExports.useEffect(function () {
	        lockStack.push(Style);
	        props.setCallbacks({
	            onScrollCapture: scrollWheel,
	            onWheelCapture: scrollWheel,
	            onTouchMoveCapture: scrollTouchMove,
	        });
	        document.addEventListener('wheel', shouldPrevent, nonPassive);
	        document.addEventListener('touchmove', shouldPrevent, nonPassive);
	        document.addEventListener('touchstart', scrollTouchStart, nonPassive);
	        return function () {
	            lockStack = lockStack.filter(function (inst) { return inst !== Style; });
	            document.removeEventListener('wheel', shouldPrevent, nonPassive);
	            document.removeEventListener('touchmove', shouldPrevent, nonPassive);
	            document.removeEventListener('touchstart', scrollTouchStart, nonPassive);
	        };
	    }, []);
	    var removeScrollBar = props.removeScrollBar, inert = props.inert;
	    return (reactExports.createElement(reactExports.Fragment, null,
	        inert ? reactExports.createElement(Style, { styles: generateStyle(id) }) : null,
	        removeScrollBar ? reactExports.createElement(RemoveScrollBar, { noRelative: props.noRelative, gapMode: props.gapMode }) : null));
	}
	function getOutermostShadowParent(node) {
	    var shadowParent = null;
	    while (node !== null) {
	        if (node instanceof ShadowRoot) {
	            shadowParent = node.host;
	            node = node.host;
	        }
	        node = node.parentNode;
	    }
	    return shadowParent;
	}

	var SideCar = exportSidecar(effectCar, RemoveScrollSideCar);

	var ReactRemoveScroll = reactExports.forwardRef(function (props, ref) { return (reactExports.createElement(RemoveScroll, __assign({}, props, { ref: ref, sideCar: SideCar }))); });
	ReactRemoveScroll.classNames = RemoveScroll.classNames;

	function ModalFocusScope(props) {
	  const {
	    autoFocus,
	    trapFocus,
	    dialogRef,
	    initialFocusRef,
	    blockScrollOnMount,
	    allowPinchZoom,
	    finalFocusRef,
	    returnFocusOnClose,
	    preserveScrollBarGap,
	    lockFocusAcrossFrames,
	    isOpen
	  } = useModalContext();
	  const [isPresent, safeToRemove] = usePresence();
	  reactExports.useEffect(() => {
	    if (!isPresent && safeToRemove) {
	      setTimeout(safeToRemove);
	    }
	  }, [isPresent, safeToRemove]);
	  const index = useModalManager(dialogRef, isOpen);
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(
	    FocusLock,
	    {
	      autoFocus,
	      isDisabled: !trapFocus,
	      initialFocusRef,
	      finalFocusRef,
	      restoreFocus: returnFocusOnClose,
	      contentRef: dialogRef,
	      lockFocusAcrossFrames,
	      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
	        ReactRemoveScroll,
	        {
	          removeScrollBar: !preserveScrollBarGap,
	          allowPinchZoom,
	          enabled: index === 1 && blockScrollOnMount,
	          forwardProps: true,
	          children: props.children
	        }
	      )
	    }
	  );
	}

	const variants$2 = {
	  initial: ({ offsetX, offsetY, transition, transitionEnd, delay }) => ({
	    opacity: 0,
	    x: offsetX,
	    y: offsetY,
	    transition: transition?.exit ?? withDelay.exit(TRANSITION_DEFAULTS.exit, delay),
	    transitionEnd: transitionEnd?.exit
	  }),
	  enter: ({ transition, transitionEnd, delay }) => ({
	    opacity: 1,
	    x: 0,
	    y: 0,
	    transition: transition?.enter ?? withDelay.enter(TRANSITION_DEFAULTS.enter, delay),
	    transitionEnd: transitionEnd?.enter
	  }),
	  exit: ({ offsetY, offsetX, transition, transitionEnd, reverse, delay }) => {
	    const offset = { x: offsetX, y: offsetY };
	    return {
	      opacity: 0,
	      transition: transition?.exit ?? withDelay.exit(TRANSITION_DEFAULTS.exit, delay),
	      ...reverse ? { ...offset, transitionEnd: transitionEnd?.exit } : { transitionEnd: { ...offset, ...transitionEnd?.exit } }
	    };
	  }
	};
	const slideFadeConfig = {
	  initial: "initial",
	  animate: "enter",
	  exit: "exit",
	  variants: variants$2
	};
	const SlideFade = reactExports.forwardRef(
	  function SlideFade2(props, ref) {
	    const {
	      unmountOnExit,
	      in: isOpen,
	      reverse = true,
	      className,
	      offsetX = 0,
	      offsetY = 8,
	      transition,
	      transitionEnd,
	      delay,
	      animatePresenceProps,
	      ...rest
	    } = props;
	    const show = unmountOnExit ? isOpen && unmountOnExit : true;
	    const animate = isOpen || unmountOnExit ? "enter" : "exit";
	    const custom = {
	      offsetX,
	      offsetY,
	      reverse,
	      transition,
	      transitionEnd,
	      delay
	    };
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { ...animatePresenceProps, custom, children: show && /* @__PURE__ */ jsxRuntimeExports.jsx(
	      motion.div,
	      {
	        ref,
	        className: cx("chakra-offset-slide", className),
	        custom,
	        ...slideFadeConfig,
	        animate,
	        ...rest
	      }
	    ) });
	  }
	);
	SlideFade.displayName = "SlideFade";

	const variants$1 = {
	  exit: ({ reverse, initialScale, transition, transitionEnd, delay }) => ({
	    opacity: 0,
	    ...reverse ? { scale: initialScale, transitionEnd: transitionEnd?.exit } : { transitionEnd: { scale: initialScale, ...transitionEnd?.exit } },
	    transition: transition?.exit ?? withDelay.exit(TRANSITION_DEFAULTS.exit, delay)
	  }),
	  enter: ({ transitionEnd, transition, delay }) => ({
	    opacity: 1,
	    scale: 1,
	    transition: transition?.enter ?? withDelay.enter(TRANSITION_DEFAULTS.enter, delay),
	    transitionEnd: transitionEnd?.enter
	  })
	};
	const scaleFadeConfig = {
	  initial: "exit",
	  animate: "enter",
	  exit: "exit",
	  variants: variants$1
	};
	const ScaleFade = reactExports.forwardRef(
	  function ScaleFade2(props, ref) {
	    const {
	      unmountOnExit,
	      in: isOpen,
	      reverse = true,
	      initialScale = 0.95,
	      className,
	      transition,
	      transitionEnd,
	      delay,
	      animatePresenceProps,
	      ...rest
	    } = props;
	    const show = unmountOnExit ? isOpen && unmountOnExit : true;
	    const animate = isOpen || unmountOnExit ? "enter" : "exit";
	    const custom = { initialScale, reverse, transition, transitionEnd, delay };
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { ...animatePresenceProps, custom, children: show && /* @__PURE__ */ jsxRuntimeExports.jsx(
	      motion.div,
	      {
	        ref,
	        className: cx("chakra-offset-slide", className),
	        ...scaleFadeConfig,
	        animate,
	        custom,
	        ...rest
	      }
	    ) });
	  }
	);
	ScaleFade.displayName = "ScaleFade";

	const transitions = {
	  slideInBottom: {
	    ...slideFadeConfig,
	    custom: { offsetY: 16, reverse: true }
	  },
	  slideInRight: {
	    ...slideFadeConfig,
	    custom: { offsetX: 16, reverse: true }
	  },
	  slideInTop: {
	    ...slideFadeConfig,
	    custom: { offsetY: -16, reverse: true }
	  },
	  slideInLeft: {
	    ...slideFadeConfig,
	    custom: { offsetX: -16, reverse: true }
	  },
	  scale: {
	    ...scaleFadeConfig,
	    custom: { initialScale: 0.95, reverse: true }
	  },
	  none: {}
	};
	const MotionSection = chakra(motion.section);
	const getMotionProps = (preset) => {
	  return transitions[preset || "none"];
	};
	const ModalTransition = reactExports.forwardRef(
	  (props, ref) => {
	    const { preset, motionProps = getMotionProps(preset), ...rest } = props;
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(MotionSection, { ref, ...motionProps, ...rest });
	  }
	);
	ModalTransition.displayName = "ModalTransition";

	const ModalContent = forwardRef(
	  (props, ref) => {
	    const {
	      className,
	      children,
	      containerProps: rootProps,
	      motionProps,
	      ...rest
	    } = props;
	    const { getDialogProps, getDialogContainerProps } = useModalContext();
	    const dialogProps = getDialogProps(rest, ref);
	    const containerProps = getDialogContainerProps(rootProps);
	    const _className = cx("chakra-modal__content", className);
	    const styles = useModalStyles();
	    const dialogStyles = defineStyle({
	      display: "flex",
	      flexDirection: "column",
	      position: "relative",
	      width: "100%",
	      outline: 0,
	      ...styles.dialog
	    });
	    const dialogContainerStyles = defineStyle({
	      display: "flex",
	      width: "100vw",
	      height: "$100vh",
	      position: "fixed",
	      left: 0,
	      top: 0,
	      ...styles.dialogContainer
	    });
	    const { motionPreset } = useModalContext();
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(ModalFocusScope, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
	      chakra.div,
	      {
	        ...containerProps,
	        className: "chakra-modal__content-container",
	        tabIndex: -1,
	        __css: dialogContainerStyles,
	        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
	          ModalTransition,
	          {
	            preset: motionPreset,
	            motionProps,
	            className: _className,
	            ...dialogProps,
	            __css: dialogStyles,
	            children
	          }
	        )
	      }
	    ) });
	  }
	);
	ModalContent.displayName = "ModalContent";

	const ModalBody = forwardRef((props, ref) => {
	  const { className, ...rest } = props;
	  const { bodyId, setBodyMounted } = useModalContext();
	  reactExports.useEffect(() => {
	    setBodyMounted(true);
	    return () => setBodyMounted(false);
	  }, [setBodyMounted]);
	  const _className = cx("chakra-modal__body", className);
	  const styles = useModalStyles();
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(
	    chakra.div,
	    {
	      ref,
	      className: _className,
	      id: bodyId,
	      ...rest,
	      __css: styles.body
	    }
	  );
	});
	ModalBody.displayName = "ModalBody";

	const ModalCloseButton = forwardRef(
	  (props, ref) => {
	    const { onClick, className, ...rest } = props;
	    const { onClose } = useModalContext();
	    const _className = cx("chakra-modal__close-btn", className);
	    const styles = useModalStyles();
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(
	      CloseButton,
	      {
	        ref,
	        __css: styles.closeButton,
	        className: _className,
	        onClick: callAllHandlers(onClick, (event) => {
	          event.stopPropagation();
	          onClose();
	        }),
	        ...rest
	      }
	    );
	  }
	);
	ModalCloseButton.displayName = "ModalCloseButton";

	const ModalFooter = forwardRef(
	  (props, ref) => {
	    const { className, ...rest } = props;
	    const _className = cx("chakra-modal__footer", className);
	    const styles = useModalStyles();
	    const footerStyles = defineStyle({
	      display: "flex",
	      alignItems: "center",
	      justifyContent: "flex-end",
	      ...styles.footer
	    });
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(
	      chakra.footer,
	      {
	        ref,
	        ...rest,
	        __css: footerStyles,
	        className: _className
	      }
	    );
	  }
	);
	ModalFooter.displayName = "ModalFooter";

	const ModalHeader = forwardRef(
	  (props, ref) => {
	    const { className, ...rest } = props;
	    const { headerId, setHeaderMounted } = useModalContext();
	    reactExports.useEffect(() => {
	      setHeaderMounted(true);
	      return () => setHeaderMounted(false);
	    }, [setHeaderMounted]);
	    const _className = cx("chakra-modal__header", className);
	    const styles = useModalStyles();
	    const headerStyles = defineStyle({
	      flex: 0,
	      ...styles.header
	    });
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(
	      chakra.header,
	      {
	        ref,
	        className: _className,
	        id: headerId,
	        ...rest,
	        __css: headerStyles
	      }
	    );
	  }
	);
	ModalHeader.displayName = "ModalHeader";

	const variants = {
	  enter: ({ transition, transitionEnd, delay } = {}) => ({
	    opacity: 1,
	    transition: transition?.enter ?? withDelay.enter(TRANSITION_DEFAULTS.enter, delay),
	    transitionEnd: transitionEnd?.enter
	  }),
	  exit: ({ transition, transitionEnd, delay } = {}) => ({
	    opacity: 0,
	    transition: transition?.exit ?? withDelay.exit(TRANSITION_DEFAULTS.exit, delay),
	    transitionEnd: transitionEnd?.exit
	  })
	};
	const fadeConfig = {
	  initial: "exit",
	  animate: "enter",
	  exit: "exit",
	  variants
	};
	const Fade = reactExports.forwardRef(
	  function Fade2(props, ref) {
	    const {
	      unmountOnExit,
	      in: isOpen,
	      className,
	      transition,
	      transitionEnd,
	      delay,
	      animatePresenceProps,
	      ...rest
	    } = props;
	    const animate = isOpen || unmountOnExit ? "enter" : "exit";
	    const show = unmountOnExit ? isOpen && unmountOnExit : true;
	    const custom = { transition, transitionEnd, delay };
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(AnimatePresence, { ...animatePresenceProps, custom, children: show && /* @__PURE__ */ jsxRuntimeExports.jsx(
	      motion.div,
	      {
	        ref,
	        className: cx("chakra-fade", className),
	        custom,
	        ...fadeConfig,
	        animate,
	        ...rest
	      }
	    ) });
	  }
	);
	Fade.displayName = "Fade";

	const MotionDiv = chakra(motion.div);
	const ModalOverlay = forwardRef(
	  (props, ref) => {
	    const { className, transition, motionProps: _motionProps, ...rest } = props;
	    const _className = cx("chakra-modal__overlay", className);
	    const styles = useModalStyles();
	    const overlayStyle = {
	      pos: "fixed",
	      left: "0",
	      top: "0",
	      w: "100vw",
	      h: "100vh",
	      ...styles.overlay
	    };
	    const { motionPreset } = useModalContext();
	    const defaultMotionProps = motionPreset === "none" ? {} : fadeConfig;
	    const motionProps = _motionProps || defaultMotionProps;
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(
	      MotionDiv,
	      {
	        ...motionProps,
	        __css: overlayStyle,
	        ref,
	        className: _className,
	        ...rest
	      }
	    );
	  }
	);
	ModalOverlay.displayName = "ModalOverlay";

	const SelectField = forwardRef(
	  function SelectField2(props, ref) {
	    const { children, placeholder, className, ...rest } = props;
	    return /* @__PURE__ */ jsxRuntimeExports.jsxs(
	      chakra.select,
	      {
	        ...rest,
	        ref,
	        className: cx("chakra-select", className),
	        children: [
	          placeholder && /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: "", children: placeholder }),
	          children
	        ]
	      }
	    );
	  }
	);
	SelectField.displayName = "SelectField";

	const Select = forwardRef((props, ref) => {
	  const styles = useMultiStyleConfig("Select", props);
	  const {
	    rootProps,
	    placeholder,
	    icon,
	    color,
	    height,
	    h,
	    minH,
	    minHeight,
	    iconColor,
	    iconSize,
	    ...rest
	  } = omitThemingProps(props);
	  const [layoutProps, otherProps] = split(rest, layoutPropNames);
	  const ownProps = useFormControl(otherProps);
	  const rootStyles = {
	    width: "100%",
	    height: "fit-content",
	    position: "relative",
	    color
	  };
	  const fieldStyles = {
	    paddingEnd: "2rem",
	    ...styles.field,
	    _focus: {
	      zIndex: "unset",
	      ...styles.field?.["_focus"]
	    }
	  };
	  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
	    chakra.div,
	    {
	      className: "chakra-select__wrapper",
	      __css: rootStyles,
	      ...layoutProps,
	      ...rootProps,
	      children: [
	        /* @__PURE__ */ jsxRuntimeExports.jsx(
	          SelectField,
	          {
	            ref,
	            height: h ?? height,
	            minH: minH ?? minHeight,
	            placeholder,
	            ...ownProps,
	            __css: fieldStyles,
	            children: props.children
	          }
	        ),
	        /* @__PURE__ */ jsxRuntimeExports.jsx(
	          SelectIcon,
	          {
	            "data-disabled": dataAttr(ownProps.disabled),
	            ...(iconColor || color) && { color: iconColor || color },
	            __css: styles.icon,
	            ...iconSize && { fontSize: iconSize },
	            children: icon
	          }
	        )
	      ]
	    }
	  );
	});
	Select.displayName = "Select";
	const DefaultIcon = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx("svg", { viewBox: "0 0 24 24", ...props, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
	  "path",
	  {
	    fill: "currentColor",
	    d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
	  }
	) });
	const IconWrapper = chakra("div", {
	  baseStyle: {
	    position: "absolute",
	    display: "inline-flex",
	    alignItems: "center",
	    justifyContent: "center",
	    pointerEvents: "none",
	    top: "50%",
	    transform: "translateY(-50%)"
	  }
	});
	const SelectIcon = (props) => {
	  const { children = /* @__PURE__ */ jsxRuntimeExports.jsx(DefaultIcon, {}), ...rest } = props;
	  const clone = reactExports.cloneElement(children, {
	    role: "presentation",
	    className: "chakra-select__icon",
	    focusable: false,
	    "aria-hidden": true,
	    // force icon to adhere to `IconWrapper` styles
	    style: {
	      width: "1em",
	      height: "1em",
	      color: "currentColor"
	    }
	  });
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(IconWrapper, { ...rest, className: "chakra-select__icon-wrapper", children: reactExports.isValidElement(children) ? clone : null });
	};
	SelectIcon.displayName = "SelectIcon";

	const StackItem = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(
	  chakra.div,
	  {
	    className: "chakra-stack__item",
	    ...props,
	    __css: {
	      display: "inline-block",
	      flex: "0 0 auto",
	      minWidth: 0,
	      ...props["__css"]
	    }
	  }
	);
	StackItem.displayName = "StackItem";

	function getDividerStyles(options) {
	  const { spacing, direction } = options;
	  const dividerStyles = {
	    column: {
	      my: spacing,
	      mx: 0,
	      borderLeftWidth: 0,
	      borderBottomWidth: "1px"
	    },
	    "column-reverse": {
	      my: spacing,
	      mx: 0,
	      borderLeftWidth: 0,
	      borderBottomWidth: "1px"
	    },
	    row: {
	      mx: spacing,
	      my: 0,
	      borderLeftWidth: "1px",
	      borderBottomWidth: 0
	    },
	    "row-reverse": {
	      mx: spacing,
	      my: 0,
	      borderLeftWidth: "1px",
	      borderBottomWidth: 0
	    }
	  };
	  return {
	    "&": mapResponsive(
	      direction,
	      (value) => dividerStyles[value]
	    )
	  };
	}

	const Stack = forwardRef((props, ref) => {
	  const {
	    isInline,
	    direction: directionProp,
	    align,
	    justify,
	    spacing = "0.5rem",
	    wrap,
	    children,
	    divider,
	    className,
	    shouldWrapChildren,
	    ...rest
	  } = props;
	  const direction = isInline ? "row" : directionProp ?? "column";
	  const dividerStyle = reactExports.useMemo(
	    () => getDividerStyles({ spacing, direction }),
	    [spacing, direction]
	  );
	  const hasDivider = !!divider;
	  const shouldUseChildren = !shouldWrapChildren && !hasDivider;
	  const clones = reactExports.useMemo(() => {
	    const validChildren = getValidChildren(children);
	    return shouldUseChildren ? validChildren : validChildren.map((child, index) => {
	      const key = typeof child.key !== "undefined" ? child.key : index;
	      const isLast = index + 1 === validChildren.length;
	      const wrappedChild = /* @__PURE__ */ jsxRuntimeExports.jsx(StackItem, { children: child }, key);
	      const _child = shouldWrapChildren ? wrappedChild : child;
	      if (!hasDivider)
	        return _child;
	      const clonedDivider = reactExports.cloneElement(
	        divider,
	        {
	          __css: dividerStyle
	        }
	      );
	      const _divider = isLast ? null : clonedDivider;
	      return /* @__PURE__ */ jsxRuntimeExports.jsxs(reactExports.Fragment, { children: [
	        _child,
	        _divider
	      ] }, key);
	    });
	  }, [
	    divider,
	    dividerStyle,
	    hasDivider,
	    shouldUseChildren,
	    shouldWrapChildren,
	    children
	  ]);
	  const _className = cx("chakra-stack", className);
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(
	    chakra.div,
	    {
	      ref,
	      display: "flex",
	      alignItems: align,
	      justifyContent: justify,
	      flexDirection: direction,
	      flexWrap: wrap,
	      gap: hasDivider ? void 0 : spacing,
	      className: _className,
	      ...rest,
	      children: clones
	    }
	  );
	});
	Stack.displayName = "Stack";

	const HStack = forwardRef((props, ref) => /* @__PURE__ */ jsxRuntimeExports.jsx(Stack, { align: "center", ...props, direction: "row", ref }));
	HStack.displayName = "HStack";

	const VStack = forwardRef((props, ref) => /* @__PURE__ */ jsxRuntimeExports.jsx(Stack, { align: "center", ...props, direction: "column", ref }));
	VStack.displayName = "VStack";

	const [TableStylesProvider, useTableStyles] = createContext({
	  name: `TableStylesContext`,
	  errorMessage: `useTableStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Table />" `
	});
	const Table = forwardRef((props, ref) => {
	  const styles = useMultiStyleConfig("Table", props);
	  const { className, layout, ...tableProps } = omitThemingProps(props);
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(TableStylesProvider, { value: styles, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
	    chakra.table,
	    {
	      ref,
	      __css: { tableLayout: layout, ...styles.table },
	      className: cx("chakra-table", className),
	      ...tableProps
	    }
	  ) });
	});
	Table.displayName = "Table";

	const Tbody = forwardRef((props, ref) => {
	  const styles = useTableStyles();
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.tbody, { ...props, ref, __css: styles.tbody });
	});

	const Td = forwardRef(
	  ({ isNumeric, ...rest }, ref) => {
	    const styles = useTableStyles();
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(
	      chakra.td,
	      {
	        ...rest,
	        ref,
	        __css: styles.td,
	        "data-is-numeric": isNumeric
	      }
	    );
	  }
	);

	const Th = forwardRef(
	  ({ isNumeric, ...rest }, ref) => {
	    const styles = useTableStyles();
	    return /* @__PURE__ */ jsxRuntimeExports.jsx(
	      chakra.th,
	      {
	        ...rest,
	        ref,
	        __css: styles.th,
	        "data-is-numeric": isNumeric
	      }
	    );
	  }
	);

	const Thead = forwardRef((props, ref) => {
	  const styles = useTableStyles();
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.thead, { ...props, ref, __css: styles.thead });
	});

	const Tr = forwardRef((props, ref) => {
	  const styles = useTableStyles();
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(chakra.tr, { ...props, ref, __css: styles.tr });
	});

	const omitted = ["h", "minH", "height", "minHeight"];
	const Textarea = forwardRef((props, ref) => {
	  const styles = useStyleConfig("Textarea", props);
	  const { className, rows, ...rest } = omitThemingProps(props);
	  const textareaProps = useFormControl(rest);
	  const textareaStyles = rows ? omit(styles, omitted) : styles;
	  return /* @__PURE__ */ jsxRuntimeExports.jsx(
	    chakra.textarea,
	    {
	      ref,
	      rows,
	      ...textareaProps,
	      className: cx("chakra-textarea", className),
	      __css: textareaStyles
	    }
	  );
	});
	Textarea.displayName = "Textarea";

	function getToastPlacement(position, dir) {
	  const computedPosition = position ?? "bottom";
	  const logicals = {
	    "top-start": { ltr: "top-left", rtl: "top-right" },
	    "top-end": { ltr: "top-right", rtl: "top-left" },
	    "bottom-start": { ltr: "bottom-left", rtl: "bottom-right" },
	    "bottom-end": { ltr: "bottom-right", rtl: "bottom-left" }
	  };
	  const logical = logicals[computedPosition];
	  return logical?.[dir] ?? computedPosition;
	}

	function createToastFn(dir, defaultOptions) {
	  const normalizeToastOptions = (options) => ({
	    ...defaultOptions,
	    ...options,
	    position: getToastPlacement(
	      options?.position ?? defaultOptions?.position,
	      dir
	    )
	  });
	  const toast = (options) => {
	    const normalizedToastOptions = normalizeToastOptions(options);
	    const Message = createRenderToast(normalizedToastOptions);
	    return toastStore.notify(Message, normalizedToastOptions);
	  };
	  toast.update = (id, options) => {
	    toastStore.update(id, normalizeToastOptions(options));
	  };
	  toast.promise = (promise, options) => {
	    const id = toast({
	      ...options.loading,
	      status: "loading",
	      duration: null
	    });
	    promise.then(
	      (data) => toast.update(id, {
	        status: "success",
	        duration: 5e3,
	        ...runIfFn$1(options.success, data)
	      })
	    ).catch(
	      (error) => toast.update(id, {
	        status: "error",
	        duration: 5e3,
	        ...runIfFn$1(options.error, error)
	      })
	    );
	  };
	  toast.closeAll = toastStore.closeAll;
	  toast.close = toastStore.close;
	  toast.isActive = toastStore.isActive;
	  return toast;
	}

	function useToast(options) {
	  const { theme } = useChakra();
	  const defaultOptions = useToastOptionContext();
	  return reactExports.useMemo(
	    () => createToastFn(theme.direction, {
	      ...defaultOptions,
	      ...options
	    }),
	    [options, theme.direction, defaultOptions]
	  );
	}

	const MACRO_KEY = 'macros';
	const loadMacros = () => {
	    try {
	        const raw = GM_getValue(MACRO_KEY, '[]');
	        const parsed = JSON.parse(raw);
	        if (!Array.isArray(parsed)) {
	            //@ts-ignore
	            return Object.entries(parsed).map(([name, code]) => ({ name, code: String(code) }));
	        }
	        return parsed;
	    }
	    catch (_a) {
	        return [];
	    }
	};
	const saveMacros = (macros) => {
	    GM_setValue(MACRO_KEY, JSON.stringify(macros));
	};
	const MacroContext = reactExports.createContext(null);
	const useMacros = () => reactExports.useContext(MacroContext);
	const MacroProvider = ({ children }) => {
	    const [macros, setMacros] = reactExports.useState([]);
	    reactExports.useEffect(() => {
	        const current = loadMacros();
	        const hasRefresh = current.some(m => m.name === '@clearQueue');
	        if (!hasRefresh) {
	            current.push({
	                name: '@clearQueue',
	                type: 'internal'
	            });
	            saveMacros(current);
	        }
	        setMacros(current);
	    }, []);
	    const addMacro = (macro) => {
	        const updated = [...macros.filter(m => m.name !== macro.name), macro];
	        setMacros(updated);
	        saveMacros(updated);
	    };
	    const deleteMacro = (name) => {
	        const updated = macros.filter(m => m.name !== name);
	        setMacros(updated);
	        saveMacros(updated);
	    };
	    return (jsxRuntimeExports.jsx(MacroContext.Provider, { value: { macros, addMacro, deleteMacro }, children: children }));
	};

	const AddIcon = createIcon({
	  d: "M0,12a1.5,1.5,0,0,0,1.5,1.5h8.75a.25.25,0,0,1,.25.25V22.5a1.5,1.5,0,0,0,3,0V13.75a.25.25,0,0,1,.25-.25H22.5a1.5,1.5,0,0,0,0-3H13.75a.25.25,0,0,1-.25-.25V1.5a1.5,1.5,0,0,0-3,0v8.75a.25.25,0,0,1-.25.25H1.5A1.5,1.5,0,0,0,0,12Z",
	  displayName: "AddIcon"
	});

	const SettingsIcon = createIcon({
	  viewBox: "0 0 14 14",
	  d: "M14,7.77 L14,6.17 L12.06,5.53 L11.61,4.44 L12.49,2.6 L11.36,1.47 L9.55,2.38 L8.46,1.93 L7.77,0.01 L6.17,0.01 L5.54,1.95 L4.43,2.4 L2.59,1.52 L1.46,2.65 L2.37,4.46 L1.92,5.55 L0,6.23 L0,7.82 L1.94,8.46 L2.39,9.55 L1.51,11.39 L2.64,12.52 L4.45,11.61 L5.54,12.06 L6.23,13.98 L7.82,13.98 L8.45,12.04 L9.56,11.59 L11.4,12.47 L12.53,11.34 L11.61,9.53 L12.08,8.44 L14,7.75 L14,7.77 Z M7,10 C5.34,10 4,8.66 4,7 C4,5.34 5.34,4 7,4 C8.66,4 10,5.34 10,7 C10,8.66 8.66,10 7,10 Z",
	  displayName: "SettingsIcon"
	});

	const DeleteIcon = createIcon({
	  displayName: "DeleteIcon",
	  path: /* @__PURE__ */ jsxRuntimeExports.jsx("g", { fill: "currentColor", children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M19.452 7.5H4.547a.5.5 0 00-.5.545l1.287 14.136A2 2 0 007.326 24h9.347a2 2 0 001.992-1.819L19.95 8.045a.5.5 0 00-.129-.382.5.5 0 00-.369-.163zm-9.2 13a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zm5 0a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zM22 4h-4.75a.25.25 0 01-.25-.25V2.5A2.5 2.5 0 0014.5 0h-5A2.5 2.5 0 007 2.5v1.25a.25.25 0 01-.25.25H2a1 1 0 000 2h20a1 1 0 000-2zM9 3.75V2.5a.5.5 0 01.5-.5h5a.5.5 0 01.5.5v1.25a.25.25 0 01-.25.25h-5.5A.25.25 0 019 3.75z" }) })
	});

	const EditIcon = createIcon({
	  displayName: "EditIcon",
	  path: /* @__PURE__ */ jsxRuntimeExports.jsxs("g", { fill: "none", stroke: "currentColor", strokeLinecap: "round", strokeWidth: "2", children: [
	    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" }),
	    /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: "M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z" })
	  ] })
	});

	const CloseIcon = createIcon({
	  displayName: "CloseIcon",
	  d: "M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
	});

	const CheckIcon = createIcon({
	  viewBox: "0 0 14 14",
	  path: /* @__PURE__ */ jsxRuntimeExports.jsx("g", { fill: "currentColor", children: /* @__PURE__ */ jsxRuntimeExports.jsx("polygon", { points: "5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039" }) })
	});

	function getHostnameFromUrl(url) {
	    try {
	        const parsed = new URL(url);
	        return parsed.hostname;
	    }
	    catch (e) {
	        console.warn('[getHostnameFromUrl] Invalid URL:', url);
	        return null;
	    }
	}

	const AddMacroModal = ({ onClose, onMacroAdded }) => {
	    const toast = useToast();
	    const { addMacro } = useMacros();
	    const [type, setType] = reactExports.useState('script');
	    const [name, setName] = reactExports.useState('');
	    const [code, setCode] = reactExports.useState('');
	    const [url, setUrl] = reactExports.useState('');
	    const [origin, setOrigin] = reactExports.useState('');
	    const handleSubmit = () => {
	        if (!name.trim()) {
	            toast({
	                title: 'Missing name.',
	                description: 'Macro name is required.',
	                status: 'error',
	                duration: 3000,
	                isClosable: true,
	            });
	            return;
	        }
	        if (type === 'script' && !code.trim()) {
	            toast({
	                title: 'Missing code.',
	                description: 'Script code is required.',
	                status: 'error',
	                duration: 3000,
	                isClosable: true,
	            });
	            return;
	        }
	        if (type === 'url' && !url.trim()) {
	            toast({
	                title: 'Missing URL.',
	                description: 'URL is required for URL macros.',
	                status: 'error',
	                duration: 3000,
	                isClosable: true,
	            });
	            return;
	        }
	        if (type === 'deferred-script' && (!origin.trim() || !code.trim())) {
	            toast({
	                title: 'Missing fields.',
	                description: 'Both target origin and code are required for deferred scripts.',
	                status: 'error',
	                duration: 3000,
	                isClosable: true,
	            });
	            return;
	        }
	        const macro = {
	            name: name.trim(),
	            type,
	            code: type === 'script' || type === 'deferred-script' ? code.trim() : '',
	            url: type === 'url' ? url.trim() : '',
	            origin: type === 'deferred-script' ? getHostnameFromUrl(origin.trim()) : '',
	        };
	        addMacro(macro);
	        toast({
	            title: 'Macro saved.',
	            status: 'success',
	            duration: 2000,
	            isClosable: true,
	        });
	        setName('');
	        setCode('');
	        setUrl('');
	        setOrigin('');
	        onClose();
	        onMacroAdded();
	    };
	    return (jsxRuntimeExports.jsxs(Modal, { isOpen: true, onClose: onClose, isCentered: true, children: [jsxRuntimeExports.jsx(ModalOverlay, {}), jsxRuntimeExports.jsxs(ModalContent, { children: [jsxRuntimeExports.jsx(ModalHeader, { children: "Add New Macro" }), jsxRuntimeExports.jsx(ModalCloseButton, {}), jsxRuntimeExports.jsxs(ModalBody, { children: [jsxRuntimeExports.jsxs(FormControl, { mb: 4, children: [jsxRuntimeExports.jsx(FormLabel, { children: "Macro Name" }), jsxRuntimeExports.jsx(Input, { value: name, onChange: e => setName(e.target.value) })] }), jsxRuntimeExports.jsxs(FormControl, { mb: 4, children: [jsxRuntimeExports.jsx(FormLabel, { children: "Macro Type" }), jsxRuntimeExports.jsxs(Select, { value: type, onChange: e => setType(e.target.value), children: [jsxRuntimeExports.jsx("option", { value: "script", children: "Script" }), jsxRuntimeExports.jsx("option", { value: "url", children: "URL Macro" }), jsxRuntimeExports.jsx("option", { value: "deferred-script", children: "Deferred Script" })] })] }), (type === 'script' || type === 'deferred-script') && (jsxRuntimeExports.jsxs(FormControl, { mb: 4, children: [jsxRuntimeExports.jsx(FormLabel, { children: "JavaScript Code" }), jsxRuntimeExports.jsx(Textarea, { placeholder: "JavaScript code to execute", value: code, onChange: e => setCode(e.target.value), rows: 6, resize: "vertical", fontFamily: "mono" })] })), type === 'url' && (jsxRuntimeExports.jsxs(FormControl, { mb: 4, children: [jsxRuntimeExports.jsx(FormLabel, { children: "URL Template (use %s)" }), jsxRuntimeExports.jsx(Input, { placeholder: "e.g. https://google.com/search?q=%s", value: url, onChange: e => setUrl(e.target.value) })] })), type === 'deferred-script' && (jsxRuntimeExports.jsxs(FormControl, { mb: 4, children: [jsxRuntimeExports.jsx(FormLabel, { children: "Target Origin (URL match)" }), jsxRuntimeExports.jsx(Input, { placeholder: "e.g. https://chat.openai.com", value: origin, onChange: e => setOrigin(e.target.value) })] }))] }), jsxRuntimeExports.jsxs(ModalFooter, { children: [jsxRuntimeExports.jsx(Button, { variant: "ghost", mr: 3, onClick: onClose, children: "Cancel" }), jsxRuntimeExports.jsx(Button, { colorScheme: "blue", onClick: handleSubmit, children: "Save Macro" })] })] })] }));
	};

	const SettingsModal = ({ onClose }) => {
	    const { macros, deleteMacro, addMacro } = useMacros();
	    const toast = useToast();
	    const [editing, setEditing] = reactExports.useState(null);
	    const [editState, setEditState] = reactExports.useState({ name: '', type: 'script', code: '', url: '', origin: '' });
	    const [search, setSearch] = reactExports.useState('');
	    const [filterType, setFilterType] = reactExports.useState('all');
	    const handleDelete = (name) => {
	        deleteMacro(name);
	        toast({
	            title: `Macro "${name}" deleted`,
	            status: 'info',
	            duration: 2000,
	            isClosable: true,
	        });
	    };
	    const startEditing = (macro) => {
	        setEditing(macro.name);
	        setEditState({
	            name: macro.name,
	            type: macro.type,
	            code: macro.code || '',
	            url: macro.url || '',
	            origin: macro.origin || '',
	        });
	    };
	    const cancelEdit = () => {
	        setEditing(null);
	        setEditState({ name: '', type: 'script', code: '', url: '', origin: '' });
	    };
	    const saveEdit = () => {
	        addMacro({
	            name: editState.name,
	            //@ts-ignore
	            type: editState.type,
	            code: editState.type === 'script' || editState.type === 'deferred-script' ? editState.code : '',
	            url: editState.type === 'url' ? editState.url : '',
	            origin: editState.type === 'deferred-script' ? editState.origin : '',
	        });
	        toast({
	            title: `Macro "${editState.name}" updated`,
	            status: 'success',
	            duration: 2000,
	            isClosable: true,
	        });
	        cancelEdit();
	    };
	    const filteredMacros = macros.filter((m) => {
	        const matchesSearch = m.name.toLowerCase().includes(search.toLowerCase());
	        const matchesType = filterType === 'all' || m.type === filterType;
	        return matchesSearch && matchesType;
	    });
	    return (jsxRuntimeExports.jsxs(Modal, { isOpen: true, onClose: onClose, size: "5xl", isCentered: true, children: [jsxRuntimeExports.jsx(ModalOverlay, {}), jsxRuntimeExports.jsxs(ModalContent, { children: [jsxRuntimeExports.jsx(ModalHeader, { children: "Manage Macros" }), jsxRuntimeExports.jsx(ModalCloseButton, {}), jsxRuntimeExports.jsxs(ModalBody, { children: [jsxRuntimeExports.jsxs(HStack, { mb: 4, spacing: 4, align: "start", children: [jsxRuntimeExports.jsx(Input, { placeholder: "Search macros", value: search, onChange: (e) => setSearch(e.target.value) }), jsxRuntimeExports.jsxs(Select, { value: filterType, onChange: (e) => setFilterType(e.target.value), width: "200px", children: [jsxRuntimeExports.jsx("option", { value: "all", children: "All Types" }), jsxRuntimeExports.jsx("option", { value: "script", children: "Script" }), jsxRuntimeExports.jsx("option", { value: "url", children: "URL" }), jsxRuntimeExports.jsx("option", { value: "deferred-script", children: "Deferred Script" })] })] }), jsxRuntimeExports.jsxs(Table, { variant: "simple", children: [jsxRuntimeExports.jsx(Thead, { children: jsxRuntimeExports.jsxs(Tr, { children: [jsxRuntimeExports.jsx(Th, { children: "Name" }), jsxRuntimeExports.jsx(Th, { children: "Type" }), jsxRuntimeExports.jsx(Th, { children: "Actions" })] }) }), jsxRuntimeExports.jsx(Tbody, { children: filteredMacros.map((macro) => (jsxRuntimeExports.jsx(Tr, { children: jsxRuntimeExports.jsx(Td, { colSpan: 3, children: editing === macro.name ? (jsxRuntimeExports.jsxs(VStack, { align: "stretch", spacing: 2, children: [jsxRuntimeExports.jsx(Input, { placeholder: "Name", value: editState.name, onChange: (e) => setEditState(Object.assign(Object.assign({}, editState), { name: e.target.value })) }), jsxRuntimeExports.jsxs(Select, { value: editState.type, onChange: (e) => setEditState(Object.assign(Object.assign({}, editState), { type: e.target.value })), children: [jsxRuntimeExports.jsx("option", { value: "script", children: "Script" }), jsxRuntimeExports.jsx("option", { value: "url", children: "URL" }), jsxRuntimeExports.jsx("option", { value: "deferred-script", children: "Deferred Script" })] }), (editState.type === 'script' || editState.type === 'deferred-script') && (jsxRuntimeExports.jsx(Textarea, { placeholder: "JS Code", value: editState.code, onChange: (e) => setEditState(Object.assign(Object.assign({}, editState), { code: e.target.value })) })), editState.type === 'url' && (jsxRuntimeExports.jsx(Input, { placeholder: "https://example.com/?q=%s", value: editState.url, onChange: (e) => setEditState(Object.assign(Object.assign({}, editState), { url: e.target.value })) })), editState.type === 'deferred-script' && (jsxRuntimeExports.jsx(Input, { placeholder: "https://targetsite.com", value: editState.origin, onChange: (e) => setEditState(Object.assign(Object.assign({}, editState), { origin: e.target.value })) })), jsxRuntimeExports.jsxs(HStack, { children: [jsxRuntimeExports.jsx(IconButton, { "aria-label": "Save", icon: jsxRuntimeExports.jsx(CheckIcon, {}), onClick: saveEdit }), jsxRuntimeExports.jsx(IconButton, { "aria-label": "Cancel", icon: jsxRuntimeExports.jsx(CloseIcon, {}), onClick: cancelEdit })] })] })) : (jsxRuntimeExports.jsxs(HStack, { justify: "space-between", w: "100%", children: [jsxRuntimeExports.jsx(Box, { children: macro.name }), jsxRuntimeExports.jsx(Box, { children: macro.type }), jsxRuntimeExports.jsxs(Box, { children: [jsxRuntimeExports.jsx(IconButton, { "aria-label": "Edit", icon: jsxRuntimeExports.jsx(EditIcon, {}), size: "sm", mr: 2, onClick: () => startEditing(macro) }), jsxRuntimeExports.jsx(IconButton, { "aria-label": "Delete", icon: jsxRuntimeExports.jsx(DeleteIcon, {}), colorScheme: "red", size: "sm", onClick: () => handleDelete(macro.name) })] })] })) }) }, macro.name))) })] })] }), jsxRuntimeExports.jsx(ModalFooter, { children: jsxRuntimeExports.jsx(Button, { onClick: onClose, children: "Close" }) })] })] }));
	};

	const MacroPrompt = () => {
	    const { macros } = useMacros();
	    const [input, setInput] = reactExports.useState('');
	    const [visible, setVisible] = reactExports.useState(false);
	    const { isOpen: isAddOpen, onOpen: onAddOpen, onClose: onAddClose } = useDisclosure();
	    const { isOpen: isSettingsOpen, onOpen: onSettingsOpen, onClose: onSettingsClose } = useDisclosure();
	    const toast = useToast();
	    const inputRef = reactExports.useRef(null);
	    reactExports.useEffect(() => {
	        if (visible && inputRef.current) {
	            inputRef.current.focus();
	        }
	    }, [visible]);
	    reactExports.useEffect(() => {
	        const handleKey = (e) => {
	            if (e.ctrlKey && e.key === '.') {
	                e.preventDefault();
	                setVisible(v => !v);
	                onAddClose();
	                onSettingsClose();
	            }
	        };
	        document.addEventListener('keydown', handleKey);
	        return () => document.removeEventListener('keydown', handleKey);
	    }, [onAddClose, onSettingsClose]);
	    const runMacro = (input) => {
	        var _a;
	        const [name, ...args] = input.split(' ');
	        const macro = macros.find(m => m.name === name);
	        if (!macro) {
	            toast({
	                title: 'Macro not found',
	                description: `The macro ${name} does not exist!`,
	                duration: 3000,
	                isClosable: true,
	                status: "error"
	            });
	            return;
	        }
	        try {
	            if (macro.type === 'script') {
	                new Function(macro.code)();
	            }
	            else if (macro.type === 'url') {
	                const query = encodeURIComponent(args.join(' '));
	                const finalUrl = (_a = macro.url) === null || _a === void 0 ? void 0 : _a.replace(/%s/g, query);
	                if (finalUrl)
	                    window.location.href = finalUrl;
	            }
	            else if (macro.type == "internal") {
	                // * internal scripts
	            }
	            else if (macro.type === 'deferred-script') {
	                //@ts-ignore
	                const k = `exec__${getHostnameFromUrl(macro.origin)}`;
	                const current = GM_getValue(k, '[]');
	                let queue = [];
	                try {
	                    queue = JSON.parse(current);
	                }
	                catch (e) {
	                    console.warn('[Macro] Could not parse deferred queue:', e);
	                }
	                queue.push({
	                    //@ts-ignore
	                    origin: macro.origin,
	                    code: macro.code,
	                    args: args.join(' ')
	                });
	                GM_setValue(k, JSON.stringify(queue));
	                //@ts-ignore
	                window.location.href = macro.origin;
	            }
	        }
	        catch (err) {
	            alert(`Error: ${err}`);
	        }
	        setInput('');
	        setVisible(false);
	    };
	    const handleAddClick = () => {
	        setVisible(false);
	        onAddOpen();
	    };
	    const handleSettingsClick = () => {
	        setVisible(false);
	        onSettingsOpen();
	    };
	    return (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [isAddOpen && jsxRuntimeExports.jsx(AddMacroModal, { onClose: onAddClose, onMacroAdded: () => setVisible(false) }), isSettingsOpen && jsxRuntimeExports.jsx(SettingsModal, { onClose: onSettingsClose }), visible && (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx(Box, { position: "fixed", top: "0", left: "0", width: "150vw", height: "100vh", bg: "blackAlpha.500", zIndex: 1200, pointerEvents: "none", padding: "3rem" }), jsxRuntimeExports.jsx(Box, { position: "fixed", top: "50%", left: "50%", transform: "translate(-50%, -50%)", zIndex: 1300, bg: "white", p: 4, borderRadius: "lg", boxShadow: "lg", children: jsxRuntimeExports.jsxs(HStack, { spacing: 3, children: [jsxRuntimeExports.jsx(Input, { placeholder: "Type a macro...", size: "lg", width: "400px", value: input, ref: inputRef, onChange: e => setInput(e.target.value), onKeyDown: e => {
	                                        if (e.key === 'Enter')
	                                            runMacro(input.trim());
	                                        if (e.key === 'Escape')
	                                            setVisible(false);
	                                    } }), jsxRuntimeExports.jsx(IconButton, { "aria-label": "Add Macro", icon: jsxRuntimeExports.jsx(AddIcon, {}), colorScheme: "blue", size: "lg", borderRadius: "full", onClick: handleAddClick }), jsxRuntimeExports.jsx(IconButton, { "aria-label": "Settings", icon: jsxRuntimeExports.jsx(SettingsIcon, {}), colorScheme: "gray", size: "lg", borderRadius: "full", onClick: handleSettingsClick })] }) })] }))] }));
	};

	// Custom Chakra theme with unique CSS var prefix
	const theme = extendTheme({
	    config: {
	        cssVarPrefix: 'macro', // Avoids collision with host page's chakra
	    },
	});
	const App = () => {
	    const chakraStylesPresent = !!document.querySelector('style[data-emotion]');
	    const isChatGPT = window.location.hostname.includes('chat.openai.com') || window.location.hostname.includes("chatgpt.com");
	    if (chakraStylesPresent || isChatGPT) {
	        return (jsxRuntimeExports.jsx(MacroProvider, { children: jsxRuntimeExports.jsx(MacroPrompt, {}) }));
	    }
	    return (jsxRuntimeExports.jsx(ChakraProvider, { theme: theme, resetCSS: false, children: jsxRuntimeExports.jsx(MacroProvider, { children: jsxRuntimeExports.jsx(MacroPrompt, {}) }) }));
	};

	(function runDeferredMacros() {
	    const location = window.location.href;
	    const k = `exec__${getHostnameFromUrl(location)}`;
	    const raw = GM_getValue(k, '[]');
	    let pending = [];
	    try {
	        pending = JSON.parse(raw);
	    }
	    catch (e) {
	        console.warn('[Macro] Failed to parse deferred macro storage:', e);
	    }
	    const remaining = [];
	    for (const p of pending) {
	        if (getHostnameFromUrl(location) == getHostnameFromUrl(p.origin)) {
	            try {
	                GM_addElement('script', {
	                    textContent: `
                ${p.code};
                try {
                    main(${JSON.stringify(p.args || [])});
                } catch (e) {
                    alert('[Macro] Deferred macro error: ' + e.message);
                }
                `,
	                });
	            }
	            catch (err) {
	                //@ts-ignore
	                alert('[Macro] Deferred macro error: ' + err.message);
	            }
	        }
	        else {
	            remaining.push(p);
	        }
	    }
	    GM_setValue(k, JSON.stringify(remaining));
	})();
	const container = document.createElement('div');
	document.body.appendChild(container);
	clientExports.createRoot(container).render(jsxRuntimeExports.jsx(App, {}));

})();
